
CV_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004380  08004380  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004380  08004380  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004380  08004380  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004394  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004394  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c28  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001774  00000000  00000000  00028c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  0002a418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000558  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f36d  00000000  00000000  0002b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e4d  00000000  00000000  0003a3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005bd10  00000000  00000000  0004421a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001934  00000000  00000000  0009ff2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000a1860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004250 	.word	0x08004250

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004250 	.word	0x08004250

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_d2uiz>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2200      	movs	r2, #0
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <__aeabi_d2uiz+0x38>)
 80003fa:	0004      	movs	r4, r0
 80003fc:	000d      	movs	r5, r1
 80003fe:	f001 f9d9 	bl	80017b4 <__aeabi_dcmpge>
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <__aeabi_d2uiz+0x1c>
 8000406:	0020      	movs	r0, r4
 8000408:	0029      	movs	r1, r5
 800040a:	f001 f943 	bl	8001694 <__aeabi_d2iz>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <__aeabi_d2uiz+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	0020      	movs	r0, r4
 8000416:	0029      	movs	r1, r5
 8000418:	f000 fdba 	bl	8000f90 <__aeabi_dsub>
 800041c:	f001 f93a 	bl	8001694 <__aeabi_d2iz>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	061b      	lsls	r3, r3, #24
 8000424:	469c      	mov	ip, r3
 8000426:	4460      	add	r0, ip
 8000428:	e7f1      	b.n	800040e <__aeabi_d2uiz+0x1a>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	41e00000 	.word	0x41e00000

08000430 <__aeabi_ddiv>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	030c      	lsls	r4, r1, #12
 800043e:	001f      	movs	r7, r3
 8000440:	004b      	lsls	r3, r1, #1
 8000442:	4681      	mov	r9, r0
 8000444:	4692      	mov	sl, r2
 8000446:	0005      	movs	r5, r0
 8000448:	b085      	sub	sp, #20
 800044a:	0b24      	lsrs	r4, r4, #12
 800044c:	0d5b      	lsrs	r3, r3, #21
 800044e:	0fce      	lsrs	r6, r1, #31
 8000450:	2b00      	cmp	r3, #0
 8000452:	d100      	bne.n	8000456 <__aeabi_ddiv+0x26>
 8000454:	e152      	b.n	80006fc <__aeabi_ddiv+0x2cc>
 8000456:	4ad2      	ldr	r2, [pc, #840]	; (80007a0 <__aeabi_ddiv+0x370>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d100      	bne.n	800045e <__aeabi_ddiv+0x2e>
 800045c:	e16e      	b.n	800073c <__aeabi_ddiv+0x30c>
 800045e:	0f42      	lsrs	r2, r0, #29
 8000460:	00e4      	lsls	r4, r4, #3
 8000462:	4314      	orrs	r4, r2
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	0412      	lsls	r2, r2, #16
 8000468:	4322      	orrs	r2, r4
 800046a:	4690      	mov	r8, r2
 800046c:	4acd      	ldr	r2, [pc, #820]	; (80007a4 <__aeabi_ddiv+0x374>)
 800046e:	00c5      	lsls	r5, r0, #3
 8000470:	4693      	mov	fp, r2
 8000472:	449b      	add	fp, r3
 8000474:	2300      	movs	r3, #0
 8000476:	4699      	mov	r9, r3
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	033c      	lsls	r4, r7, #12
 800047c:	007b      	lsls	r3, r7, #1
 800047e:	4650      	mov	r0, sl
 8000480:	0b24      	lsrs	r4, r4, #12
 8000482:	0d5b      	lsrs	r3, r3, #21
 8000484:	0fff      	lsrs	r7, r7, #31
 8000486:	2b00      	cmp	r3, #0
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x5c>
 800048a:	e11a      	b.n	80006c2 <__aeabi_ddiv+0x292>
 800048c:	4ac4      	ldr	r2, [pc, #784]	; (80007a0 <__aeabi_ddiv+0x370>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d100      	bne.n	8000494 <__aeabi_ddiv+0x64>
 8000492:	e15e      	b.n	8000752 <__aeabi_ddiv+0x322>
 8000494:	0f42      	lsrs	r2, r0, #29
 8000496:	00e4      	lsls	r4, r4, #3
 8000498:	4322      	orrs	r2, r4
 800049a:	2480      	movs	r4, #128	; 0x80
 800049c:	0424      	lsls	r4, r4, #16
 800049e:	4314      	orrs	r4, r2
 80004a0:	4ac0      	ldr	r2, [pc, #768]	; (80007a4 <__aeabi_ddiv+0x374>)
 80004a2:	00c1      	lsls	r1, r0, #3
 80004a4:	4694      	mov	ip, r2
 80004a6:	465a      	mov	r2, fp
 80004a8:	4463      	add	r3, ip
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	469b      	mov	fp, r3
 80004ae:	2000      	movs	r0, #0
 80004b0:	0033      	movs	r3, r6
 80004b2:	407b      	eors	r3, r7
 80004b4:	469a      	mov	sl, r3
 80004b6:	464b      	mov	r3, r9
 80004b8:	2b0f      	cmp	r3, #15
 80004ba:	d827      	bhi.n	800050c <__aeabi_ddiv+0xdc>
 80004bc:	4aba      	ldr	r2, [pc, #744]	; (80007a8 <__aeabi_ddiv+0x378>)
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	58d3      	ldr	r3, [r2, r3]
 80004c2:	469f      	mov	pc, r3
 80004c4:	46b2      	mov	sl, r6
 80004c6:	9b00      	ldr	r3, [sp, #0]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d016      	beq.n	80004fa <__aeabi_ddiv+0xca>
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d100      	bne.n	80004d2 <__aeabi_ddiv+0xa2>
 80004d0:	e287      	b.n	80009e2 <__aeabi_ddiv+0x5b2>
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d000      	beq.n	80004d8 <__aeabi_ddiv+0xa8>
 80004d6:	e0d5      	b.n	8000684 <__aeabi_ddiv+0x254>
 80004d8:	2300      	movs	r3, #0
 80004da:	2200      	movs	r2, #0
 80004dc:	2500      	movs	r5, #0
 80004de:	051b      	lsls	r3, r3, #20
 80004e0:	4313      	orrs	r3, r2
 80004e2:	4652      	mov	r2, sl
 80004e4:	07d2      	lsls	r2, r2, #31
 80004e6:	4313      	orrs	r3, r2
 80004e8:	0028      	movs	r0, r5
 80004ea:	0019      	movs	r1, r3
 80004ec:	b005      	add	sp, #20
 80004ee:	bcf0      	pop	{r4, r5, r6, r7}
 80004f0:	46bb      	mov	fp, r7
 80004f2:	46b2      	mov	sl, r6
 80004f4:	46a9      	mov	r9, r5
 80004f6:	46a0      	mov	r8, r4
 80004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fa:	2200      	movs	r2, #0
 80004fc:	2500      	movs	r5, #0
 80004fe:	4ba8      	ldr	r3, [pc, #672]	; (80007a0 <__aeabi_ddiv+0x370>)
 8000500:	e7ed      	b.n	80004de <__aeabi_ddiv+0xae>
 8000502:	46ba      	mov	sl, r7
 8000504:	46a0      	mov	r8, r4
 8000506:	000d      	movs	r5, r1
 8000508:	9000      	str	r0, [sp, #0]
 800050a:	e7dc      	b.n	80004c6 <__aeabi_ddiv+0x96>
 800050c:	4544      	cmp	r4, r8
 800050e:	d200      	bcs.n	8000512 <__aeabi_ddiv+0xe2>
 8000510:	e1c4      	b.n	800089c <__aeabi_ddiv+0x46c>
 8000512:	d100      	bne.n	8000516 <__aeabi_ddiv+0xe6>
 8000514:	e1bf      	b.n	8000896 <__aeabi_ddiv+0x466>
 8000516:	2301      	movs	r3, #1
 8000518:	425b      	negs	r3, r3
 800051a:	469c      	mov	ip, r3
 800051c:	002e      	movs	r6, r5
 800051e:	4640      	mov	r0, r8
 8000520:	2500      	movs	r5, #0
 8000522:	44e3      	add	fp, ip
 8000524:	0223      	lsls	r3, r4, #8
 8000526:	0e0c      	lsrs	r4, r1, #24
 8000528:	431c      	orrs	r4, r3
 800052a:	0c1b      	lsrs	r3, r3, #16
 800052c:	4699      	mov	r9, r3
 800052e:	0423      	lsls	r3, r4, #16
 8000530:	020a      	lsls	r2, r1, #8
 8000532:	0c1f      	lsrs	r7, r3, #16
 8000534:	4649      	mov	r1, r9
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9701      	str	r7, [sp, #4]
 800053a:	f7ff fe6b 	bl	8000214 <__aeabi_uidivmod>
 800053e:	0002      	movs	r2, r0
 8000540:	437a      	muls	r2, r7
 8000542:	040b      	lsls	r3, r1, #16
 8000544:	0c31      	lsrs	r1, r6, #16
 8000546:	4680      	mov	r8, r0
 8000548:	4319      	orrs	r1, r3
 800054a:	428a      	cmp	r2, r1
 800054c:	d907      	bls.n	800055e <__aeabi_ddiv+0x12e>
 800054e:	2301      	movs	r3, #1
 8000550:	425b      	negs	r3, r3
 8000552:	469c      	mov	ip, r3
 8000554:	1909      	adds	r1, r1, r4
 8000556:	44e0      	add	r8, ip
 8000558:	428c      	cmp	r4, r1
 800055a:	d800      	bhi.n	800055e <__aeabi_ddiv+0x12e>
 800055c:	e201      	b.n	8000962 <__aeabi_ddiv+0x532>
 800055e:	1a88      	subs	r0, r1, r2
 8000560:	4649      	mov	r1, r9
 8000562:	f7ff fe57 	bl	8000214 <__aeabi_uidivmod>
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	0436      	lsls	r6, r6, #16
 800056a:	4342      	muls	r2, r0
 800056c:	0409      	lsls	r1, r1, #16
 800056e:	0c36      	lsrs	r6, r6, #16
 8000570:	0003      	movs	r3, r0
 8000572:	430e      	orrs	r6, r1
 8000574:	42b2      	cmp	r2, r6
 8000576:	d904      	bls.n	8000582 <__aeabi_ddiv+0x152>
 8000578:	1936      	adds	r6, r6, r4
 800057a:	3b01      	subs	r3, #1
 800057c:	42b4      	cmp	r4, r6
 800057e:	d800      	bhi.n	8000582 <__aeabi_ddiv+0x152>
 8000580:	e1e9      	b.n	8000956 <__aeabi_ddiv+0x526>
 8000582:	1ab0      	subs	r0, r6, r2
 8000584:	4642      	mov	r2, r8
 8000586:	9e00      	ldr	r6, [sp, #0]
 8000588:	0412      	lsls	r2, r2, #16
 800058a:	431a      	orrs	r2, r3
 800058c:	0c33      	lsrs	r3, r6, #16
 800058e:	001f      	movs	r7, r3
 8000590:	0c11      	lsrs	r1, r2, #16
 8000592:	4690      	mov	r8, r2
 8000594:	9302      	str	r3, [sp, #8]
 8000596:	0413      	lsls	r3, r2, #16
 8000598:	0432      	lsls	r2, r6, #16
 800059a:	0c16      	lsrs	r6, r2, #16
 800059c:	0032      	movs	r2, r6
 800059e:	0c1b      	lsrs	r3, r3, #16
 80005a0:	435a      	muls	r2, r3
 80005a2:	9603      	str	r6, [sp, #12]
 80005a4:	437b      	muls	r3, r7
 80005a6:	434e      	muls	r6, r1
 80005a8:	4379      	muls	r1, r7
 80005aa:	0c17      	lsrs	r7, r2, #16
 80005ac:	46bc      	mov	ip, r7
 80005ae:	199b      	adds	r3, r3, r6
 80005b0:	4463      	add	r3, ip
 80005b2:	429e      	cmp	r6, r3
 80005b4:	d903      	bls.n	80005be <__aeabi_ddiv+0x18e>
 80005b6:	2680      	movs	r6, #128	; 0x80
 80005b8:	0276      	lsls	r6, r6, #9
 80005ba:	46b4      	mov	ip, r6
 80005bc:	4461      	add	r1, ip
 80005be:	0c1e      	lsrs	r6, r3, #16
 80005c0:	1871      	adds	r1, r6, r1
 80005c2:	0416      	lsls	r6, r2, #16
 80005c4:	041b      	lsls	r3, r3, #16
 80005c6:	0c36      	lsrs	r6, r6, #16
 80005c8:	199e      	adds	r6, r3, r6
 80005ca:	4288      	cmp	r0, r1
 80005cc:	d302      	bcc.n	80005d4 <__aeabi_ddiv+0x1a4>
 80005ce:	d112      	bne.n	80005f6 <__aeabi_ddiv+0x1c6>
 80005d0:	42b5      	cmp	r5, r6
 80005d2:	d210      	bcs.n	80005f6 <__aeabi_ddiv+0x1c6>
 80005d4:	4643      	mov	r3, r8
 80005d6:	1e5a      	subs	r2, r3, #1
 80005d8:	9b00      	ldr	r3, [sp, #0]
 80005da:	469c      	mov	ip, r3
 80005dc:	4465      	add	r5, ip
 80005de:	001f      	movs	r7, r3
 80005e0:	429d      	cmp	r5, r3
 80005e2:	419b      	sbcs	r3, r3
 80005e4:	425b      	negs	r3, r3
 80005e6:	191b      	adds	r3, r3, r4
 80005e8:	18c0      	adds	r0, r0, r3
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d200      	bcs.n	80005f0 <__aeabi_ddiv+0x1c0>
 80005ee:	e19e      	b.n	800092e <__aeabi_ddiv+0x4fe>
 80005f0:	d100      	bne.n	80005f4 <__aeabi_ddiv+0x1c4>
 80005f2:	e199      	b.n	8000928 <__aeabi_ddiv+0x4f8>
 80005f4:	4690      	mov	r8, r2
 80005f6:	1bae      	subs	r6, r5, r6
 80005f8:	42b5      	cmp	r5, r6
 80005fa:	41ad      	sbcs	r5, r5
 80005fc:	1a40      	subs	r0, r0, r1
 80005fe:	426d      	negs	r5, r5
 8000600:	1b40      	subs	r0, r0, r5
 8000602:	4284      	cmp	r4, r0
 8000604:	d100      	bne.n	8000608 <__aeabi_ddiv+0x1d8>
 8000606:	e1d2      	b.n	80009ae <__aeabi_ddiv+0x57e>
 8000608:	4649      	mov	r1, r9
 800060a:	f7ff fe03 	bl	8000214 <__aeabi_uidivmod>
 800060e:	9a01      	ldr	r2, [sp, #4]
 8000610:	040b      	lsls	r3, r1, #16
 8000612:	4342      	muls	r2, r0
 8000614:	0c31      	lsrs	r1, r6, #16
 8000616:	0005      	movs	r5, r0
 8000618:	4319      	orrs	r1, r3
 800061a:	428a      	cmp	r2, r1
 800061c:	d900      	bls.n	8000620 <__aeabi_ddiv+0x1f0>
 800061e:	e16c      	b.n	80008fa <__aeabi_ddiv+0x4ca>
 8000620:	1a88      	subs	r0, r1, r2
 8000622:	4649      	mov	r1, r9
 8000624:	f7ff fdf6 	bl	8000214 <__aeabi_uidivmod>
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	0436      	lsls	r6, r6, #16
 800062c:	4342      	muls	r2, r0
 800062e:	0409      	lsls	r1, r1, #16
 8000630:	0c36      	lsrs	r6, r6, #16
 8000632:	0003      	movs	r3, r0
 8000634:	430e      	orrs	r6, r1
 8000636:	42b2      	cmp	r2, r6
 8000638:	d900      	bls.n	800063c <__aeabi_ddiv+0x20c>
 800063a:	e153      	b.n	80008e4 <__aeabi_ddiv+0x4b4>
 800063c:	9803      	ldr	r0, [sp, #12]
 800063e:	1ab6      	subs	r6, r6, r2
 8000640:	0002      	movs	r2, r0
 8000642:	042d      	lsls	r5, r5, #16
 8000644:	431d      	orrs	r5, r3
 8000646:	9f02      	ldr	r7, [sp, #8]
 8000648:	042b      	lsls	r3, r5, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	435a      	muls	r2, r3
 800064e:	437b      	muls	r3, r7
 8000650:	469c      	mov	ip, r3
 8000652:	0c29      	lsrs	r1, r5, #16
 8000654:	4348      	muls	r0, r1
 8000656:	0c13      	lsrs	r3, r2, #16
 8000658:	4484      	add	ip, r0
 800065a:	4463      	add	r3, ip
 800065c:	4379      	muls	r1, r7
 800065e:	4298      	cmp	r0, r3
 8000660:	d903      	bls.n	800066a <__aeabi_ddiv+0x23a>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	0240      	lsls	r0, r0, #9
 8000666:	4684      	mov	ip, r0
 8000668:	4461      	add	r1, ip
 800066a:	0c18      	lsrs	r0, r3, #16
 800066c:	0412      	lsls	r2, r2, #16
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	1840      	adds	r0, r0, r1
 8000674:	189b      	adds	r3, r3, r2
 8000676:	4286      	cmp	r6, r0
 8000678:	d200      	bcs.n	800067c <__aeabi_ddiv+0x24c>
 800067a:	e100      	b.n	800087e <__aeabi_ddiv+0x44e>
 800067c:	d100      	bne.n	8000680 <__aeabi_ddiv+0x250>
 800067e:	e0fb      	b.n	8000878 <__aeabi_ddiv+0x448>
 8000680:	2301      	movs	r3, #1
 8000682:	431d      	orrs	r5, r3
 8000684:	4b49      	ldr	r3, [pc, #292]	; (80007ac <__aeabi_ddiv+0x37c>)
 8000686:	445b      	add	r3, fp
 8000688:	2b00      	cmp	r3, #0
 800068a:	dc00      	bgt.n	800068e <__aeabi_ddiv+0x25e>
 800068c:	e0aa      	b.n	80007e4 <__aeabi_ddiv+0x3b4>
 800068e:	076a      	lsls	r2, r5, #29
 8000690:	d000      	beq.n	8000694 <__aeabi_ddiv+0x264>
 8000692:	e13d      	b.n	8000910 <__aeabi_ddiv+0x4e0>
 8000694:	08e9      	lsrs	r1, r5, #3
 8000696:	4642      	mov	r2, r8
 8000698:	01d2      	lsls	r2, r2, #7
 800069a:	d506      	bpl.n	80006aa <__aeabi_ddiv+0x27a>
 800069c:	4642      	mov	r2, r8
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <__aeabi_ddiv+0x380>)
 80006a0:	401a      	ands	r2, r3
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	4690      	mov	r8, r2
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	445b      	add	r3, fp
 80006aa:	4a42      	ldr	r2, [pc, #264]	; (80007b4 <__aeabi_ddiv+0x384>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_ddiv+0x282>
 80006b0:	e723      	b.n	80004fa <__aeabi_ddiv+0xca>
 80006b2:	4642      	mov	r2, r8
 80006b4:	055b      	lsls	r3, r3, #21
 80006b6:	0755      	lsls	r5, r2, #29
 80006b8:	0252      	lsls	r2, r2, #9
 80006ba:	430d      	orrs	r5, r1
 80006bc:	0b12      	lsrs	r2, r2, #12
 80006be:	0d5b      	lsrs	r3, r3, #21
 80006c0:	e70d      	b.n	80004de <__aeabi_ddiv+0xae>
 80006c2:	4651      	mov	r1, sl
 80006c4:	4321      	orrs	r1, r4
 80006c6:	d100      	bne.n	80006ca <__aeabi_ddiv+0x29a>
 80006c8:	e07c      	b.n	80007c4 <__aeabi_ddiv+0x394>
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_ddiv+0x2a0>
 80006ce:	e0fb      	b.n	80008c8 <__aeabi_ddiv+0x498>
 80006d0:	0020      	movs	r0, r4
 80006d2:	f001 f879 	bl	80017c8 <__clzsi2>
 80006d6:	0002      	movs	r2, r0
 80006d8:	3a0b      	subs	r2, #11
 80006da:	231d      	movs	r3, #29
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	4652      	mov	r2, sl
 80006e0:	0001      	movs	r1, r0
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	4653      	mov	r3, sl
 80006e6:	3908      	subs	r1, #8
 80006e8:	408b      	lsls	r3, r1
 80006ea:	408c      	lsls	r4, r1
 80006ec:	0019      	movs	r1, r3
 80006ee:	4314      	orrs	r4, r2
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <__aeabi_ddiv+0x388>)
 80006f2:	4458      	add	r0, fp
 80006f4:	469b      	mov	fp, r3
 80006f6:	4483      	add	fp, r0
 80006f8:	2000      	movs	r0, #0
 80006fa:	e6d9      	b.n	80004b0 <__aeabi_ddiv+0x80>
 80006fc:	0003      	movs	r3, r0
 80006fe:	4323      	orrs	r3, r4
 8000700:	4698      	mov	r8, r3
 8000702:	d044      	beq.n	800078e <__aeabi_ddiv+0x35e>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d100      	bne.n	800070a <__aeabi_ddiv+0x2da>
 8000708:	e0cf      	b.n	80008aa <__aeabi_ddiv+0x47a>
 800070a:	0020      	movs	r0, r4
 800070c:	f001 f85c 	bl	80017c8 <__clzsi2>
 8000710:	0001      	movs	r1, r0
 8000712:	0002      	movs	r2, r0
 8000714:	390b      	subs	r1, #11
 8000716:	231d      	movs	r3, #29
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	4649      	mov	r1, r9
 800071c:	0010      	movs	r0, r2
 800071e:	40d9      	lsrs	r1, r3
 8000720:	3808      	subs	r0, #8
 8000722:	4084      	lsls	r4, r0
 8000724:	000b      	movs	r3, r1
 8000726:	464d      	mov	r5, r9
 8000728:	4323      	orrs	r3, r4
 800072a:	4698      	mov	r8, r3
 800072c:	4085      	lsls	r5, r0
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <__aeabi_ddiv+0x38c>)
 8000730:	1a9b      	subs	r3, r3, r2
 8000732:	469b      	mov	fp, r3
 8000734:	2300      	movs	r3, #0
 8000736:	4699      	mov	r9, r3
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	e69e      	b.n	800047a <__aeabi_ddiv+0x4a>
 800073c:	0002      	movs	r2, r0
 800073e:	4322      	orrs	r2, r4
 8000740:	4690      	mov	r8, r2
 8000742:	d11d      	bne.n	8000780 <__aeabi_ddiv+0x350>
 8000744:	2208      	movs	r2, #8
 8000746:	469b      	mov	fp, r3
 8000748:	2302      	movs	r3, #2
 800074a:	2500      	movs	r5, #0
 800074c:	4691      	mov	r9, r2
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	e693      	b.n	800047a <__aeabi_ddiv+0x4a>
 8000752:	4651      	mov	r1, sl
 8000754:	4321      	orrs	r1, r4
 8000756:	d109      	bne.n	800076c <__aeabi_ddiv+0x33c>
 8000758:	2302      	movs	r3, #2
 800075a:	464a      	mov	r2, r9
 800075c:	431a      	orrs	r2, r3
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <__aeabi_ddiv+0x390>)
 8000760:	4691      	mov	r9, r2
 8000762:	469c      	mov	ip, r3
 8000764:	2400      	movs	r4, #0
 8000766:	2002      	movs	r0, #2
 8000768:	44e3      	add	fp, ip
 800076a:	e6a1      	b.n	80004b0 <__aeabi_ddiv+0x80>
 800076c:	2303      	movs	r3, #3
 800076e:	464a      	mov	r2, r9
 8000770:	431a      	orrs	r2, r3
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <__aeabi_ddiv+0x390>)
 8000774:	4691      	mov	r9, r2
 8000776:	469c      	mov	ip, r3
 8000778:	4651      	mov	r1, sl
 800077a:	2003      	movs	r0, #3
 800077c:	44e3      	add	fp, ip
 800077e:	e697      	b.n	80004b0 <__aeabi_ddiv+0x80>
 8000780:	220c      	movs	r2, #12
 8000782:	469b      	mov	fp, r3
 8000784:	2303      	movs	r3, #3
 8000786:	46a0      	mov	r8, r4
 8000788:	4691      	mov	r9, r2
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	e675      	b.n	800047a <__aeabi_ddiv+0x4a>
 800078e:	2304      	movs	r3, #4
 8000790:	4699      	mov	r9, r3
 8000792:	2300      	movs	r3, #0
 8000794:	469b      	mov	fp, r3
 8000796:	3301      	adds	r3, #1
 8000798:	2500      	movs	r5, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	e66d      	b.n	800047a <__aeabi_ddiv+0x4a>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	000007ff 	.word	0x000007ff
 80007a4:	fffffc01 	.word	0xfffffc01
 80007a8:	08004288 	.word	0x08004288
 80007ac:	000003ff 	.word	0x000003ff
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	000007fe 	.word	0x000007fe
 80007b8:	000003f3 	.word	0x000003f3
 80007bc:	fffffc0d 	.word	0xfffffc0d
 80007c0:	fffff801 	.word	0xfffff801
 80007c4:	464a      	mov	r2, r9
 80007c6:	2301      	movs	r3, #1
 80007c8:	431a      	orrs	r2, r3
 80007ca:	4691      	mov	r9, r2
 80007cc:	2400      	movs	r4, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	e66e      	b.n	80004b0 <__aeabi_ddiv+0x80>
 80007d2:	2300      	movs	r3, #0
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	469a      	mov	sl, r3
 80007d8:	2500      	movs	r5, #0
 80007da:	4b88      	ldr	r3, [pc, #544]	; (80009fc <__aeabi_ddiv+0x5cc>)
 80007dc:	0312      	lsls	r2, r2, #12
 80007de:	e67e      	b.n	80004de <__aeabi_ddiv+0xae>
 80007e0:	2501      	movs	r5, #1
 80007e2:	426d      	negs	r5, r5
 80007e4:	2201      	movs	r2, #1
 80007e6:	1ad2      	subs	r2, r2, r3
 80007e8:	2a38      	cmp	r2, #56	; 0x38
 80007ea:	dd00      	ble.n	80007ee <__aeabi_ddiv+0x3be>
 80007ec:	e674      	b.n	80004d8 <__aeabi_ddiv+0xa8>
 80007ee:	2a1f      	cmp	r2, #31
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_ddiv+0x3c4>
 80007f2:	e0bd      	b.n	8000970 <__aeabi_ddiv+0x540>
 80007f4:	211f      	movs	r1, #31
 80007f6:	4249      	negs	r1, r1
 80007f8:	1acb      	subs	r3, r1, r3
 80007fa:	4641      	mov	r1, r8
 80007fc:	40d9      	lsrs	r1, r3
 80007fe:	000b      	movs	r3, r1
 8000800:	2a20      	cmp	r2, #32
 8000802:	d004      	beq.n	800080e <__aeabi_ddiv+0x3de>
 8000804:	4641      	mov	r1, r8
 8000806:	4a7e      	ldr	r2, [pc, #504]	; (8000a00 <__aeabi_ddiv+0x5d0>)
 8000808:	445a      	add	r2, fp
 800080a:	4091      	lsls	r1, r2
 800080c:	430d      	orrs	r5, r1
 800080e:	0029      	movs	r1, r5
 8000810:	1e4a      	subs	r2, r1, #1
 8000812:	4191      	sbcs	r1, r2
 8000814:	4319      	orrs	r1, r3
 8000816:	2307      	movs	r3, #7
 8000818:	001d      	movs	r5, r3
 800081a:	2200      	movs	r2, #0
 800081c:	400d      	ands	r5, r1
 800081e:	420b      	tst	r3, r1
 8000820:	d100      	bne.n	8000824 <__aeabi_ddiv+0x3f4>
 8000822:	e0d0      	b.n	80009c6 <__aeabi_ddiv+0x596>
 8000824:	220f      	movs	r2, #15
 8000826:	2300      	movs	r3, #0
 8000828:	400a      	ands	r2, r1
 800082a:	2a04      	cmp	r2, #4
 800082c:	d100      	bne.n	8000830 <__aeabi_ddiv+0x400>
 800082e:	e0c7      	b.n	80009c0 <__aeabi_ddiv+0x590>
 8000830:	1d0a      	adds	r2, r1, #4
 8000832:	428a      	cmp	r2, r1
 8000834:	4189      	sbcs	r1, r1
 8000836:	4249      	negs	r1, r1
 8000838:	185b      	adds	r3, r3, r1
 800083a:	0011      	movs	r1, r2
 800083c:	021a      	lsls	r2, r3, #8
 800083e:	d400      	bmi.n	8000842 <__aeabi_ddiv+0x412>
 8000840:	e0be      	b.n	80009c0 <__aeabi_ddiv+0x590>
 8000842:	2301      	movs	r3, #1
 8000844:	2200      	movs	r2, #0
 8000846:	2500      	movs	r5, #0
 8000848:	e649      	b.n	80004de <__aeabi_ddiv+0xae>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	4643      	mov	r3, r8
 800084e:	0312      	lsls	r2, r2, #12
 8000850:	4213      	tst	r3, r2
 8000852:	d008      	beq.n	8000866 <__aeabi_ddiv+0x436>
 8000854:	4214      	tst	r4, r2
 8000856:	d106      	bne.n	8000866 <__aeabi_ddiv+0x436>
 8000858:	4322      	orrs	r2, r4
 800085a:	0312      	lsls	r2, r2, #12
 800085c:	46ba      	mov	sl, r7
 800085e:	000d      	movs	r5, r1
 8000860:	4b66      	ldr	r3, [pc, #408]	; (80009fc <__aeabi_ddiv+0x5cc>)
 8000862:	0b12      	lsrs	r2, r2, #12
 8000864:	e63b      	b.n	80004de <__aeabi_ddiv+0xae>
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	4643      	mov	r3, r8
 800086a:	0312      	lsls	r2, r2, #12
 800086c:	431a      	orrs	r2, r3
 800086e:	0312      	lsls	r2, r2, #12
 8000870:	46b2      	mov	sl, r6
 8000872:	4b62      	ldr	r3, [pc, #392]	; (80009fc <__aeabi_ddiv+0x5cc>)
 8000874:	0b12      	lsrs	r2, r2, #12
 8000876:	e632      	b.n	80004de <__aeabi_ddiv+0xae>
 8000878:	2b00      	cmp	r3, #0
 800087a:	d100      	bne.n	800087e <__aeabi_ddiv+0x44e>
 800087c:	e702      	b.n	8000684 <__aeabi_ddiv+0x254>
 800087e:	19a6      	adds	r6, r4, r6
 8000880:	1e6a      	subs	r2, r5, #1
 8000882:	42a6      	cmp	r6, r4
 8000884:	d200      	bcs.n	8000888 <__aeabi_ddiv+0x458>
 8000886:	e089      	b.n	800099c <__aeabi_ddiv+0x56c>
 8000888:	4286      	cmp	r6, r0
 800088a:	d200      	bcs.n	800088e <__aeabi_ddiv+0x45e>
 800088c:	e09f      	b.n	80009ce <__aeabi_ddiv+0x59e>
 800088e:	d100      	bne.n	8000892 <__aeabi_ddiv+0x462>
 8000890:	e0af      	b.n	80009f2 <__aeabi_ddiv+0x5c2>
 8000892:	0015      	movs	r5, r2
 8000894:	e6f4      	b.n	8000680 <__aeabi_ddiv+0x250>
 8000896:	42a9      	cmp	r1, r5
 8000898:	d900      	bls.n	800089c <__aeabi_ddiv+0x46c>
 800089a:	e63c      	b.n	8000516 <__aeabi_ddiv+0xe6>
 800089c:	4643      	mov	r3, r8
 800089e:	07de      	lsls	r6, r3, #31
 80008a0:	0858      	lsrs	r0, r3, #1
 80008a2:	086b      	lsrs	r3, r5, #1
 80008a4:	431e      	orrs	r6, r3
 80008a6:	07ed      	lsls	r5, r5, #31
 80008a8:	e63c      	b.n	8000524 <__aeabi_ddiv+0xf4>
 80008aa:	f000 ff8d 	bl	80017c8 <__clzsi2>
 80008ae:	0001      	movs	r1, r0
 80008b0:	0002      	movs	r2, r0
 80008b2:	3115      	adds	r1, #21
 80008b4:	3220      	adds	r2, #32
 80008b6:	291c      	cmp	r1, #28
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_ddiv+0x48c>
 80008ba:	e72c      	b.n	8000716 <__aeabi_ddiv+0x2e6>
 80008bc:	464b      	mov	r3, r9
 80008be:	3808      	subs	r0, #8
 80008c0:	4083      	lsls	r3, r0
 80008c2:	2500      	movs	r5, #0
 80008c4:	4698      	mov	r8, r3
 80008c6:	e732      	b.n	800072e <__aeabi_ddiv+0x2fe>
 80008c8:	f000 ff7e 	bl	80017c8 <__clzsi2>
 80008cc:	0003      	movs	r3, r0
 80008ce:	001a      	movs	r2, r3
 80008d0:	3215      	adds	r2, #21
 80008d2:	3020      	adds	r0, #32
 80008d4:	2a1c      	cmp	r2, #28
 80008d6:	dc00      	bgt.n	80008da <__aeabi_ddiv+0x4aa>
 80008d8:	e6ff      	b.n	80006da <__aeabi_ddiv+0x2aa>
 80008da:	4654      	mov	r4, sl
 80008dc:	3b08      	subs	r3, #8
 80008de:	2100      	movs	r1, #0
 80008e0:	409c      	lsls	r4, r3
 80008e2:	e705      	b.n	80006f0 <__aeabi_ddiv+0x2c0>
 80008e4:	1936      	adds	r6, r6, r4
 80008e6:	3b01      	subs	r3, #1
 80008e8:	42b4      	cmp	r4, r6
 80008ea:	d900      	bls.n	80008ee <__aeabi_ddiv+0x4be>
 80008ec:	e6a6      	b.n	800063c <__aeabi_ddiv+0x20c>
 80008ee:	42b2      	cmp	r2, r6
 80008f0:	d800      	bhi.n	80008f4 <__aeabi_ddiv+0x4c4>
 80008f2:	e6a3      	b.n	800063c <__aeabi_ddiv+0x20c>
 80008f4:	1e83      	subs	r3, r0, #2
 80008f6:	1936      	adds	r6, r6, r4
 80008f8:	e6a0      	b.n	800063c <__aeabi_ddiv+0x20c>
 80008fa:	1909      	adds	r1, r1, r4
 80008fc:	3d01      	subs	r5, #1
 80008fe:	428c      	cmp	r4, r1
 8000900:	d900      	bls.n	8000904 <__aeabi_ddiv+0x4d4>
 8000902:	e68d      	b.n	8000620 <__aeabi_ddiv+0x1f0>
 8000904:	428a      	cmp	r2, r1
 8000906:	d800      	bhi.n	800090a <__aeabi_ddiv+0x4da>
 8000908:	e68a      	b.n	8000620 <__aeabi_ddiv+0x1f0>
 800090a:	1e85      	subs	r5, r0, #2
 800090c:	1909      	adds	r1, r1, r4
 800090e:	e687      	b.n	8000620 <__aeabi_ddiv+0x1f0>
 8000910:	220f      	movs	r2, #15
 8000912:	402a      	ands	r2, r5
 8000914:	2a04      	cmp	r2, #4
 8000916:	d100      	bne.n	800091a <__aeabi_ddiv+0x4ea>
 8000918:	e6bc      	b.n	8000694 <__aeabi_ddiv+0x264>
 800091a:	1d29      	adds	r1, r5, #4
 800091c:	42a9      	cmp	r1, r5
 800091e:	41ad      	sbcs	r5, r5
 8000920:	426d      	negs	r5, r5
 8000922:	08c9      	lsrs	r1, r1, #3
 8000924:	44a8      	add	r8, r5
 8000926:	e6b6      	b.n	8000696 <__aeabi_ddiv+0x266>
 8000928:	42af      	cmp	r7, r5
 800092a:	d900      	bls.n	800092e <__aeabi_ddiv+0x4fe>
 800092c:	e662      	b.n	80005f4 <__aeabi_ddiv+0x1c4>
 800092e:	4281      	cmp	r1, r0
 8000930:	d804      	bhi.n	800093c <__aeabi_ddiv+0x50c>
 8000932:	d000      	beq.n	8000936 <__aeabi_ddiv+0x506>
 8000934:	e65e      	b.n	80005f4 <__aeabi_ddiv+0x1c4>
 8000936:	42ae      	cmp	r6, r5
 8000938:	d800      	bhi.n	800093c <__aeabi_ddiv+0x50c>
 800093a:	e65b      	b.n	80005f4 <__aeabi_ddiv+0x1c4>
 800093c:	2302      	movs	r3, #2
 800093e:	425b      	negs	r3, r3
 8000940:	469c      	mov	ip, r3
 8000942:	9b00      	ldr	r3, [sp, #0]
 8000944:	44e0      	add	r8, ip
 8000946:	469c      	mov	ip, r3
 8000948:	4465      	add	r5, ip
 800094a:	429d      	cmp	r5, r3
 800094c:	419b      	sbcs	r3, r3
 800094e:	425b      	negs	r3, r3
 8000950:	191b      	adds	r3, r3, r4
 8000952:	18c0      	adds	r0, r0, r3
 8000954:	e64f      	b.n	80005f6 <__aeabi_ddiv+0x1c6>
 8000956:	42b2      	cmp	r2, r6
 8000958:	d800      	bhi.n	800095c <__aeabi_ddiv+0x52c>
 800095a:	e612      	b.n	8000582 <__aeabi_ddiv+0x152>
 800095c:	1e83      	subs	r3, r0, #2
 800095e:	1936      	adds	r6, r6, r4
 8000960:	e60f      	b.n	8000582 <__aeabi_ddiv+0x152>
 8000962:	428a      	cmp	r2, r1
 8000964:	d800      	bhi.n	8000968 <__aeabi_ddiv+0x538>
 8000966:	e5fa      	b.n	800055e <__aeabi_ddiv+0x12e>
 8000968:	1e83      	subs	r3, r0, #2
 800096a:	4698      	mov	r8, r3
 800096c:	1909      	adds	r1, r1, r4
 800096e:	e5f6      	b.n	800055e <__aeabi_ddiv+0x12e>
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <__aeabi_ddiv+0x5d4>)
 8000972:	0028      	movs	r0, r5
 8000974:	445b      	add	r3, fp
 8000976:	4641      	mov	r1, r8
 8000978:	409d      	lsls	r5, r3
 800097a:	4099      	lsls	r1, r3
 800097c:	40d0      	lsrs	r0, r2
 800097e:	1e6b      	subs	r3, r5, #1
 8000980:	419d      	sbcs	r5, r3
 8000982:	4643      	mov	r3, r8
 8000984:	4301      	orrs	r1, r0
 8000986:	4329      	orrs	r1, r5
 8000988:	40d3      	lsrs	r3, r2
 800098a:	074a      	lsls	r2, r1, #29
 800098c:	d100      	bne.n	8000990 <__aeabi_ddiv+0x560>
 800098e:	e755      	b.n	800083c <__aeabi_ddiv+0x40c>
 8000990:	220f      	movs	r2, #15
 8000992:	400a      	ands	r2, r1
 8000994:	2a04      	cmp	r2, #4
 8000996:	d000      	beq.n	800099a <__aeabi_ddiv+0x56a>
 8000998:	e74a      	b.n	8000830 <__aeabi_ddiv+0x400>
 800099a:	e74f      	b.n	800083c <__aeabi_ddiv+0x40c>
 800099c:	0015      	movs	r5, r2
 800099e:	4286      	cmp	r6, r0
 80009a0:	d000      	beq.n	80009a4 <__aeabi_ddiv+0x574>
 80009a2:	e66d      	b.n	8000680 <__aeabi_ddiv+0x250>
 80009a4:	9a00      	ldr	r2, [sp, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d000      	beq.n	80009ac <__aeabi_ddiv+0x57c>
 80009aa:	e669      	b.n	8000680 <__aeabi_ddiv+0x250>
 80009ac:	e66a      	b.n	8000684 <__aeabi_ddiv+0x254>
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <__aeabi_ddiv+0x5d8>)
 80009b0:	445b      	add	r3, fp
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	dc00      	bgt.n	80009b8 <__aeabi_ddiv+0x588>
 80009b6:	e713      	b.n	80007e0 <__aeabi_ddiv+0x3b0>
 80009b8:	2501      	movs	r5, #1
 80009ba:	2100      	movs	r1, #0
 80009bc:	44a8      	add	r8, r5
 80009be:	e66a      	b.n	8000696 <__aeabi_ddiv+0x266>
 80009c0:	075d      	lsls	r5, r3, #29
 80009c2:	025b      	lsls	r3, r3, #9
 80009c4:	0b1a      	lsrs	r2, r3, #12
 80009c6:	08c9      	lsrs	r1, r1, #3
 80009c8:	2300      	movs	r3, #0
 80009ca:	430d      	orrs	r5, r1
 80009cc:	e587      	b.n	80004de <__aeabi_ddiv+0xae>
 80009ce:	9900      	ldr	r1, [sp, #0]
 80009d0:	3d02      	subs	r5, #2
 80009d2:	004a      	lsls	r2, r1, #1
 80009d4:	428a      	cmp	r2, r1
 80009d6:	41bf      	sbcs	r7, r7
 80009d8:	427f      	negs	r7, r7
 80009da:	193f      	adds	r7, r7, r4
 80009dc:	19f6      	adds	r6, r6, r7
 80009de:	9200      	str	r2, [sp, #0]
 80009e0:	e7dd      	b.n	800099e <__aeabi_ddiv+0x56e>
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	4643      	mov	r3, r8
 80009e6:	0312      	lsls	r2, r2, #12
 80009e8:	431a      	orrs	r2, r3
 80009ea:	0312      	lsls	r2, r2, #12
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <__aeabi_ddiv+0x5cc>)
 80009ee:	0b12      	lsrs	r2, r2, #12
 80009f0:	e575      	b.n	80004de <__aeabi_ddiv+0xae>
 80009f2:	9900      	ldr	r1, [sp, #0]
 80009f4:	4299      	cmp	r1, r3
 80009f6:	d3ea      	bcc.n	80009ce <__aeabi_ddiv+0x59e>
 80009f8:	0015      	movs	r5, r2
 80009fa:	e7d3      	b.n	80009a4 <__aeabi_ddiv+0x574>
 80009fc:	000007ff 	.word	0x000007ff
 8000a00:	0000043e 	.word	0x0000043e
 8000a04:	0000041e 	.word	0x0000041e
 8000a08:	000003ff 	.word	0x000003ff

08000a0c <__aeabi_dmul>:
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0e:	4645      	mov	r5, r8
 8000a10:	46de      	mov	lr, fp
 8000a12:	4657      	mov	r7, sl
 8000a14:	464e      	mov	r6, r9
 8000a16:	b5e0      	push	{r5, r6, r7, lr}
 8000a18:	001f      	movs	r7, r3
 8000a1a:	030b      	lsls	r3, r1, #12
 8000a1c:	0b1b      	lsrs	r3, r3, #12
 8000a1e:	469b      	mov	fp, r3
 8000a20:	004d      	lsls	r5, r1, #1
 8000a22:	0fcb      	lsrs	r3, r1, #31
 8000a24:	0004      	movs	r4, r0
 8000a26:	4691      	mov	r9, r2
 8000a28:	4698      	mov	r8, r3
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	0d6d      	lsrs	r5, r5, #21
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dmul+0x26>
 8000a30:	e1cd      	b.n	8000dce <__aeabi_dmul+0x3c2>
 8000a32:	4bce      	ldr	r3, [pc, #824]	; (8000d6c <__aeabi_dmul+0x360>)
 8000a34:	429d      	cmp	r5, r3
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dmul+0x2e>
 8000a38:	e1e9      	b.n	8000e0e <__aeabi_dmul+0x402>
 8000a3a:	465a      	mov	r2, fp
 8000a3c:	0f43      	lsrs	r3, r0, #29
 8000a3e:	00d2      	lsls	r2, r2, #3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	0412      	lsls	r2, r2, #16
 8000a46:	431a      	orrs	r2, r3
 8000a48:	00c3      	lsls	r3, r0, #3
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	4bc8      	ldr	r3, [pc, #800]	; (8000d70 <__aeabi_dmul+0x364>)
 8000a4e:	4693      	mov	fp, r2
 8000a50:	469c      	mov	ip, r3
 8000a52:	2300      	movs	r3, #0
 8000a54:	2600      	movs	r6, #0
 8000a56:	4465      	add	r5, ip
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	033c      	lsls	r4, r7, #12
 8000a5c:	007b      	lsls	r3, r7, #1
 8000a5e:	4648      	mov	r0, r9
 8000a60:	0b24      	lsrs	r4, r4, #12
 8000a62:	0d5b      	lsrs	r3, r3, #21
 8000a64:	0fff      	lsrs	r7, r7, #31
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dmul+0x60>
 8000a6a:	e189      	b.n	8000d80 <__aeabi_dmul+0x374>
 8000a6c:	4abf      	ldr	r2, [pc, #764]	; (8000d6c <__aeabi_dmul+0x360>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d019      	beq.n	8000aa6 <__aeabi_dmul+0x9a>
 8000a72:	0f42      	lsrs	r2, r0, #29
 8000a74:	00e4      	lsls	r4, r4, #3
 8000a76:	4322      	orrs	r2, r4
 8000a78:	2480      	movs	r4, #128	; 0x80
 8000a7a:	0424      	lsls	r4, r4, #16
 8000a7c:	4314      	orrs	r4, r2
 8000a7e:	4abc      	ldr	r2, [pc, #752]	; (8000d70 <__aeabi_dmul+0x364>)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4694      	mov	ip, r2
 8000a84:	4642      	mov	r2, r8
 8000a86:	4463      	add	r3, ip
 8000a88:	195b      	adds	r3, r3, r5
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	9b01      	ldr	r3, [sp, #4]
 8000a8e:	407a      	eors	r2, r7
 8000a90:	3301      	adds	r3, #1
 8000a92:	00c0      	lsls	r0, r0, #3
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	9302      	str	r3, [sp, #8]
 8000a98:	2e0a      	cmp	r6, #10
 8000a9a:	dd1c      	ble.n	8000ad6 <__aeabi_dmul+0xca>
 8000a9c:	003a      	movs	r2, r7
 8000a9e:	2e0b      	cmp	r6, #11
 8000aa0:	d05e      	beq.n	8000b60 <__aeabi_dmul+0x154>
 8000aa2:	4647      	mov	r7, r8
 8000aa4:	e056      	b.n	8000b54 <__aeabi_dmul+0x148>
 8000aa6:	4649      	mov	r1, r9
 8000aa8:	4bb0      	ldr	r3, [pc, #704]	; (8000d6c <__aeabi_dmul+0x360>)
 8000aaa:	4321      	orrs	r1, r4
 8000aac:	18eb      	adds	r3, r5, r3
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	d12a      	bne.n	8000b0a <__aeabi_dmul+0xfe>
 8000ab4:	2080      	movs	r0, #128	; 0x80
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	0100      	lsls	r0, r0, #4
 8000aba:	002b      	movs	r3, r5
 8000abc:	4684      	mov	ip, r0
 8000abe:	4316      	orrs	r6, r2
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	4463      	add	r3, ip
 8000ac4:	407a      	eors	r2, r7
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	2e0a      	cmp	r6, #10
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_dmul+0xc4>
 8000ace:	e231      	b.n	8000f34 <__aeabi_dmul+0x528>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	2e02      	cmp	r6, #2
 8000ad8:	dc26      	bgt.n	8000b28 <__aeabi_dmul+0x11c>
 8000ada:	3e01      	subs	r6, #1
 8000adc:	2e01      	cmp	r6, #1
 8000ade:	d852      	bhi.n	8000b86 <__aeabi_dmul+0x17a>
 8000ae0:	2902      	cmp	r1, #2
 8000ae2:	d04c      	beq.n	8000b7e <__aeabi_dmul+0x172>
 8000ae4:	2901      	cmp	r1, #1
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dmul+0xde>
 8000ae8:	e118      	b.n	8000d1c <__aeabi_dmul+0x310>
 8000aea:	2300      	movs	r3, #0
 8000aec:	2400      	movs	r4, #0
 8000aee:	2500      	movs	r5, #0
 8000af0:	051b      	lsls	r3, r3, #20
 8000af2:	4323      	orrs	r3, r4
 8000af4:	07d2      	lsls	r2, r2, #31
 8000af6:	4313      	orrs	r3, r2
 8000af8:	0028      	movs	r0, r5
 8000afa:	0019      	movs	r1, r3
 8000afc:	b007      	add	sp, #28
 8000afe:	bcf0      	pop	{r4, r5, r6, r7}
 8000b00:	46bb      	mov	fp, r7
 8000b02:	46b2      	mov	sl, r6
 8000b04:	46a9      	mov	r9, r5
 8000b06:	46a0      	mov	r8, r4
 8000b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	0109      	lsls	r1, r1, #4
 8000b10:	002b      	movs	r3, r5
 8000b12:	468c      	mov	ip, r1
 8000b14:	4316      	orrs	r6, r2
 8000b16:	4642      	mov	r2, r8
 8000b18:	4463      	add	r3, ip
 8000b1a:	407a      	eors	r2, r7
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	2e0a      	cmp	r6, #10
 8000b22:	dd00      	ble.n	8000b26 <__aeabi_dmul+0x11a>
 8000b24:	e228      	b.n	8000f78 <__aeabi_dmul+0x56c>
 8000b26:	2103      	movs	r1, #3
 8000b28:	2501      	movs	r5, #1
 8000b2a:	40b5      	lsls	r5, r6
 8000b2c:	46ac      	mov	ip, r5
 8000b2e:	26a6      	movs	r6, #166	; 0xa6
 8000b30:	4663      	mov	r3, ip
 8000b32:	00f6      	lsls	r6, r6, #3
 8000b34:	4035      	ands	r5, r6
 8000b36:	4233      	tst	r3, r6
 8000b38:	d10b      	bne.n	8000b52 <__aeabi_dmul+0x146>
 8000b3a:	2690      	movs	r6, #144	; 0x90
 8000b3c:	00b6      	lsls	r6, r6, #2
 8000b3e:	4233      	tst	r3, r6
 8000b40:	d118      	bne.n	8000b74 <__aeabi_dmul+0x168>
 8000b42:	3eb9      	subs	r6, #185	; 0xb9
 8000b44:	3eff      	subs	r6, #255	; 0xff
 8000b46:	421e      	tst	r6, r3
 8000b48:	d01d      	beq.n	8000b86 <__aeabi_dmul+0x17a>
 8000b4a:	46a3      	mov	fp, r4
 8000b4c:	4682      	mov	sl, r0
 8000b4e:	9100      	str	r1, [sp, #0]
 8000b50:	e000      	b.n	8000b54 <__aeabi_dmul+0x148>
 8000b52:	0017      	movs	r7, r2
 8000b54:	9900      	ldr	r1, [sp, #0]
 8000b56:	003a      	movs	r2, r7
 8000b58:	2902      	cmp	r1, #2
 8000b5a:	d010      	beq.n	8000b7e <__aeabi_dmul+0x172>
 8000b5c:	465c      	mov	r4, fp
 8000b5e:	4650      	mov	r0, sl
 8000b60:	2903      	cmp	r1, #3
 8000b62:	d1bf      	bne.n	8000ae4 <__aeabi_dmul+0xd8>
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	031b      	lsls	r3, r3, #12
 8000b68:	431c      	orrs	r4, r3
 8000b6a:	0324      	lsls	r4, r4, #12
 8000b6c:	0005      	movs	r5, r0
 8000b6e:	4b7f      	ldr	r3, [pc, #508]	; (8000d6c <__aeabi_dmul+0x360>)
 8000b70:	0b24      	lsrs	r4, r4, #12
 8000b72:	e7bd      	b.n	8000af0 <__aeabi_dmul+0xe4>
 8000b74:	2480      	movs	r4, #128	; 0x80
 8000b76:	2200      	movs	r2, #0
 8000b78:	4b7c      	ldr	r3, [pc, #496]	; (8000d6c <__aeabi_dmul+0x360>)
 8000b7a:	0324      	lsls	r4, r4, #12
 8000b7c:	e7b8      	b.n	8000af0 <__aeabi_dmul+0xe4>
 8000b7e:	2400      	movs	r4, #0
 8000b80:	2500      	movs	r5, #0
 8000b82:	4b7a      	ldr	r3, [pc, #488]	; (8000d6c <__aeabi_dmul+0x360>)
 8000b84:	e7b4      	b.n	8000af0 <__aeabi_dmul+0xe4>
 8000b86:	4653      	mov	r3, sl
 8000b88:	041e      	lsls	r6, r3, #16
 8000b8a:	0c36      	lsrs	r6, r6, #16
 8000b8c:	0c1f      	lsrs	r7, r3, #16
 8000b8e:	0033      	movs	r3, r6
 8000b90:	0c01      	lsrs	r1, r0, #16
 8000b92:	0400      	lsls	r0, r0, #16
 8000b94:	0c00      	lsrs	r0, r0, #16
 8000b96:	4343      	muls	r3, r0
 8000b98:	4698      	mov	r8, r3
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	437b      	muls	r3, r7
 8000b9e:	4699      	mov	r9, r3
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	434b      	muls	r3, r1
 8000ba4:	469c      	mov	ip, r3
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	000d      	movs	r5, r1
 8000baa:	0c1b      	lsrs	r3, r3, #16
 8000bac:	469a      	mov	sl, r3
 8000bae:	437d      	muls	r5, r7
 8000bb0:	44cc      	add	ip, r9
 8000bb2:	44d4      	add	ip, sl
 8000bb4:	9500      	str	r5, [sp, #0]
 8000bb6:	45e1      	cmp	r9, ip
 8000bb8:	d904      	bls.n	8000bc4 <__aeabi_dmul+0x1b8>
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	025b      	lsls	r3, r3, #9
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	444d      	add	r5, r9
 8000bc2:	9500      	str	r5, [sp, #0]
 8000bc4:	4663      	mov	r3, ip
 8000bc6:	0c1b      	lsrs	r3, r3, #16
 8000bc8:	001d      	movs	r5, r3
 8000bca:	4663      	mov	r3, ip
 8000bcc:	041b      	lsls	r3, r3, #16
 8000bce:	469c      	mov	ip, r3
 8000bd0:	4643      	mov	r3, r8
 8000bd2:	041b      	lsls	r3, r3, #16
 8000bd4:	0c1b      	lsrs	r3, r3, #16
 8000bd6:	4698      	mov	r8, r3
 8000bd8:	4663      	mov	r3, ip
 8000bda:	4443      	add	r3, r8
 8000bdc:	9303      	str	r3, [sp, #12]
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	4698      	mov	r8, r3
 8000be2:	0033      	movs	r3, r6
 8000be4:	0424      	lsls	r4, r4, #16
 8000be6:	0c24      	lsrs	r4, r4, #16
 8000be8:	4363      	muls	r3, r4
 8000bea:	469c      	mov	ip, r3
 8000bec:	0023      	movs	r3, r4
 8000bee:	437b      	muls	r3, r7
 8000bf0:	4699      	mov	r9, r3
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	435e      	muls	r6, r3
 8000bf6:	435f      	muls	r7, r3
 8000bf8:	444e      	add	r6, r9
 8000bfa:	4663      	mov	r3, ip
 8000bfc:	46b2      	mov	sl, r6
 8000bfe:	0c1e      	lsrs	r6, r3, #16
 8000c00:	4456      	add	r6, sl
 8000c02:	45b1      	cmp	r9, r6
 8000c04:	d903      	bls.n	8000c0e <__aeabi_dmul+0x202>
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	025b      	lsls	r3, r3, #9
 8000c0a:	4699      	mov	r9, r3
 8000c0c:	444f      	add	r7, r9
 8000c0e:	0c33      	lsrs	r3, r6, #16
 8000c10:	4699      	mov	r9, r3
 8000c12:	003b      	movs	r3, r7
 8000c14:	444b      	add	r3, r9
 8000c16:	9305      	str	r3, [sp, #20]
 8000c18:	4663      	mov	r3, ip
 8000c1a:	46ac      	mov	ip, r5
 8000c1c:	041f      	lsls	r7, r3, #16
 8000c1e:	0c3f      	lsrs	r7, r7, #16
 8000c20:	0436      	lsls	r6, r6, #16
 8000c22:	19f6      	adds	r6, r6, r7
 8000c24:	44b4      	add	ip, r6
 8000c26:	4663      	mov	r3, ip
 8000c28:	9304      	str	r3, [sp, #16]
 8000c2a:	465b      	mov	r3, fp
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	469c      	mov	ip, r3
 8000c30:	465b      	mov	r3, fp
 8000c32:	041f      	lsls	r7, r3, #16
 8000c34:	0c3f      	lsrs	r7, r7, #16
 8000c36:	003b      	movs	r3, r7
 8000c38:	4343      	muls	r3, r0
 8000c3a:	4699      	mov	r9, r3
 8000c3c:	4663      	mov	r3, ip
 8000c3e:	4343      	muls	r3, r0
 8000c40:	469a      	mov	sl, r3
 8000c42:	464b      	mov	r3, r9
 8000c44:	4660      	mov	r0, ip
 8000c46:	0c1b      	lsrs	r3, r3, #16
 8000c48:	469b      	mov	fp, r3
 8000c4a:	4348      	muls	r0, r1
 8000c4c:	4379      	muls	r1, r7
 8000c4e:	4451      	add	r1, sl
 8000c50:	4459      	add	r1, fp
 8000c52:	458a      	cmp	sl, r1
 8000c54:	d903      	bls.n	8000c5e <__aeabi_dmul+0x252>
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	025b      	lsls	r3, r3, #9
 8000c5a:	469a      	mov	sl, r3
 8000c5c:	4450      	add	r0, sl
 8000c5e:	0c0b      	lsrs	r3, r1, #16
 8000c60:	469a      	mov	sl, r3
 8000c62:	464b      	mov	r3, r9
 8000c64:	041b      	lsls	r3, r3, #16
 8000c66:	0c1b      	lsrs	r3, r3, #16
 8000c68:	4699      	mov	r9, r3
 8000c6a:	003b      	movs	r3, r7
 8000c6c:	4363      	muls	r3, r4
 8000c6e:	0409      	lsls	r1, r1, #16
 8000c70:	4645      	mov	r5, r8
 8000c72:	4449      	add	r1, r9
 8000c74:	4699      	mov	r9, r3
 8000c76:	4663      	mov	r3, ip
 8000c78:	435c      	muls	r4, r3
 8000c7a:	436b      	muls	r3, r5
 8000c7c:	469c      	mov	ip, r3
 8000c7e:	464b      	mov	r3, r9
 8000c80:	0c1b      	lsrs	r3, r3, #16
 8000c82:	4698      	mov	r8, r3
 8000c84:	436f      	muls	r7, r5
 8000c86:	193f      	adds	r7, r7, r4
 8000c88:	4447      	add	r7, r8
 8000c8a:	4450      	add	r0, sl
 8000c8c:	42bc      	cmp	r4, r7
 8000c8e:	d903      	bls.n	8000c98 <__aeabi_dmul+0x28c>
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	4698      	mov	r8, r3
 8000c96:	44c4      	add	ip, r8
 8000c98:	9b04      	ldr	r3, [sp, #16]
 8000c9a:	9d00      	ldr	r5, [sp, #0]
 8000c9c:	4698      	mov	r8, r3
 8000c9e:	4445      	add	r5, r8
 8000ca0:	42b5      	cmp	r5, r6
 8000ca2:	41b6      	sbcs	r6, r6
 8000ca4:	4273      	negs	r3, r6
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	464b      	mov	r3, r9
 8000caa:	041e      	lsls	r6, r3, #16
 8000cac:	9b05      	ldr	r3, [sp, #20]
 8000cae:	043c      	lsls	r4, r7, #16
 8000cb0:	4699      	mov	r9, r3
 8000cb2:	0c36      	lsrs	r6, r6, #16
 8000cb4:	19a4      	adds	r4, r4, r6
 8000cb6:	444c      	add	r4, r9
 8000cb8:	46a1      	mov	r9, r4
 8000cba:	4683      	mov	fp, r0
 8000cbc:	186e      	adds	r6, r5, r1
 8000cbe:	44c1      	add	r9, r8
 8000cc0:	428e      	cmp	r6, r1
 8000cc2:	4189      	sbcs	r1, r1
 8000cc4:	44cb      	add	fp, r9
 8000cc6:	465d      	mov	r5, fp
 8000cc8:	4249      	negs	r1, r1
 8000cca:	186d      	adds	r5, r5, r1
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	41a4      	sbcs	r4, r4
 8000cd0:	45c1      	cmp	r9, r8
 8000cd2:	419b      	sbcs	r3, r3
 8000cd4:	4583      	cmp	fp, r0
 8000cd6:	4180      	sbcs	r0, r0
 8000cd8:	428d      	cmp	r5, r1
 8000cda:	4189      	sbcs	r1, r1
 8000cdc:	425b      	negs	r3, r3
 8000cde:	4264      	negs	r4, r4
 8000ce0:	431c      	orrs	r4, r3
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	9b03      	ldr	r3, [sp, #12]
 8000ce6:	4249      	negs	r1, r1
 8000ce8:	4301      	orrs	r1, r0
 8000cea:	0270      	lsls	r0, r6, #9
 8000cec:	0c3f      	lsrs	r7, r7, #16
 8000cee:	4318      	orrs	r0, r3
 8000cf0:	19e4      	adds	r4, r4, r7
 8000cf2:	1e47      	subs	r7, r0, #1
 8000cf4:	41b8      	sbcs	r0, r7
 8000cf6:	1864      	adds	r4, r4, r1
 8000cf8:	4464      	add	r4, ip
 8000cfa:	0df6      	lsrs	r6, r6, #23
 8000cfc:	0261      	lsls	r1, r4, #9
 8000cfe:	4330      	orrs	r0, r6
 8000d00:	0dec      	lsrs	r4, r5, #23
 8000d02:	026e      	lsls	r6, r5, #9
 8000d04:	430c      	orrs	r4, r1
 8000d06:	4330      	orrs	r0, r6
 8000d08:	01c9      	lsls	r1, r1, #7
 8000d0a:	d400      	bmi.n	8000d0e <__aeabi_dmul+0x302>
 8000d0c:	e0f1      	b.n	8000ef2 <__aeabi_dmul+0x4e6>
 8000d0e:	2101      	movs	r1, #1
 8000d10:	0843      	lsrs	r3, r0, #1
 8000d12:	4001      	ands	r1, r0
 8000d14:	430b      	orrs	r3, r1
 8000d16:	07e0      	lsls	r0, r4, #31
 8000d18:	4318      	orrs	r0, r3
 8000d1a:	0864      	lsrs	r4, r4, #1
 8000d1c:	4915      	ldr	r1, [pc, #84]	; (8000d74 <__aeabi_dmul+0x368>)
 8000d1e:	9b02      	ldr	r3, [sp, #8]
 8000d20:	468c      	mov	ip, r1
 8000d22:	4463      	add	r3, ip
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dc00      	bgt.n	8000d2a <__aeabi_dmul+0x31e>
 8000d28:	e097      	b.n	8000e5a <__aeabi_dmul+0x44e>
 8000d2a:	0741      	lsls	r1, r0, #29
 8000d2c:	d009      	beq.n	8000d42 <__aeabi_dmul+0x336>
 8000d2e:	210f      	movs	r1, #15
 8000d30:	4001      	ands	r1, r0
 8000d32:	2904      	cmp	r1, #4
 8000d34:	d005      	beq.n	8000d42 <__aeabi_dmul+0x336>
 8000d36:	1d01      	adds	r1, r0, #4
 8000d38:	4281      	cmp	r1, r0
 8000d3a:	4180      	sbcs	r0, r0
 8000d3c:	4240      	negs	r0, r0
 8000d3e:	1824      	adds	r4, r4, r0
 8000d40:	0008      	movs	r0, r1
 8000d42:	01e1      	lsls	r1, r4, #7
 8000d44:	d506      	bpl.n	8000d54 <__aeabi_dmul+0x348>
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	00c9      	lsls	r1, r1, #3
 8000d4a:	468c      	mov	ip, r1
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <__aeabi_dmul+0x36c>)
 8000d4e:	401c      	ands	r4, r3
 8000d50:	9b02      	ldr	r3, [sp, #8]
 8000d52:	4463      	add	r3, ip
 8000d54:	4909      	ldr	r1, [pc, #36]	; (8000d7c <__aeabi_dmul+0x370>)
 8000d56:	428b      	cmp	r3, r1
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_dmul+0x350>
 8000d5a:	e710      	b.n	8000b7e <__aeabi_dmul+0x172>
 8000d5c:	0761      	lsls	r1, r4, #29
 8000d5e:	08c5      	lsrs	r5, r0, #3
 8000d60:	0264      	lsls	r4, r4, #9
 8000d62:	055b      	lsls	r3, r3, #21
 8000d64:	430d      	orrs	r5, r1
 8000d66:	0b24      	lsrs	r4, r4, #12
 8000d68:	0d5b      	lsrs	r3, r3, #21
 8000d6a:	e6c1      	b.n	8000af0 <__aeabi_dmul+0xe4>
 8000d6c:	000007ff 	.word	0x000007ff
 8000d70:	fffffc01 	.word	0xfffffc01
 8000d74:	000003ff 	.word	0x000003ff
 8000d78:	feffffff 	.word	0xfeffffff
 8000d7c:	000007fe 	.word	0x000007fe
 8000d80:	464b      	mov	r3, r9
 8000d82:	4323      	orrs	r3, r4
 8000d84:	d059      	beq.n	8000e3a <__aeabi_dmul+0x42e>
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dmul+0x380>
 8000d8a:	e0a3      	b.n	8000ed4 <__aeabi_dmul+0x4c8>
 8000d8c:	0020      	movs	r0, r4
 8000d8e:	f000 fd1b 	bl	80017c8 <__clzsi2>
 8000d92:	0001      	movs	r1, r0
 8000d94:	0003      	movs	r3, r0
 8000d96:	390b      	subs	r1, #11
 8000d98:	221d      	movs	r2, #29
 8000d9a:	1a52      	subs	r2, r2, r1
 8000d9c:	4649      	mov	r1, r9
 8000d9e:	0018      	movs	r0, r3
 8000da0:	40d1      	lsrs	r1, r2
 8000da2:	464a      	mov	r2, r9
 8000da4:	3808      	subs	r0, #8
 8000da6:	4082      	lsls	r2, r0
 8000da8:	4084      	lsls	r4, r0
 8000daa:	0010      	movs	r0, r2
 8000dac:	430c      	orrs	r4, r1
 8000dae:	4a74      	ldr	r2, [pc, #464]	; (8000f80 <__aeabi_dmul+0x574>)
 8000db0:	1aeb      	subs	r3, r5, r3
 8000db2:	4694      	mov	ip, r2
 8000db4:	4642      	mov	r2, r8
 8000db6:	4463      	add	r3, ip
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	9b01      	ldr	r3, [sp, #4]
 8000dbc:	407a      	eors	r2, r7
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	2e0a      	cmp	r6, #10
 8000dc8:	dd00      	ble.n	8000dcc <__aeabi_dmul+0x3c0>
 8000dca:	e667      	b.n	8000a9c <__aeabi_dmul+0x90>
 8000dcc:	e683      	b.n	8000ad6 <__aeabi_dmul+0xca>
 8000dce:	465b      	mov	r3, fp
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	469a      	mov	sl, r3
 8000dd4:	d02a      	beq.n	8000e2c <__aeabi_dmul+0x420>
 8000dd6:	465b      	mov	r3, fp
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d06d      	beq.n	8000eb8 <__aeabi_dmul+0x4ac>
 8000ddc:	4658      	mov	r0, fp
 8000dde:	f000 fcf3 	bl	80017c8 <__clzsi2>
 8000de2:	0001      	movs	r1, r0
 8000de4:	0003      	movs	r3, r0
 8000de6:	390b      	subs	r1, #11
 8000de8:	221d      	movs	r2, #29
 8000dea:	1a52      	subs	r2, r2, r1
 8000dec:	0021      	movs	r1, r4
 8000dee:	0018      	movs	r0, r3
 8000df0:	465d      	mov	r5, fp
 8000df2:	40d1      	lsrs	r1, r2
 8000df4:	3808      	subs	r0, #8
 8000df6:	4085      	lsls	r5, r0
 8000df8:	000a      	movs	r2, r1
 8000dfa:	4084      	lsls	r4, r0
 8000dfc:	432a      	orrs	r2, r5
 8000dfe:	4693      	mov	fp, r2
 8000e00:	46a2      	mov	sl, r4
 8000e02:	4d5f      	ldr	r5, [pc, #380]	; (8000f80 <__aeabi_dmul+0x574>)
 8000e04:	2600      	movs	r6, #0
 8000e06:	1aed      	subs	r5, r5, r3
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	e625      	b.n	8000a5a <__aeabi_dmul+0x4e>
 8000e0e:	465b      	mov	r3, fp
 8000e10:	4303      	orrs	r3, r0
 8000e12:	469a      	mov	sl, r3
 8000e14:	d105      	bne.n	8000e22 <__aeabi_dmul+0x416>
 8000e16:	2300      	movs	r3, #0
 8000e18:	469b      	mov	fp, r3
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	2608      	movs	r6, #8
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	e61b      	b.n	8000a5a <__aeabi_dmul+0x4e>
 8000e22:	2303      	movs	r3, #3
 8000e24:	4682      	mov	sl, r0
 8000e26:	260c      	movs	r6, #12
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	e616      	b.n	8000a5a <__aeabi_dmul+0x4e>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	469b      	mov	fp, r3
 8000e30:	3301      	adds	r3, #1
 8000e32:	2604      	movs	r6, #4
 8000e34:	2500      	movs	r5, #0
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	e60f      	b.n	8000a5a <__aeabi_dmul+0x4e>
 8000e3a:	4642      	mov	r2, r8
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	9501      	str	r5, [sp, #4]
 8000e40:	431e      	orrs	r6, r3
 8000e42:	9b01      	ldr	r3, [sp, #4]
 8000e44:	407a      	eors	r2, r7
 8000e46:	3301      	adds	r3, #1
 8000e48:	2400      	movs	r4, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	2e0a      	cmp	r6, #10
 8000e54:	dd00      	ble.n	8000e58 <__aeabi_dmul+0x44c>
 8000e56:	e621      	b.n	8000a9c <__aeabi_dmul+0x90>
 8000e58:	e63d      	b.n	8000ad6 <__aeabi_dmul+0xca>
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	1ac9      	subs	r1, r1, r3
 8000e5e:	2938      	cmp	r1, #56	; 0x38
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_dmul+0x458>
 8000e62:	e642      	b.n	8000aea <__aeabi_dmul+0xde>
 8000e64:	291f      	cmp	r1, #31
 8000e66:	dd47      	ble.n	8000ef8 <__aeabi_dmul+0x4ec>
 8000e68:	261f      	movs	r6, #31
 8000e6a:	0025      	movs	r5, r4
 8000e6c:	4276      	negs	r6, r6
 8000e6e:	1af3      	subs	r3, r6, r3
 8000e70:	40dd      	lsrs	r5, r3
 8000e72:	002b      	movs	r3, r5
 8000e74:	2920      	cmp	r1, #32
 8000e76:	d005      	beq.n	8000e84 <__aeabi_dmul+0x478>
 8000e78:	4942      	ldr	r1, [pc, #264]	; (8000f84 <__aeabi_dmul+0x578>)
 8000e7a:	9d02      	ldr	r5, [sp, #8]
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	4465      	add	r5, ip
 8000e80:	40ac      	lsls	r4, r5
 8000e82:	4320      	orrs	r0, r4
 8000e84:	1e41      	subs	r1, r0, #1
 8000e86:	4188      	sbcs	r0, r1
 8000e88:	4318      	orrs	r0, r3
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	001d      	movs	r5, r3
 8000e8e:	2400      	movs	r4, #0
 8000e90:	4005      	ands	r5, r0
 8000e92:	4203      	tst	r3, r0
 8000e94:	d04a      	beq.n	8000f2c <__aeabi_dmul+0x520>
 8000e96:	230f      	movs	r3, #15
 8000e98:	2400      	movs	r4, #0
 8000e9a:	4003      	ands	r3, r0
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d042      	beq.n	8000f26 <__aeabi_dmul+0x51a>
 8000ea0:	1d03      	adds	r3, r0, #4
 8000ea2:	4283      	cmp	r3, r0
 8000ea4:	4180      	sbcs	r0, r0
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	1824      	adds	r4, r4, r0
 8000eaa:	0018      	movs	r0, r3
 8000eac:	0223      	lsls	r3, r4, #8
 8000eae:	d53a      	bpl.n	8000f26 <__aeabi_dmul+0x51a>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	2400      	movs	r4, #0
 8000eb4:	2500      	movs	r5, #0
 8000eb6:	e61b      	b.n	8000af0 <__aeabi_dmul+0xe4>
 8000eb8:	f000 fc86 	bl	80017c8 <__clzsi2>
 8000ebc:	0001      	movs	r1, r0
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	3115      	adds	r1, #21
 8000ec2:	3320      	adds	r3, #32
 8000ec4:	291c      	cmp	r1, #28
 8000ec6:	dd8f      	ble.n	8000de8 <__aeabi_dmul+0x3dc>
 8000ec8:	3808      	subs	r0, #8
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4084      	lsls	r4, r0
 8000ece:	4692      	mov	sl, r2
 8000ed0:	46a3      	mov	fp, r4
 8000ed2:	e796      	b.n	8000e02 <__aeabi_dmul+0x3f6>
 8000ed4:	f000 fc78 	bl	80017c8 <__clzsi2>
 8000ed8:	0001      	movs	r1, r0
 8000eda:	0003      	movs	r3, r0
 8000edc:	3115      	adds	r1, #21
 8000ede:	3320      	adds	r3, #32
 8000ee0:	291c      	cmp	r1, #28
 8000ee2:	dc00      	bgt.n	8000ee6 <__aeabi_dmul+0x4da>
 8000ee4:	e758      	b.n	8000d98 <__aeabi_dmul+0x38c>
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	464c      	mov	r4, r9
 8000eea:	3a08      	subs	r2, #8
 8000eec:	2000      	movs	r0, #0
 8000eee:	4094      	lsls	r4, r2
 8000ef0:	e75d      	b.n	8000dae <__aeabi_dmul+0x3a2>
 8000ef2:	9b01      	ldr	r3, [sp, #4]
 8000ef4:	9302      	str	r3, [sp, #8]
 8000ef6:	e711      	b.n	8000d1c <__aeabi_dmul+0x310>
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <__aeabi_dmul+0x57c>)
 8000efa:	0026      	movs	r6, r4
 8000efc:	469c      	mov	ip, r3
 8000efe:	0003      	movs	r3, r0
 8000f00:	9d02      	ldr	r5, [sp, #8]
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	4465      	add	r5, ip
 8000f06:	40ae      	lsls	r6, r5
 8000f08:	431e      	orrs	r6, r3
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	40ab      	lsls	r3, r5
 8000f0e:	1e58      	subs	r0, r3, #1
 8000f10:	4183      	sbcs	r3, r0
 8000f12:	0030      	movs	r0, r6
 8000f14:	4318      	orrs	r0, r3
 8000f16:	40cc      	lsrs	r4, r1
 8000f18:	0743      	lsls	r3, r0, #29
 8000f1a:	d0c7      	beq.n	8000eac <__aeabi_dmul+0x4a0>
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	4003      	ands	r3, r0
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d1bd      	bne.n	8000ea0 <__aeabi_dmul+0x494>
 8000f24:	e7c2      	b.n	8000eac <__aeabi_dmul+0x4a0>
 8000f26:	0765      	lsls	r5, r4, #29
 8000f28:	0264      	lsls	r4, r4, #9
 8000f2a:	0b24      	lsrs	r4, r4, #12
 8000f2c:	08c0      	lsrs	r0, r0, #3
 8000f2e:	2300      	movs	r3, #0
 8000f30:	4305      	orrs	r5, r0
 8000f32:	e5dd      	b.n	8000af0 <__aeabi_dmul+0xe4>
 8000f34:	2500      	movs	r5, #0
 8000f36:	2302      	movs	r3, #2
 8000f38:	2e0f      	cmp	r6, #15
 8000f3a:	d10c      	bne.n	8000f56 <__aeabi_dmul+0x54a>
 8000f3c:	2480      	movs	r4, #128	; 0x80
 8000f3e:	465b      	mov	r3, fp
 8000f40:	0324      	lsls	r4, r4, #12
 8000f42:	4223      	tst	r3, r4
 8000f44:	d00e      	beq.n	8000f64 <__aeabi_dmul+0x558>
 8000f46:	4221      	tst	r1, r4
 8000f48:	d10c      	bne.n	8000f64 <__aeabi_dmul+0x558>
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	0324      	lsls	r4, r4, #12
 8000f4e:	003a      	movs	r2, r7
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <__aeabi_dmul+0x580>)
 8000f52:	0b24      	lsrs	r4, r4, #12
 8000f54:	e5cc      	b.n	8000af0 <__aeabi_dmul+0xe4>
 8000f56:	2e0b      	cmp	r6, #11
 8000f58:	d000      	beq.n	8000f5c <__aeabi_dmul+0x550>
 8000f5a:	e5a2      	b.n	8000aa2 <__aeabi_dmul+0x96>
 8000f5c:	468b      	mov	fp, r1
 8000f5e:	46aa      	mov	sl, r5
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	e5f7      	b.n	8000b54 <__aeabi_dmul+0x148>
 8000f64:	2480      	movs	r4, #128	; 0x80
 8000f66:	465b      	mov	r3, fp
 8000f68:	0324      	lsls	r4, r4, #12
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	0324      	lsls	r4, r4, #12
 8000f6e:	4642      	mov	r2, r8
 8000f70:	4655      	mov	r5, sl
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <__aeabi_dmul+0x580>)
 8000f74:	0b24      	lsrs	r4, r4, #12
 8000f76:	e5bb      	b.n	8000af0 <__aeabi_dmul+0xe4>
 8000f78:	464d      	mov	r5, r9
 8000f7a:	0021      	movs	r1, r4
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e7db      	b.n	8000f38 <__aeabi_dmul+0x52c>
 8000f80:	fffffc0d 	.word	0xfffffc0d
 8000f84:	0000043e 	.word	0x0000043e
 8000f88:	0000041e 	.word	0x0000041e
 8000f8c:	000007ff 	.word	0x000007ff

08000f90 <__aeabi_dsub>:
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	4657      	mov	r7, sl
 8000f94:	464e      	mov	r6, r9
 8000f96:	4645      	mov	r5, r8
 8000f98:	46de      	mov	lr, fp
 8000f9a:	b5e0      	push	{r5, r6, r7, lr}
 8000f9c:	000d      	movs	r5, r1
 8000f9e:	0004      	movs	r4, r0
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	0010      	movs	r0, r2
 8000fa4:	032b      	lsls	r3, r5, #12
 8000fa6:	0a5b      	lsrs	r3, r3, #9
 8000fa8:	0f62      	lsrs	r2, r4, #29
 8000faa:	431a      	orrs	r2, r3
 8000fac:	00e3      	lsls	r3, r4, #3
 8000fae:	030c      	lsls	r4, r1, #12
 8000fb0:	0a64      	lsrs	r4, r4, #9
 8000fb2:	0f47      	lsrs	r7, r0, #29
 8000fb4:	4327      	orrs	r7, r4
 8000fb6:	4cd0      	ldr	r4, [pc, #832]	; (80012f8 <__aeabi_dsub+0x368>)
 8000fb8:	006e      	lsls	r6, r5, #1
 8000fba:	4691      	mov	r9, r2
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	004a      	lsls	r2, r1, #1
 8000fc0:	00c0      	lsls	r0, r0, #3
 8000fc2:	4698      	mov	r8, r3
 8000fc4:	46a2      	mov	sl, r4
 8000fc6:	0d76      	lsrs	r6, r6, #21
 8000fc8:	0fed      	lsrs	r5, r5, #31
 8000fca:	0d52      	lsrs	r2, r2, #21
 8000fcc:	0fc9      	lsrs	r1, r1, #31
 8000fce:	9001      	str	r0, [sp, #4]
 8000fd0:	42a2      	cmp	r2, r4
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_dsub+0x46>
 8000fd4:	e0b9      	b.n	800114a <__aeabi_dsub+0x1ba>
 8000fd6:	2401      	movs	r4, #1
 8000fd8:	4061      	eors	r1, r4
 8000fda:	468b      	mov	fp, r1
 8000fdc:	428d      	cmp	r5, r1
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dsub+0x52>
 8000fe0:	e08d      	b.n	80010fe <__aeabi_dsub+0x16e>
 8000fe2:	1ab4      	subs	r4, r6, r2
 8000fe4:	46a4      	mov	ip, r4
 8000fe6:	2c00      	cmp	r4, #0
 8000fe8:	dc00      	bgt.n	8000fec <__aeabi_dsub+0x5c>
 8000fea:	e0b7      	b.n	800115c <__aeabi_dsub+0x1cc>
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_dsub+0x62>
 8000ff0:	e0cb      	b.n	800118a <__aeabi_dsub+0x1fa>
 8000ff2:	4ac1      	ldr	r2, [pc, #772]	; (80012f8 <__aeabi_dsub+0x368>)
 8000ff4:	4296      	cmp	r6, r2
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_dsub+0x6a>
 8000ff8:	e186      	b.n	8001308 <__aeabi_dsub+0x378>
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	0412      	lsls	r2, r2, #16
 8000ffe:	4317      	orrs	r7, r2
 8001000:	4662      	mov	r2, ip
 8001002:	2a38      	cmp	r2, #56	; 0x38
 8001004:	dd00      	ble.n	8001008 <__aeabi_dsub+0x78>
 8001006:	e1a4      	b.n	8001352 <__aeabi_dsub+0x3c2>
 8001008:	2a1f      	cmp	r2, #31
 800100a:	dd00      	ble.n	800100e <__aeabi_dsub+0x7e>
 800100c:	e21d      	b.n	800144a <__aeabi_dsub+0x4ba>
 800100e:	4661      	mov	r1, ip
 8001010:	2220      	movs	r2, #32
 8001012:	003c      	movs	r4, r7
 8001014:	1a52      	subs	r2, r2, r1
 8001016:	0001      	movs	r1, r0
 8001018:	4090      	lsls	r0, r2
 800101a:	4094      	lsls	r4, r2
 800101c:	1e42      	subs	r2, r0, #1
 800101e:	4190      	sbcs	r0, r2
 8001020:	4662      	mov	r2, ip
 8001022:	46a0      	mov	r8, r4
 8001024:	4664      	mov	r4, ip
 8001026:	40d7      	lsrs	r7, r2
 8001028:	464a      	mov	r2, r9
 800102a:	40e1      	lsrs	r1, r4
 800102c:	4644      	mov	r4, r8
 800102e:	1bd2      	subs	r2, r2, r7
 8001030:	4691      	mov	r9, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	4304      	orrs	r4, r0
 8001036:	1b1c      	subs	r4, r3, r4
 8001038:	42a3      	cmp	r3, r4
 800103a:	4192      	sbcs	r2, r2
 800103c:	464b      	mov	r3, r9
 800103e:	4252      	negs	r2, r2
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	469a      	mov	sl, r3
 8001044:	4653      	mov	r3, sl
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	d400      	bmi.n	800104c <__aeabi_dsub+0xbc>
 800104a:	e12b      	b.n	80012a4 <__aeabi_dsub+0x314>
 800104c:	4653      	mov	r3, sl
 800104e:	025a      	lsls	r2, r3, #9
 8001050:	0a53      	lsrs	r3, r2, #9
 8001052:	469a      	mov	sl, r3
 8001054:	4653      	mov	r3, sl
 8001056:	2b00      	cmp	r3, #0
 8001058:	d100      	bne.n	800105c <__aeabi_dsub+0xcc>
 800105a:	e166      	b.n	800132a <__aeabi_dsub+0x39a>
 800105c:	4650      	mov	r0, sl
 800105e:	f000 fbb3 	bl	80017c8 <__clzsi2>
 8001062:	0003      	movs	r3, r0
 8001064:	3b08      	subs	r3, #8
 8001066:	2220      	movs	r2, #32
 8001068:	0020      	movs	r0, r4
 800106a:	1ad2      	subs	r2, r2, r3
 800106c:	4651      	mov	r1, sl
 800106e:	40d0      	lsrs	r0, r2
 8001070:	4099      	lsls	r1, r3
 8001072:	0002      	movs	r2, r0
 8001074:	409c      	lsls	r4, r3
 8001076:	430a      	orrs	r2, r1
 8001078:	429e      	cmp	r6, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dsub+0xee>
 800107c:	e164      	b.n	8001348 <__aeabi_dsub+0x3b8>
 800107e:	1b9b      	subs	r3, r3, r6
 8001080:	1c59      	adds	r1, r3, #1
 8001082:	291f      	cmp	r1, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dsub+0xf8>
 8001086:	e0fe      	b.n	8001286 <__aeabi_dsub+0x2f6>
 8001088:	2320      	movs	r3, #32
 800108a:	0010      	movs	r0, r2
 800108c:	0026      	movs	r6, r4
 800108e:	1a5b      	subs	r3, r3, r1
 8001090:	409c      	lsls	r4, r3
 8001092:	4098      	lsls	r0, r3
 8001094:	40ce      	lsrs	r6, r1
 8001096:	40ca      	lsrs	r2, r1
 8001098:	1e63      	subs	r3, r4, #1
 800109a:	419c      	sbcs	r4, r3
 800109c:	4330      	orrs	r0, r6
 800109e:	4692      	mov	sl, r2
 80010a0:	2600      	movs	r6, #0
 80010a2:	4304      	orrs	r4, r0
 80010a4:	0763      	lsls	r3, r4, #29
 80010a6:	d009      	beq.n	80010bc <__aeabi_dsub+0x12c>
 80010a8:	230f      	movs	r3, #15
 80010aa:	4023      	ands	r3, r4
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d005      	beq.n	80010bc <__aeabi_dsub+0x12c>
 80010b0:	1d23      	adds	r3, r4, #4
 80010b2:	42a3      	cmp	r3, r4
 80010b4:	41a4      	sbcs	r4, r4
 80010b6:	4264      	negs	r4, r4
 80010b8:	44a2      	add	sl, r4
 80010ba:	001c      	movs	r4, r3
 80010bc:	4653      	mov	r3, sl
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	d400      	bmi.n	80010c4 <__aeabi_dsub+0x134>
 80010c2:	e0f2      	b.n	80012aa <__aeabi_dsub+0x31a>
 80010c4:	4b8c      	ldr	r3, [pc, #560]	; (80012f8 <__aeabi_dsub+0x368>)
 80010c6:	3601      	adds	r6, #1
 80010c8:	429e      	cmp	r6, r3
 80010ca:	d100      	bne.n	80010ce <__aeabi_dsub+0x13e>
 80010cc:	e10f      	b.n	80012ee <__aeabi_dsub+0x35e>
 80010ce:	4653      	mov	r3, sl
 80010d0:	498a      	ldr	r1, [pc, #552]	; (80012fc <__aeabi_dsub+0x36c>)
 80010d2:	08e4      	lsrs	r4, r4, #3
 80010d4:	400b      	ands	r3, r1
 80010d6:	0019      	movs	r1, r3
 80010d8:	075b      	lsls	r3, r3, #29
 80010da:	4323      	orrs	r3, r4
 80010dc:	0572      	lsls	r2, r6, #21
 80010de:	024c      	lsls	r4, r1, #9
 80010e0:	0b24      	lsrs	r4, r4, #12
 80010e2:	0d52      	lsrs	r2, r2, #21
 80010e4:	0512      	lsls	r2, r2, #20
 80010e6:	4322      	orrs	r2, r4
 80010e8:	07ed      	lsls	r5, r5, #31
 80010ea:	432a      	orrs	r2, r5
 80010ec:	0018      	movs	r0, r3
 80010ee:	0011      	movs	r1, r2
 80010f0:	b003      	add	sp, #12
 80010f2:	bcf0      	pop	{r4, r5, r6, r7}
 80010f4:	46bb      	mov	fp, r7
 80010f6:	46b2      	mov	sl, r6
 80010f8:	46a9      	mov	r9, r5
 80010fa:	46a0      	mov	r8, r4
 80010fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010fe:	1ab4      	subs	r4, r6, r2
 8001100:	46a4      	mov	ip, r4
 8001102:	2c00      	cmp	r4, #0
 8001104:	dd59      	ble.n	80011ba <__aeabi_dsub+0x22a>
 8001106:	2a00      	cmp	r2, #0
 8001108:	d100      	bne.n	800110c <__aeabi_dsub+0x17c>
 800110a:	e0b0      	b.n	800126e <__aeabi_dsub+0x2de>
 800110c:	4556      	cmp	r6, sl
 800110e:	d100      	bne.n	8001112 <__aeabi_dsub+0x182>
 8001110:	e0fa      	b.n	8001308 <__aeabi_dsub+0x378>
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	0412      	lsls	r2, r2, #16
 8001116:	4317      	orrs	r7, r2
 8001118:	4662      	mov	r2, ip
 800111a:	2a38      	cmp	r2, #56	; 0x38
 800111c:	dd00      	ble.n	8001120 <__aeabi_dsub+0x190>
 800111e:	e0d4      	b.n	80012ca <__aeabi_dsub+0x33a>
 8001120:	2a1f      	cmp	r2, #31
 8001122:	dc00      	bgt.n	8001126 <__aeabi_dsub+0x196>
 8001124:	e1c0      	b.n	80014a8 <__aeabi_dsub+0x518>
 8001126:	0039      	movs	r1, r7
 8001128:	3a20      	subs	r2, #32
 800112a:	40d1      	lsrs	r1, r2
 800112c:	4662      	mov	r2, ip
 800112e:	2a20      	cmp	r2, #32
 8001130:	d006      	beq.n	8001140 <__aeabi_dsub+0x1b0>
 8001132:	4664      	mov	r4, ip
 8001134:	2240      	movs	r2, #64	; 0x40
 8001136:	1b12      	subs	r2, r2, r4
 8001138:	003c      	movs	r4, r7
 800113a:	4094      	lsls	r4, r2
 800113c:	4304      	orrs	r4, r0
 800113e:	9401      	str	r4, [sp, #4]
 8001140:	9c01      	ldr	r4, [sp, #4]
 8001142:	1e62      	subs	r2, r4, #1
 8001144:	4194      	sbcs	r4, r2
 8001146:	430c      	orrs	r4, r1
 8001148:	e0c3      	b.n	80012d2 <__aeabi_dsub+0x342>
 800114a:	003c      	movs	r4, r7
 800114c:	4304      	orrs	r4, r0
 800114e:	d02b      	beq.n	80011a8 <__aeabi_dsub+0x218>
 8001150:	468b      	mov	fp, r1
 8001152:	428d      	cmp	r5, r1
 8001154:	d02e      	beq.n	80011b4 <__aeabi_dsub+0x224>
 8001156:	4c6a      	ldr	r4, [pc, #424]	; (8001300 <__aeabi_dsub+0x370>)
 8001158:	46a4      	mov	ip, r4
 800115a:	44b4      	add	ip, r6
 800115c:	4664      	mov	r4, ip
 800115e:	2c00      	cmp	r4, #0
 8001160:	d05f      	beq.n	8001222 <__aeabi_dsub+0x292>
 8001162:	1b94      	subs	r4, r2, r6
 8001164:	46a4      	mov	ip, r4
 8001166:	2e00      	cmp	r6, #0
 8001168:	d000      	beq.n	800116c <__aeabi_dsub+0x1dc>
 800116a:	e120      	b.n	80013ae <__aeabi_dsub+0x41e>
 800116c:	464c      	mov	r4, r9
 800116e:	431c      	orrs	r4, r3
 8001170:	d100      	bne.n	8001174 <__aeabi_dsub+0x1e4>
 8001172:	e1c7      	b.n	8001504 <__aeabi_dsub+0x574>
 8001174:	4661      	mov	r1, ip
 8001176:	1e4c      	subs	r4, r1, #1
 8001178:	2901      	cmp	r1, #1
 800117a:	d100      	bne.n	800117e <__aeabi_dsub+0x1ee>
 800117c:	e223      	b.n	80015c6 <__aeabi_dsub+0x636>
 800117e:	4d5e      	ldr	r5, [pc, #376]	; (80012f8 <__aeabi_dsub+0x368>)
 8001180:	45ac      	cmp	ip, r5
 8001182:	d100      	bne.n	8001186 <__aeabi_dsub+0x1f6>
 8001184:	e1d8      	b.n	8001538 <__aeabi_dsub+0x5a8>
 8001186:	46a4      	mov	ip, r4
 8001188:	e11a      	b.n	80013c0 <__aeabi_dsub+0x430>
 800118a:	003a      	movs	r2, r7
 800118c:	4302      	orrs	r2, r0
 800118e:	d100      	bne.n	8001192 <__aeabi_dsub+0x202>
 8001190:	e0e4      	b.n	800135c <__aeabi_dsub+0x3cc>
 8001192:	0022      	movs	r2, r4
 8001194:	3a01      	subs	r2, #1
 8001196:	2c01      	cmp	r4, #1
 8001198:	d100      	bne.n	800119c <__aeabi_dsub+0x20c>
 800119a:	e1c3      	b.n	8001524 <__aeabi_dsub+0x594>
 800119c:	4956      	ldr	r1, [pc, #344]	; (80012f8 <__aeabi_dsub+0x368>)
 800119e:	428c      	cmp	r4, r1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dsub+0x214>
 80011a2:	e0b1      	b.n	8001308 <__aeabi_dsub+0x378>
 80011a4:	4694      	mov	ip, r2
 80011a6:	e72b      	b.n	8001000 <__aeabi_dsub+0x70>
 80011a8:	2401      	movs	r4, #1
 80011aa:	4061      	eors	r1, r4
 80011ac:	468b      	mov	fp, r1
 80011ae:	428d      	cmp	r5, r1
 80011b0:	d000      	beq.n	80011b4 <__aeabi_dsub+0x224>
 80011b2:	e716      	b.n	8000fe2 <__aeabi_dsub+0x52>
 80011b4:	4952      	ldr	r1, [pc, #328]	; (8001300 <__aeabi_dsub+0x370>)
 80011b6:	468c      	mov	ip, r1
 80011b8:	44b4      	add	ip, r6
 80011ba:	4664      	mov	r4, ip
 80011bc:	2c00      	cmp	r4, #0
 80011be:	d100      	bne.n	80011c2 <__aeabi_dsub+0x232>
 80011c0:	e0d3      	b.n	800136a <__aeabi_dsub+0x3da>
 80011c2:	1b91      	subs	r1, r2, r6
 80011c4:	468c      	mov	ip, r1
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	d100      	bne.n	80011cc <__aeabi_dsub+0x23c>
 80011ca:	e15e      	b.n	800148a <__aeabi_dsub+0x4fa>
 80011cc:	494a      	ldr	r1, [pc, #296]	; (80012f8 <__aeabi_dsub+0x368>)
 80011ce:	428a      	cmp	r2, r1
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dsub+0x244>
 80011d2:	e1be      	b.n	8001552 <__aeabi_dsub+0x5c2>
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	464c      	mov	r4, r9
 80011d8:	0409      	lsls	r1, r1, #16
 80011da:	430c      	orrs	r4, r1
 80011dc:	46a1      	mov	r9, r4
 80011de:	4661      	mov	r1, ip
 80011e0:	2938      	cmp	r1, #56	; 0x38
 80011e2:	dd00      	ble.n	80011e6 <__aeabi_dsub+0x256>
 80011e4:	e1ba      	b.n	800155c <__aeabi_dsub+0x5cc>
 80011e6:	291f      	cmp	r1, #31
 80011e8:	dd00      	ble.n	80011ec <__aeabi_dsub+0x25c>
 80011ea:	e227      	b.n	800163c <__aeabi_dsub+0x6ac>
 80011ec:	2420      	movs	r4, #32
 80011ee:	1a64      	subs	r4, r4, r1
 80011f0:	4649      	mov	r1, r9
 80011f2:	40a1      	lsls	r1, r4
 80011f4:	001e      	movs	r6, r3
 80011f6:	4688      	mov	r8, r1
 80011f8:	4661      	mov	r1, ip
 80011fa:	40a3      	lsls	r3, r4
 80011fc:	40ce      	lsrs	r6, r1
 80011fe:	4641      	mov	r1, r8
 8001200:	1e5c      	subs	r4, r3, #1
 8001202:	41a3      	sbcs	r3, r4
 8001204:	4331      	orrs	r1, r6
 8001206:	4319      	orrs	r1, r3
 8001208:	000c      	movs	r4, r1
 800120a:	4663      	mov	r3, ip
 800120c:	4649      	mov	r1, r9
 800120e:	40d9      	lsrs	r1, r3
 8001210:	187f      	adds	r7, r7, r1
 8001212:	1824      	adds	r4, r4, r0
 8001214:	4284      	cmp	r4, r0
 8001216:	419b      	sbcs	r3, r3
 8001218:	425b      	negs	r3, r3
 800121a:	469a      	mov	sl, r3
 800121c:	0016      	movs	r6, r2
 800121e:	44ba      	add	sl, r7
 8001220:	e05d      	b.n	80012de <__aeabi_dsub+0x34e>
 8001222:	4c38      	ldr	r4, [pc, #224]	; (8001304 <__aeabi_dsub+0x374>)
 8001224:	1c72      	adds	r2, r6, #1
 8001226:	4222      	tst	r2, r4
 8001228:	d000      	beq.n	800122c <__aeabi_dsub+0x29c>
 800122a:	e0df      	b.n	80013ec <__aeabi_dsub+0x45c>
 800122c:	464a      	mov	r2, r9
 800122e:	431a      	orrs	r2, r3
 8001230:	2e00      	cmp	r6, #0
 8001232:	d000      	beq.n	8001236 <__aeabi_dsub+0x2a6>
 8001234:	e15c      	b.n	80014f0 <__aeabi_dsub+0x560>
 8001236:	2a00      	cmp	r2, #0
 8001238:	d100      	bne.n	800123c <__aeabi_dsub+0x2ac>
 800123a:	e1cf      	b.n	80015dc <__aeabi_dsub+0x64c>
 800123c:	003a      	movs	r2, r7
 800123e:	4302      	orrs	r2, r0
 8001240:	d100      	bne.n	8001244 <__aeabi_dsub+0x2b4>
 8001242:	e17f      	b.n	8001544 <__aeabi_dsub+0x5b4>
 8001244:	1a1c      	subs	r4, r3, r0
 8001246:	464a      	mov	r2, r9
 8001248:	42a3      	cmp	r3, r4
 800124a:	4189      	sbcs	r1, r1
 800124c:	1bd2      	subs	r2, r2, r7
 800124e:	4249      	negs	r1, r1
 8001250:	1a52      	subs	r2, r2, r1
 8001252:	4692      	mov	sl, r2
 8001254:	0212      	lsls	r2, r2, #8
 8001256:	d400      	bmi.n	800125a <__aeabi_dsub+0x2ca>
 8001258:	e20a      	b.n	8001670 <__aeabi_dsub+0x6e0>
 800125a:	1ac4      	subs	r4, r0, r3
 800125c:	42a0      	cmp	r0, r4
 800125e:	4180      	sbcs	r0, r0
 8001260:	464b      	mov	r3, r9
 8001262:	4240      	negs	r0, r0
 8001264:	1aff      	subs	r7, r7, r3
 8001266:	1a3b      	subs	r3, r7, r0
 8001268:	469a      	mov	sl, r3
 800126a:	465d      	mov	r5, fp
 800126c:	e71a      	b.n	80010a4 <__aeabi_dsub+0x114>
 800126e:	003a      	movs	r2, r7
 8001270:	4302      	orrs	r2, r0
 8001272:	d073      	beq.n	800135c <__aeabi_dsub+0x3cc>
 8001274:	0022      	movs	r2, r4
 8001276:	3a01      	subs	r2, #1
 8001278:	2c01      	cmp	r4, #1
 800127a:	d100      	bne.n	800127e <__aeabi_dsub+0x2ee>
 800127c:	e0cb      	b.n	8001416 <__aeabi_dsub+0x486>
 800127e:	4554      	cmp	r4, sl
 8001280:	d042      	beq.n	8001308 <__aeabi_dsub+0x378>
 8001282:	4694      	mov	ip, r2
 8001284:	e748      	b.n	8001118 <__aeabi_dsub+0x188>
 8001286:	0010      	movs	r0, r2
 8001288:	3b1f      	subs	r3, #31
 800128a:	40d8      	lsrs	r0, r3
 800128c:	2920      	cmp	r1, #32
 800128e:	d003      	beq.n	8001298 <__aeabi_dsub+0x308>
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	1a5b      	subs	r3, r3, r1
 8001294:	409a      	lsls	r2, r3
 8001296:	4314      	orrs	r4, r2
 8001298:	1e63      	subs	r3, r4, #1
 800129a:	419c      	sbcs	r4, r3
 800129c:	2300      	movs	r3, #0
 800129e:	2600      	movs	r6, #0
 80012a0:	469a      	mov	sl, r3
 80012a2:	4304      	orrs	r4, r0
 80012a4:	0763      	lsls	r3, r4, #29
 80012a6:	d000      	beq.n	80012aa <__aeabi_dsub+0x31a>
 80012a8:	e6fe      	b.n	80010a8 <__aeabi_dsub+0x118>
 80012aa:	4652      	mov	r2, sl
 80012ac:	08e3      	lsrs	r3, r4, #3
 80012ae:	0752      	lsls	r2, r2, #29
 80012b0:	4313      	orrs	r3, r2
 80012b2:	4652      	mov	r2, sl
 80012b4:	46b4      	mov	ip, r6
 80012b6:	08d2      	lsrs	r2, r2, #3
 80012b8:	490f      	ldr	r1, [pc, #60]	; (80012f8 <__aeabi_dsub+0x368>)
 80012ba:	458c      	cmp	ip, r1
 80012bc:	d02a      	beq.n	8001314 <__aeabi_dsub+0x384>
 80012be:	0312      	lsls	r2, r2, #12
 80012c0:	0b14      	lsrs	r4, r2, #12
 80012c2:	4662      	mov	r2, ip
 80012c4:	0552      	lsls	r2, r2, #21
 80012c6:	0d52      	lsrs	r2, r2, #21
 80012c8:	e70c      	b.n	80010e4 <__aeabi_dsub+0x154>
 80012ca:	003c      	movs	r4, r7
 80012cc:	4304      	orrs	r4, r0
 80012ce:	1e62      	subs	r2, r4, #1
 80012d0:	4194      	sbcs	r4, r2
 80012d2:	18e4      	adds	r4, r4, r3
 80012d4:	429c      	cmp	r4, r3
 80012d6:	4192      	sbcs	r2, r2
 80012d8:	4252      	negs	r2, r2
 80012da:	444a      	add	r2, r9
 80012dc:	4692      	mov	sl, r2
 80012de:	4653      	mov	r3, sl
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	d5df      	bpl.n	80012a4 <__aeabi_dsub+0x314>
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__aeabi_dsub+0x368>)
 80012e6:	3601      	adds	r6, #1
 80012e8:	429e      	cmp	r6, r3
 80012ea:	d000      	beq.n	80012ee <__aeabi_dsub+0x35e>
 80012ec:	e0a0      	b.n	8001430 <__aeabi_dsub+0x4a0>
 80012ee:	0032      	movs	r2, r6
 80012f0:	2400      	movs	r4, #0
 80012f2:	2300      	movs	r3, #0
 80012f4:	e6f6      	b.n	80010e4 <__aeabi_dsub+0x154>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	000007ff 	.word	0x000007ff
 80012fc:	ff7fffff 	.word	0xff7fffff
 8001300:	fffff801 	.word	0xfffff801
 8001304:	000007fe 	.word	0x000007fe
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	464a      	mov	r2, r9
 800130c:	0752      	lsls	r2, r2, #29
 800130e:	4313      	orrs	r3, r2
 8001310:	464a      	mov	r2, r9
 8001312:	08d2      	lsrs	r2, r2, #3
 8001314:	0019      	movs	r1, r3
 8001316:	4311      	orrs	r1, r2
 8001318:	d100      	bne.n	800131c <__aeabi_dsub+0x38c>
 800131a:	e1b5      	b.n	8001688 <__aeabi_dsub+0x6f8>
 800131c:	2480      	movs	r4, #128	; 0x80
 800131e:	0324      	lsls	r4, r4, #12
 8001320:	4314      	orrs	r4, r2
 8001322:	0324      	lsls	r4, r4, #12
 8001324:	4ad5      	ldr	r2, [pc, #852]	; (800167c <__aeabi_dsub+0x6ec>)
 8001326:	0b24      	lsrs	r4, r4, #12
 8001328:	e6dc      	b.n	80010e4 <__aeabi_dsub+0x154>
 800132a:	0020      	movs	r0, r4
 800132c:	f000 fa4c 	bl	80017c8 <__clzsi2>
 8001330:	0003      	movs	r3, r0
 8001332:	3318      	adds	r3, #24
 8001334:	2b1f      	cmp	r3, #31
 8001336:	dc00      	bgt.n	800133a <__aeabi_dsub+0x3aa>
 8001338:	e695      	b.n	8001066 <__aeabi_dsub+0xd6>
 800133a:	0022      	movs	r2, r4
 800133c:	3808      	subs	r0, #8
 800133e:	4082      	lsls	r2, r0
 8001340:	2400      	movs	r4, #0
 8001342:	429e      	cmp	r6, r3
 8001344:	dc00      	bgt.n	8001348 <__aeabi_dsub+0x3b8>
 8001346:	e69a      	b.n	800107e <__aeabi_dsub+0xee>
 8001348:	1af6      	subs	r6, r6, r3
 800134a:	4bcd      	ldr	r3, [pc, #820]	; (8001680 <__aeabi_dsub+0x6f0>)
 800134c:	401a      	ands	r2, r3
 800134e:	4692      	mov	sl, r2
 8001350:	e6a8      	b.n	80010a4 <__aeabi_dsub+0x114>
 8001352:	003c      	movs	r4, r7
 8001354:	4304      	orrs	r4, r0
 8001356:	1e62      	subs	r2, r4, #1
 8001358:	4194      	sbcs	r4, r2
 800135a:	e66c      	b.n	8001036 <__aeabi_dsub+0xa6>
 800135c:	464a      	mov	r2, r9
 800135e:	08db      	lsrs	r3, r3, #3
 8001360:	0752      	lsls	r2, r2, #29
 8001362:	4313      	orrs	r3, r2
 8001364:	464a      	mov	r2, r9
 8001366:	08d2      	lsrs	r2, r2, #3
 8001368:	e7a6      	b.n	80012b8 <__aeabi_dsub+0x328>
 800136a:	4cc6      	ldr	r4, [pc, #792]	; (8001684 <__aeabi_dsub+0x6f4>)
 800136c:	1c72      	adds	r2, r6, #1
 800136e:	4222      	tst	r2, r4
 8001370:	d000      	beq.n	8001374 <__aeabi_dsub+0x3e4>
 8001372:	e0ac      	b.n	80014ce <__aeabi_dsub+0x53e>
 8001374:	464a      	mov	r2, r9
 8001376:	431a      	orrs	r2, r3
 8001378:	2e00      	cmp	r6, #0
 800137a:	d000      	beq.n	800137e <__aeabi_dsub+0x3ee>
 800137c:	e105      	b.n	800158a <__aeabi_dsub+0x5fa>
 800137e:	2a00      	cmp	r2, #0
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x3f4>
 8001382:	e156      	b.n	8001632 <__aeabi_dsub+0x6a2>
 8001384:	003a      	movs	r2, r7
 8001386:	4302      	orrs	r2, r0
 8001388:	d100      	bne.n	800138c <__aeabi_dsub+0x3fc>
 800138a:	e0db      	b.n	8001544 <__aeabi_dsub+0x5b4>
 800138c:	181c      	adds	r4, r3, r0
 800138e:	429c      	cmp	r4, r3
 8001390:	419b      	sbcs	r3, r3
 8001392:	444f      	add	r7, r9
 8001394:	46ba      	mov	sl, r7
 8001396:	425b      	negs	r3, r3
 8001398:	449a      	add	sl, r3
 800139a:	4653      	mov	r3, sl
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	d400      	bmi.n	80013a2 <__aeabi_dsub+0x412>
 80013a0:	e780      	b.n	80012a4 <__aeabi_dsub+0x314>
 80013a2:	4652      	mov	r2, sl
 80013a4:	4bb6      	ldr	r3, [pc, #728]	; (8001680 <__aeabi_dsub+0x6f0>)
 80013a6:	2601      	movs	r6, #1
 80013a8:	401a      	ands	r2, r3
 80013aa:	4692      	mov	sl, r2
 80013ac:	e77a      	b.n	80012a4 <__aeabi_dsub+0x314>
 80013ae:	4cb3      	ldr	r4, [pc, #716]	; (800167c <__aeabi_dsub+0x6ec>)
 80013b0:	42a2      	cmp	r2, r4
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dsub+0x426>
 80013b4:	e0c0      	b.n	8001538 <__aeabi_dsub+0x5a8>
 80013b6:	2480      	movs	r4, #128	; 0x80
 80013b8:	464d      	mov	r5, r9
 80013ba:	0424      	lsls	r4, r4, #16
 80013bc:	4325      	orrs	r5, r4
 80013be:	46a9      	mov	r9, r5
 80013c0:	4664      	mov	r4, ip
 80013c2:	2c38      	cmp	r4, #56	; 0x38
 80013c4:	dc53      	bgt.n	800146e <__aeabi_dsub+0x4de>
 80013c6:	4661      	mov	r1, ip
 80013c8:	2c1f      	cmp	r4, #31
 80013ca:	dd00      	ble.n	80013ce <__aeabi_dsub+0x43e>
 80013cc:	e0cd      	b.n	800156a <__aeabi_dsub+0x5da>
 80013ce:	2520      	movs	r5, #32
 80013d0:	001e      	movs	r6, r3
 80013d2:	1b2d      	subs	r5, r5, r4
 80013d4:	464c      	mov	r4, r9
 80013d6:	40ab      	lsls	r3, r5
 80013d8:	40ac      	lsls	r4, r5
 80013da:	40ce      	lsrs	r6, r1
 80013dc:	1e5d      	subs	r5, r3, #1
 80013de:	41ab      	sbcs	r3, r5
 80013e0:	4334      	orrs	r4, r6
 80013e2:	4323      	orrs	r3, r4
 80013e4:	464c      	mov	r4, r9
 80013e6:	40cc      	lsrs	r4, r1
 80013e8:	1b3f      	subs	r7, r7, r4
 80013ea:	e045      	b.n	8001478 <__aeabi_dsub+0x4e8>
 80013ec:	464a      	mov	r2, r9
 80013ee:	1a1c      	subs	r4, r3, r0
 80013f0:	1bd1      	subs	r1, r2, r7
 80013f2:	42a3      	cmp	r3, r4
 80013f4:	4192      	sbcs	r2, r2
 80013f6:	4252      	negs	r2, r2
 80013f8:	4692      	mov	sl, r2
 80013fa:	000a      	movs	r2, r1
 80013fc:	4651      	mov	r1, sl
 80013fe:	1a52      	subs	r2, r2, r1
 8001400:	4692      	mov	sl, r2
 8001402:	0212      	lsls	r2, r2, #8
 8001404:	d500      	bpl.n	8001408 <__aeabi_dsub+0x478>
 8001406:	e083      	b.n	8001510 <__aeabi_dsub+0x580>
 8001408:	4653      	mov	r3, sl
 800140a:	4323      	orrs	r3, r4
 800140c:	d000      	beq.n	8001410 <__aeabi_dsub+0x480>
 800140e:	e621      	b.n	8001054 <__aeabi_dsub+0xc4>
 8001410:	2200      	movs	r2, #0
 8001412:	2500      	movs	r5, #0
 8001414:	e753      	b.n	80012be <__aeabi_dsub+0x32e>
 8001416:	181c      	adds	r4, r3, r0
 8001418:	429c      	cmp	r4, r3
 800141a:	419b      	sbcs	r3, r3
 800141c:	444f      	add	r7, r9
 800141e:	46ba      	mov	sl, r7
 8001420:	425b      	negs	r3, r3
 8001422:	449a      	add	sl, r3
 8001424:	4653      	mov	r3, sl
 8001426:	2601      	movs	r6, #1
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	d400      	bmi.n	800142e <__aeabi_dsub+0x49e>
 800142c:	e73a      	b.n	80012a4 <__aeabi_dsub+0x314>
 800142e:	2602      	movs	r6, #2
 8001430:	4652      	mov	r2, sl
 8001432:	4b93      	ldr	r3, [pc, #588]	; (8001680 <__aeabi_dsub+0x6f0>)
 8001434:	2101      	movs	r1, #1
 8001436:	401a      	ands	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	4021      	ands	r1, r4
 800143c:	0862      	lsrs	r2, r4, #1
 800143e:	430a      	orrs	r2, r1
 8001440:	07dc      	lsls	r4, r3, #31
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	469a      	mov	sl, r3
 8001446:	4314      	orrs	r4, r2
 8001448:	e62c      	b.n	80010a4 <__aeabi_dsub+0x114>
 800144a:	0039      	movs	r1, r7
 800144c:	3a20      	subs	r2, #32
 800144e:	40d1      	lsrs	r1, r2
 8001450:	4662      	mov	r2, ip
 8001452:	2a20      	cmp	r2, #32
 8001454:	d006      	beq.n	8001464 <__aeabi_dsub+0x4d4>
 8001456:	4664      	mov	r4, ip
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	1b12      	subs	r2, r2, r4
 800145c:	003c      	movs	r4, r7
 800145e:	4094      	lsls	r4, r2
 8001460:	4304      	orrs	r4, r0
 8001462:	9401      	str	r4, [sp, #4]
 8001464:	9c01      	ldr	r4, [sp, #4]
 8001466:	1e62      	subs	r2, r4, #1
 8001468:	4194      	sbcs	r4, r2
 800146a:	430c      	orrs	r4, r1
 800146c:	e5e3      	b.n	8001036 <__aeabi_dsub+0xa6>
 800146e:	4649      	mov	r1, r9
 8001470:	4319      	orrs	r1, r3
 8001472:	000b      	movs	r3, r1
 8001474:	1e5c      	subs	r4, r3, #1
 8001476:	41a3      	sbcs	r3, r4
 8001478:	1ac4      	subs	r4, r0, r3
 800147a:	42a0      	cmp	r0, r4
 800147c:	419b      	sbcs	r3, r3
 800147e:	425b      	negs	r3, r3
 8001480:	1afb      	subs	r3, r7, r3
 8001482:	469a      	mov	sl, r3
 8001484:	465d      	mov	r5, fp
 8001486:	0016      	movs	r6, r2
 8001488:	e5dc      	b.n	8001044 <__aeabi_dsub+0xb4>
 800148a:	4649      	mov	r1, r9
 800148c:	4319      	orrs	r1, r3
 800148e:	d100      	bne.n	8001492 <__aeabi_dsub+0x502>
 8001490:	e0ae      	b.n	80015f0 <__aeabi_dsub+0x660>
 8001492:	4661      	mov	r1, ip
 8001494:	4664      	mov	r4, ip
 8001496:	3901      	subs	r1, #1
 8001498:	2c01      	cmp	r4, #1
 800149a:	d100      	bne.n	800149e <__aeabi_dsub+0x50e>
 800149c:	e0e0      	b.n	8001660 <__aeabi_dsub+0x6d0>
 800149e:	4c77      	ldr	r4, [pc, #476]	; (800167c <__aeabi_dsub+0x6ec>)
 80014a0:	45a4      	cmp	ip, r4
 80014a2:	d056      	beq.n	8001552 <__aeabi_dsub+0x5c2>
 80014a4:	468c      	mov	ip, r1
 80014a6:	e69a      	b.n	80011de <__aeabi_dsub+0x24e>
 80014a8:	4661      	mov	r1, ip
 80014aa:	2220      	movs	r2, #32
 80014ac:	003c      	movs	r4, r7
 80014ae:	1a52      	subs	r2, r2, r1
 80014b0:	4094      	lsls	r4, r2
 80014b2:	0001      	movs	r1, r0
 80014b4:	4090      	lsls	r0, r2
 80014b6:	46a0      	mov	r8, r4
 80014b8:	4664      	mov	r4, ip
 80014ba:	1e42      	subs	r2, r0, #1
 80014bc:	4190      	sbcs	r0, r2
 80014be:	4662      	mov	r2, ip
 80014c0:	40e1      	lsrs	r1, r4
 80014c2:	4644      	mov	r4, r8
 80014c4:	40d7      	lsrs	r7, r2
 80014c6:	430c      	orrs	r4, r1
 80014c8:	4304      	orrs	r4, r0
 80014ca:	44b9      	add	r9, r7
 80014cc:	e701      	b.n	80012d2 <__aeabi_dsub+0x342>
 80014ce:	496b      	ldr	r1, [pc, #428]	; (800167c <__aeabi_dsub+0x6ec>)
 80014d0:	428a      	cmp	r2, r1
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dsub+0x546>
 80014d4:	e70c      	b.n	80012f0 <__aeabi_dsub+0x360>
 80014d6:	1818      	adds	r0, r3, r0
 80014d8:	4298      	cmp	r0, r3
 80014da:	419b      	sbcs	r3, r3
 80014dc:	444f      	add	r7, r9
 80014de:	425b      	negs	r3, r3
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	07dc      	lsls	r4, r3, #31
 80014e4:	0840      	lsrs	r0, r0, #1
 80014e6:	085b      	lsrs	r3, r3, #1
 80014e8:	469a      	mov	sl, r3
 80014ea:	0016      	movs	r6, r2
 80014ec:	4304      	orrs	r4, r0
 80014ee:	e6d9      	b.n	80012a4 <__aeabi_dsub+0x314>
 80014f0:	2a00      	cmp	r2, #0
 80014f2:	d000      	beq.n	80014f6 <__aeabi_dsub+0x566>
 80014f4:	e081      	b.n	80015fa <__aeabi_dsub+0x66a>
 80014f6:	003b      	movs	r3, r7
 80014f8:	4303      	orrs	r3, r0
 80014fa:	d11d      	bne.n	8001538 <__aeabi_dsub+0x5a8>
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	2500      	movs	r5, #0
 8001500:	0312      	lsls	r2, r2, #12
 8001502:	e70b      	b.n	800131c <__aeabi_dsub+0x38c>
 8001504:	08c0      	lsrs	r0, r0, #3
 8001506:	077b      	lsls	r3, r7, #29
 8001508:	465d      	mov	r5, fp
 800150a:	4303      	orrs	r3, r0
 800150c:	08fa      	lsrs	r2, r7, #3
 800150e:	e6d3      	b.n	80012b8 <__aeabi_dsub+0x328>
 8001510:	1ac4      	subs	r4, r0, r3
 8001512:	42a0      	cmp	r0, r4
 8001514:	4180      	sbcs	r0, r0
 8001516:	464b      	mov	r3, r9
 8001518:	4240      	negs	r0, r0
 800151a:	1aff      	subs	r7, r7, r3
 800151c:	1a3b      	subs	r3, r7, r0
 800151e:	469a      	mov	sl, r3
 8001520:	465d      	mov	r5, fp
 8001522:	e597      	b.n	8001054 <__aeabi_dsub+0xc4>
 8001524:	1a1c      	subs	r4, r3, r0
 8001526:	464a      	mov	r2, r9
 8001528:	42a3      	cmp	r3, r4
 800152a:	419b      	sbcs	r3, r3
 800152c:	1bd7      	subs	r7, r2, r7
 800152e:	425b      	negs	r3, r3
 8001530:	1afb      	subs	r3, r7, r3
 8001532:	469a      	mov	sl, r3
 8001534:	2601      	movs	r6, #1
 8001536:	e585      	b.n	8001044 <__aeabi_dsub+0xb4>
 8001538:	08c0      	lsrs	r0, r0, #3
 800153a:	077b      	lsls	r3, r7, #29
 800153c:	465d      	mov	r5, fp
 800153e:	4303      	orrs	r3, r0
 8001540:	08fa      	lsrs	r2, r7, #3
 8001542:	e6e7      	b.n	8001314 <__aeabi_dsub+0x384>
 8001544:	464a      	mov	r2, r9
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	0752      	lsls	r2, r2, #29
 800154a:	4313      	orrs	r3, r2
 800154c:	464a      	mov	r2, r9
 800154e:	08d2      	lsrs	r2, r2, #3
 8001550:	e6b5      	b.n	80012be <__aeabi_dsub+0x32e>
 8001552:	08c0      	lsrs	r0, r0, #3
 8001554:	077b      	lsls	r3, r7, #29
 8001556:	4303      	orrs	r3, r0
 8001558:	08fa      	lsrs	r2, r7, #3
 800155a:	e6db      	b.n	8001314 <__aeabi_dsub+0x384>
 800155c:	4649      	mov	r1, r9
 800155e:	4319      	orrs	r1, r3
 8001560:	000b      	movs	r3, r1
 8001562:	1e59      	subs	r1, r3, #1
 8001564:	418b      	sbcs	r3, r1
 8001566:	001c      	movs	r4, r3
 8001568:	e653      	b.n	8001212 <__aeabi_dsub+0x282>
 800156a:	464d      	mov	r5, r9
 800156c:	3c20      	subs	r4, #32
 800156e:	40e5      	lsrs	r5, r4
 8001570:	2920      	cmp	r1, #32
 8001572:	d005      	beq.n	8001580 <__aeabi_dsub+0x5f0>
 8001574:	2440      	movs	r4, #64	; 0x40
 8001576:	1a64      	subs	r4, r4, r1
 8001578:	4649      	mov	r1, r9
 800157a:	40a1      	lsls	r1, r4
 800157c:	430b      	orrs	r3, r1
 800157e:	4698      	mov	r8, r3
 8001580:	4643      	mov	r3, r8
 8001582:	1e5c      	subs	r4, r3, #1
 8001584:	41a3      	sbcs	r3, r4
 8001586:	432b      	orrs	r3, r5
 8001588:	e776      	b.n	8001478 <__aeabi_dsub+0x4e8>
 800158a:	2a00      	cmp	r2, #0
 800158c:	d0e1      	beq.n	8001552 <__aeabi_dsub+0x5c2>
 800158e:	003a      	movs	r2, r7
 8001590:	08db      	lsrs	r3, r3, #3
 8001592:	4302      	orrs	r2, r0
 8001594:	d100      	bne.n	8001598 <__aeabi_dsub+0x608>
 8001596:	e6b8      	b.n	800130a <__aeabi_dsub+0x37a>
 8001598:	464a      	mov	r2, r9
 800159a:	0752      	lsls	r2, r2, #29
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	4313      	orrs	r3, r2
 80015a0:	464a      	mov	r2, r9
 80015a2:	0324      	lsls	r4, r4, #12
 80015a4:	08d2      	lsrs	r2, r2, #3
 80015a6:	4222      	tst	r2, r4
 80015a8:	d007      	beq.n	80015ba <__aeabi_dsub+0x62a>
 80015aa:	08fe      	lsrs	r6, r7, #3
 80015ac:	4226      	tst	r6, r4
 80015ae:	d104      	bne.n	80015ba <__aeabi_dsub+0x62a>
 80015b0:	465d      	mov	r5, fp
 80015b2:	0032      	movs	r2, r6
 80015b4:	08c3      	lsrs	r3, r0, #3
 80015b6:	077f      	lsls	r7, r7, #29
 80015b8:	433b      	orrs	r3, r7
 80015ba:	0f59      	lsrs	r1, r3, #29
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	0749      	lsls	r1, r1, #29
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	430b      	orrs	r3, r1
 80015c4:	e6a6      	b.n	8001314 <__aeabi_dsub+0x384>
 80015c6:	1ac4      	subs	r4, r0, r3
 80015c8:	42a0      	cmp	r0, r4
 80015ca:	4180      	sbcs	r0, r0
 80015cc:	464b      	mov	r3, r9
 80015ce:	4240      	negs	r0, r0
 80015d0:	1aff      	subs	r7, r7, r3
 80015d2:	1a3b      	subs	r3, r7, r0
 80015d4:	469a      	mov	sl, r3
 80015d6:	465d      	mov	r5, fp
 80015d8:	2601      	movs	r6, #1
 80015da:	e533      	b.n	8001044 <__aeabi_dsub+0xb4>
 80015dc:	003b      	movs	r3, r7
 80015de:	4303      	orrs	r3, r0
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dsub+0x654>
 80015e2:	e715      	b.n	8001410 <__aeabi_dsub+0x480>
 80015e4:	08c0      	lsrs	r0, r0, #3
 80015e6:	077b      	lsls	r3, r7, #29
 80015e8:	465d      	mov	r5, fp
 80015ea:	4303      	orrs	r3, r0
 80015ec:	08fa      	lsrs	r2, r7, #3
 80015ee:	e666      	b.n	80012be <__aeabi_dsub+0x32e>
 80015f0:	08c0      	lsrs	r0, r0, #3
 80015f2:	077b      	lsls	r3, r7, #29
 80015f4:	4303      	orrs	r3, r0
 80015f6:	08fa      	lsrs	r2, r7, #3
 80015f8:	e65e      	b.n	80012b8 <__aeabi_dsub+0x328>
 80015fa:	003a      	movs	r2, r7
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	4302      	orrs	r2, r0
 8001600:	d100      	bne.n	8001604 <__aeabi_dsub+0x674>
 8001602:	e682      	b.n	800130a <__aeabi_dsub+0x37a>
 8001604:	464a      	mov	r2, r9
 8001606:	0752      	lsls	r2, r2, #29
 8001608:	2480      	movs	r4, #128	; 0x80
 800160a:	4313      	orrs	r3, r2
 800160c:	464a      	mov	r2, r9
 800160e:	0324      	lsls	r4, r4, #12
 8001610:	08d2      	lsrs	r2, r2, #3
 8001612:	4222      	tst	r2, r4
 8001614:	d007      	beq.n	8001626 <__aeabi_dsub+0x696>
 8001616:	08fe      	lsrs	r6, r7, #3
 8001618:	4226      	tst	r6, r4
 800161a:	d104      	bne.n	8001626 <__aeabi_dsub+0x696>
 800161c:	465d      	mov	r5, fp
 800161e:	0032      	movs	r2, r6
 8001620:	08c3      	lsrs	r3, r0, #3
 8001622:	077f      	lsls	r7, r7, #29
 8001624:	433b      	orrs	r3, r7
 8001626:	0f59      	lsrs	r1, r3, #29
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	08db      	lsrs	r3, r3, #3
 800162c:	0749      	lsls	r1, r1, #29
 800162e:	430b      	orrs	r3, r1
 8001630:	e670      	b.n	8001314 <__aeabi_dsub+0x384>
 8001632:	08c0      	lsrs	r0, r0, #3
 8001634:	077b      	lsls	r3, r7, #29
 8001636:	4303      	orrs	r3, r0
 8001638:	08fa      	lsrs	r2, r7, #3
 800163a:	e640      	b.n	80012be <__aeabi_dsub+0x32e>
 800163c:	464c      	mov	r4, r9
 800163e:	3920      	subs	r1, #32
 8001640:	40cc      	lsrs	r4, r1
 8001642:	4661      	mov	r1, ip
 8001644:	2920      	cmp	r1, #32
 8001646:	d006      	beq.n	8001656 <__aeabi_dsub+0x6c6>
 8001648:	4666      	mov	r6, ip
 800164a:	2140      	movs	r1, #64	; 0x40
 800164c:	1b89      	subs	r1, r1, r6
 800164e:	464e      	mov	r6, r9
 8001650:	408e      	lsls	r6, r1
 8001652:	4333      	orrs	r3, r6
 8001654:	4698      	mov	r8, r3
 8001656:	4643      	mov	r3, r8
 8001658:	1e59      	subs	r1, r3, #1
 800165a:	418b      	sbcs	r3, r1
 800165c:	431c      	orrs	r4, r3
 800165e:	e5d8      	b.n	8001212 <__aeabi_dsub+0x282>
 8001660:	181c      	adds	r4, r3, r0
 8001662:	4284      	cmp	r4, r0
 8001664:	4180      	sbcs	r0, r0
 8001666:	444f      	add	r7, r9
 8001668:	46ba      	mov	sl, r7
 800166a:	4240      	negs	r0, r0
 800166c:	4482      	add	sl, r0
 800166e:	e6d9      	b.n	8001424 <__aeabi_dsub+0x494>
 8001670:	4653      	mov	r3, sl
 8001672:	4323      	orrs	r3, r4
 8001674:	d100      	bne.n	8001678 <__aeabi_dsub+0x6e8>
 8001676:	e6cb      	b.n	8001410 <__aeabi_dsub+0x480>
 8001678:	e614      	b.n	80012a4 <__aeabi_dsub+0x314>
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	000007ff 	.word	0x000007ff
 8001680:	ff7fffff 	.word	0xff7fffff
 8001684:	000007fe 	.word	0x000007fe
 8001688:	2300      	movs	r3, #0
 800168a:	4a01      	ldr	r2, [pc, #4]	; (8001690 <__aeabi_dsub+0x700>)
 800168c:	001c      	movs	r4, r3
 800168e:	e529      	b.n	80010e4 <__aeabi_dsub+0x154>
 8001690:	000007ff 	.word	0x000007ff

08001694 <__aeabi_d2iz>:
 8001694:	000a      	movs	r2, r1
 8001696:	b530      	push	{r4, r5, lr}
 8001698:	4c13      	ldr	r4, [pc, #76]	; (80016e8 <__aeabi_d2iz+0x54>)
 800169a:	0053      	lsls	r3, r2, #1
 800169c:	0309      	lsls	r1, r1, #12
 800169e:	0005      	movs	r5, r0
 80016a0:	0b09      	lsrs	r1, r1, #12
 80016a2:	2000      	movs	r0, #0
 80016a4:	0d5b      	lsrs	r3, r3, #21
 80016a6:	0fd2      	lsrs	r2, r2, #31
 80016a8:	42a3      	cmp	r3, r4
 80016aa:	dd04      	ble.n	80016b6 <__aeabi_d2iz+0x22>
 80016ac:	480f      	ldr	r0, [pc, #60]	; (80016ec <__aeabi_d2iz+0x58>)
 80016ae:	4283      	cmp	r3, r0
 80016b0:	dd02      	ble.n	80016b8 <__aeabi_d2iz+0x24>
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <__aeabi_d2iz+0x5c>)
 80016b4:	18d0      	adds	r0, r2, r3
 80016b6:	bd30      	pop	{r4, r5, pc}
 80016b8:	2080      	movs	r0, #128	; 0x80
 80016ba:	0340      	lsls	r0, r0, #13
 80016bc:	4301      	orrs	r1, r0
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <__aeabi_d2iz+0x60>)
 80016c0:	1ac0      	subs	r0, r0, r3
 80016c2:	281f      	cmp	r0, #31
 80016c4:	dd08      	ble.n	80016d8 <__aeabi_d2iz+0x44>
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <__aeabi_d2iz+0x64>)
 80016c8:	1ac3      	subs	r3, r0, r3
 80016ca:	40d9      	lsrs	r1, r3
 80016cc:	000b      	movs	r3, r1
 80016ce:	4258      	negs	r0, r3
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d1f0      	bne.n	80016b6 <__aeabi_d2iz+0x22>
 80016d4:	0018      	movs	r0, r3
 80016d6:	e7ee      	b.n	80016b6 <__aeabi_d2iz+0x22>
 80016d8:	4c08      	ldr	r4, [pc, #32]	; (80016fc <__aeabi_d2iz+0x68>)
 80016da:	40c5      	lsrs	r5, r0
 80016dc:	46a4      	mov	ip, r4
 80016de:	4463      	add	r3, ip
 80016e0:	4099      	lsls	r1, r3
 80016e2:	000b      	movs	r3, r1
 80016e4:	432b      	orrs	r3, r5
 80016e6:	e7f2      	b.n	80016ce <__aeabi_d2iz+0x3a>
 80016e8:	000003fe 	.word	0x000003fe
 80016ec:	0000041d 	.word	0x0000041d
 80016f0:	7fffffff 	.word	0x7fffffff
 80016f4:	00000433 	.word	0x00000433
 80016f8:	00000413 	.word	0x00000413
 80016fc:	fffffbed 	.word	0xfffffbed

08001700 <__aeabi_ui2d>:
 8001700:	b510      	push	{r4, lr}
 8001702:	1e04      	subs	r4, r0, #0
 8001704:	d010      	beq.n	8001728 <__aeabi_ui2d+0x28>
 8001706:	f000 f85f 	bl	80017c8 <__clzsi2>
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <__aeabi_ui2d+0x48>)
 800170c:	1a1b      	subs	r3, r3, r0
 800170e:	280a      	cmp	r0, #10
 8001710:	dc11      	bgt.n	8001736 <__aeabi_ui2d+0x36>
 8001712:	220b      	movs	r2, #11
 8001714:	0021      	movs	r1, r4
 8001716:	1a12      	subs	r2, r2, r0
 8001718:	40d1      	lsrs	r1, r2
 800171a:	3015      	adds	r0, #21
 800171c:	030a      	lsls	r2, r1, #12
 800171e:	055b      	lsls	r3, r3, #21
 8001720:	4084      	lsls	r4, r0
 8001722:	0b12      	lsrs	r2, r2, #12
 8001724:	0d5b      	lsrs	r3, r3, #21
 8001726:	e001      	b.n	800172c <__aeabi_ui2d+0x2c>
 8001728:	2300      	movs	r3, #0
 800172a:	2200      	movs	r2, #0
 800172c:	051b      	lsls	r3, r3, #20
 800172e:	4313      	orrs	r3, r2
 8001730:	0020      	movs	r0, r4
 8001732:	0019      	movs	r1, r3
 8001734:	bd10      	pop	{r4, pc}
 8001736:	0022      	movs	r2, r4
 8001738:	380b      	subs	r0, #11
 800173a:	4082      	lsls	r2, r0
 800173c:	055b      	lsls	r3, r3, #21
 800173e:	0312      	lsls	r2, r2, #12
 8001740:	2400      	movs	r4, #0
 8001742:	0b12      	lsrs	r2, r2, #12
 8001744:	0d5b      	lsrs	r3, r3, #21
 8001746:	e7f1      	b.n	800172c <__aeabi_ui2d+0x2c>
 8001748:	0000041e 	.word	0x0000041e

0800174c <__aeabi_cdrcmple>:
 800174c:	4684      	mov	ip, r0
 800174e:	0010      	movs	r0, r2
 8001750:	4662      	mov	r2, ip
 8001752:	468c      	mov	ip, r1
 8001754:	0019      	movs	r1, r3
 8001756:	4663      	mov	r3, ip
 8001758:	e000      	b.n	800175c <__aeabi_cdcmpeq>
 800175a:	46c0      	nop			; (mov r8, r8)

0800175c <__aeabi_cdcmpeq>:
 800175c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800175e:	f000 f8f9 	bl	8001954 <__ledf2>
 8001762:	2800      	cmp	r0, #0
 8001764:	d401      	bmi.n	800176a <__aeabi_cdcmpeq+0xe>
 8001766:	2100      	movs	r1, #0
 8001768:	42c8      	cmn	r0, r1
 800176a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800176c <__aeabi_dcmpeq>:
 800176c:	b510      	push	{r4, lr}
 800176e:	f000 f849 	bl	8001804 <__eqdf2>
 8001772:	4240      	negs	r0, r0
 8001774:	3001      	adds	r0, #1
 8001776:	bd10      	pop	{r4, pc}

08001778 <__aeabi_dcmplt>:
 8001778:	b510      	push	{r4, lr}
 800177a:	f000 f8eb 	bl	8001954 <__ledf2>
 800177e:	2800      	cmp	r0, #0
 8001780:	db01      	blt.n	8001786 <__aeabi_dcmplt+0xe>
 8001782:	2000      	movs	r0, #0
 8001784:	bd10      	pop	{r4, pc}
 8001786:	2001      	movs	r0, #1
 8001788:	bd10      	pop	{r4, pc}
 800178a:	46c0      	nop			; (mov r8, r8)

0800178c <__aeabi_dcmple>:
 800178c:	b510      	push	{r4, lr}
 800178e:	f000 f8e1 	bl	8001954 <__ledf2>
 8001792:	2800      	cmp	r0, #0
 8001794:	dd01      	ble.n	800179a <__aeabi_dcmple+0xe>
 8001796:	2000      	movs	r0, #0
 8001798:	bd10      	pop	{r4, pc}
 800179a:	2001      	movs	r0, #1
 800179c:	bd10      	pop	{r4, pc}
 800179e:	46c0      	nop			; (mov r8, r8)

080017a0 <__aeabi_dcmpgt>:
 80017a0:	b510      	push	{r4, lr}
 80017a2:	f000 f871 	bl	8001888 <__gedf2>
 80017a6:	2800      	cmp	r0, #0
 80017a8:	dc01      	bgt.n	80017ae <__aeabi_dcmpgt+0xe>
 80017aa:	2000      	movs	r0, #0
 80017ac:	bd10      	pop	{r4, pc}
 80017ae:	2001      	movs	r0, #1
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)

080017b4 <__aeabi_dcmpge>:
 80017b4:	b510      	push	{r4, lr}
 80017b6:	f000 f867 	bl	8001888 <__gedf2>
 80017ba:	2800      	cmp	r0, #0
 80017bc:	da01      	bge.n	80017c2 <__aeabi_dcmpge+0xe>
 80017be:	2000      	movs	r0, #0
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	2001      	movs	r0, #1
 80017c4:	bd10      	pop	{r4, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)

080017c8 <__clzsi2>:
 80017c8:	211c      	movs	r1, #28
 80017ca:	2301      	movs	r3, #1
 80017cc:	041b      	lsls	r3, r3, #16
 80017ce:	4298      	cmp	r0, r3
 80017d0:	d301      	bcc.n	80017d6 <__clzsi2+0xe>
 80017d2:	0c00      	lsrs	r0, r0, #16
 80017d4:	3910      	subs	r1, #16
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	4298      	cmp	r0, r3
 80017da:	d301      	bcc.n	80017e0 <__clzsi2+0x18>
 80017dc:	0a00      	lsrs	r0, r0, #8
 80017de:	3908      	subs	r1, #8
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	4298      	cmp	r0, r3
 80017e4:	d301      	bcc.n	80017ea <__clzsi2+0x22>
 80017e6:	0900      	lsrs	r0, r0, #4
 80017e8:	3904      	subs	r1, #4
 80017ea:	a202      	add	r2, pc, #8	; (adr r2, 80017f4 <__clzsi2+0x2c>)
 80017ec:	5c10      	ldrb	r0, [r2, r0]
 80017ee:	1840      	adds	r0, r0, r1
 80017f0:	4770      	bx	lr
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	02020304 	.word	0x02020304
 80017f8:	01010101 	.word	0x01010101
	...

08001804 <__eqdf2>:
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	464e      	mov	r6, r9
 8001808:	4645      	mov	r5, r8
 800180a:	46de      	mov	lr, fp
 800180c:	4657      	mov	r7, sl
 800180e:	4690      	mov	r8, r2
 8001810:	b5e0      	push	{r5, r6, r7, lr}
 8001812:	0017      	movs	r7, r2
 8001814:	031a      	lsls	r2, r3, #12
 8001816:	0b12      	lsrs	r2, r2, #12
 8001818:	0005      	movs	r5, r0
 800181a:	4684      	mov	ip, r0
 800181c:	4819      	ldr	r0, [pc, #100]	; (8001884 <__eqdf2+0x80>)
 800181e:	030e      	lsls	r6, r1, #12
 8001820:	004c      	lsls	r4, r1, #1
 8001822:	4691      	mov	r9, r2
 8001824:	005a      	lsls	r2, r3, #1
 8001826:	0fdb      	lsrs	r3, r3, #31
 8001828:	469b      	mov	fp, r3
 800182a:	0b36      	lsrs	r6, r6, #12
 800182c:	0d64      	lsrs	r4, r4, #21
 800182e:	0fc9      	lsrs	r1, r1, #31
 8001830:	0d52      	lsrs	r2, r2, #21
 8001832:	4284      	cmp	r4, r0
 8001834:	d019      	beq.n	800186a <__eqdf2+0x66>
 8001836:	4282      	cmp	r2, r0
 8001838:	d010      	beq.n	800185c <__eqdf2+0x58>
 800183a:	2001      	movs	r0, #1
 800183c:	4294      	cmp	r4, r2
 800183e:	d10e      	bne.n	800185e <__eqdf2+0x5a>
 8001840:	454e      	cmp	r6, r9
 8001842:	d10c      	bne.n	800185e <__eqdf2+0x5a>
 8001844:	2001      	movs	r0, #1
 8001846:	45c4      	cmp	ip, r8
 8001848:	d109      	bne.n	800185e <__eqdf2+0x5a>
 800184a:	4559      	cmp	r1, fp
 800184c:	d017      	beq.n	800187e <__eqdf2+0x7a>
 800184e:	2c00      	cmp	r4, #0
 8001850:	d105      	bne.n	800185e <__eqdf2+0x5a>
 8001852:	0030      	movs	r0, r6
 8001854:	4328      	orrs	r0, r5
 8001856:	1e43      	subs	r3, r0, #1
 8001858:	4198      	sbcs	r0, r3
 800185a:	e000      	b.n	800185e <__eqdf2+0x5a>
 800185c:	2001      	movs	r0, #1
 800185e:	bcf0      	pop	{r4, r5, r6, r7}
 8001860:	46bb      	mov	fp, r7
 8001862:	46b2      	mov	sl, r6
 8001864:	46a9      	mov	r9, r5
 8001866:	46a0      	mov	r8, r4
 8001868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186a:	0033      	movs	r3, r6
 800186c:	2001      	movs	r0, #1
 800186e:	432b      	orrs	r3, r5
 8001870:	d1f5      	bne.n	800185e <__eqdf2+0x5a>
 8001872:	42a2      	cmp	r2, r4
 8001874:	d1f3      	bne.n	800185e <__eqdf2+0x5a>
 8001876:	464b      	mov	r3, r9
 8001878:	433b      	orrs	r3, r7
 800187a:	d1f0      	bne.n	800185e <__eqdf2+0x5a>
 800187c:	e7e2      	b.n	8001844 <__eqdf2+0x40>
 800187e:	2000      	movs	r0, #0
 8001880:	e7ed      	b.n	800185e <__eqdf2+0x5a>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	000007ff 	.word	0x000007ff

08001888 <__gedf2>:
 8001888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188a:	4647      	mov	r7, r8
 800188c:	46ce      	mov	lr, r9
 800188e:	0004      	movs	r4, r0
 8001890:	0018      	movs	r0, r3
 8001892:	0016      	movs	r6, r2
 8001894:	031b      	lsls	r3, r3, #12
 8001896:	0b1b      	lsrs	r3, r3, #12
 8001898:	4d2d      	ldr	r5, [pc, #180]	; (8001950 <__gedf2+0xc8>)
 800189a:	004a      	lsls	r2, r1, #1
 800189c:	4699      	mov	r9, r3
 800189e:	b580      	push	{r7, lr}
 80018a0:	0043      	lsls	r3, r0, #1
 80018a2:	030f      	lsls	r7, r1, #12
 80018a4:	46a4      	mov	ip, r4
 80018a6:	46b0      	mov	r8, r6
 80018a8:	0b3f      	lsrs	r7, r7, #12
 80018aa:	0d52      	lsrs	r2, r2, #21
 80018ac:	0fc9      	lsrs	r1, r1, #31
 80018ae:	0d5b      	lsrs	r3, r3, #21
 80018b0:	0fc0      	lsrs	r0, r0, #31
 80018b2:	42aa      	cmp	r2, r5
 80018b4:	d021      	beq.n	80018fa <__gedf2+0x72>
 80018b6:	42ab      	cmp	r3, r5
 80018b8:	d013      	beq.n	80018e2 <__gedf2+0x5a>
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	d122      	bne.n	8001904 <__gedf2+0x7c>
 80018be:	433c      	orrs	r4, r7
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <__gedf2+0x42>
 80018c4:	464d      	mov	r5, r9
 80018c6:	432e      	orrs	r6, r5
 80018c8:	d022      	beq.n	8001910 <__gedf2+0x88>
 80018ca:	2c00      	cmp	r4, #0
 80018cc:	d010      	beq.n	80018f0 <__gedf2+0x68>
 80018ce:	4281      	cmp	r1, r0
 80018d0:	d022      	beq.n	8001918 <__gedf2+0x90>
 80018d2:	2002      	movs	r0, #2
 80018d4:	3901      	subs	r1, #1
 80018d6:	4008      	ands	r0, r1
 80018d8:	3801      	subs	r0, #1
 80018da:	bcc0      	pop	{r6, r7}
 80018dc:	46b9      	mov	r9, r7
 80018de:	46b0      	mov	r8, r6
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e2:	464d      	mov	r5, r9
 80018e4:	432e      	orrs	r6, r5
 80018e6:	d129      	bne.n	800193c <__gedf2+0xb4>
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	d1f0      	bne.n	80018ce <__gedf2+0x46>
 80018ec:	433c      	orrs	r4, r7
 80018ee:	d1ee      	bne.n	80018ce <__gedf2+0x46>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d1f2      	bne.n	80018da <__gedf2+0x52>
 80018f4:	2001      	movs	r0, #1
 80018f6:	4240      	negs	r0, r0
 80018f8:	e7ef      	b.n	80018da <__gedf2+0x52>
 80018fa:	003d      	movs	r5, r7
 80018fc:	4325      	orrs	r5, r4
 80018fe:	d11d      	bne.n	800193c <__gedf2+0xb4>
 8001900:	4293      	cmp	r3, r2
 8001902:	d0ee      	beq.n	80018e2 <__gedf2+0x5a>
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e2      	bne.n	80018ce <__gedf2+0x46>
 8001908:	464c      	mov	r4, r9
 800190a:	4326      	orrs	r6, r4
 800190c:	d1df      	bne.n	80018ce <__gedf2+0x46>
 800190e:	e7e0      	b.n	80018d2 <__gedf2+0x4a>
 8001910:	2000      	movs	r0, #0
 8001912:	2c00      	cmp	r4, #0
 8001914:	d0e1      	beq.n	80018da <__gedf2+0x52>
 8001916:	e7dc      	b.n	80018d2 <__gedf2+0x4a>
 8001918:	429a      	cmp	r2, r3
 800191a:	dc0a      	bgt.n	8001932 <__gedf2+0xaa>
 800191c:	dbe8      	blt.n	80018f0 <__gedf2+0x68>
 800191e:	454f      	cmp	r7, r9
 8001920:	d8d7      	bhi.n	80018d2 <__gedf2+0x4a>
 8001922:	d00e      	beq.n	8001942 <__gedf2+0xba>
 8001924:	2000      	movs	r0, #0
 8001926:	454f      	cmp	r7, r9
 8001928:	d2d7      	bcs.n	80018da <__gedf2+0x52>
 800192a:	2900      	cmp	r1, #0
 800192c:	d0e2      	beq.n	80018f4 <__gedf2+0x6c>
 800192e:	0008      	movs	r0, r1
 8001930:	e7d3      	b.n	80018da <__gedf2+0x52>
 8001932:	4243      	negs	r3, r0
 8001934:	4158      	adcs	r0, r3
 8001936:	0040      	lsls	r0, r0, #1
 8001938:	3801      	subs	r0, #1
 800193a:	e7ce      	b.n	80018da <__gedf2+0x52>
 800193c:	2002      	movs	r0, #2
 800193e:	4240      	negs	r0, r0
 8001940:	e7cb      	b.n	80018da <__gedf2+0x52>
 8001942:	45c4      	cmp	ip, r8
 8001944:	d8c5      	bhi.n	80018d2 <__gedf2+0x4a>
 8001946:	2000      	movs	r0, #0
 8001948:	45c4      	cmp	ip, r8
 800194a:	d2c6      	bcs.n	80018da <__gedf2+0x52>
 800194c:	e7ed      	b.n	800192a <__gedf2+0xa2>
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	000007ff 	.word	0x000007ff

08001954 <__ledf2>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	4647      	mov	r7, r8
 8001958:	46ce      	mov	lr, r9
 800195a:	0004      	movs	r4, r0
 800195c:	0018      	movs	r0, r3
 800195e:	0016      	movs	r6, r2
 8001960:	031b      	lsls	r3, r3, #12
 8001962:	0b1b      	lsrs	r3, r3, #12
 8001964:	4d2c      	ldr	r5, [pc, #176]	; (8001a18 <__ledf2+0xc4>)
 8001966:	004a      	lsls	r2, r1, #1
 8001968:	4699      	mov	r9, r3
 800196a:	b580      	push	{r7, lr}
 800196c:	0043      	lsls	r3, r0, #1
 800196e:	030f      	lsls	r7, r1, #12
 8001970:	46a4      	mov	ip, r4
 8001972:	46b0      	mov	r8, r6
 8001974:	0b3f      	lsrs	r7, r7, #12
 8001976:	0d52      	lsrs	r2, r2, #21
 8001978:	0fc9      	lsrs	r1, r1, #31
 800197a:	0d5b      	lsrs	r3, r3, #21
 800197c:	0fc0      	lsrs	r0, r0, #31
 800197e:	42aa      	cmp	r2, r5
 8001980:	d00d      	beq.n	800199e <__ledf2+0x4a>
 8001982:	42ab      	cmp	r3, r5
 8001984:	d010      	beq.n	80019a8 <__ledf2+0x54>
 8001986:	2a00      	cmp	r2, #0
 8001988:	d127      	bne.n	80019da <__ledf2+0x86>
 800198a:	433c      	orrs	r4, r7
 800198c:	2b00      	cmp	r3, #0
 800198e:	d111      	bne.n	80019b4 <__ledf2+0x60>
 8001990:	464d      	mov	r5, r9
 8001992:	432e      	orrs	r6, r5
 8001994:	d10e      	bne.n	80019b4 <__ledf2+0x60>
 8001996:	2000      	movs	r0, #0
 8001998:	2c00      	cmp	r4, #0
 800199a:	d015      	beq.n	80019c8 <__ledf2+0x74>
 800199c:	e00e      	b.n	80019bc <__ledf2+0x68>
 800199e:	003d      	movs	r5, r7
 80019a0:	4325      	orrs	r5, r4
 80019a2:	d110      	bne.n	80019c6 <__ledf2+0x72>
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d118      	bne.n	80019da <__ledf2+0x86>
 80019a8:	464d      	mov	r5, r9
 80019aa:	432e      	orrs	r6, r5
 80019ac:	d10b      	bne.n	80019c6 <__ledf2+0x72>
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	d102      	bne.n	80019b8 <__ledf2+0x64>
 80019b2:	433c      	orrs	r4, r7
 80019b4:	2c00      	cmp	r4, #0
 80019b6:	d00b      	beq.n	80019d0 <__ledf2+0x7c>
 80019b8:	4281      	cmp	r1, r0
 80019ba:	d014      	beq.n	80019e6 <__ledf2+0x92>
 80019bc:	2002      	movs	r0, #2
 80019be:	3901      	subs	r1, #1
 80019c0:	4008      	ands	r0, r1
 80019c2:	3801      	subs	r0, #1
 80019c4:	e000      	b.n	80019c8 <__ledf2+0x74>
 80019c6:	2002      	movs	r0, #2
 80019c8:	bcc0      	pop	{r6, r7}
 80019ca:	46b9      	mov	r9, r7
 80019cc:	46b0      	mov	r8, r6
 80019ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d1f9      	bne.n	80019c8 <__ledf2+0x74>
 80019d4:	2001      	movs	r0, #1
 80019d6:	4240      	negs	r0, r0
 80019d8:	e7f6      	b.n	80019c8 <__ledf2+0x74>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ec      	bne.n	80019b8 <__ledf2+0x64>
 80019de:	464c      	mov	r4, r9
 80019e0:	4326      	orrs	r6, r4
 80019e2:	d1e9      	bne.n	80019b8 <__ledf2+0x64>
 80019e4:	e7ea      	b.n	80019bc <__ledf2+0x68>
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dd04      	ble.n	80019f4 <__ledf2+0xa0>
 80019ea:	4243      	negs	r3, r0
 80019ec:	4158      	adcs	r0, r3
 80019ee:	0040      	lsls	r0, r0, #1
 80019f0:	3801      	subs	r0, #1
 80019f2:	e7e9      	b.n	80019c8 <__ledf2+0x74>
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbeb      	blt.n	80019d0 <__ledf2+0x7c>
 80019f8:	454f      	cmp	r7, r9
 80019fa:	d8df      	bhi.n	80019bc <__ledf2+0x68>
 80019fc:	d006      	beq.n	8001a0c <__ledf2+0xb8>
 80019fe:	2000      	movs	r0, #0
 8001a00:	454f      	cmp	r7, r9
 8001a02:	d2e1      	bcs.n	80019c8 <__ledf2+0x74>
 8001a04:	2900      	cmp	r1, #0
 8001a06:	d0e5      	beq.n	80019d4 <__ledf2+0x80>
 8001a08:	0008      	movs	r0, r1
 8001a0a:	e7dd      	b.n	80019c8 <__ledf2+0x74>
 8001a0c:	45c4      	cmp	ip, r8
 8001a0e:	d8d5      	bhi.n	80019bc <__ledf2+0x68>
 8001a10:	2000      	movs	r0, #0
 8001a12:	45c4      	cmp	ip, r8
 8001a14:	d2d8      	bcs.n	80019c8 <__ledf2+0x74>
 8001a16:	e7f5      	b.n	8001a04 <__ledf2+0xb0>
 8001a18:	000007ff 	.word	0x000007ff

08001a1c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 /*raw_pot = HAL_ADC_GetValue(hadc);*/
 static uint8_t channel = 0;
 static uint32_t avg_pot;

 switch (channel){
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x98>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d024      	beq.n	8001a76 <HAL_ADC_ConvCpltCallback+0x5a>
 8001a2c:	dc2b      	bgt.n	8001a86 <HAL_ADC_ConvCpltCallback+0x6a>
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_ADC_ConvCpltCallback+0x1c>
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d017      	beq.n	8001a66 <HAL_ADC_ConvCpltCallback+0x4a>
	 break;
 case 2: //Vrefint channel
	 raw_volt = HAL_ADC_GetValue(hadc);
	 break;
 default:
	 break;
 8001a36:	e026      	b.n	8001a86 <HAL_ADC_ConvCpltCallback+0x6a>
	 raw_pot = avg_pot >> ADC_Q;
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0bda      	lsrs	r2, r3, #15
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_ADC_ConvCpltCallback+0xa0>)
 8001a40:	601a      	str	r2, [r3, #0]
	  avg_pot -= raw_pot;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <HAL_ADC_ConvCpltCallback+0xa0>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1a9a      	subs	r2, r3, r2
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001a4e:	601a      	str	r2, [r3, #0]
	  avg_pot += HAL_ADC_GetValue(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 fe92 	bl	800277c <HAL_ADC_GetValue>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	18d2      	adds	r2, r2, r3
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001a62:	601a      	str	r2, [r3, #0]
	 break;
 8001a64:	e010      	b.n	8001a88 <HAL_ADC_ConvCpltCallback+0x6c>
	 raw_temp = HAL_ADC_GetValue(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 fe87 	bl	800277c <HAL_ADC_GetValue>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001a72:	601a      	str	r2, [r3, #0]
	 break;
 8001a74:	e008      	b.n	8001a88 <HAL_ADC_ConvCpltCallback+0x6c>
	 raw_volt = HAL_ADC_GetValue(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 fe7f 	bl	800277c <HAL_ADC_GetValue>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001a82:	601a      	str	r2, [r3, #0]
	 break;
 8001a84:	e000      	b.n	8001a88 <HAL_ADC_ConvCpltCallback+0x6c>
	 break;
 8001a86:	46c0      	nop			; (mov r8, r8)
 }

 if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS)) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2208      	movs	r2, #8
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d103      	bne.n	8001a9e <HAL_ADC_ConvCpltCallback+0x82>
	 channel = 0;
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 }

 else {
	 channel++;
 }
}
 8001a9c:	e005      	b.n	8001aaa <HAL_ADC_ConvCpltCallback+0x8e>
	 channel++;
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x98>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x98>)
 8001aa8:	701a      	strb	r2, [r3, #0]
}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	200000f8 	.word	0x200000f8
 8001ab8:	200000fc 	.word	0x200000fc
 8001abc:	200000ec 	.word	0x200000ec
 8001ac0:	200000f0 	.word	0x200000f0
 8001ac4:	200000f4 	.word	0x200000f4

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ace:	f000 fc3f 	bl	8002350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad2:	f000 f8e5 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad6:	f000 f9d7 	bl	8001e88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ada:	f000 f9a5 	bl	8001e28 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001ade:	f000 f92f 	bl	8001d40 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  sct_init();
 8001ae2:	f000 fa78 	bl	8001fd6 <sct_init>
  HAL_ADCEx_Calibration_Start(&hadc);
 8001ae6:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <main+0x1a0>)
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f001 f895 	bl	8002c18 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc);
 8001aee:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <main+0x1a0>)
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 fdd1 	bl	8002698 <HAL_ADC_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	static enum {SHOW_POT, SHOW_VOLT, SHOW_TEMP} state = SHOW_POT;
	static uint32_t delay;
	if(state == SHOW_POT){
 8001af6:	4b5d      	ldr	r3, [pc, #372]	; (8001c6c <main+0x1a4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d136      	bne.n	8001b6c <main+0xa4>
		sct_value(raw_pot*500.9/4096, raw_pot*8.5/4096);
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <main+0x1a8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7ff fdfc 	bl	8001700 <__aeabi_ui2d>
 8001b08:	4a5a      	ldr	r2, [pc, #360]	; (8001c74 <main+0x1ac>)
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <main+0x1b0>)
 8001b0c:	f7fe ff7e 	bl	8000a0c <__aeabi_dmul>
 8001b10:	0002      	movs	r2, r0
 8001b12:	000b      	movs	r3, r1
 8001b14:	0010      	movs	r0, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4b58      	ldr	r3, [pc, #352]	; (8001c7c <main+0x1b4>)
 8001b1c:	f7fe fc88 	bl	8000430 <__aeabi_ddiv>
 8001b20:	0002      	movs	r2, r0
 8001b22:	000b      	movs	r3, r1
 8001b24:	0010      	movs	r0, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	f7fe fc64 	bl	80003f4 <__aeabi_d2uiz>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	b29c      	uxth	r4, r3
 8001b30:	4b4f      	ldr	r3, [pc, #316]	; (8001c70 <main+0x1a8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff fde3 	bl	8001700 <__aeabi_ui2d>
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <main+0x1b8>)
 8001b3e:	f7fe ff65 	bl	8000a0c <__aeabi_dmul>
 8001b42:	0002      	movs	r2, r0
 8001b44:	000b      	movs	r3, r1
 8001b46:	0010      	movs	r0, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <main+0x1b4>)
 8001b4e:	f7fe fc6f 	bl	8000430 <__aeabi_ddiv>
 8001b52:	0002      	movs	r2, r0
 8001b54:	000b      	movs	r3, r1
 8001b56:	0010      	movs	r0, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	f7fe fc4b 	bl	80003f4 <__aeabi_d2uiz>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	0019      	movs	r1, r3
 8001b64:	0020      	movs	r0, r4
 8001b66:	f000 fa87 	bl	8002078 <sct_value>
 8001b6a:	e04d      	b.n	8001c08 <main+0x140>
	}else if(state == SHOW_TEMP){
 8001b6c:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <main+0x1a4>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d127      	bne.n	8001bc4 <main+0xfc>
		int32_t temperature = (raw_temp - (int32_t)(*TEMP30_CAL_ADDR));
 8001b74:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <main+0x1bc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a43      	ldr	r2, [pc, #268]	; (8001c88 <main+0x1c0>)
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	603b      	str	r3, [r7, #0]
	    temperature = temperature * (int32_t)(110 - 30);
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	0013      	movs	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	189b      	adds	r3, r3, r2
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	603b      	str	r3, [r7, #0]
		temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
 8001b8c:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <main+0x1c4>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	001a      	movs	r2, r3
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <main+0x1c0>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	0019      	movs	r1, r3
 8001b9a:	6838      	ldr	r0, [r7, #0]
 8001b9c:	f7fe fb3e 	bl	800021c <__divsi3>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	603b      	str	r3, [r7, #0]
		temperature = temperature + 30;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	331e      	adds	r3, #30
 8001ba8:	603b      	str	r3, [r7, #0]
		sct_value(temperature, raw_pot*9/4096);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b298      	uxth	r0, r3
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <main+0x1a8>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	189b      	adds	r3, r3, r2
 8001bb8:	0b1b      	lsrs	r3, r3, #12
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	f000 fa5b 	bl	8002078 <sct_value>
 8001bc2:	e021      	b.n	8001c08 <main+0x140>
	}else if(state == SHOW_VOLT){
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <main+0x1a4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d11d      	bne.n	8001c08 <main+0x140>
		uint32_t voltage = 330 * (*VREFINT_CAL_ADDR) / raw_volt;
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <main+0x1c8>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	189b      	adds	r3, r3, r2
 8001bd8:	015a      	lsls	r2, r3, #5
 8001bda:	189b      	adds	r3, r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	001a      	movs	r2, r3
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <main+0x1cc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0019      	movs	r1, r3
 8001be6:	0010      	movs	r0, r2
 8001be8:	f7fe fa8e 	bl	8000108 <__udivsi3>
 8001bec:	0003      	movs	r3, r0
 8001bee:	607b      	str	r3, [r7, #4]
		sct_value(voltage, raw_pot*9/4096);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	b298      	uxth	r0, r3
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <main+0x1a8>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	189b      	adds	r3, r3, r2
 8001bfe:	0b1b      	lsrs	r3, r3, #12
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	0019      	movs	r1, r3
 8001c04:	f000 fa38 	bl	8002078 <sct_value>
	}

	if(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == 0){
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <main+0x1d0>)
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f001 faf9 	bl	8003204 <HAL_GPIO_ReadPin>
 8001c12:	1e03      	subs	r3, r0, #0
 8001c14:	d108      	bne.n	8001c28 <main+0x160>
		state=SHOW_VOLT;
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <main+0x1a4>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
		delay=HAL_GetTick();
 8001c1c:	f000 fbf2 	bl	8002404 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <main+0x1d4>)
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e00e      	b.n	8001c46 <main+0x17e>
	}
	else if(HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin) == 0){
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <main+0x1d0>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f001 fae9 	bl	8003204 <HAL_GPIO_ReadPin>
 8001c32:	1e03      	subs	r3, r0, #0
 8001c34:	d107      	bne.n	8001c46 <main+0x17e>
		state=SHOW_TEMP;
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <main+0x1a4>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	701a      	strb	r2, [r3, #0]
		delay=HAL_GetTick();
 8001c3c:	f000 fbe2 	bl	8002404 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <main+0x1d4>)
 8001c44:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GetTick()>= delay + 1000){
 8001c46:	f000 fbdd 	bl	8002404 <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <main+0x1d4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	21fa      	movs	r1, #250	; 0xfa
 8001c52:	0089      	lsls	r1, r1, #2
 8001c54:	468c      	mov	ip, r1
 8001c56:	4463      	add	r3, ip
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d200      	bcs.n	8001c5e <main+0x196>
 8001c5c:	e74b      	b.n	8001af6 <main+0x2e>
		state=SHOW_POT;
 8001c5e:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <main+0x1a4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
  {
 8001c64:	e747      	b.n	8001af6 <main+0x2e>
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	20000028 	.word	0x20000028
 8001c6c:	20000100 	.word	0x20000100
 8001c70:	200000ec 	.word	0x200000ec
 8001c74:	66666666 	.word	0x66666666
 8001c78:	407f4e66 	.word	0x407f4e66
 8001c7c:	40b00000 	.word	0x40b00000
 8001c80:	40210000 	.word	0x40210000
 8001c84:	200000f0 	.word	0x200000f0
 8001c88:	1ffff7b8 	.word	0x1ffff7b8
 8001c8c:	1ffff7c2 	.word	0x1ffff7c2
 8001c90:	1ffff7ba 	.word	0x1ffff7ba
 8001c94:	200000f4 	.word	0x200000f4
 8001c98:	48000800 	.word	0x48000800
 8001c9c:	20000104 	.word	0x20000104

08001ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b091      	sub	sp, #68	; 0x44
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	2410      	movs	r4, #16
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	0018      	movs	r0, r3
 8001cac:	2330      	movs	r3, #48	; 0x30
 8001cae:	001a      	movs	r2, r3
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	f002 faa1 	bl	80041f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb6:	003b      	movs	r3, r7
 8001cb8:	0018      	movs	r0, r3
 8001cba:	2310      	movs	r3, #16
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f002 fa9a 	bl	80041f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001cc4:	0021      	movs	r1, r4
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2212      	movs	r2, #18
 8001cca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2201      	movs	r2, #1
 8001cd0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2210      	movs	r2, #16
 8001cdc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2200      	movs	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	22a0      	movs	r2, #160	; 0xa0
 8001cf4:	0392      	lsls	r2, r2, #14
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	0018      	movs	r0, r3
 8001d02:	f001 fab9 	bl	8003278 <HAL_RCC_OscConfig>
 8001d06:	1e03      	subs	r3, r0, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001d0a:	f000 f95f 	bl	8001fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0e:	003b      	movs	r3, r7
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d14:	003b      	movs	r3, r7
 8001d16:	2202      	movs	r2, #2
 8001d18:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d1a:	003b      	movs	r3, r7
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d20:	003b      	movs	r3, r7
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d26:	003b      	movs	r3, r7
 8001d28:	2101      	movs	r1, #1
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f001 fdbe 	bl	80038ac <HAL_RCC_ClockConfig>
 8001d30:	1e03      	subs	r3, r0, #0
 8001d32:	d001      	beq.n	8001d38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d34:	f000 f94a 	bl	8001fcc <Error_Handler>
  }
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b011      	add	sp, #68	; 0x44
 8001d3e:	bd90      	pop	{r4, r7, pc}

08001d40 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	0018      	movs	r0, r3
 8001d4a:	230c      	movs	r3, #12
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f002 fa52 	bl	80041f8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001d54:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d56:	4a33      	ldr	r2, [pc, #204]	; (8001e24 <MX_ADC_Init+0xe4>)
 8001d58:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d5a:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d60:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d66:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d74:	2204      	movs	r2, #4
 8001d76:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d92:	22c2      	movs	r2, #194	; 0xc2
 8001d94:	32ff      	adds	r2, #255	; 0xff
 8001d96:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001da0:	2224      	movs	r2, #36	; 0x24
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f000 fb32 	bl	8002418 <HAL_ADC_Init>
 8001db4:	1e03      	subs	r3, r0, #0
 8001db6:	d001      	beq.n	8001dbc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001db8:	f000 f908 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	0152      	lsls	r2, r2, #5
 8001dc8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2207      	movs	r2, #7
 8001dce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001dd0:	1d3a      	adds	r2, r7, #4
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 fda4 	bl	8002924 <HAL_ADC_ConfigChannel>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d001      	beq.n	8001de4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001de0:	f000 f8f4 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2210      	movs	r2, #16
 8001de8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001dea:	1d3a      	adds	r2, r7, #4
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001dee:	0011      	movs	r1, r2
 8001df0:	0018      	movs	r0, r3
 8001df2:	f000 fd97 	bl	8002924 <HAL_ADC_ConfigChannel>
 8001df6:	1e03      	subs	r3, r0, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001dfa:	f000 f8e7 	bl	8001fcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2211      	movs	r2, #17
 8001e02:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e04:	1d3a      	adds	r2, r7, #4
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_ADC_Init+0xe0>)
 8001e08:	0011      	movs	r1, r2
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 fd8a 	bl	8002924 <HAL_ADC_ConfigChannel>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8001e14:	f000 f8da 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000028 	.word	0x20000028
 8001e24:	40012400 	.word	0x40012400

08001e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <MX_USART2_UART_Init+0x5c>)
 8001e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e34:	2296      	movs	r2, #150	; 0x96
 8001e36:	0212      	lsls	r2, r2, #8
 8001e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <MX_USART2_UART_Init+0x58>)
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f001 fe6f 	bl	8003b50 <HAL_UART_Init>
 8001e72:	1e03      	subs	r3, r0, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e76:	f000 f8a9 	bl	8001fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000068 	.word	0x20000068
 8001e84:	40004400 	.word	0x40004400

08001e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b08b      	sub	sp, #44	; 0x2c
 8001e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8e:	2414      	movs	r4, #20
 8001e90:	193b      	adds	r3, r7, r4
 8001e92:	0018      	movs	r0, r3
 8001e94:	2314      	movs	r3, #20
 8001e96:	001a      	movs	r2, r3
 8001e98:	2100      	movs	r1, #0
 8001e9a:	f002 f9ad 	bl	80041f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	4b48      	ldr	r3, [pc, #288]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0309      	lsls	r1, r1, #12
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	615a      	str	r2, [r3, #20]
 8001eac:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	031b      	lsls	r3, r3, #12
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	4b40      	ldr	r3, [pc, #256]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	03c9      	lsls	r1, r1, #15
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	03db      	lsls	r3, r3, #15
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0289      	lsls	r1, r1, #10
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	615a      	str	r2, [r3, #20]
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	029b      	lsls	r3, r3, #10
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001ef8:	2180      	movs	r1, #128	; 0x80
 8001efa:	02c9      	lsls	r1, r1, #11
 8001efc:	430a      	orrs	r2, r1
 8001efe:	615a      	str	r2, [r3, #20]
 8001f00:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <MX_GPIO_Init+0x138>)
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	02db      	lsls	r3, r3, #11
 8001f08:	4013      	ands	r3, r2
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f0e:	2390      	movs	r3, #144	; 0x90
 8001f10:	05db      	lsls	r3, r3, #23
 8001f12:	2200      	movs	r2, #0
 8001f14:	2120      	movs	r1, #32
 8001f16:	0018      	movs	r0, r3
 8001f18:	f001 f991 	bl	800323e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 8001f1c:	2387      	movs	r3, #135	; 0x87
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4828      	ldr	r0, [pc, #160]	; (8001fc4 <MX_GPIO_Init+0x13c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	0019      	movs	r1, r3
 8001f26:	f001 f98a 	bl	800323e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f2a:	193b      	adds	r3, r7, r4
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	0192      	lsls	r2, r2, #6
 8001f30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	2284      	movs	r2, #132	; 0x84
 8001f36:	0392      	lsls	r2, r2, #14
 8001f38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	193b      	adds	r3, r7, r4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	4a21      	ldr	r2, [pc, #132]	; (8001fc8 <MX_GPIO_Init+0x140>)
 8001f44:	0019      	movs	r1, r3
 8001f46:	0010      	movs	r0, r2
 8001f48:	f000 ffec 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 8001f4c:	193b      	adds	r3, r7, r4
 8001f4e:	2203      	movs	r2, #3
 8001f50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	193b      	adds	r3, r7, r4
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	193b      	adds	r3, r7, r4
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <MX_GPIO_Init+0x140>)
 8001f62:	0019      	movs	r1, r3
 8001f64:	0010      	movs	r0, r2
 8001f66:	f000 ffdd 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f6a:	193b      	adds	r3, r7, r4
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	193b      	adds	r3, r7, r4
 8001f72:	2201      	movs	r2, #1
 8001f74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	193b      	adds	r3, r7, r4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	193b      	adds	r3, r7, r4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f82:	193a      	adds	r2, r7, r4
 8001f84:	2390      	movs	r3, #144	; 0x90
 8001f86:	05db      	lsls	r3, r3, #23
 8001f88:	0011      	movs	r1, r2
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f000 ffca 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 8001f90:	0021      	movs	r1, r4
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	2287      	movs	r2, #135	; 0x87
 8001f96:	00d2      	lsls	r2, r2, #3
 8001f98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	187b      	adds	r3, r7, r1
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <MX_GPIO_Init+0x13c>)
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	0010      	movs	r0, r2
 8001fb4:	f000 ffb6 	bl	8002f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b00b      	add	sp, #44	; 0x2c
 8001fbe:	bd90      	pop	{r4, r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	48000400 	.word	0x48000400
 8001fc8:	48000800 	.word	0x48000800

08001fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
}
 8001fd2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <Error_Handler+0x8>

08001fd6 <sct_init>:
#include "sct.h"

// Function definitions
// Definice pinů pro SDI, CLK, /LA

void sct_init(void){
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	af00      	add	r7, sp, #0
	sct_led(0);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f804 	bl	8001fe8 <sct_led>
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <sct_led>:

void sct_led(uint32_t value){
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < 32; i++){
 8001ff0:	230f      	movs	r3, #15
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	e01f      	b.n	800203a <sct_led+0x52>
		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, (value>>i)%2);
 8001ffa:	240f      	movs	r4, #15
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	40da      	lsrs	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	4819      	ldr	r0, [pc, #100]	; (8002074 <sct_led+0x8c>)
 8002010:	001a      	movs	r2, r3
 8002012:	2110      	movs	r1, #16
 8002014:	f001 f913 	bl	800323e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <sct_led+0x8c>)
 800201a:	2201      	movs	r2, #1
 800201c:	2108      	movs	r1, #8
 800201e:	0018      	movs	r0, r3
 8002020:	f001 f90d 	bl	800323e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <sct_led+0x8c>)
 8002026:	2200      	movs	r2, #0
 8002028:	2108      	movs	r1, #8
 800202a:	0018      	movs	r0, r3
 800202c:	f001 f907 	bl	800323e <HAL_GPIO_WritePin>
	for (uint8_t i=0; i < 32; i++){
 8002030:	193b      	adds	r3, r7, r4
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	193b      	adds	r3, r7, r4
 8002036:	3201      	adds	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	230f      	movs	r3, #15
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b1f      	cmp	r3, #31
 8002042:	d9da      	bls.n	8001ffa <sct_led+0x12>
	}

	//Latch the value from the shift register to the output latch register
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <sct_led+0x8c>)
 8002046:	2201      	movs	r2, #1
 8002048:	2120      	movs	r1, #32
 800204a:	0018      	movs	r0, r3
 800204c:	f001 f8f7 	bl	800323e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <sct_led+0x8c>)
 8002052:	2200      	movs	r2, #0
 8002054:	2120      	movs	r1, #32
 8002056:	0018      	movs	r0, r3
 8002058:	f001 f8f1 	bl	800323e <HAL_GPIO_WritePin>

	// Enable outputs
	HAL_GPIO_WritePin(SCT_NOE_GPIO_Port, SCT_NOE_Pin, 0);
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4804      	ldr	r0, [pc, #16]	; (8002074 <sct_led+0x8c>)
 8002062:	2200      	movs	r2, #0
 8002064:	0019      	movs	r1, r3
 8002066:	f001 f8ea 	bl	800323e <HAL_GPIO_WritePin>
}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b005      	add	sp, #20
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	48000400 	.word	0x48000400

08002078 <sct_value>:

void sct_value(uint16_t value,uint8_t led){
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	0002      	movs	r2, r0
 8002080:	1dbb      	adds	r3, r7, #6
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	1d7b      	adds	r3, r7, #5
 8002086:	1c0a      	adds	r2, r1, #0
 8002088:	701a      	strb	r2, [r3, #0]
		0b0000111111110000 << 16,
		0b0000111111110000 << 16,
		},
	};

	uint32_t reg =0;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]

	reg |= reg_values[0][value / 100 % 10];
 800208e:	1dbb      	adds	r3, r7, #6
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	2164      	movs	r1, #100	; 0x64
 8002094:	0018      	movs	r0, r3
 8002096:	f7fe f837 	bl	8000108 <__udivsi3>
 800209a:	0003      	movs	r3, r0
 800209c:	b29b      	uxth	r3, r3
 800209e:	210a      	movs	r1, #10
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7fe f8b7 	bl	8000214 <__aeabi_uidivmod>
 80020a6:	000b      	movs	r3, r1
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	001a      	movs	r2, r3
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <sct_value+0xb0>)
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	58d3      	ldr	r3, [r2, r3]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 80020b8:	1dbb      	adds	r3, r7, #6
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	210a      	movs	r1, #10
 80020be:	0018      	movs	r0, r3
 80020c0:	f7fe f822 	bl	8000108 <__udivsi3>
 80020c4:	0003      	movs	r3, r0
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	210a      	movs	r1, #10
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7fe f8a2 	bl	8000214 <__aeabi_uidivmod>
 80020d0:	000b      	movs	r3, r1
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	001a      	movs	r2, r3
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <sct_value+0xb0>)
 80020d8:	320a      	adds	r2, #10
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	58d3      	ldr	r3, [r2, r3]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value / 1 % 10];
 80020e4:	1dbb      	adds	r3, r7, #6
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	210a      	movs	r1, #10
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7fe f892 	bl	8000214 <__aeabi_uidivmod>
 80020f0:	000b      	movs	r3, r1
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	001a      	movs	r2, r3
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <sct_value+0xb0>)
 80020f8:	3214      	adds	r2, #20
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	58d3      	ldr	r3, [r2, r3]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[3][led];
 8002104:	1d7b      	adds	r3, r7, #5
 8002106:	781a      	ldrb	r2, [r3, #0]
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <sct_value+0xb0>)
 800210a:	321e      	adds	r2, #30
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	58d3      	ldr	r3, [r2, r3]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

	sct_led(reg);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff ff65 	bl	8001fe8 <sct_led>
}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	080042c8 	.word	0x080042c8

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x44>)
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_MspInit+0x44>)
 8002138:	2101      	movs	r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	619a      	str	r2, [r3, #24]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x44>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2201      	movs	r2, #1
 8002144:	4013      	ands	r3, r2
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_MspInit+0x44>)
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_MspInit+0x44>)
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	0549      	lsls	r1, r1, #21
 8002154:	430a      	orrs	r2, r1
 8002156:	61da      	str	r2, [r3, #28]
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_MspInit+0x44>)
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	055b      	lsls	r3, r3, #21
 8002160:	4013      	ands	r3, r2
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b08b      	sub	sp, #44	; 0x2c
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	2414      	movs	r4, #20
 800217e:	193b      	adds	r3, r7, r4
 8002180:	0018      	movs	r0, r3
 8002182:	2314      	movs	r3, #20
 8002184:	001a      	movs	r2, r3
 8002186:	2100      	movs	r1, #0
 8002188:	f002 f836 	bl	80041f8 <memset>
  if(hadc->Instance==ADC1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_ADC_MspInit+0x94>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d133      	bne.n	80021fe <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_ADC_MspInit+0x98>)
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_ADC_MspInit+0x98>)
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	0089      	lsls	r1, r1, #2
 80021a0:	430a      	orrs	r2, r1
 80021a2:	619a      	str	r2, [r3, #24]
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_ADC_MspInit+0x98>)
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_ADC_MspInit+0x98>)
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_ADC_MspInit+0x98>)
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	0289      	lsls	r1, r1, #10
 80021bc:	430a      	orrs	r2, r1
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_ADC_MspInit+0x98>)
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	029b      	lsls	r3, r3, #10
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	2203      	movs	r2, #3
 80021d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	193a      	adds	r2, r7, r4
 80021e2:	2390      	movs	r3, #144	; 0x90
 80021e4:	05db      	lsls	r3, r3, #23
 80021e6:	0011      	movs	r1, r2
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fe9b 	bl	8002f24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	200c      	movs	r0, #12
 80021f4:	f000 fe64 	bl	8002ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80021f8:	200c      	movs	r0, #12
 80021fa:	f000 fe76 	bl	8002eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b00b      	add	sp, #44	; 0x2c
 8002204:	bd90      	pop	{r4, r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	40012400 	.word	0x40012400
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b08b      	sub	sp, #44	; 0x2c
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	2414      	movs	r4, #20
 800221a:	193b      	adds	r3, r7, r4
 800221c:	0018      	movs	r0, r3
 800221e:	2314      	movs	r3, #20
 8002220:	001a      	movs	r2, r3
 8002222:	2100      	movs	r1, #0
 8002224:	f001 ffe8 	bl	80041f8 <memset>
  if(huart->Instance==USART2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_UART_MspInit+0x90>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d132      	bne.n	8002298 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002232:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <HAL_UART_MspInit+0x94>)
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_UART_MspInit+0x94>)
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0289      	lsls	r1, r1, #10
 800223c:	430a      	orrs	r2, r1
 800223e:	61da      	str	r2, [r3, #28]
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_UART_MspInit+0x94>)
 8002242:	69da      	ldr	r2, [r3, #28]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <HAL_UART_MspInit+0x94>)
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_UART_MspInit+0x94>)
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0289      	lsls	r1, r1, #10
 8002258:	430a      	orrs	r2, r1
 800225a:	615a      	str	r2, [r3, #20]
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <HAL_UART_MspInit+0x94>)
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800226a:	0021      	movs	r1, r4
 800226c:	187b      	adds	r3, r7, r1
 800226e:	220c      	movs	r2, #12
 8002270:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	187b      	adds	r3, r7, r1
 8002274:	2202      	movs	r2, #2
 8002276:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	187b      	adds	r3, r7, r1
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	187b      	adds	r3, r7, r1
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002284:	187b      	adds	r3, r7, r1
 8002286:	2201      	movs	r2, #1
 8002288:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	187a      	adds	r2, r7, r1
 800228c:	2390      	movs	r3, #144	; 0x90
 800228e:	05db      	lsls	r3, r3, #23
 8002290:	0011      	movs	r1, r2
 8002292:	0018      	movs	r0, r3
 8002294:	f000 fe46 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b00b      	add	sp, #44	; 0x2c
 800229e:	bd90      	pop	{r4, r7, pc}
 80022a0:	40004400 	.word	0x40004400
 80022a4:	40021000 	.word	0x40021000

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <NMI_Handler+0x4>

080022ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <HardFault_Handler+0x4>

080022b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022cc:	f000 f888 	bl	80023e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <ADC1_IRQHandler+0x14>)
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 fa58 	bl	8002794 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	20000028 	.word	0x20000028

080022f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <LoopForever+0x6>)
  ldr r1, =_edata
 8002302:	490e      	ldr	r1, [pc, #56]	; (800233c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002304:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <LoopForever+0xe>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002308:	e002      	b.n	8002310 <LoopCopyDataInit>

0800230a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800230c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230e:	3304      	adds	r3, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002314:	d3f9      	bcc.n	800230a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002318:	4c0b      	ldr	r4, [pc, #44]	; (8002348 <LoopForever+0x16>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800231c:	e001      	b.n	8002322 <LoopFillZerobss>

0800231e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002320:	3204      	adds	r2, #4

08002322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002324:	d3fb      	bcc.n	800231e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002326:	f7ff ffe3 	bl	80022f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800232a:	f001 ff6d 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800232e:	f7ff fbcb 	bl	8001ac8 <main>

08002332 <LoopForever>:

LoopForever:
    b LoopForever
 8002332:	e7fe      	b.n	8002332 <LoopForever>
  ldr   r0, =_estack
 8002334:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800233c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002340:	08004388 	.word	0x08004388
  ldr r2, =_sbss
 8002344:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002348:	2000010c 	.word	0x2000010c

0800234c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800234c:	e7fe      	b.n	800234c <DMA1_Channel1_IRQHandler>
	...

08002350 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_Init+0x24>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_Init+0x24>)
 800235a:	2110      	movs	r1, #16
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002360:	2000      	movs	r0, #0
 8002362:	f000 f809 	bl	8002378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002366:	f7ff fee1 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	40022000 	.word	0x40022000

08002378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_InitTick+0x5c>)
 8002382:	681c      	ldr	r4, [r3, #0]
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_InitTick+0x60>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	0019      	movs	r1, r3
 800238a:	23fa      	movs	r3, #250	; 0xfa
 800238c:	0098      	lsls	r0, r3, #2
 800238e:	f7fd febb 	bl	8000108 <__udivsi3>
 8002392:	0003      	movs	r3, r0
 8002394:	0019      	movs	r1, r3
 8002396:	0020      	movs	r0, r4
 8002398:	f7fd feb6 	bl	8000108 <__udivsi3>
 800239c:	0003      	movs	r3, r0
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fdb3 	bl	8002f0a <HAL_SYSTICK_Config>
 80023a4:	1e03      	subs	r3, r0, #0
 80023a6:	d001      	beq.n	80023ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e00f      	b.n	80023cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d80b      	bhi.n	80023ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	2301      	movs	r3, #1
 80023b6:	425b      	negs	r3, r3
 80023b8:	2200      	movs	r2, #0
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 fd80 	bl	8002ec0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_InitTick+0x64>)
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b003      	add	sp, #12
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000008 	.word	0x20000008
 80023dc:	20000004 	.word	0x20000004

080023e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_IncTick+0x1c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	001a      	movs	r2, r3
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_IncTick+0x20>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	18d2      	adds	r2, r2, r3
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <HAL_IncTick+0x20>)
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	20000008 	.word	0x20000008
 8002400:	20000108 	.word	0x20000108

08002404 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  return uwTick;
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <HAL_GetTick+0x10>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	20000108 	.word	0x20000108

08002418 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	230f      	movs	r3, #15
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e125      	b.n	8002682 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2234      	movs	r2, #52	; 0x34
 8002448:	2100      	movs	r1, #0
 800244a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0018      	movs	r0, r3
 8002450:	f7ff fe90 	bl	8002174 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	2210      	movs	r2, #16
 800245a:	4013      	ands	r3, r2
 800245c:	d000      	beq.n	8002460 <HAL_ADC_Init+0x48>
 800245e:	e103      	b.n	8002668 <HAL_ADC_Init+0x250>
 8002460:	230f      	movs	r3, #15
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d000      	beq.n	800246c <HAL_ADC_Init+0x54>
 800246a:	e0fd      	b.n	8002668 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002476:	d000      	beq.n	800247a <HAL_ADC_Init+0x62>
 8002478:	e0f6      	b.n	8002668 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	4a83      	ldr	r2, [pc, #524]	; (800268c <HAL_ADC_Init+0x274>)
 8002480:	4013      	ands	r3, r2
 8002482:	2202      	movs	r2, #2
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2203      	movs	r2, #3
 8002492:	4013      	ands	r3, r2
 8002494:	2b01      	cmp	r3, #1
 8002496:	d112      	bne.n	80024be <HAL_ADC_Init+0xa6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2201      	movs	r2, #1
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d009      	beq.n	80024ba <HAL_ADC_Init+0xa2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	401a      	ands	r2, r3
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Init+0xa6>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_ADC_Init+0xa8>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d116      	bne.n	80024f2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2218      	movs	r2, #24
 80024cc:	4393      	bics	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	0899      	lsrs	r1, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4964      	ldr	r1, [pc, #400]	; (8002690 <HAL_ADC_Init+0x278>)
 80024fe:	400a      	ands	r2, r1
 8002500:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7e1b      	ldrb	r3, [r3, #24]
 8002506:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e5b      	ldrb	r3, [r3, #25]
 800250c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800250e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7e9b      	ldrb	r3, [r3, #26]
 8002514:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002516:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	2b01      	cmp	r3, #1
 800251e:	d002      	beq.n	8002526 <HAL_ADC_Init+0x10e>
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	015b      	lsls	r3, r3, #5
 8002524:	e000      	b.n	8002528 <HAL_ADC_Init+0x110>
 8002526:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002528:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800252e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d101      	bne.n	800253c <HAL_ADC_Init+0x124>
 8002538:	2304      	movs	r3, #4
 800253a:	e000      	b.n	800253e <HAL_ADC_Init+0x126>
 800253c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800253e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2124      	movs	r1, #36	; 0x24
 8002544:	5c5b      	ldrb	r3, [r3, r1]
 8002546:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002548:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4313      	orrs	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7edb      	ldrb	r3, [r3, #27]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d115      	bne.n	8002584 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7e9b      	ldrb	r3, [r3, #26]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	0252      	lsls	r2, r2, #9
 8002566:	4313      	orrs	r3, r2
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	e00b      	b.n	8002584 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	2220      	movs	r2, #32
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	2201      	movs	r2, #1
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	23c2      	movs	r3, #194	; 0xc2
 800258a:	33ff      	adds	r3, #255	; 0xff
 800258c:	429a      	cmp	r2, r3
 800258e:	d007      	beq.n	80025a0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002598:	4313      	orrs	r3, r2
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4313      	orrs	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	055b      	lsls	r3, r3, #21
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d01b      	beq.n	80025f4 <HAL_ADC_Init+0x1dc>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d017      	beq.n	80025f4 <HAL_ADC_Init+0x1dc>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d013      	beq.n	80025f4 <HAL_ADC_Init+0x1dc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d00f      	beq.n	80025f4 <HAL_ADC_Init+0x1dc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d00b      	beq.n	80025f4 <HAL_ADC_Init+0x1dc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d007      	beq.n	80025f4 <HAL_ADC_Init+0x1dc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d003      	beq.n	80025f4 <HAL_ADC_Init+0x1dc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b07      	cmp	r3, #7
 80025f2:	d112      	bne.n	800261a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2107      	movs	r1, #7
 8002600:	438a      	bics	r2, r1
 8002602:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6959      	ldr	r1, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	2207      	movs	r2, #7
 8002610:	401a      	ands	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <HAL_ADC_Init+0x27c>)
 8002622:	4013      	ands	r3, r2
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	d10b      	bne.n	8002642 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	2203      	movs	r2, #3
 8002636:	4393      	bics	r3, r2
 8002638:	2201      	movs	r2, #1
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002640:	e01c      	b.n	800267c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	2212      	movs	r2, #18
 8002648:	4393      	bics	r3, r2
 800264a:	2210      	movs	r2, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	2201      	movs	r2, #1
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800265e:	230f      	movs	r3, #15
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002666:	e009      	b.n	800267c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	2210      	movs	r2, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002674:	230f      	movs	r3, #15
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800267c:	230f      	movs	r3, #15
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	781b      	ldrb	r3, [r3, #0]
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b004      	add	sp, #16
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	fffffefd 	.word	0xfffffefd
 8002690:	fffe0219 	.word	0xfffe0219
 8002694:	833fffe7 	.word	0x833fffe7

08002698 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a0:	230f      	movs	r3, #15
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2204      	movs	r2, #4
 80026b0:	4013      	ands	r3, r2
 80026b2:	d156      	bne.n	8002762 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2234      	movs	r2, #52	; 0x34
 80026b8:	5c9b      	ldrb	r3, [r3, r2]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_Start_IT+0x2a>
 80026be:	2302      	movs	r3, #2
 80026c0:	e056      	b.n	8002770 <HAL_ADC_Start_IT+0xd8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2234      	movs	r2, #52	; 0x34
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7e5b      	ldrb	r3, [r3, #25]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d007      	beq.n	80026e2 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80026d2:	230f      	movs	r3, #15
 80026d4:	18fc      	adds	r4, r7, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fa19 	bl	8002b10 <ADC_Enable>
 80026de:	0003      	movs	r3, r0
 80026e0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026e2:	230f      	movs	r3, #15
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d13e      	bne.n	800276a <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_ADC_Start_IT+0xe0>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	2280      	movs	r2, #128	; 0x80
 80026f6:	0052      	lsls	r2, r2, #1
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2234      	movs	r2, #52	; 0x34
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	221c      	movs	r2, #28
 8002712:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d110      	bne.n	800273e <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2104      	movs	r1, #4
 8002728:	438a      	bics	r2, r1
 800272a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2118      	movs	r1, #24
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
          break;
 800273c:	e008      	b.n	8002750 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	211c      	movs	r1, #28
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
          break;
 800274e:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2104      	movs	r1, #4
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	e003      	b.n	800276a <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002762:	230f      	movs	r3, #15
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2202      	movs	r2, #2
 8002768:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800276a:	230f      	movs	r3, #15
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	781b      	ldrb	r3, [r3, #0]
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b005      	add	sp, #20
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	fffff0fe 	.word	0xfffff0fe

0800277c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2204      	movs	r2, #4
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x24>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2204      	movs	r2, #4
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d00d      	beq.n	80027d4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2208      	movs	r2, #8
 80027c0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d14f      	bne.n	8002866 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2208      	movs	r2, #8
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d148      	bne.n	8002866 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	2210      	movs	r2, #16
 80027da:	4013      	ands	r3, r2
 80027dc:	d106      	bne.n	80027ec <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	0092      	lsls	r2, r2, #2
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4013      	ands	r3, r2
 80027f8:	d12d      	bne.n	8002856 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d129      	bne.n	8002856 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2208      	movs	r2, #8
 800280a:	4013      	ands	r3, r2
 800280c:	2b08      	cmp	r3, #8
 800280e:	d122      	bne.n	8002856 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2204      	movs	r2, #4
 8002818:	4013      	ands	r3, r2
 800281a:	d110      	bne.n	800283e <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	210c      	movs	r1, #12
 8002828:	438a      	bics	r2, r1
 800282a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	4a33      	ldr	r2, [pc, #204]	; (8002900 <HAL_ADC_IRQHandler+0x16c>)
 8002832:	4013      	ands	r3, r2
 8002834:	2201      	movs	r2, #1
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
 800283c:	e00b      	b.n	8002856 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	2220      	movs	r2, #32
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2201      	movs	r2, #1
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f7ff f8df 	bl	8001a1c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	220c      	movs	r2, #12
 8002864:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	4013      	ands	r3, r2
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d115      	bne.n	80028a0 <HAL_ADC_IRQHandler+0x10c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	4013      	ands	r3, r2
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d10e      	bne.n	80028a0 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	0252      	lsls	r2, r2, #9
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0018      	movs	r0, r3
 8002894:	f000 f836 	bl	8002904 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2280      	movs	r2, #128	; 0x80
 800289e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2210      	movs	r2, #16
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d123      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x162>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d11c      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d006      	beq.n	80028d2 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10d      	bne.n	80028ee <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	2202      	movs	r2, #2
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2210      	movs	r2, #16
 80028e4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 f813 	bl	8002914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2210      	movs	r2, #16
 80028f4:	601a      	str	r2, [r3, #0]
  }

}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b002      	add	sp, #8
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	fffffefe 	.word	0xfffffefe

08002904 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292e:	230f      	movs	r3, #15
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	055b      	lsls	r3, r3, #21
 8002942:	429a      	cmp	r2, r3
 8002944:	d011      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	2b01      	cmp	r3, #1
 800294c:	d00d      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	2b02      	cmp	r3, #2
 8002954:	d009      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	2b03      	cmp	r3, #3
 800295c:	d005      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	2b04      	cmp	r3, #4
 8002964:	d001      	beq.n	800296a <HAL_ADC_ConfigChannel+0x46>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2234      	movs	r2, #52	; 0x34
 800296e:	5c9b      	ldrb	r3, [r3, r2]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x54>
 8002974:	2302      	movs	r3, #2
 8002976:	e0bb      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x1cc>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2234      	movs	r2, #52	; 0x34
 800297c:	2101      	movs	r1, #1
 800297e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2204      	movs	r2, #4
 8002988:	4013      	ands	r3, r2
 800298a:	d000      	beq.n	800298e <HAL_ADC_ConfigChannel+0x6a>
 800298c:	e09f      	b.n	8002ace <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a59      	ldr	r2, [pc, #356]	; (8002af8 <HAL_ADC_ConfigChannel+0x1d4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d100      	bne.n	800299a <HAL_ADC_ConfigChannel+0x76>
 8002998:	e077      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	055b      	lsls	r3, r3, #21
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d037      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d033      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d02f      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d02b      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d027      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d023      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d01f      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	2b07      	cmp	r3, #7
 80029f2:	d01b      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	2107      	movs	r1, #7
 8002a00:	400b      	ands	r3, r1
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d012      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2107      	movs	r1, #7
 8002a12:	438a      	bics	r2, r1
 8002a14:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6959      	ldr	r1, [r3, #20]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2207      	movs	r2, #7
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d003      	beq.n	8002a3c <HAL_ADC_ConfigChannel+0x118>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b11      	cmp	r3, #17
 8002a3a:	d152      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a3c:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <HAL_ADC_ConfigChannel+0x1d8>)
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d102      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x12a>
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	e001      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x12e>
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	03db      	lsls	r3, r3, #15
 8002a52:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <HAL_ADC_ConfigChannel+0x1d8>)
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d140      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_ADC_ConfigChannel+0x1dc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4927      	ldr	r1, [pc, #156]	; (8002b04 <HAL_ADC_ConfigChannel+0x1e0>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7fd fb4e 	bl	8000108 <__udivsi3>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	001a      	movs	r2, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	189b      	adds	r3, r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a7a:	e002      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f9      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x158>
 8002a88:	e02b      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	4099      	lsls	r1, r3
 8002a98:	000b      	movs	r3, r1
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d003      	beq.n	8002ab4 <HAL_ADC_ConfigChannel+0x190>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b11      	cmp	r3, #17
 8002ab2:	d116      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_ADC_ConfigChannel+0x1d8>)
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1a0>
 8002ac0:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <HAL_ADC_ConfigChannel+0x1e4>)
 8002ac2:	e000      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x1a2>
 8002ac4:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <HAL_ADC_ConfigChannel+0x1e8>)
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_ADC_ConfigChannel+0x1d8>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e009      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002ada:	230f      	movs	r3, #15
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2234      	movs	r2, #52	; 0x34
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002aea:	230f      	movs	r3, #15
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	781b      	ldrb	r3, [r3, #0]
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b004      	add	sp, #16
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	00001001 	.word	0x00001001
 8002afc:	40012708 	.word	0x40012708
 8002b00:	20000000 	.word	0x20000000
 8002b04:	000f4240 	.word	0x000f4240
 8002b08:	ff7fffff 	.word	0xff7fffff
 8002b0c:	ffbfffff 	.word	0xffbfffff

08002b10 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2203      	movs	r2, #3
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d112      	bne.n	8002b54 <ADC_Enable+0x44>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2201      	movs	r2, #1
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d009      	beq.n	8002b50 <ADC_Enable+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	401a      	ands	r2, r3
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d101      	bne.n	8002b54 <ADC_Enable+0x44>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <ADC_Enable+0x46>
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d152      	bne.n	8002c00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a2a      	ldr	r2, [pc, #168]	; (8002c0c <ADC_Enable+0xfc>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	d00d      	beq.n	8002b82 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	2201      	movs	r2, #1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e03f      	b.n	8002c02 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b92:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <ADC_Enable+0x100>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	491f      	ldr	r1, [pc, #124]	; (8002c14 <ADC_Enable+0x104>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7fd fab5 	bl	8000108 <__udivsi3>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ba2:	e002      	b.n	8002baa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f9      	bne.n	8002ba4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bb0:	f7ff fc28 	bl	8002404 <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bb8:	e01b      	b.n	8002bf2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bba:	f7ff fc23 	bl	8002404 <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d914      	bls.n	8002bf2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d00d      	beq.n	8002bf2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	2210      	movs	r2, #16
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	2201      	movs	r2, #1
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e007      	b.n	8002c02 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d1dc      	bne.n	8002bba <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b004      	add	sp, #16
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	80000017 	.word	0x80000017
 8002c10:	20000000 	.word	0x20000000
 8002c14:	000f4240 	.word	0x000f4240

08002c18 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c20:	2317      	movs	r3, #23
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2234      	movs	r2, #52	; 0x34
 8002c34:	5c9b      	ldrb	r3, [r3, r2]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADCEx_Calibration_Start+0x26>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e08d      	b.n	8002d5a <HAL_ADCEx_Calibration_Start+0x142>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2234      	movs	r2, #52	; 0x34
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d112      	bne.n	8002c7a <HAL_ADCEx_Calibration_Start+0x62>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d009      	beq.n	8002c76 <HAL_ADCEx_Calibration_Start+0x5e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d101      	bne.n	8002c7a <HAL_ADCEx_Calibration_Start+0x62>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_ADCEx_Calibration_Start+0x64>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d15b      	bne.n	8002d38 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	4a37      	ldr	r2, [pc, #220]	; (8002d64 <HAL_ADCEx_Calibration_Start+0x14c>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	2202      	movs	r2, #2
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2203      	movs	r2, #3
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2103      	movs	r1, #3
 8002ca8:	438a      	bics	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	0609      	lsls	r1, r1, #24
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002cbe:	f7ff fba1 	bl	8002404 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002cc6:	e01d      	b.n	8002d04 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002cc8:	f7ff fb9c 	bl	8002404 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d916      	bls.n	8002d04 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	0fdb      	lsrs	r3, r3, #31
 8002cde:	07da      	lsls	r2, r3, #31
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d10d      	bne.n	8002d04 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	2212      	movs	r2, #18
 8002cee:	4393      	bics	r3, r2
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2234      	movs	r2, #52	; 0x34
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e02a      	b.n	8002d5a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0fdb      	lsrs	r3, r3, #31
 8002d0c:	07da      	lsls	r2, r3, #31
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d0d8      	beq.n	8002cc8 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68d9      	ldr	r1, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	4393      	bics	r3, r2
 8002d2e:	2201      	movs	r2, #1
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
 8002d36:	e009      	b.n	8002d4c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002d44:	2317      	movs	r3, #23
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2234      	movs	r2, #52	; 0x34
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002d54:	2317      	movs	r3, #23
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b006      	add	sp, #24
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	fffffefd 	.word	0xfffffefd

08002d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	0002      	movs	r2, r0
 8002d70:	1dfb      	adds	r3, r7, #7
 8002d72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b7f      	cmp	r3, #127	; 0x7f
 8002d7a:	d809      	bhi.n	8002d90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7c:	1dfb      	adds	r3, r7, #7
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	001a      	movs	r2, r3
 8002d82:	231f      	movs	r3, #31
 8002d84:	401a      	ands	r2, r3
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <__NVIC_EnableIRQ+0x30>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4091      	lsls	r1, r2
 8002d8c:	000a      	movs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
  }
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b002      	add	sp, #8
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	0002      	movs	r2, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	1dfb      	adds	r3, r7, #7
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b7f      	cmp	r3, #127	; 0x7f
 8002db0:	d828      	bhi.n	8002e04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002db2:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <__NVIC_SetPriority+0xd4>)
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	33c0      	adds	r3, #192	; 0xc0
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	589b      	ldr	r3, [r3, r2]
 8002dc2:	1dfa      	adds	r2, r7, #7
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	0011      	movs	r1, r2
 8002dc8:	2203      	movs	r2, #3
 8002dca:	400a      	ands	r2, r1
 8002dcc:	00d2      	lsls	r2, r2, #3
 8002dce:	21ff      	movs	r1, #255	; 0xff
 8002dd0:	4091      	lsls	r1, r2
 8002dd2:	000a      	movs	r2, r1
 8002dd4:	43d2      	mvns	r2, r2
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	019b      	lsls	r3, r3, #6
 8002dde:	22ff      	movs	r2, #255	; 0xff
 8002de0:	401a      	ands	r2, r3
 8002de2:	1dfb      	adds	r3, r7, #7
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	0018      	movs	r0, r3
 8002de8:	2303      	movs	r3, #3
 8002dea:	4003      	ands	r3, r0
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df0:	481f      	ldr	r0, [pc, #124]	; (8002e70 <__NVIC_SetPriority+0xd4>)
 8002df2:	1dfb      	adds	r3, r7, #7
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b25b      	sxtb	r3, r3
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	33c0      	adds	r3, #192	; 0xc0
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e02:	e031      	b.n	8002e68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e04:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <__NVIC_SetPriority+0xd8>)
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	400b      	ands	r3, r1
 8002e10:	3b08      	subs	r3, #8
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3306      	adds	r3, #6
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	18d3      	adds	r3, r2, r3
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	1dfa      	adds	r2, r7, #7
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	0011      	movs	r1, r2
 8002e24:	2203      	movs	r2, #3
 8002e26:	400a      	ands	r2, r1
 8002e28:	00d2      	lsls	r2, r2, #3
 8002e2a:	21ff      	movs	r1, #255	; 0xff
 8002e2c:	4091      	lsls	r1, r2
 8002e2e:	000a      	movs	r2, r1
 8002e30:	43d2      	mvns	r2, r2
 8002e32:	401a      	ands	r2, r3
 8002e34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	22ff      	movs	r2, #255	; 0xff
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	1dfb      	adds	r3, r7, #7
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	0018      	movs	r0, r3
 8002e44:	2303      	movs	r3, #3
 8002e46:	4003      	ands	r3, r0
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e4c:	4809      	ldr	r0, [pc, #36]	; (8002e74 <__NVIC_SetPriority+0xd8>)
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	001c      	movs	r4, r3
 8002e54:	230f      	movs	r3, #15
 8002e56:	4023      	ands	r3, r4
 8002e58:	3b08      	subs	r3, #8
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	3306      	adds	r3, #6
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	18c3      	adds	r3, r0, r3
 8002e64:	3304      	adds	r3, #4
 8002e66:	601a      	str	r2, [r3, #0]
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b003      	add	sp, #12
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	e000e100 	.word	0xe000e100
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	1e5a      	subs	r2, r3, #1
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	045b      	lsls	r3, r3, #17
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d301      	bcc.n	8002e90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e010      	b.n	8002eb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <SysTick_Config+0x44>)
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	3a01      	subs	r2, #1
 8002e96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e98:	2301      	movs	r3, #1
 8002e9a:	425b      	negs	r3, r3
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff ff7c 	bl	8002d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <SysTick_Config+0x44>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <SysTick_Config+0x44>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b002      	add	sp, #8
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	210f      	movs	r1, #15
 8002ecc:	187b      	adds	r3, r7, r1
 8002ece:	1c02      	adds	r2, r0, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	187b      	adds	r3, r7, r1
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	0011      	movs	r1, r2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7ff ff5d 	bl	8002d9c <__NVIC_SetPriority>
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b004      	add	sp, #16
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	1dfb      	adds	r3, r7, #7
 8002ef4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7ff ff33 	bl	8002d68 <__NVIC_EnableIRQ>
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b002      	add	sp, #8
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7ff ffaf 	bl	8002e78 <SysTick_Config>
 8002f1a:	0003      	movs	r3, r0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f32:	e14f      	b.n	80031d4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4091      	lsls	r1, r2
 8002f3e:	000a      	movs	r2, r1
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d100      	bne.n	8002f4c <HAL_GPIO_Init+0x28>
 8002f4a:	e140      	b.n	80031ce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2203      	movs	r2, #3
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d005      	beq.n	8002f64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d130      	bne.n	8002fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	409a      	lsls	r2, r3
 8002f72:	0013      	movs	r3, r2
 8002f74:	43da      	mvns	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	409a      	lsls	r2, r3
 8002f86:	0013      	movs	r3, r2
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	0013      	movs	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d017      	beq.n	8003002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2203      	movs	r2, #3
 8003008:	4013      	ands	r3, r2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d123      	bne.n	8003056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	08da      	lsrs	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3208      	adds	r2, #8
 8003016:	0092      	lsls	r2, r2, #2
 8003018:	58d3      	ldr	r3, [r2, r3]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2207      	movs	r2, #7
 8003020:	4013      	ands	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	409a      	lsls	r2, r3
 8003028:	0013      	movs	r3, r2
 800302a:	43da      	mvns	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2107      	movs	r1, #7
 800303a:	400b      	ands	r3, r1
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	409a      	lsls	r2, r3
 8003040:	0013      	movs	r3, r2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	08da      	lsrs	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3208      	adds	r2, #8
 8003050:	0092      	lsls	r2, r2, #2
 8003052:	6939      	ldr	r1, [r7, #16]
 8003054:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	409a      	lsls	r2, r3
 8003064:	0013      	movs	r3, r2
 8003066:	43da      	mvns	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2203      	movs	r2, #3
 8003074:	401a      	ands	r2, r3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	0013      	movs	r3, r2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	23c0      	movs	r3, #192	; 0xc0
 8003090:	029b      	lsls	r3, r3, #10
 8003092:	4013      	ands	r3, r2
 8003094:	d100      	bne.n	8003098 <HAL_GPIO_Init+0x174>
 8003096:	e09a      	b.n	80031ce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003098:	4b54      	ldr	r3, [pc, #336]	; (80031ec <HAL_GPIO_Init+0x2c8>)
 800309a:	699a      	ldr	r2, [r3, #24]
 800309c:	4b53      	ldr	r3, [pc, #332]	; (80031ec <HAL_GPIO_Init+0x2c8>)
 800309e:	2101      	movs	r1, #1
 80030a0:	430a      	orrs	r2, r1
 80030a2:	619a      	str	r2, [r3, #24]
 80030a4:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_GPIO_Init+0x2c8>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2201      	movs	r2, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030b0:	4a4f      	ldr	r2, [pc, #316]	; (80031f0 <HAL_GPIO_Init+0x2cc>)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	589b      	ldr	r3, [r3, r2]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2203      	movs	r2, #3
 80030c2:	4013      	ands	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	220f      	movs	r2, #15
 80030c8:	409a      	lsls	r2, r3
 80030ca:	0013      	movs	r3, r2
 80030cc:	43da      	mvns	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	2390      	movs	r3, #144	; 0x90
 80030d8:	05db      	lsls	r3, r3, #23
 80030da:	429a      	cmp	r2, r3
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x1e2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a44      	ldr	r2, [pc, #272]	; (80031f4 <HAL_GPIO_Init+0x2d0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x1de>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a43      	ldr	r2, [pc, #268]	; (80031f8 <HAL_GPIO_Init+0x2d4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x1da>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a42      	ldr	r2, [pc, #264]	; (80031fc <HAL_GPIO_Init+0x2d8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x1d6>
 80030f6:	2303      	movs	r3, #3
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_Init+0x1e4>
 80030fa:	2305      	movs	r3, #5
 80030fc:	e004      	b.n	8003108 <HAL_GPIO_Init+0x1e4>
 80030fe:	2302      	movs	r3, #2
 8003100:	e002      	b.n	8003108 <HAL_GPIO_Init+0x1e4>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_GPIO_Init+0x1e4>
 8003106:	2300      	movs	r3, #0
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	2103      	movs	r1, #3
 800310c:	400a      	ands	r2, r1
 800310e:	0092      	lsls	r2, r2, #2
 8003110:	4093      	lsls	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003118:	4935      	ldr	r1, [pc, #212]	; (80031f0 <HAL_GPIO_Init+0x2cc>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	3302      	adds	r3, #2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <HAL_GPIO_Init+0x2dc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43da      	mvns	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	025b      	lsls	r3, r3, #9
 800313e:	4013      	ands	r3, r2
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800314a:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_GPIO_Init+0x2dc>)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_GPIO_Init+0x2dc>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43da      	mvns	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	029b      	lsls	r3, r3, #10
 8003168:	4013      	ands	r3, r2
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <HAL_GPIO_Init+0x2dc>)
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <HAL_GPIO_Init+0x2dc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43da      	mvns	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	035b      	lsls	r3, r3, #13
 8003192:	4013      	ands	r3, r2
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_GPIO_Init+0x2dc>)
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_GPIO_Init+0x2dc>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	039b      	lsls	r3, r3, #14
 80031bc:	4013      	ands	r3, r2
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_GPIO_Init+0x2dc>)
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	40da      	lsrs	r2, r3
 80031dc:	1e13      	subs	r3, r2, #0
 80031de:	d000      	beq.n	80031e2 <HAL_GPIO_Init+0x2be>
 80031e0:	e6a8      	b.n	8002f34 <HAL_GPIO_Init+0x10>
  } 
}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b006      	add	sp, #24
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010000 	.word	0x40010000
 80031f4:	48000400 	.word	0x48000400
 80031f8:	48000800 	.word	0x48000800
 80031fc:	48000c00 	.word	0x48000c00
 8003200:	40010400 	.word	0x40010400

08003204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	000a      	movs	r2, r1
 800320e:	1cbb      	adds	r3, r7, #2
 8003210:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	1cba      	adds	r2, r7, #2
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	4013      	ands	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800321e:	230f      	movs	r3, #15
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e003      	b.n	8003230 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003228:	230f      	movs	r3, #15
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003230:	230f      	movs	r3, #15
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	781b      	ldrb	r3, [r3, #0]
  }
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	0008      	movs	r0, r1
 8003248:	0011      	movs	r1, r2
 800324a:	1cbb      	adds	r3, r7, #2
 800324c:	1c02      	adds	r2, r0, #0
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	1c7b      	adds	r3, r7, #1
 8003252:	1c0a      	adds	r2, r1, #0
 8003254:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003256:	1c7b      	adds	r3, r7, #1
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800325e:	1cbb      	adds	r3, r7, #2
 8003260:	881a      	ldrh	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003266:	e003      	b.n	8003270 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003268:	1cbb      	adds	r3, r7, #2
 800326a:	881a      	ldrh	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e301      	b.n	800388e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	4013      	ands	r3, r2
 8003292:	d100      	bne.n	8003296 <HAL_RCC_OscConfig+0x1e>
 8003294:	e08d      	b.n	80033b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003296:	4bc3      	ldr	r3, [pc, #780]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	220c      	movs	r2, #12
 800329c:	4013      	ands	r3, r2
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d00e      	beq.n	80032c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032a2:	4bc0      	ldr	r3, [pc, #768]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	220c      	movs	r2, #12
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d116      	bne.n	80032dc <HAL_RCC_OscConfig+0x64>
 80032ae:	4bbd      	ldr	r3, [pc, #756]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	025b      	lsls	r3, r3, #9
 80032b6:	401a      	ands	r2, r3
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	025b      	lsls	r3, r3, #9
 80032bc:	429a      	cmp	r2, r3
 80032be:	d10d      	bne.n	80032dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	4bb8      	ldr	r3, [pc, #736]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	029b      	lsls	r3, r3, #10
 80032c8:	4013      	ands	r3, r2
 80032ca:	d100      	bne.n	80032ce <HAL_RCC_OscConfig+0x56>
 80032cc:	e070      	b.n	80033b0 <HAL_RCC_OscConfig+0x138>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d000      	beq.n	80032d8 <HAL_RCC_OscConfig+0x60>
 80032d6:	e06b      	b.n	80033b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e2d8      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_OscConfig+0x7c>
 80032e4:	4baf      	ldr	r3, [pc, #700]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4bae      	ldr	r3, [pc, #696]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	0249      	lsls	r1, r1, #9
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e02f      	b.n	8003354 <HAL_RCC_OscConfig+0xdc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10c      	bne.n	8003316 <HAL_RCC_OscConfig+0x9e>
 80032fc:	4ba9      	ldr	r3, [pc, #676]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4ba8      	ldr	r3, [pc, #672]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003302:	49a9      	ldr	r1, [pc, #676]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	4ba6      	ldr	r3, [pc, #664]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4ba5      	ldr	r3, [pc, #660]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800330e:	49a7      	ldr	r1, [pc, #668]	; (80035ac <HAL_RCC_OscConfig+0x334>)
 8003310:	400a      	ands	r2, r1
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	e01e      	b.n	8003354 <HAL_RCC_OscConfig+0xdc>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b05      	cmp	r3, #5
 800331c:	d10e      	bne.n	800333c <HAL_RCC_OscConfig+0xc4>
 800331e:	4ba1      	ldr	r3, [pc, #644]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4ba0      	ldr	r3, [pc, #640]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	02c9      	lsls	r1, r1, #11
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	4b9d      	ldr	r3, [pc, #628]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b9c      	ldr	r3, [pc, #624]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	0249      	lsls	r1, r1, #9
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e00b      	b.n	8003354 <HAL_RCC_OscConfig+0xdc>
 800333c:	4b99      	ldr	r3, [pc, #612]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b98      	ldr	r3, [pc, #608]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003342:	4999      	ldr	r1, [pc, #612]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 8003344:	400a      	ands	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	4b96      	ldr	r3, [pc, #600]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b95      	ldr	r3, [pc, #596]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800334e:	4997      	ldr	r1, [pc, #604]	; (80035ac <HAL_RCC_OscConfig+0x334>)
 8003350:	400a      	ands	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d014      	beq.n	8003386 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335c:	f7ff f852 	bl	8002404 <HAL_GetTick>
 8003360:	0003      	movs	r3, r0
 8003362:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003366:	f7ff f84d 	bl	8002404 <HAL_GetTick>
 800336a:	0002      	movs	r2, r0
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b64      	cmp	r3, #100	; 0x64
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e28a      	b.n	800388e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003378:	4b8a      	ldr	r3, [pc, #552]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	4013      	ands	r3, r2
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0xee>
 8003384:	e015      	b.n	80033b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7ff f83d 	bl	8002404 <HAL_GetTick>
 800338a:	0003      	movs	r3, r0
 800338c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003390:	f7ff f838 	bl	8002404 <HAL_GetTick>
 8003394:	0002      	movs	r2, r0
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e275      	b.n	800388e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	4b80      	ldr	r3, [pc, #512]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	029b      	lsls	r3, r3, #10
 80033aa:	4013      	ands	r3, r2
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x118>
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2202      	movs	r2, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	d100      	bne.n	80033be <HAL_RCC_OscConfig+0x146>
 80033bc:	e069      	b.n	8003492 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80033be:	4b79      	ldr	r3, [pc, #484]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	220c      	movs	r2, #12
 80033c4:	4013      	ands	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033c8:	4b76      	ldr	r3, [pc, #472]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	220c      	movs	r2, #12
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d11c      	bne.n	800340e <HAL_RCC_OscConfig+0x196>
 80033d4:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	025b      	lsls	r3, r3, #9
 80033dc:	4013      	ands	r3, r2
 80033de:	d116      	bne.n	800340e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e0:	4b70      	ldr	r3, [pc, #448]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2202      	movs	r2, #2
 80033e6:	4013      	ands	r3, r2
 80033e8:	d005      	beq.n	80033f6 <HAL_RCC_OscConfig+0x17e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e24b      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f6:	4b6b      	ldr	r3, [pc, #428]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	22f8      	movs	r2, #248	; 0xf8
 80033fc:	4393      	bics	r3, r2
 80033fe:	0019      	movs	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00da      	lsls	r2, r3, #3
 8003406:	4b67      	ldr	r3, [pc, #412]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340c:	e041      	b.n	8003492 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d024      	beq.n	8003460 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003416:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b62      	ldr	r3, [pc, #392]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800341c:	2101      	movs	r1, #1
 800341e:	430a      	orrs	r2, r1
 8003420:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003422:	f7fe ffef 	bl	8002404 <HAL_GetTick>
 8003426:	0003      	movs	r3, r0
 8003428:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800342c:	f7fe ffea 	bl	8002404 <HAL_GetTick>
 8003430:	0002      	movs	r2, r0
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e227      	b.n	800388e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	d0f1      	beq.n	800342c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	4b56      	ldr	r3, [pc, #344]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	22f8      	movs	r2, #248	; 0xf8
 800344e:	4393      	bics	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00da      	lsls	r2, r3, #3
 8003458:	4b52      	ldr	r3, [pc, #328]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800345a:	430a      	orrs	r2, r1
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e018      	b.n	8003492 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003460:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b4f      	ldr	r3, [pc, #316]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003466:	2101      	movs	r1, #1
 8003468:	438a      	bics	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe ffca 	bl	8002404 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003476:	f7fe ffc5 	bl	8002404 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e202      	b.n	800388e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003488:	4b46      	ldr	r3, [pc, #280]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2202      	movs	r2, #2
 800348e:	4013      	ands	r3, r2
 8003490:	d1f1      	bne.n	8003476 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2208      	movs	r2, #8
 8003498:	4013      	ands	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d019      	beq.n	80034d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034a4:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80034a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a8:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80034aa:	2101      	movs	r1, #1
 80034ac:	430a      	orrs	r2, r1
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b0:	f7fe ffa8 	bl	8002404 <HAL_GetTick>
 80034b4:	0003      	movs	r3, r0
 80034b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ba:	f7fe ffa3 	bl	8002404 <HAL_GetTick>
 80034be:	0002      	movs	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e1e0      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034cc:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2202      	movs	r2, #2
 80034d2:	4013      	ands	r3, r2
 80034d4:	d0f1      	beq.n	80034ba <HAL_RCC_OscConfig+0x242>
 80034d6:	e018      	b.n	800350a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d8:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80034da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034dc:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 80034de:	2101      	movs	r1, #1
 80034e0:	438a      	bics	r2, r1
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe ff8e 	bl	8002404 <HAL_GetTick>
 80034e8:	0003      	movs	r3, r0
 80034ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fe ff89 	bl	8002404 <HAL_GetTick>
 80034f2:	0002      	movs	r2, r0
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1c6      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003500:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	2202      	movs	r2, #2
 8003506:	4013      	ands	r3, r2
 8003508:	d1f1      	bne.n	80034ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	4013      	ands	r3, r2
 8003512:	d100      	bne.n	8003516 <HAL_RCC_OscConfig+0x29e>
 8003514:	e0b4      	b.n	8003680 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	201f      	movs	r0, #31
 8003518:	183b      	adds	r3, r7, r0
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351e:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	055b      	lsls	r3, r3, #21
 8003526:	4013      	ands	r3, r2
 8003528:	d110      	bne.n	800354c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	0549      	lsls	r1, r1, #21
 8003534:	430a      	orrs	r2, r1
 8003536:	61da      	str	r2, [r3, #28]
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	055b      	lsls	r3, r3, #21
 8003540:	4013      	ands	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003546:	183b      	adds	r3, r7, r0
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <HAL_RCC_OscConfig+0x338>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4013      	ands	r3, r2
 8003556:	d11a      	bne.n	800358e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_RCC_OscConfig+0x338>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_RCC_OscConfig+0x338>)
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	0049      	lsls	r1, r1, #1
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003566:	f7fe ff4d 	bl	8002404 <HAL_GetTick>
 800356a:	0003      	movs	r3, r0
 800356c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003570:	f7fe ff48 	bl	8002404 <HAL_GetTick>
 8003574:	0002      	movs	r2, r0
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e185      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_OscConfig+0x338>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4013      	ands	r3, r2
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10e      	bne.n	80035b4 <HAL_RCC_OscConfig+0x33c>
 8003596:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	4b02      	ldr	r3, [pc, #8]	; (80035a4 <HAL_RCC_OscConfig+0x32c>)
 800359c:	2101      	movs	r1, #1
 800359e:	430a      	orrs	r2, r1
 80035a0:	621a      	str	r2, [r3, #32]
 80035a2:	e035      	b.n	8003610 <HAL_RCC_OscConfig+0x398>
 80035a4:	40021000 	.word	0x40021000
 80035a8:	fffeffff 	.word	0xfffeffff
 80035ac:	fffbffff 	.word	0xfffbffff
 80035b0:	40007000 	.word	0x40007000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10c      	bne.n	80035d6 <HAL_RCC_OscConfig+0x35e>
 80035bc:	4bb6      	ldr	r3, [pc, #728]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	4bb5      	ldr	r3, [pc, #724]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	438a      	bics	r2, r1
 80035c6:	621a      	str	r2, [r3, #32]
 80035c8:	4bb3      	ldr	r3, [pc, #716]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	4bb2      	ldr	r3, [pc, #712]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035ce:	2104      	movs	r1, #4
 80035d0:	438a      	bics	r2, r1
 80035d2:	621a      	str	r2, [r3, #32]
 80035d4:	e01c      	b.n	8003610 <HAL_RCC_OscConfig+0x398>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x380>
 80035de:	4bae      	ldr	r3, [pc, #696]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035e0:	6a1a      	ldr	r2, [r3, #32]
 80035e2:	4bad      	ldr	r3, [pc, #692]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035e4:	2104      	movs	r1, #4
 80035e6:	430a      	orrs	r2, r1
 80035e8:	621a      	str	r2, [r3, #32]
 80035ea:	4bab      	ldr	r3, [pc, #684]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035ec:	6a1a      	ldr	r2, [r3, #32]
 80035ee:	4baa      	ldr	r3, [pc, #680]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035f0:	2101      	movs	r1, #1
 80035f2:	430a      	orrs	r2, r1
 80035f4:	621a      	str	r2, [r3, #32]
 80035f6:	e00b      	b.n	8003610 <HAL_RCC_OscConfig+0x398>
 80035f8:	4ba7      	ldr	r3, [pc, #668]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035fa:	6a1a      	ldr	r2, [r3, #32]
 80035fc:	4ba6      	ldr	r3, [pc, #664]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80035fe:	2101      	movs	r1, #1
 8003600:	438a      	bics	r2, r1
 8003602:	621a      	str	r2, [r3, #32]
 8003604:	4ba4      	ldr	r3, [pc, #656]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	4ba3      	ldr	r3, [pc, #652]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 800360a:	2104      	movs	r1, #4
 800360c:	438a      	bics	r2, r1
 800360e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d014      	beq.n	8003642 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003618:	f7fe fef4 	bl	8002404 <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	e009      	b.n	8003636 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7fe feef 	bl	8002404 <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	4a9b      	ldr	r2, [pc, #620]	; (800389c <HAL_RCC_OscConfig+0x624>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e12b      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003636:	4b98      	ldr	r3, [pc, #608]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	2202      	movs	r2, #2
 800363c:	4013      	ands	r3, r2
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x3aa>
 8003640:	e013      	b.n	800366a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fe fedf 	bl	8002404 <HAL_GetTick>
 8003646:	0003      	movs	r3, r0
 8003648:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364a:	e009      	b.n	8003660 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe feda 	bl	8002404 <HAL_GetTick>
 8003650:	0002      	movs	r2, r0
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	4a91      	ldr	r2, [pc, #580]	; (800389c <HAL_RCC_OscConfig+0x624>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e116      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003660:	4b8d      	ldr	r3, [pc, #564]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	2202      	movs	r2, #2
 8003666:	4013      	ands	r3, r2
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800366a:	231f      	movs	r3, #31
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003674:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	4b87      	ldr	r3, [pc, #540]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 800367a:	4989      	ldr	r1, [pc, #548]	; (80038a0 <HAL_RCC_OscConfig+0x628>)
 800367c:	400a      	ands	r2, r1
 800367e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2210      	movs	r2, #16
 8003686:	4013      	ands	r3, r2
 8003688:	d063      	beq.n	8003752 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d12a      	bne.n	80036e8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003692:	4b81      	ldr	r3, [pc, #516]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003696:	4b80      	ldr	r3, [pc, #512]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003698:	2104      	movs	r1, #4
 800369a:	430a      	orrs	r2, r1
 800369c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800369e:	4b7e      	ldr	r3, [pc, #504]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80036a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a2:	4b7d      	ldr	r3, [pc, #500]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80036a4:	2101      	movs	r1, #1
 80036a6:	430a      	orrs	r2, r1
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fe feab 	bl	8002404 <HAL_GetTick>
 80036ae:	0003      	movs	r3, r0
 80036b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80036b4:	f7fe fea6 	bl	8002404 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0e3      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036c6:	4b74      	ldr	r3, [pc, #464]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	2202      	movs	r2, #2
 80036cc:	4013      	ands	r3, r2
 80036ce:	d0f1      	beq.n	80036b4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036d0:	4b71      	ldr	r3, [pc, #452]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	22f8      	movs	r2, #248	; 0xf8
 80036d6:	4393      	bics	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	00da      	lsls	r2, r3, #3
 80036e0:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80036e2:	430a      	orrs	r2, r1
 80036e4:	635a      	str	r2, [r3, #52]	; 0x34
 80036e6:	e034      	b.n	8003752 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	3305      	adds	r3, #5
 80036ee:	d111      	bne.n	8003714 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80036f0:	4b69      	ldr	r3, [pc, #420]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80036f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f4:	4b68      	ldr	r3, [pc, #416]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80036f6:	2104      	movs	r1, #4
 80036f8:	438a      	bics	r2, r1
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036fc:	4b66      	ldr	r3, [pc, #408]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	22f8      	movs	r2, #248	; 0xf8
 8003702:	4393      	bics	r3, r2
 8003704:	0019      	movs	r1, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	00da      	lsls	r2, r3, #3
 800370c:	4b62      	ldr	r3, [pc, #392]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 800370e:	430a      	orrs	r2, r1
 8003710:	635a      	str	r2, [r3, #52]	; 0x34
 8003712:	e01e      	b.n	8003752 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003714:	4b60      	ldr	r3, [pc, #384]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003718:	4b5f      	ldr	r3, [pc, #380]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 800371a:	2104      	movs	r1, #4
 800371c:	430a      	orrs	r2, r1
 800371e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003720:	4b5d      	ldr	r3, [pc, #372]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003724:	4b5c      	ldr	r3, [pc, #368]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003726:	2101      	movs	r1, #1
 8003728:	438a      	bics	r2, r1
 800372a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372c:	f7fe fe6a 	bl	8002404 <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003736:	f7fe fe65 	bl	8002404 <HAL_GetTick>
 800373a:	0002      	movs	r2, r0
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0a2      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003748:	4b53      	ldr	r3, [pc, #332]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 800374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374c:	2202      	movs	r2, #2
 800374e:	4013      	ands	r3, r2
 8003750:	d1f1      	bne.n	8003736 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d100      	bne.n	800375c <HAL_RCC_OscConfig+0x4e4>
 800375a:	e097      	b.n	800388c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800375c:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	220c      	movs	r2, #12
 8003762:	4013      	ands	r3, r2
 8003764:	2b08      	cmp	r3, #8
 8003766:	d100      	bne.n	800376a <HAL_RCC_OscConfig+0x4f2>
 8003768:	e06b      	b.n	8003842 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d14c      	bne.n	800380c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	4b49      	ldr	r3, [pc, #292]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b48      	ldr	r3, [pc, #288]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003778:	494a      	ldr	r1, [pc, #296]	; (80038a4 <HAL_RCC_OscConfig+0x62c>)
 800377a:	400a      	ands	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fe fe41 	bl	8002404 <HAL_GetTick>
 8003782:	0003      	movs	r3, r0
 8003784:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe fe3c 	bl	8002404 <HAL_GetTick>
 800378c:	0002      	movs	r2, r0
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e079      	b.n	800388e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379a:	4b3f      	ldr	r3, [pc, #252]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	049b      	lsls	r3, r3, #18
 80037a2:	4013      	ands	r3, r2
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a6:	4b3c      	ldr	r3, [pc, #240]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	220f      	movs	r2, #15
 80037ac:	4393      	bics	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80037b6:	430a      	orrs	r2, r1
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ba:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a3a      	ldr	r2, [pc, #232]	; (80038a8 <HAL_RCC_OscConfig+0x630>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	431a      	orrs	r2, r3
 80037ce:	4b32      	ldr	r3, [pc, #200]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80037d0:	430a      	orrs	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d4:	4b30      	ldr	r3, [pc, #192]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	0449      	lsls	r1, r1, #17
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe fe0f 	bl	8002404 <HAL_GetTick>
 80037e6:	0003      	movs	r3, r0
 80037e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fe0a 	bl	8002404 <HAL_GetTick>
 80037f0:	0002      	movs	r2, r0
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e047      	b.n	800388e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037fe:	4b26      	ldr	r3, [pc, #152]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	049b      	lsls	r3, r3, #18
 8003806:	4013      	ands	r3, r2
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x574>
 800380a:	e03f      	b.n	800388c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003812:	4924      	ldr	r1, [pc, #144]	; (80038a4 <HAL_RCC_OscConfig+0x62c>)
 8003814:	400a      	ands	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fdf4 	bl	8002404 <HAL_GetTick>
 800381c:	0003      	movs	r3, r0
 800381e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003822:	f7fe fdef 	bl	8002404 <HAL_GetTick>
 8003826:	0002      	movs	r2, r0
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e02c      	b.n	800388e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003834:	4b18      	ldr	r3, [pc, #96]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	049b      	lsls	r3, r3, #18
 800383c:	4013      	ands	r3, r2
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x5aa>
 8003840:	e024      	b.n	800388c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e01f      	b.n	800388e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003854:	4b10      	ldr	r3, [pc, #64]	; (8003898 <HAL_RCC_OscConfig+0x620>)
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	025b      	lsls	r3, r3, #9
 8003860:	401a      	ands	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	429a      	cmp	r2, r3
 8003868:	d10e      	bne.n	8003888 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	220f      	movs	r2, #15
 800386e:	401a      	ands	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	23f0      	movs	r3, #240	; 0xf0
 800387c:	039b      	lsls	r3, r3, #14
 800387e:	401a      	ands	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b008      	add	sp, #32
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	40021000 	.word	0x40021000
 800389c:	00001388 	.word	0x00001388
 80038a0:	efffffff 	.word	0xefffffff
 80038a4:	feffffff 	.word	0xfeffffff
 80038a8:	ffc2ffff 	.word	0xffc2ffff

080038ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0b3      	b.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_RCC_ClockConfig+0x184>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d911      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b58      	ldr	r3, [pc, #352]	; (8003a30 <HAL_RCC_ClockConfig+0x184>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4393      	bics	r3, r2
 80038d6:	0019      	movs	r1, r3
 80038d8:	4b55      	ldr	r3, [pc, #340]	; (8003a30 <HAL_RCC_ClockConfig+0x184>)
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_ClockConfig+0x184>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	4013      	ands	r3, r2
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e09a      	b.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2202      	movs	r2, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	d015      	beq.n	8003928 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2204      	movs	r2, #4
 8003902:	4013      	ands	r3, r2
 8003904:	d006      	beq.n	8003914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003906:	4b4b      	ldr	r3, [pc, #300]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	4b4a      	ldr	r3, [pc, #296]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 800390c:	21e0      	movs	r1, #224	; 0xe0
 800390e:	00c9      	lsls	r1, r1, #3
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003914:	4b47      	ldr	r3, [pc, #284]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	22f0      	movs	r2, #240	; 0xf0
 800391a:	4393      	bics	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	4b44      	ldr	r3, [pc, #272]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2201      	movs	r2, #1
 800392e:	4013      	ands	r3, r2
 8003930:	d040      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	029b      	lsls	r3, r3, #10
 8003942:	4013      	ands	r3, r2
 8003944:	d114      	bne.n	8003970 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06e      	b.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003952:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	049b      	lsls	r3, r3, #18
 800395a:	4013      	ands	r3, r2
 800395c:	d108      	bne.n	8003970 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e062      	b.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003962:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2202      	movs	r2, #2
 8003968:	4013      	ands	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e05b      	b.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003970:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2203      	movs	r2, #3
 8003976:	4393      	bics	r3, r2
 8003978:	0019      	movs	r1, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003984:	f7fe fd3e 	bl	8002404 <HAL_GetTick>
 8003988:	0003      	movs	r3, r0
 800398a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398c:	e009      	b.n	80039a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800398e:	f7fe fd39 	bl	8002404 <HAL_GetTick>
 8003992:	0002      	movs	r2, r0
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <HAL_RCC_ClockConfig+0x18c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e042      	b.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	220c      	movs	r2, #12
 80039a8:	401a      	ands	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d1ec      	bne.n	800398e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b4:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_RCC_ClockConfig+0x184>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2201      	movs	r2, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d211      	bcs.n	80039e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_ClockConfig+0x184>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2201      	movs	r2, #1
 80039c8:	4393      	bics	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_RCC_ClockConfig+0x184>)
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d4:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <HAL_RCC_ClockConfig+0x184>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2201      	movs	r2, #1
 80039da:	4013      	ands	r3, r2
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e020      	b.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2204      	movs	r2, #4
 80039ec:	4013      	ands	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80039f0:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <HAL_RCC_ClockConfig+0x190>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a04:	f000 f820 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a08:	0001      	movs	r1, r0
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x188>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	220f      	movs	r2, #15
 8003a12:	4013      	ands	r3, r2
 8003a14:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x194>)
 8003a16:	5cd3      	ldrb	r3, [r2, r3]
 8003a18:	000a      	movs	r2, r1
 8003a1a:	40da      	lsrs	r2, r3
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x198>)
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7fe fca9 	bl	8002378 <HAL_InitTick>
  
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40022000 	.word	0x40022000
 8003a34:	40021000 	.word	0x40021000
 8003a38:	00001388 	.word	0x00001388
 8003a3c:	fffff8ff 	.word	0xfffff8ff
 8003a40:	08004368 	.word	0x08004368
 8003a44:	20000000 	.word	0x20000000

08003a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b08f      	sub	sp, #60	; 0x3c
 8003a4c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003a4e:	2314      	movs	r3, #20
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	4a2b      	ldr	r2, [pc, #172]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a56:	c313      	stmia	r3!, {r0, r1, r4}
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a62:	c313      	stmia	r3!, {r0, r1, r4}
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a70:	2300      	movs	r3, #0
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003a7c:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	220c      	movs	r2, #12
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d002      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x4a>
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x50>
 8003a90:	e02d      	b.n	8003aee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a96:	e02d      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9a:	0c9b      	lsrs	r3, r3, #18
 8003a9c:	220f      	movs	r2, #15
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2214      	movs	r2, #20
 8003aa2:	18ba      	adds	r2, r7, r2
 8003aa4:	5cd3      	ldrb	r3, [r2, r3]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003aa8:	4b17      	ldr	r3, [pc, #92]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	220f      	movs	r2, #15
 8003aae:	4013      	ands	r3, r2
 8003ab0:	1d3a      	adds	r2, r7, #4
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	025b      	lsls	r3, r3, #9
 8003abc:	4013      	ands	r3, r2
 8003abe:	d009      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac2:	4812      	ldr	r0, [pc, #72]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ac4:	f7fc fb20 	bl	8000108 <__udivsi3>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	001a      	movs	r2, r3
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	4353      	muls	r3, r2
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad2:	e009      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ad6:	000a      	movs	r2, r1
 8003ad8:	0152      	lsls	r2, r2, #5
 8003ada:	1a52      	subs	r2, r2, r1
 8003adc:	0193      	lsls	r3, r2, #6
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	185b      	adds	r3, r3, r1
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003aec:	e002      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003af0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003af2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b00f      	add	sp, #60	; 0x3c
 8003afc:	bd90      	pop	{r4, r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	08004268 	.word	0x08004268
 8003b04:	08004278 	.word	0x08004278
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	007a1200 	.word	0x007a1200

08003b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b14:	4b02      	ldr	r3, [pc, #8]	; (8003b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	20000000 	.word	0x20000000

08003b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003b28:	f7ff fff2 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b2c:	0001      	movs	r1, r0
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	2207      	movs	r2, #7
 8003b36:	4013      	ands	r3, r2
 8003b38:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	40d9      	lsrs	r1, r3
 8003b3e:	000b      	movs	r3, r1
}    
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	08004378 	.word	0x08004378

08003b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e044      	b.n	8003bec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2274      	movs	r2, #116	; 0x74
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7fe fb4b 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2224      	movs	r2, #36	; 0x24
 8003b7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 f830 	bl	8003bf8 <UART_SetConfig>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e024      	b.n	8003bec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 f963 	bl	8003e78 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	490d      	ldr	r1, [pc, #52]	; (8003bf4 <HAL_UART_Init+0xa4>)
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2108      	movs	r1, #8
 8003bce:	438a      	bics	r2, r1
 8003bd0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 f9fb 	bl	8003fe0 <UART_CheckIdleState>
 8003bea:	0003      	movs	r3, r0
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	fffff7ff 	.word	0xfffff7ff

08003bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c00:	231e      	movs	r3, #30
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a8d      	ldr	r2, [pc, #564]	; (8003e5c <UART_SetConfig+0x264>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4a88      	ldr	r2, [pc, #544]	; (8003e60 <UART_SetConfig+0x268>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a7f      	ldr	r2, [pc, #508]	; (8003e64 <UART_SetConfig+0x26c>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a7b      	ldr	r2, [pc, #492]	; (8003e68 <UART_SetConfig+0x270>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d127      	bne.n	8003cce <UART_SetConfig+0xd6>
 8003c7e:	4b7b      	ldr	r3, [pc, #492]	; (8003e6c <UART_SetConfig+0x274>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	2203      	movs	r2, #3
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d00d      	beq.n	8003ca6 <UART_SetConfig+0xae>
 8003c8a:	d81b      	bhi.n	8003cc4 <UART_SetConfig+0xcc>
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d014      	beq.n	8003cba <UART_SetConfig+0xc2>
 8003c90:	d818      	bhi.n	8003cc4 <UART_SetConfig+0xcc>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <UART_SetConfig+0xa4>
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d00a      	beq.n	8003cb0 <UART_SetConfig+0xb8>
 8003c9a:	e013      	b.n	8003cc4 <UART_SetConfig+0xcc>
 8003c9c:	231f      	movs	r3, #31
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e021      	b.n	8003cea <UART_SetConfig+0xf2>
 8003ca6:	231f      	movs	r3, #31
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2202      	movs	r2, #2
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e01c      	b.n	8003cea <UART_SetConfig+0xf2>
 8003cb0:	231f      	movs	r3, #31
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e017      	b.n	8003cea <UART_SetConfig+0xf2>
 8003cba:	231f      	movs	r3, #31
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e012      	b.n	8003cea <UART_SetConfig+0xf2>
 8003cc4:	231f      	movs	r3, #31
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2210      	movs	r2, #16
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e00d      	b.n	8003cea <UART_SetConfig+0xf2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a67      	ldr	r2, [pc, #412]	; (8003e70 <UART_SetConfig+0x278>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d104      	bne.n	8003ce2 <UART_SetConfig+0xea>
 8003cd8:	231f      	movs	r3, #31
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e003      	b.n	8003cea <UART_SetConfig+0xf2>
 8003ce2:	231f      	movs	r3, #31
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	2210      	movs	r2, #16
 8003ce8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d15d      	bne.n	8003db2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003cf6:	231f      	movs	r3, #31
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d015      	beq.n	8003d2c <UART_SetConfig+0x134>
 8003d00:	dc18      	bgt.n	8003d34 <UART_SetConfig+0x13c>
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d00d      	beq.n	8003d22 <UART_SetConfig+0x12a>
 8003d06:	dc15      	bgt.n	8003d34 <UART_SetConfig+0x13c>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <UART_SetConfig+0x11a>
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d005      	beq.n	8003d1c <UART_SetConfig+0x124>
 8003d10:	e010      	b.n	8003d34 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d12:	f7ff ff07 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8003d16:	0003      	movs	r3, r0
 8003d18:	61bb      	str	r3, [r7, #24]
        break;
 8003d1a:	e012      	b.n	8003d42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d1c:	4b55      	ldr	r3, [pc, #340]	; (8003e74 <UART_SetConfig+0x27c>)
 8003d1e:	61bb      	str	r3, [r7, #24]
        break;
 8003d20:	e00f      	b.n	8003d42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d22:	f7ff fe91 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003d26:	0003      	movs	r3, r0
 8003d28:	61bb      	str	r3, [r7, #24]
        break;
 8003d2a:	e00a      	b.n	8003d42 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	61bb      	str	r3, [r7, #24]
        break;
 8003d32:	e006      	b.n	8003d42 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d38:	231e      	movs	r3, #30
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]
        break;
 8003d40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d100      	bne.n	8003d4a <UART_SetConfig+0x152>
 8003d48:	e07b      	b.n	8003e42 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	005a      	lsls	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	18d2      	adds	r2, r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	0010      	movs	r0, r2
 8003d5e:	f7fc f9d3 	bl	8000108 <__udivsi3>
 8003d62:	0003      	movs	r3, r0
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b0f      	cmp	r3, #15
 8003d6c:	d91c      	bls.n	8003da8 <UART_SetConfig+0x1b0>
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	025b      	lsls	r3, r3, #9
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d217      	bcs.n	8003da8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	200e      	movs	r0, #14
 8003d7e:	183b      	adds	r3, r7, r0
 8003d80:	210f      	movs	r1, #15
 8003d82:	438a      	bics	r2, r1
 8003d84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	4013      	ands	r3, r2
 8003d90:	b299      	uxth	r1, r3
 8003d92:	183b      	adds	r3, r7, r0
 8003d94:	183a      	adds	r2, r7, r0
 8003d96:	8812      	ldrh	r2, [r2, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	183a      	adds	r2, r7, r0
 8003da2:	8812      	ldrh	r2, [r2, #0]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	e04c      	b.n	8003e42 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003da8:	231e      	movs	r3, #30
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e047      	b.n	8003e42 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003db2:	231f      	movs	r3, #31
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d015      	beq.n	8003de8 <UART_SetConfig+0x1f0>
 8003dbc:	dc18      	bgt.n	8003df0 <UART_SetConfig+0x1f8>
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d00d      	beq.n	8003dde <UART_SetConfig+0x1e6>
 8003dc2:	dc15      	bgt.n	8003df0 <UART_SetConfig+0x1f8>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <UART_SetConfig+0x1d6>
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d005      	beq.n	8003dd8 <UART_SetConfig+0x1e0>
 8003dcc:	e010      	b.n	8003df0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dce:	f7ff fea9 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	61bb      	str	r3, [r7, #24]
        break;
 8003dd6:	e012      	b.n	8003dfe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd8:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <UART_SetConfig+0x27c>)
 8003dda:	61bb      	str	r3, [r7, #24]
        break;
 8003ddc:	e00f      	b.n	8003dfe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dde:	f7ff fe33 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003de2:	0003      	movs	r3, r0
 8003de4:	61bb      	str	r3, [r7, #24]
        break;
 8003de6:	e00a      	b.n	8003dfe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	61bb      	str	r3, [r7, #24]
        break;
 8003dee:	e006      	b.n	8003dfe <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003df4:	231e      	movs	r3, #30
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
        break;
 8003dfc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01e      	beq.n	8003e42 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	085a      	lsrs	r2, r3, #1
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	18d2      	adds	r2, r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	0019      	movs	r1, r3
 8003e14:	0010      	movs	r0, r2
 8003e16:	f7fc f977 	bl	8000108 <__udivsi3>
 8003e1a:	0003      	movs	r3, r0
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d909      	bls.n	8003e3a <UART_SetConfig+0x242>
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	025b      	lsls	r3, r3, #9
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d204      	bcs.n	8003e3a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	60da      	str	r2, [r3, #12]
 8003e38:	e003      	b.n	8003e42 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e3a:	231e      	movs	r3, #30
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e4e:	231e      	movs	r3, #30
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b008      	add	sp, #32
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	ffff69f3 	.word	0xffff69f3
 8003e60:	ffffcfff 	.word	0xffffcfff
 8003e64:	fffff4ff 	.word	0xfffff4ff
 8003e68:	40013800 	.word	0x40013800
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40004400 	.word	0x40004400
 8003e74:	007a1200 	.word	0x007a1200

08003e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	d00b      	beq.n	8003ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a4a      	ldr	r2, [pc, #296]	; (8003fbc <UART_AdvFeatureConfig+0x144>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a43      	ldr	r2, [pc, #268]	; (8003fc0 <UART_AdvFeatureConfig+0x148>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2204      	movs	r2, #4
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d00b      	beq.n	8003ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a3b      	ldr	r2, [pc, #236]	; (8003fc4 <UART_AdvFeatureConfig+0x14c>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2208      	movs	r2, #8
 8003eec:	4013      	ands	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4a34      	ldr	r2, [pc, #208]	; (8003fc8 <UART_AdvFeatureConfig+0x150>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	0019      	movs	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <UART_AdvFeatureConfig+0x154>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2220      	movs	r2, #32
 8003f30:	4013      	ands	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <UART_AdvFeatureConfig+0x158>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	0019      	movs	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	2240      	movs	r2, #64	; 0x40
 8003f52:	4013      	ands	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <UART_AdvFeatureConfig+0x15c>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	035b      	lsls	r3, r3, #13
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d10b      	bne.n	8003f92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <UART_AdvFeatureConfig+0x160>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4a0e      	ldr	r2, [pc, #56]	; (8003fdc <UART_AdvFeatureConfig+0x164>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	fffdffff 	.word	0xfffdffff
 8003fc0:	fffeffff 	.word	0xfffeffff
 8003fc4:	fffbffff 	.word	0xfffbffff
 8003fc8:	ffff7fff 	.word	0xffff7fff
 8003fcc:	ffffefff 	.word	0xffffefff
 8003fd0:	ffffdfff 	.word	0xffffdfff
 8003fd4:	ffefffff 	.word	0xffefffff
 8003fd8:	ff9fffff 	.word	0xff9fffff
 8003fdc:	fff7ffff 	.word	0xfff7ffff

08003fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	2100      	movs	r1, #0
 8003fee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff0:	f7fe fa08 	bl	8002404 <HAL_GetTick>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2208      	movs	r2, #8
 8004000:	4013      	ands	r3, r2
 8004002:	2b08      	cmp	r3, #8
 8004004:	d10c      	bne.n	8004020 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	0391      	lsls	r1, r2, #14
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4a17      	ldr	r2, [pc, #92]	; (800406c <UART_CheckIdleState+0x8c>)
 8004010:	9200      	str	r2, [sp, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	f000 f82c 	bl	8004070 <UART_WaitOnFlagUntilTimeout>
 8004018:	1e03      	subs	r3, r0, #0
 800401a:	d001      	beq.n	8004020 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e021      	b.n	8004064 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2204      	movs	r2, #4
 8004028:	4013      	ands	r3, r2
 800402a:	2b04      	cmp	r3, #4
 800402c:	d10c      	bne.n	8004048 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	03d1      	lsls	r1, r2, #15
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4a0d      	ldr	r2, [pc, #52]	; (800406c <UART_CheckIdleState+0x8c>)
 8004038:	9200      	str	r2, [sp, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	f000 f818 	bl	8004070 <UART_WaitOnFlagUntilTimeout>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e00d      	b.n	8004064 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2274      	movs	r2, #116	; 0x74
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b004      	add	sp, #16
 800406a:	bd80      	pop	{r7, pc}
 800406c:	01ffffff 	.word	0x01ffffff

08004070 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b094      	sub	sp, #80	; 0x50
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	1dfb      	adds	r3, r7, #7
 800407e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004080:	e0a3      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004084:	3301      	adds	r3, #1
 8004086:	d100      	bne.n	800408a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004088:	e09f      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7fe f9bb 	bl	8002404 <HAL_GetTick>
 800408e:	0002      	movs	r2, r0
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800409a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800409c:	2b00      	cmp	r3, #0
 800409e:	d13d      	bne.n	800411c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a0:	f3ef 8310 	mrs	r3, PRIMASK
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
 80040aa:	2301      	movs	r3, #1
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	f383 8810 	msr	PRIMASK, r3
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	494c      	ldr	r1, [pc, #304]	; (80041f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80040c2:	400a      	ands	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	f383 8810 	msr	PRIMASK, r3
}
 80040d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d2:	f3ef 8310 	mrs	r3, PRIMASK
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	643b      	str	r3, [r7, #64]	; 0x40
 80040dc:	2301      	movs	r3, #1
 80040de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e2:	f383 8810 	msr	PRIMASK, r3
}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fe:	f383 8810 	msr	PRIMASK, r3
}
 8004102:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2274      	movs	r2, #116	; 0x74
 8004114:	2100      	movs	r1, #0
 8004116:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e067      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2204      	movs	r2, #4
 8004124:	4013      	ands	r3, r2
 8004126:	d050      	beq.n	80041ca <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	401a      	ands	r2, r3
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	429a      	cmp	r2, r3
 800413a:	d146      	bne.n	80041ca <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	0112      	lsls	r2, r2, #4
 8004144:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004146:	f3ef 8310 	mrs	r3, PRIMASK
 800414a:	613b      	str	r3, [r7, #16]
  return(result);
 800414c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800414e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4923      	ldr	r1, [pc, #140]	; (80041f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004168:	400a      	ands	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004178:	f3ef 8310 	mrs	r3, PRIMASK
 800417c:	61fb      	str	r3, [r7, #28]
  return(result);
 800417e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
 8004182:	2301      	movs	r3, #1
 8004184:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f383 8810 	msr	PRIMASK, r3
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	438a      	bics	r2, r1
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	f383 8810 	msr	PRIMASK, r3
}
 80041a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	2120      	movs	r1, #32
 80041bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2274      	movs	r2, #116	; 0x74
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e010      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	4013      	ands	r3, r2
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	425a      	negs	r2, r3
 80041da:	4153      	adcs	r3, r2
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	001a      	movs	r2, r3
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d100      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0x17a>
 80041e8:	e74b      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	0018      	movs	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b014      	add	sp, #80	; 0x50
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	fffffe5f 	.word	0xfffffe5f

080041f8 <memset>:
 80041f8:	0003      	movs	r3, r0
 80041fa:	1882      	adds	r2, r0, r2
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d100      	bne.n	8004202 <memset+0xa>
 8004200:	4770      	bx	lr
 8004202:	7019      	strb	r1, [r3, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	e7f9      	b.n	80041fc <memset+0x4>

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	2600      	movs	r6, #0
 800420c:	4c0c      	ldr	r4, [pc, #48]	; (8004240 <__libc_init_array+0x38>)
 800420e:	4d0d      	ldr	r5, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 8004210:	1b64      	subs	r4, r4, r5
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	42a6      	cmp	r6, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	2600      	movs	r6, #0
 800421a:	f000 f819 	bl	8004250 <_init>
 800421e:	4c0a      	ldr	r4, [pc, #40]	; (8004248 <__libc_init_array+0x40>)
 8004220:	4d0a      	ldr	r5, [pc, #40]	; (800424c <__libc_init_array+0x44>)
 8004222:	1b64      	subs	r4, r4, r5
 8004224:	10a4      	asrs	r4, r4, #2
 8004226:	42a6      	cmp	r6, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	00b3      	lsls	r3, r6, #2
 800422e:	58eb      	ldr	r3, [r5, r3]
 8004230:	4798      	blx	r3
 8004232:	3601      	adds	r6, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	00b3      	lsls	r3, r6, #2
 8004238:	58eb      	ldr	r3, [r5, r3]
 800423a:	4798      	blx	r3
 800423c:	3601      	adds	r6, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	08004380 	.word	0x08004380
 8004244:	08004380 	.word	0x08004380
 8004248:	08004384 	.word	0x08004384
 800424c:	08004380 	.word	0x08004380

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
