
CV_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d68  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008f18  08008f18  00018f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009150  08009150  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009158  08009158  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08009160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000a64  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b80  20000b80  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001049b  00000000  00000000  0002018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bbb  00000000  00000000  0003062a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d18  00000000  00000000  000331e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009ea  00000000  00000000  00033f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000252a0  00000000  00000000  000348ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000115da  00000000  00000000  00059b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5a11  00000000  00000000  0006b164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003980  00000000  00000000  00140b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001444f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f00 	.word	0x08008f00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08008f00 	.word	0x08008f00

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <posunMys>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern USBD_HandleTypeDef hUsbDeviceFS;


static void posunMys(uint8_t x, uint8_t y){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]
	uint8_t buff[4];

	buff[0] = 0; // stiskni leve tlacitko
 8000e98:	2300      	movs	r3, #0
 8000e9a:	733b      	strb	r3, [r7, #12]
	buff[1] = (int8_t)(x); // posun X +10
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	737b      	strb	r3, [r7, #13]
	buff[2] = (int8_t)(y); // posun Y -3
 8000ea0:	79bb      	ldrb	r3, [r7, #6]
 8000ea2:	73bb      	strb	r3, [r7, #14]
	buff[3] = 0; // bez scrollu
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));  // posle data do PC
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2204      	movs	r2, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <posunMys+0x44>)
 8000eb2:	f004 ff91 	bl	8005dd8 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <posunMys+0x44>)
 8000eb8:	f004 ffbe 	bl	8005e38 <USBD_HID_GetPollingInterval>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fcb4 	bl	800182c <HAL_Delay>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000184 	.word	0x20000184

08000ed0 <nakreslikruznicu>:


static void nakreslikruznicu(uint8_t r){
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[4];

	for (uint8_t i=0; i<=120; i++){
 8000eda:	2300      	movs	r3, #0
 8000edc:	77fb      	strb	r3, [r7, #31]
 8000ede:	e08b      	b.n	8000ff8 <nakreslikruznicu+0x128>
		int krok=i*3;
 8000ee0:	7ffa      	ldrb	r2, [r7, #31]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
		float x=r*cos(krok*M_PI/180);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fad1 	bl	8000494 <__aeabi_i2d>
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	460d      	mov	r5, r1
 8000ef6:	69b8      	ldr	r0, [r7, #24]
 8000ef8:	f7ff facc 	bl	8000494 <__aeabi_i2d>
 8000efc:	a344      	add	r3, pc, #272	; (adr r3, 8001010 <nakreslikruznicu+0x140>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fb31 	bl	8000568 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4b41      	ldr	r3, [pc, #260]	; (8001018 <nakreslikruznicu+0x148>)
 8000f14:	f7ff fc52 	bl	80007bc <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	ec43 2b17 	vmov	d7, r2, r3
 8000f20:	eeb0 0a47 	vmov.f32	s0, s14
 8000f24:	eef0 0a67 	vmov.f32	s1, s15
 8000f28:	f006 ff56 	bl	8007dd8 <cos>
 8000f2c:	ec53 2b10 	vmov	r2, r3, d0
 8000f30:	4620      	mov	r0, r4
 8000f32:	4629      	mov	r1, r5
 8000f34:	f7ff fb18 	bl	8000568 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fdd4 	bl	8000aec <__aeabi_d2f>
 8000f44:	4603      	mov	r3, r0
 8000f46:	617b      	str	r3, [r7, #20]
		float y=r*sin(krok*M_PI/180);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff faa2 	bl	8000494 <__aeabi_i2d>
 8000f50:	4604      	mov	r4, r0
 8000f52:	460d      	mov	r5, r1
 8000f54:	69b8      	ldr	r0, [r7, #24]
 8000f56:	f7ff fa9d 	bl	8000494 <__aeabi_i2d>
 8000f5a:	a32d      	add	r3, pc, #180	; (adr r3, 8001010 <nakreslikruznicu+0x140>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fb02 	bl	8000568 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <nakreslikruznicu+0x148>)
 8000f72:	f7ff fc23 	bl	80007bc <__aeabi_ddiv>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	ec43 2b17 	vmov	d7, r2, r3
 8000f7e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f82:	eef0 0a67 	vmov.f32	s1, s15
 8000f86:	f006 ff7b 	bl	8007e80 <sin>
 8000f8a:	ec53 2b10 	vmov	r2, r3, d0
 8000f8e:	4620      	mov	r0, r4
 8000f90:	4629      	mov	r1, r5
 8000f92:	f7ff fae9 	bl	8000568 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fda5 	bl	8000aec <__aeabi_d2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	613b      	str	r3, [r7, #16]

		buff[0] = 0x01; // stiskni leve tlacitko
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	733b      	strb	r3, [r7, #12]
		buff[1] = (int8_t)x; // posun X
 8000faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb2:	edc7 7a00 	vstr	s15, [r7]
 8000fb6:	783b      	ldrb	r3, [r7, #0]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	737b      	strb	r3, [r7, #13]
		buff[2] = (int8_t)y; // posun Y
 8000fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc6:	edc7 7a00 	vstr	s15, [r7]
 8000fca:	783b      	ldrb	r3, [r7, #0]
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	73bb      	strb	r3, [r7, #14]
		buff[3] = 0; // bez scrollu
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
		USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));  // posle data do PC
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2204      	movs	r2, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480f      	ldr	r0, [pc, #60]	; (800101c <nakreslikruznicu+0x14c>)
 8000fe0:	f004 fefa 	bl	8005dd8 <USBD_HID_SendReport>
		HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <nakreslikruznicu+0x14c>)
 8000fe6:	f004 ff27 	bl	8005e38 <USBD_HID_GetPollingInterval>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fc1d 	bl	800182c <HAL_Delay>
	for (uint8_t i=0; i<=120; i++){
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	77fb      	strb	r3, [r7, #31]
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	2b78      	cmp	r3, #120	; 0x78
 8000ffc:	f67f af70 	bls.w	8000ee0 <nakreslikruznicu+0x10>
	}
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bdb0      	pop	{r4, r5, r7, pc}
 800100a:	bf00      	nop
 800100c:	f3af 8000 	nop.w
 8001010:	54442d18 	.word	0x54442d18
 8001014:	400921fb 	.word	0x400921fb
 8001018:	40668000 	.word	0x40668000
 800101c:	20000184 	.word	0x20000184

08001020 <usmev>:

static void usmev(uint8_t r){
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[4];

	for (uint8_t i=40; i<=80; i++){
 800102a:	2328      	movs	r3, #40	; 0x28
 800102c:	77fb      	strb	r3, [r7, #31]
 800102e:	e08b      	b.n	8001148 <usmev+0x128>
		int krok=i*3;
 8001030:	7ffa      	ldrb	r2, [r7, #31]
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
		float x=r*cos(krok*M_PI/180);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa29 	bl	8000494 <__aeabi_i2d>
 8001042:	4604      	mov	r4, r0
 8001044:	460d      	mov	r5, r1
 8001046:	69b8      	ldr	r0, [r7, #24]
 8001048:	f7ff fa24 	bl	8000494 <__aeabi_i2d>
 800104c:	a344      	add	r3, pc, #272	; (adr r3, 8001160 <usmev+0x140>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fa89 	bl	8000568 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b41      	ldr	r3, [pc, #260]	; (8001168 <usmev+0x148>)
 8001064:	f7ff fbaa 	bl	80007bc <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	ec43 2b17 	vmov	d7, r2, r3
 8001070:	eeb0 0a47 	vmov.f32	s0, s14
 8001074:	eef0 0a67 	vmov.f32	s1, s15
 8001078:	f006 feae 	bl	8007dd8 <cos>
 800107c:	ec53 2b10 	vmov	r2, r3, d0
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff fa70 	bl	8000568 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fd2c 	bl	8000aec <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	617b      	str	r3, [r7, #20]
		float y=r*sin(krok*M_PI/180);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f9fa 	bl	8000494 <__aeabi_i2d>
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
 80010a4:	69b8      	ldr	r0, [r7, #24]
 80010a6:	f7ff f9f5 	bl	8000494 <__aeabi_i2d>
 80010aa:	a32d      	add	r3, pc, #180	; (adr r3, 8001160 <usmev+0x140>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fa5a 	bl	8000568 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <usmev+0x148>)
 80010c2:	f7ff fb7b 	bl	80007bc <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	ec43 2b17 	vmov	d7, r2, r3
 80010ce:	eeb0 0a47 	vmov.f32	s0, s14
 80010d2:	eef0 0a67 	vmov.f32	s1, s15
 80010d6:	f006 fed3 	bl	8007e80 <sin>
 80010da:	ec53 2b10 	vmov	r2, r3, d0
 80010de:	4620      	mov	r0, r4
 80010e0:	4629      	mov	r1, r5
 80010e2:	f7ff fa41 	bl	8000568 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fcfd 	bl	8000aec <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	613b      	str	r3, [r7, #16]

		buff[0] = 0x01; // stiskni leve tlacitko
 80010f6:	2301      	movs	r3, #1
 80010f8:	733b      	strb	r3, [r7, #12]
		buff[1] = (int8_t)x; // posun X
 80010fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	edc7 7a00 	vstr	s15, [r7]
 8001106:	783b      	ldrb	r3, [r7, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	737b      	strb	r3, [r7, #13]
		buff[2] = (int8_t)y; // posun Y
 800110e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001116:	edc7 7a00 	vstr	s15, [r7]
 800111a:	783b      	ldrb	r3, [r7, #0]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	73bb      	strb	r3, [r7, #14]
		buff[3] = 0; // bez scrollu
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
		USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));  // posle data do PC
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2204      	movs	r2, #4
 800112c:	4619      	mov	r1, r3
 800112e:	480f      	ldr	r0, [pc, #60]	; (800116c <usmev+0x14c>)
 8001130:	f004 fe52 	bl	8005dd8 <USBD_HID_SendReport>
		HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <usmev+0x14c>)
 8001136:	f004 fe7f 	bl	8005e38 <USBD_HID_GetPollingInterval>
 800113a:	4603      	mov	r3, r0
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fb75 	bl	800182c <HAL_Delay>
	for (uint8_t i=40; i<=80; i++){
 8001142:	7ffb      	ldrb	r3, [r7, #31]
 8001144:	3301      	adds	r3, #1
 8001146:	77fb      	strb	r3, [r7, #31]
 8001148:	7ffb      	ldrb	r3, [r7, #31]
 800114a:	2b50      	cmp	r3, #80	; 0x50
 800114c:	f67f af70 	bls.w	8001030 <usmev+0x10>
	}
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bdb0      	pop	{r4, r5, r7, pc}
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	54442d18 	.word	0x54442d18
 8001164:	400921fb 	.word	0x400921fb
 8001168:	40668000 	.word	0x40668000
 800116c:	20000184 	.word	0x20000184

08001170 <releasebtn>:

static void releasebtn(){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	uint8_t buff[4];

	buff[0] = 0; // stiskni leve tlacitko
 8001176:	2300      	movs	r3, #0
 8001178:	713b      	strb	r3, [r7, #4]
	buff[1] = 0; // posun X
 800117a:	2300      	movs	r3, #0
 800117c:	717b      	strb	r3, [r7, #5]
	buff[2] = 0; // posun Y
 800117e:	2300      	movs	r3, #0
 8001180:	71bb      	strb	r3, [r7, #6]
	buff[3] = 0; // bez scrollu
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));  // posle data do PC
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2204      	movs	r2, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <releasebtn+0x38>)
 800118e:	f004 fe23 	bl	8005dd8 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <releasebtn+0x38>)
 8001194:	f004 fe50 	bl	8005e38 <USBD_HID_GetPollingInterval>
 8001198:	4603      	mov	r3, r0
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fb46 	bl	800182c <HAL_Delay>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000184 	.word	0x20000184

080011ac <pushbtn>:

static void pushbtn(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	uint8_t buff[4];

	buff[0] = 0x01; // stiskni leve tlacitko
 80011b2:	2301      	movs	r3, #1
 80011b4:	713b      	strb	r3, [r7, #4]
	buff[1] = 0; // posun X
 80011b6:	2300      	movs	r3, #0
 80011b8:	717b      	strb	r3, [r7, #5]
	buff[2] = 0; // posun Y
 80011ba:	2300      	movs	r3, #0
 80011bc:	71bb      	strb	r3, [r7, #6]
	buff[3] = 0; // bez scrollu
 80011be:	2300      	movs	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));  // posle data do PC
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2204      	movs	r2, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4806      	ldr	r0, [pc, #24]	; (80011e4 <pushbtn+0x38>)
 80011ca:	f004 fe05 	bl	8005dd8 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <pushbtn+0x38>)
 80011d0:	f004 fe32 	bl	8005e38 <USBD_HID_GetPollingInterval>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fb28 	bl	800182c <HAL_Delay>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000184 	.word	0x20000184

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f000 faac 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f83e 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f000 f8d0 	bl	8001398 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011f8:	f000 f8a4 	bl	8001344 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80011fc:	f006 f97a 	bl	80074f4 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)){
 8001200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <main+0x84>)
 8001206:	f000 fdf3 	bl	8001df0 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f7      	beq.n	8001200 <main+0x18>
		  nakreslikruznicu(10);
 8001210:	200a      	movs	r0, #10
 8001212:	f7ff fe5d 	bl	8000ed0 <nakreslikruznicu>
		  releasebtn();
 8001216:	f7ff ffab 	bl	8001170 <releasebtn>
		  posunMys(-50,60);
 800121a:	213c      	movs	r1, #60	; 0x3c
 800121c:	20ce      	movs	r0, #206	; 0xce
 800121e:	f7ff fe33 	bl	8000e88 <posunMys>
		  nakreslikruznicu(4);
 8001222:	2004      	movs	r0, #4
 8001224:	f7ff fe54 	bl	8000ed0 <nakreslikruznicu>
		  releasebtn();
 8001228:	f7ff ffa2 	bl	8001170 <releasebtn>
		  posunMys(100,0);
 800122c:	2100      	movs	r1, #0
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f7ff fe2a 	bl	8000e88 <posunMys>
		  nakreslikruznicu(4);
 8001234:	2004      	movs	r0, #4
 8001236:	f7ff fe4b 	bl	8000ed0 <nakreslikruznicu>
		  releasebtn();
 800123a:	f7ff ff99 	bl	8001170 <releasebtn>
		  posunMys(-53,20);
 800123e:	2114      	movs	r1, #20
 8001240:	20cb      	movs	r0, #203	; 0xcb
 8001242:	f7ff fe21 	bl	8000e88 <posunMys>
		  pushbtn();
 8001246:	f7ff ffb1 	bl	80011ac <pushbtn>
		  posunMys(0,40);
 800124a:	2128      	movs	r1, #40	; 0x28
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fe1b 	bl	8000e88 <posunMys>
		  releasebtn();
 8001252:	f7ff ff8d 	bl	8001170 <releasebtn>
		  posunMys(43,10);
 8001256:	210a      	movs	r1, #10
 8001258:	202b      	movs	r0, #43	; 0x2b
 800125a:	f7ff fe15 	bl	8000e88 <posunMys>
		  usmev(7);
 800125e:	2007      	movs	r0, #7
 8001260:	f7ff fede 	bl	8001020 <usmev>
		  releasebtn();
 8001264:	f7ff ff84 	bl	8001170 <releasebtn>
	  if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)){
 8001268:	e7ca      	b.n	8001200 <main+0x18>
 800126a:	bf00      	nop
 800126c:	40020800 	.word	0x40020800

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	; 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f006 fd7e 	bl	8007d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <SystemClock_Config+0xcc>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <SystemClock_Config+0xcc>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <SystemClock_Config+0xd0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <SystemClock_Config+0xd0>)
 80012ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012e0:	2304      	movs	r3, #4
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012e4:	23a8      	movs	r3, #168	; 0xa8
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ec:	2307      	movs	r3, #7
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 f811 	bl	800331c <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001300:	f000 f93c 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001310:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2105      	movs	r1, #5
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fa72 	bl	800380c <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800132e:	f000 f925 	bl	800157c <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3750      	adds	r7, #80	; 0x50
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART3_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800137c:	f002 fc66 	bl	8003c4c <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f8f9 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000138 	.word	0x20000138
 8001394:	40004800 	.word	0x40004800

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	4b6d      	ldr	r3, [pc, #436]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a6c      	ldr	r2, [pc, #432]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	4b66      	ldr	r3, [pc, #408]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a65      	ldr	r2, [pc, #404]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a5e      	ldr	r2, [pc, #376]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <MX_GPIO_Init+0x1d0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b58      	ldr	r3, [pc, #352]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a57      	ldr	r2, [pc, #348]	; (8001568 <MX_GPIO_Init+0x1d0>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b55      	ldr	r3, [pc, #340]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b51      	ldr	r3, [pc, #324]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a50      	ldr	r2, [pc, #320]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b4e      	ldr	r3, [pc, #312]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a49      	ldr	r2, [pc, #292]	; (8001568 <MX_GPIO_Init+0x1d0>)
 8001444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <MX_GPIO_Init+0x1d0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f244 0181 	movw	r1, #16513	; 0x4081
 800145c:	4843      	ldr	r0, [pc, #268]	; (800156c <MX_GPIO_Init+0x1d4>)
 800145e:	f000 fcdf 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2140      	movs	r1, #64	; 0x40
 8001466:	4842      	ldr	r0, [pc, #264]	; (8001570 <MX_GPIO_Init+0x1d8>)
 8001468:	f000 fcda 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001472:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	483c      	ldr	r0, [pc, #240]	; (8001574 <MX_GPIO_Init+0x1dc>)
 8001484:	f000 fb08 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001488:	2332      	movs	r3, #50	; 0x32
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001498:	230b      	movs	r3, #11
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4834      	ldr	r0, [pc, #208]	; (8001574 <MX_GPIO_Init+0x1dc>)
 80014a4:	f000 faf8 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014a8:	2386      	movs	r3, #134	; 0x86
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b8:	230b      	movs	r3, #11
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	482d      	ldr	r0, [pc, #180]	; (8001578 <MX_GPIO_Init+0x1e0>)
 80014c4:	f000 fae8 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4822      	ldr	r0, [pc, #136]	; (800156c <MX_GPIO_Init+0x1d4>)
 80014e2:	f000 fad9 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014f8:	230b      	movs	r3, #11
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	481a      	ldr	r0, [pc, #104]	; (800156c <MX_GPIO_Init+0x1d4>)
 8001504:	f000 fac8 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001508:	2340      	movs	r3, #64	; 0x40
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MX_GPIO_Init+0x1d8>)
 8001520:	f000 faba 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	480e      	ldr	r0, [pc, #56]	; (8001570 <MX_GPIO_Init+0x1d8>)
 8001538:	f000 faae 	bl	8001a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800153c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800154e:	230b      	movs	r3, #11
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_GPIO_Init+0x1d8>)
 800155a:	f000 fa9d 	bl	8001a98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155e:	bf00      	nop
 8001560:	3730      	adds	r7, #48	; 0x30
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40020400 	.word	0x40020400
 8001570:	40021800 	.word	0x40021800
 8001574:	40020800 	.word	0x40020800
 8001578:	40020000 	.word	0x40020000

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_UART_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_UART_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_UART_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001632:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001644:	2307      	movs	r3, #7
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_UART_MspInit+0x8c>)
 8001650:	f000 fa22 	bl	8001a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40004800 	.word	0x40004800
 8001660:	40023800 	.word	0x40023800
 8001664:	40020c00 	.word	0x40020c00

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 f89a 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <OTG_FS_IRQHandler+0x10>)
 80016c2:	f000 fd16 	bl	80020f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000660 	.word	0x20000660

080016d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fa:	490e      	ldr	r1, [pc, #56]	; (8001734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001710:	4c0b      	ldr	r4, [pc, #44]	; (8001740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171e:	f7ff ffd7 	bl	80016d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f006 fb35 	bl	8007d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7ff fd5f 	bl	80011e8 <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800172c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8001738:	08009160 	.word	0x08009160
  ldr r2, =_sbss
 800173c:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8001740:	20000b80 	.word	0x20000b80

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f94f 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff ff04 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f967 	bl	8001a7e <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f92f 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008
 8001810:	2000017c 	.word	0x2000017c

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	2000017c 	.word	0x2000017c

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff3e 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff31 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e177      	b.n	8001da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 8166 	bne.w	8001d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d005      	beq.n	8001aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d130      	bne.n	8001b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0201 	and.w	r2, r3, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d017      	beq.n	8001b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d123      	bne.n	8001bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	08da      	lsrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3208      	adds	r2, #8
 8001b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	69b9      	ldr	r1, [r7, #24]
 8001bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0203 	and.w	r2, r3, #3
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80c0 	beq.w	8001d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c3a:	4a61      	ldr	r2, [pc, #388]	; (8001dc0 <HAL_GPIO_Init+0x328>)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_GPIO_Init+0x32c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d037      	beq.n	8001cd6 <HAL_GPIO_Init+0x23e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_GPIO_Init+0x330>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d031      	beq.n	8001cd2 <HAL_GPIO_Init+0x23a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a56      	ldr	r2, [pc, #344]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d02b      	beq.n	8001cce <HAL_GPIO_Init+0x236>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a55      	ldr	r2, [pc, #340]	; (8001dd0 <HAL_GPIO_Init+0x338>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d025      	beq.n	8001cca <HAL_GPIO_Init+0x232>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a54      	ldr	r2, [pc, #336]	; (8001dd4 <HAL_GPIO_Init+0x33c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01f      	beq.n	8001cc6 <HAL_GPIO_Init+0x22e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a53      	ldr	r2, [pc, #332]	; (8001dd8 <HAL_GPIO_Init+0x340>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <HAL_GPIO_Init+0x22a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_GPIO_Init+0x344>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a51      	ldr	r2, [pc, #324]	; (8001de0 <HAL_GPIO_Init+0x348>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00d      	beq.n	8001cba <HAL_GPIO_Init+0x222>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <HAL_GPIO_Init+0x34c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_Init+0x21e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4f      	ldr	r2, [pc, #316]	; (8001de8 <HAL_GPIO_Init+0x350>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_GPIO_Init+0x21a>
 8001cae:	2309      	movs	r3, #9
 8001cb0:	e012      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	e010      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	e00e      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cba:	2307      	movs	r3, #7
 8001cbc:	e00c      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	e00a      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x240>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	; (8001dc0 <HAL_GPIO_Init+0x328>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1a:	4a34      	ldr	r2, [pc, #208]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d44:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4a:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <HAL_GPIO_Init+0x354>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f ae84 	bls.w	8001ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40021400 	.word	0x40021400
 8001ddc:	40021800 	.word	0x40021800
 8001de0:	40021c00 	.word	0x40021c00
 8001de4:	40022000 	.word	0x40022000
 8001de8:	40022400 	.word	0x40022400
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e3c:	e003      	b.n	8001e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e54:	b08f      	sub	sp, #60	; 0x3c
 8001e56:	af0a      	add	r7, sp, #40	; 0x28
 8001e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e10f      	b.n	8002084 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f005 fc6e 	bl	8007760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 faa9 	bl	80043fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	687e      	ldr	r6, [r7, #4]
 8001eb0:	466d      	mov	r5, sp
 8001eb2:	f106 0410 	add.w	r4, r6, #16
 8001eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec6:	1d33      	adds	r3, r6, #4
 8001ec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f002 f980 	bl	80041d0 <USB_CoreInit>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0d0      	b.n	8002084 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 fa97 	bl	800441c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e04a      	b.n	8001f8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	333d      	adds	r3, #61	; 0x3d
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	333c      	adds	r3, #60	; 0x3c
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	b298      	uxth	r0, r3
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3344      	adds	r3, #68	; 0x44
 8001f30:	4602      	mov	r2, r0
 8001f32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3340      	adds	r3, #64	; 0x40
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	3348      	adds	r3, #72	; 0x48
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	334c      	adds	r3, #76	; 0x4c
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3354      	adds	r3, #84	; 0x54
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	3301      	adds	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3af      	bcc.n	8001ef4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e044      	b.n	8002024 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3301      	adds	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	d3b5      	bcc.n	8001f9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	687e      	ldr	r6, [r7, #4]
 8002036:	466d      	mov	r5, sp
 8002038:	f106 0410 	add.w	r4, r6, #16
 800203c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002044:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002048:	e885 0003 	stmia.w	r5, {r0, r1}
 800204c:	1d33      	adds	r3, r6, #4
 800204e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002050:	6838      	ldr	r0, [r7, #0]
 8002052:	f002 fa2f 	bl	80044b4 <USB_DevInit>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e00d      	b.n	8002084 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f003 fb7e 	bl	800577e <USB_DevDisconnect>

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800208c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_PCD_Start+0x1c>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e020      	b.n	80020ea <HAL_PCD_Start+0x5e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d109      	bne.n	80020cc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d005      	beq.n	80020cc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 f981 	bl	80043d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fb2e 	bl	800573c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f2:	b590      	push	{r4, r7, lr}
 80020f4:	b08d      	sub	sp, #52	; 0x34
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fbec 	bl	80058e6 <USB_GetMode>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 848a 	bne.w	8002a2a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f003 fb50 	bl	80057c0 <USB_ReadInterrupts>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8480 	beq.w	8002a28 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fb3d 	bl	80057c0 <USB_ReadInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b02      	cmp	r3, #2
 800214e:	d107      	bne.n	8002160 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f002 0202 	and.w	r2, r2, #2
 800215e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 fb2b 	bl	80057c0 <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b10      	cmp	r3, #16
 8002172:	d161      	bne.n	8002238 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0210 	bic.w	r2, r2, #16
 8002182:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f003 020f 	and.w	r2, r3, #15
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	0c5b      	lsrs	r3, r3, #17
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d124      	bne.n	80021fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d035      	beq.n	8002228 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	6a38      	ldr	r0, [r7, #32]
 80021d0:	f003 f962 	bl	8005498 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e0:	441a      	add	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f2:	441a      	add	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	621a      	str	r2, [r3, #32]
 80021f8:	e016      	b.n	8002228 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	0c5b      	lsrs	r3, r3, #17
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	2b06      	cmp	r3, #6
 8002204:	d110      	bne.n	8002228 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800220c:	2208      	movs	r2, #8
 800220e:	4619      	mov	r1, r3
 8002210:	6a38      	ldr	r0, [r7, #32]
 8002212:	f003 f941 	bl	8005498 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002222:	441a      	add	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0210 	orr.w	r2, r2, #16
 8002236:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fabf 	bl	80057c0 <USB_ReadInterrupts>
 8002242:	4603      	mov	r3, r0
 8002244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002248:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800224c:	f040 80a7 	bne.w	800239e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fac4 	bl	80057e6 <USB_ReadDevAllOutEpInterrupt>
 800225e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002260:	e099      	b.n	8002396 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 808e 	beq.w	800238a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f003 fae8 	bl	800584e <USB_ReadDevOutEPInterrupt>
 800227e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	461a      	mov	r2, r3
 8002298:	2301      	movs	r3, #1
 800229a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800229c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 feaa 	bl	8002ff8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	461a      	mov	r2, r3
 80022bc:	2308      	movs	r3, #8
 80022be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 ff80 	bl	80031c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022de:	461a      	mov	r2, r3
 80022e0:	2310      	movs	r3, #16
 80022e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d030      	beq.n	8002350 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	2b80      	cmp	r3, #128	; 0x80
 80022f8:	d109      	bne.n	800230e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002308:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800230e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	3304      	adds	r3, #4
 8002322:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	78db      	ldrb	r3, [r3, #3]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d108      	bne.n	800233e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2200      	movs	r2, #0
 8002330:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f005 fb25 	bl	8007988 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234a:	461a      	mov	r2, r3
 800234c:	2302      	movs	r3, #2
 800234e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002366:	461a      	mov	r2, r3
 8002368:	2320      	movs	r3, #32
 800236a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002382:	461a      	mov	r2, r3
 8002384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002388:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	3301      	adds	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	f47f af62 	bne.w	8002262 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fa0c 	bl	80057c0 <USB_ReadInterrupts>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023b2:	f040 80db 	bne.w	800256c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 fa2d 	bl	800581a <USB_ReadDevAllInEpInterrupt>
 80023c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023c6:	e0cd      	b.n	8002564 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80c2 	beq.w	8002558 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fa53 	bl	800588a <USB_ReadDevInEPInterrupt>
 80023e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d057      	beq.n	80024a0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	2201      	movs	r2, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43db      	mvns	r3, r3
 800240a:	69f9      	ldr	r1, [r7, #28]
 800240c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002410:	4013      	ands	r3, r2
 8002412:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002420:	461a      	mov	r2, r3
 8002422:	2301      	movs	r3, #1
 8002424:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d132      	bne.n	8002494 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	334c      	adds	r3, #76	; 0x4c
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4403      	add	r3, r0
 800244e:	3348      	adds	r3, #72	; 0x48
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4419      	add	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4403      	add	r3, r0
 8002462:	334c      	adds	r3, #76	; 0x4c
 8002464:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d113      	bne.n	8002494 <HAL_PCD_IRQHandler+0x3a2>
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3354      	adds	r3, #84	; 0x54
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d108      	bne.n	8002494 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800248c:	461a      	mov	r2, r3
 800248e:	2101      	movs	r1, #1
 8002490:	f003 fa5a 	bl	8005948 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4619      	mov	r1, r3
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f005 f9ef 	bl	800787e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b6:	461a      	mov	r2, r3
 80024b8:	2308      	movs	r3, #8
 80024ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d2:	461a      	mov	r2, r3
 80024d4:	2310      	movs	r3, #16
 80024d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ee:	461a      	mov	r2, r3
 80024f0:	2340      	movs	r3, #64	; 0x40
 80024f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d023      	beq.n	8002546 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002500:	6a38      	ldr	r0, [r7, #32]
 8002502:	f002 f93b 	bl	800477c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	3338      	adds	r3, #56	; 0x38
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	3304      	adds	r3, #4
 8002518:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	78db      	ldrb	r3, [r3, #3]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f005 fa3c 	bl	80079ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002540:	461a      	mov	r2, r3
 8002542:	2302      	movs	r3, #2
 8002544:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fcc3 	bl	8002ede <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	3301      	adds	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	f47f af2e 	bne.w	80023c8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f003 f925 	bl	80057c0 <USB_ReadInterrupts>
 8002576:	4603      	mov	r3, r0
 8002578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800257c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002580:	d122      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800259c:	2b01      	cmp	r3, #1
 800259e:	d108      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025a8:	2100      	movs	r1, #0
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 feaa 	bl	8003304 <HAL_PCDEx_LPM_Callback>
 80025b0:	e002      	b.n	80025b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f005 f9da 	bl	800796c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 f8f7 	bl	80057c0 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025dc:	d112      	bne.n	8002604 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f005 f996 	bl	8007920 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002602:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f003 f8d9 	bl	80057c0 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002618:	f040 80b7 	bne.w	800278a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2110      	movs	r1, #16
 8002636:	4618      	mov	r0, r3
 8002638:	f002 f8a0 	bl	800477c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002640:	e046      	b.n	80026d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264e:	461a      	mov	r2, r3
 8002650:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002654:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002666:	0151      	lsls	r1, r2, #5
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	440a      	add	r2, r1
 800266c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002670:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002674:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002682:	461a      	mov	r2, r3
 8002684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002688:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ba:	0151      	lsls	r1, r2, #5
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	440a      	add	r2, r1
 80026c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	3301      	adds	r3, #1
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3b3      	bcc.n	8002642 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002706:	f043 030b 	orr.w	r3, r3, #11
 800270a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271c:	f043 030b 	orr.w	r3, r3, #11
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	e015      	b.n	8002750 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002736:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800273a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800274a:	f043 030b 	orr.w	r3, r3, #11
 800274e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002762:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002774:	461a      	mov	r2, r3
 8002776:	f003 f8e7 	bl	8005948 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f003 f816 	bl	80057c0 <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	d124      	bne.n	80027ea <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 f8ac 	bl	8005902 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 f861 	bl	8004876 <USB_GetDevSpeed>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681c      	ldr	r4, [r3, #0]
 80027c0:	f001 fa10 	bl	8003be4 <HAL_RCC_GetHCLKFreq>
 80027c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4620      	mov	r0, r4
 80027d0:	f001 fd60 	bl	8004294 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f005 f87a 	bl	80078ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 ffe6 	bl	80057c0 <USB_ReadInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d10a      	bne.n	8002814 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f005 f857 	bl	80078b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f002 0208 	and.w	r2, r2, #8
 8002812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f002 ffd1 	bl	80057c0 <USB_ReadInterrupts>
 800281e:	4603      	mov	r3, r0
 8002820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d122      	bne.n	800286e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002834:	2301      	movs	r3, #1
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
 8002838:	e014      	b.n	8002864 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d105      	bne.n	800285e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fb0f 	bl	8002e7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	3301      	adds	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	429a      	cmp	r2, r3
 800286c:	d3e5      	bcc.n	800283a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 ffa4 	bl	80057c0 <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002882:	d13b      	bne.n	80028fc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002884:	2301      	movs	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	e02b      	b.n	80028e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3340      	adds	r3, #64	; 0x40
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d115      	bne.n	80028dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da12      	bge.n	80028dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	333f      	adds	r3, #63	; 0x3f
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fad0 	bl	8002e7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	3301      	adds	r3, #1
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d3ce      	bcc.n	800288a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f002 ff5d 	bl	80057c0 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002910:	d155      	bne.n	80029be <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002912:	2301      	movs	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e045      	b.n	80029a4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d12e      	bne.n	800299e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002940:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002942:	2b00      	cmp	r3, #0
 8002944:	da2b      	bge.n	800299e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002952:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002956:	429a      	cmp	r2, r3
 8002958:	d121      	bne.n	800299e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299a:	6053      	str	r3, [r2, #4]
            break;
 800299c:	e007      	b.n	80029ae <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	3301      	adds	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d3b4      	bcc.n	8002918 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fefc 	bl	80057c0 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d10a      	bne.n	80029ea <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f004 fffb 	bl	80079d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 fee6 	bl	80057c0 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d115      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f004 ffeb 	bl	80079ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	e000      	b.n	8002a2a <HAL_PCD_IRQHandler+0x938>
      return;
 8002a28:	bf00      	nop
    }
  }
}
 8002a2a:	3734      	adds	r7, #52	; 0x34
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd90      	pop	{r4, r7, pc}

08002a30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_PCD_SetAddress+0x1a>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e013      	b.n	8002a72 <HAL_PCD_SetAddress+0x42>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fe44 	bl	80056f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	4608      	mov	r0, r1
 8002a84:	4611      	mov	r1, r2
 8002a86:	461a      	mov	r2, r3
 8002a88:	4603      	mov	r3, r0
 8002a8a:	70fb      	strb	r3, [r7, #3]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	803b      	strh	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	da0f      	bge.n	8002ac0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 020f 	and.w	r2, r3, #15
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	3338      	adds	r3, #56	; 0x38
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	705a      	strb	r2, [r3, #1]
 8002abe:	e00f      	b.n	8002ae0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 020f 	and.w	r2, r3, #15
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aec:	883a      	ldrh	r2, [r7, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	78ba      	ldrb	r2, [r7, #2]
 8002af6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d004      	beq.n	8002b0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b0a:	78bb      	ldrb	r3, [r7, #2]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d102      	bne.n	8002b16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_PCD_EP_Open+0xaa>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e00e      	b.n	8002b42 <HAL_PCD_EP_Open+0xc8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 fec4 	bl	80048c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b40:	7afb      	ldrb	r3, [r7, #11]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	da0f      	bge.n	8002b7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	3338      	adds	r3, #56	; 0x38
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	705a      	strb	r2, [r3, #1]
 8002b7c:	e00f      	b.n	8002b9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_PCD_EP_Close+0x6e>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e00e      	b.n	8002bd6 <HAL_PCD_EP_Close+0x8c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68f9      	ldr	r1, [r7, #12]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 ff02 	bl	80049d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	460b      	mov	r3, r1
 8002bec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	f003 020f 	and.w	r2, r3, #15
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	3304      	adds	r3, #4
 8002c06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c20:	7afb      	ldrb	r3, [r7, #11]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d102      	bne.n	8002c3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	f002 f9e1 	bl	8005018 <USB_EP0StartXfer>
 8002c56:	e008      	b.n	8002c6a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	f001 ff8f 	bl	8004b88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	460b      	mov	r3, r1
 8002c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c84:	7afb      	ldrb	r3, [r7, #11]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3338      	adds	r3, #56	; 0x38
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	3304      	adds	r3, #4
 8002c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2200      	movs	r2, #0
 8002cac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cce:	7afb      	ldrb	r3, [r7, #11]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6979      	ldr	r1, [r7, #20]
 8002ce6:	f002 f997 	bl	8005018 <USB_EP0StartXfer>
 8002cea:	e008      	b.n	8002cfe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	6979      	ldr	r1, [r7, #20]
 8002cfa:	f001 ff45 	bl	8004b88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f003 020f 	and.w	r2, r3, #15
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d901      	bls.n	8002d26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e050      	b.n	8002dc8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	da0f      	bge.n	8002d4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	3338      	adds	r3, #56	; 0x38
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	3304      	adds	r3, #4
 8002d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	705a      	strb	r2, [r3, #1]
 8002d4c:	e00d      	b.n	8002d6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3304      	adds	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_PCD_EP_SetStall+0x82>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e01e      	b.n	8002dc8 <HAL_PCD_EP_SetStall+0xc0>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f002 fbd5 	bl	8005548 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	b2d9      	uxtb	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002db8:	461a      	mov	r2, r3
 8002dba:	f002 fdc5 	bl	8005948 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d901      	bls.n	8002dee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e042      	b.n	8002e74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da0f      	bge.n	8002e16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	3338      	adds	r3, #56	; 0x38
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	705a      	strb	r2, [r3, #1]
 8002e14:	e00f      	b.n	8002e36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_PCD_EP_ClrStall+0x86>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e00e      	b.n	8002e74 <HAL_PCD_EP_ClrStall+0xa4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68f9      	ldr	r1, [r7, #12]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fbdd 	bl	8005624 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	da0c      	bge.n	8002eaa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	3338      	adds	r3, #56	; 0x38
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	e00c      	b.n	8002ec4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68f9      	ldr	r1, [r7, #12]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 f9fc 	bl	80052c8 <USB_EPStopXfer>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b08a      	sub	sp, #40	; 0x28
 8002ee2:	af02      	add	r7, sp, #8
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	3338      	adds	r3, #56	; 0x38
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	3304      	adds	r3, #4
 8002f04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1a      	ldr	r2, [r3, #32]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d901      	bls.n	8002f16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e06c      	b.n	8002ff0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d902      	bls.n	8002f32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3303      	adds	r3, #3
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f3a:	e02b      	b.n	8002f94 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d902      	bls.n	8002f58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3303      	adds	r3, #3
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6919      	ldr	r1, [r3, #16]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	4603      	mov	r3, r0
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f002 fa50 	bl	800541c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	441a      	add	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	441a      	add	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d809      	bhi.n	8002fbe <PCD_WriteEmptyTxFifo+0xe0>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d203      	bcs.n	8002fbe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1be      	bne.n	8002f3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d811      	bhi.n	8002fee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	6939      	ldr	r1, [r7, #16]
 8002fe6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fea:	4013      	ands	r3, r2
 8002fec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	333c      	adds	r3, #60	; 0x3c
 8003010:	3304      	adds	r3, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d17b      	bne.n	8003126 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d015      	beq.n	8003064 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	4a61      	ldr	r2, [pc, #388]	; (80031c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	f240 80b9 	bls.w	80031b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80b3 	beq.w	80031b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305a:	461a      	mov	r2, r3
 800305c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	e0a7      	b.n	80031b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307a:	461a      	mov	r2, r3
 800307c:	2320      	movs	r3, #32
 800307e:	6093      	str	r3, [r2, #8]
 8003080:	e098      	b.n	80031b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 8093 	bne.w	80031b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	4a4b      	ldr	r2, [pc, #300]	; (80031c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d90f      	bls.n	80030b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b2:	6093      	str	r3, [r2, #8]
 80030b4:	e07e      	b.n	80031b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	3304      	adds	r3, #4
 80030ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	0159      	lsls	r1, r3, #5
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	440b      	add	r3, r1
 80030d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	1ad2      	subs	r2, r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d114      	bne.n	8003118 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003100:	461a      	mov	r2, r3
 8003102:	2101      	movs	r1, #1
 8003104:	f002 fc20 	bl	8005948 <USB_EP0_OutStart>
 8003108:	e006      	b.n	8003118 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	441a      	add	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f004 fb92 	bl	8007848 <HAL_PCD_DataOutStageCallback>
 8003124:	e046      	b.n	80031b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	4a26      	ldr	r2, [pc, #152]	; (80031c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d124      	bne.n	8003178 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003144:	461a      	mov	r2, r3
 8003146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314a:	6093      	str	r3, [r2, #8]
 800314c:	e032      	b.n	80031b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	2320      	movs	r3, #32
 8003168:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f004 fb69 	bl	8007848 <HAL_PCD_DataOutStageCallback>
 8003176:	e01d      	b.n	80031b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d114      	bne.n	80031a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d108      	bne.n	80031a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031a0:	461a      	mov	r2, r3
 80031a2:	2100      	movs	r1, #0
 80031a4:	f002 fbd0 	bl	8005948 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	4619      	mov	r1, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f004 fb4a 	bl	8007848 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	4f54300a 	.word	0x4f54300a
 80031c4:	4f54310a 	.word	0x4f54310a

080031c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	333c      	adds	r3, #60	; 0x3c
 80031e0:	3304      	adds	r3, #4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a15      	ldr	r2, [pc, #84]	; (8003250 <PCD_EP_OutSetupPacket_int+0x88>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d90e      	bls.n	800321c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003214:	461a      	mov	r2, r3
 8003216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f004 fb01 	bl	8007824 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <PCD_EP_OutSetupPacket_int+0x88>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d90c      	bls.n	8003244 <PCD_EP_OutSetupPacket_int+0x7c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d108      	bne.n	8003244 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800323c:	461a      	mov	r2, r3
 800323e:	2101      	movs	r1, #1
 8003240:	f002 fb82 	bl	8005948 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	4f54300a 	.word	0x4f54300a

08003254 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
 8003260:	4613      	mov	r3, r2
 8003262:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003272:	883b      	ldrh	r3, [r7, #0]
 8003274:	0419      	lsls	r1, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	430a      	orrs	r2, r1
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
 8003280:	e028      	b.n	80032d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	0c1b      	lsrs	r3, r3, #16
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	4413      	add	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	e00d      	b.n	80032b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	3340      	adds	r3, #64	; 0x40
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	4413      	add	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	3301      	adds	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d3ec      	bcc.n	8003296 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032bc:	883b      	ldrh	r3, [r7, #0]
 80032be:	0418      	lsls	r0, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4302      	orrs	r2, r0
 80032cc:	3340      	adds	r3, #64	; 0x40
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e267      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d075      	beq.n	8003426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	4b88      	ldr	r3, [pc, #544]	; (800355c <HAL_RCC_OscConfig+0x240>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b04      	cmp	r3, #4
 8003344:	d00c      	beq.n	8003360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003346:	4b85      	ldr	r3, [pc, #532]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334e:	2b08      	cmp	r3, #8
 8003350:	d112      	bne.n	8003378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003352:	4b82      	ldr	r3, [pc, #520]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335e:	d10b      	bne.n	8003378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	4b7e      	ldr	r3, [pc, #504]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d05b      	beq.n	8003424 <HAL_RCC_OscConfig+0x108>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d157      	bne.n	8003424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e242      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d106      	bne.n	8003390 <HAL_RCC_OscConfig+0x74>
 8003382:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a75      	ldr	r2, [pc, #468]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e01d      	b.n	80033cc <HAL_RCC_OscConfig+0xb0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x98>
 800339a:	4b70      	ldr	r3, [pc, #448]	; (800355c <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a6f      	ldr	r2, [pc, #444]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6c      	ldr	r2, [pc, #432]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e00b      	b.n	80033cc <HAL_RCC_OscConfig+0xb0>
 80033b4:	4b69      	ldr	r3, [pc, #420]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a68      	ldr	r2, [pc, #416]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d013      	beq.n	80033fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe fa1e 	bl	8001814 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe fa1a 	bl	8001814 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e207      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b5b      	ldr	r3, [pc, #364]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0xc0>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fa0a 	bl	8001814 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe fa06 	bl	8001814 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1f3      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0xe8>
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d063      	beq.n	80034fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003446:	2b08      	cmp	r3, #8
 8003448:	d11c      	bne.n	8003484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b44      	ldr	r3, [pc, #272]	; (800355c <HAL_RCC_OscConfig+0x240>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d116      	bne.n	8003484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	4b41      	ldr	r3, [pc, #260]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_RCC_OscConfig+0x152>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e1c7      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4937      	ldr	r1, [pc, #220]	; (800355c <HAL_RCC_OscConfig+0x240>)
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	e03a      	b.n	80034fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d020      	beq.n	80034ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800348c:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_RCC_OscConfig+0x244>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fe f9bf 	bl	8001814 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800349a:	f7fe f9bb 	bl	8001814 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e1a8      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ac:	4b2b      	ldr	r3, [pc, #172]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4925      	ldr	r1, [pc, #148]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]
 80034cc:	e015      	b.n	80034fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_OscConfig+0x244>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe f99e 	bl	8001814 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034dc:	f7fe f99a 	bl	8001814 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e187      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d036      	beq.n	8003574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_RCC_OscConfig+0x248>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fe f97e 	bl	8001814 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351c:	f7fe f97a 	bl	8001814 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e167      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x200>
 800353a:	e01b      	b.n	8003574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_OscConfig+0x248>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fe f967 	bl	8001814 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	e00e      	b.n	8003568 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354a:	f7fe f963 	bl	8001814 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d907      	bls.n	8003568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e150      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
 800355c:	40023800 	.word	0x40023800
 8003560:	42470000 	.word	0x42470000
 8003564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003568:	4b88      	ldr	r3, [pc, #544]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800356a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ea      	bne.n	800354a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8097 	beq.w	80036b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003586:	4b81      	ldr	r3, [pc, #516]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10f      	bne.n	80035b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	4b7d      	ldr	r3, [pc, #500]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a7c      	ldr	r2, [pc, #496]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800359c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b7a      	ldr	r3, [pc, #488]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b2:	4b77      	ldr	r3, [pc, #476]	; (8003790 <HAL_RCC_OscConfig+0x474>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d118      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035be:	4b74      	ldr	r3, [pc, #464]	; (8003790 <HAL_RCC_OscConfig+0x474>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a73      	ldr	r2, [pc, #460]	; (8003790 <HAL_RCC_OscConfig+0x474>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ca:	f7fe f923 	bl	8001814 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d2:	f7fe f91f 	bl	8001814 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e10c      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e4:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <HAL_RCC_OscConfig+0x474>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x2ea>
 80035f8:	4b64      	ldr	r3, [pc, #400]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	4a63      	ldr	r2, [pc, #396]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6713      	str	r3, [r2, #112]	; 0x70
 8003604:	e01c      	b.n	8003640 <HAL_RCC_OscConfig+0x324>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b05      	cmp	r3, #5
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x30c>
 800360e:	4b5f      	ldr	r3, [pc, #380]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a5e      	ldr	r2, [pc, #376]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
 800361a:	4b5c      	ldr	r3, [pc, #368]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a5b      	ldr	r2, [pc, #364]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0x324>
 8003628:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4a57      	ldr	r2, [pc, #348]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	6713      	str	r3, [r2, #112]	; 0x70
 8003634:	4b55      	ldr	r3, [pc, #340]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a54      	ldr	r2, [pc, #336]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800363a:	f023 0304 	bic.w	r3, r3, #4
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fe f8e4 	bl	8001814 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364e:	e00a      	b.n	8003666 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f7fe f8e0 	bl	8001814 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0cb      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	4b49      	ldr	r3, [pc, #292]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0ee      	beq.n	8003650 <HAL_RCC_OscConfig+0x334>
 8003672:	e014      	b.n	800369e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003674:	f7fe f8ce 	bl	8001814 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fe f8ca 	bl	8001814 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e0b5      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003692:	4b3e      	ldr	r3, [pc, #248]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ee      	bne.n	800367c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369e:	7dfb      	ldrb	r3, [r7, #23]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d105      	bne.n	80036b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a4:	4b39      	ldr	r3, [pc, #228]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	4a38      	ldr	r2, [pc, #224]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a1 	beq.w	80037fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ba:	4b34      	ldr	r3, [pc, #208]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d05c      	beq.n	8003780 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d141      	bne.n	8003752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_RCC_OscConfig+0x478>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe f89e 	bl	8001814 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe f89a 	bl	8001814 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e087      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	019b      	lsls	r3, r3, #6
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	3b01      	subs	r3, #1
 8003714:	041b      	lsls	r3, r3, #16
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	061b      	lsls	r3, r3, #24
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x478>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fe f873 	bl	8001814 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe f86f 	bl	8001814 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e05c      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x416>
 8003750:	e054      	b.n	80037fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCC_OscConfig+0x478>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe f85c 	bl	8001814 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe f858 	bl	8001814 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e045      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x444>
 800377e:	e03d      	b.n	80037fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e038      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
 800378c:	40023800 	.word	0x40023800
 8003790:	40007000 	.word	0x40007000
 8003794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x4ec>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d028      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d121      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d11a      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c8:	4013      	ands	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d111      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	3b01      	subs	r3, #1
 80037e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800

0800380c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0cc      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b68      	ldr	r3, [pc, #416]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d90c      	bls.n	8003848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b65      	ldr	r3, [pc, #404]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0b8      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d020      	beq.n	8003896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003860:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800386a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003878:	4b53      	ldr	r3, [pc, #332]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a52      	ldr	r2, [pc, #328]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	494d      	ldr	r1, [pc, #308]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d044      	beq.n	800392c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d119      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e07f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e067      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4934      	ldr	r1, [pc, #208]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038fc:	f7fd ff8a 	bl	8001814 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	e00a      	b.n	800391a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003904:	f7fd ff86 	bl	8001814 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e04f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 020c 	and.w	r2, r3, #12
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	429a      	cmp	r2, r3
 800392a:	d1eb      	bne.n	8003904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d20c      	bcs.n	8003954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e032      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4916      	ldr	r1, [pc, #88]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	490e      	ldr	r1, [pc, #56]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003992:	f000 f821 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8003996:	4602      	mov	r2, r0
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	490a      	ldr	r1, [pc, #40]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	5ccb      	ldrb	r3, [r1, r3]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd feea 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023c00 	.word	0x40023c00
 80039c8:	40023800 	.word	0x40023800
 80039cc:	08008f60 	.word	0x08008f60
 80039d0:	20000000 	.word	0x20000000
 80039d4:	20000004 	.word	0x20000004

080039d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039dc:	b094      	sub	sp, #80	; 0x50
 80039de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	647b      	str	r3, [r7, #68]	; 0x44
 80039e4:	2300      	movs	r3, #0
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e8:	2300      	movs	r3, #0
 80039ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f0:	4b79      	ldr	r3, [pc, #484]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d00d      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x40>
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	f200 80e1 	bhi.w	8003bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x34>
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d003      	beq.n	8003a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a0a:	e0db      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b73      	ldr	r3, [pc, #460]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8003a0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a10:	e0db      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a12:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a16:	e0d8      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a18:	4b6f      	ldr	r3, [pc, #444]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a22:	4b6d      	ldr	r3, [pc, #436]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d063      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2e:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	099b      	lsrs	r3, r3, #6
 8003a34:	2200      	movs	r2, #0
 8003a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a40:	633b      	str	r3, [r7, #48]	; 0x30
 8003a42:	2300      	movs	r3, #0
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34
 8003a46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	f04f 0000 	mov.w	r0, #0
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	0159      	lsls	r1, r3, #5
 8003a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a5c:	0150      	lsls	r0, r2, #5
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4621      	mov	r1, r4
 8003a64:	1a51      	subs	r1, r2, r1
 8003a66:	6139      	str	r1, [r7, #16]
 8003a68:	4629      	mov	r1, r5
 8003a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	018b      	lsls	r3, r1, #6
 8003a80:	4651      	mov	r1, sl
 8003a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a86:	4651      	mov	r1, sl
 8003a88:	018a      	lsls	r2, r1, #6
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a90:	4659      	mov	r1, fp
 8003a92:	eb63 0901 	sbc.w	r9, r3, r1
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aaa:	4690      	mov	r8, r2
 8003aac:	4699      	mov	r9, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	eb18 0303 	adds.w	r3, r8, r3
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	eb49 0303 	adc.w	r3, r9, r3
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aca:	4629      	mov	r1, r5
 8003acc:	024b      	lsls	r3, r1, #9
 8003ace:	4621      	mov	r1, r4
 8003ad0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	024a      	lsls	r2, r1, #9
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ade:	2200      	movs	r2, #0
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ae8:	f7fd f850 	bl	8000b8c <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4613      	mov	r3, r2
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af4:	e058      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	2200      	movs	r2, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	4611      	mov	r1, r2
 8003b02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b06:	623b      	str	r3, [r7, #32]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	f04f 0000 	mov.w	r0, #0
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	0159      	lsls	r1, r3, #5
 8003b1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b22:	0150      	lsls	r0, r2, #5
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4641      	mov	r1, r8
 8003b2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b2e:	4649      	mov	r1, r9
 8003b30:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b48:	ebb2 040a 	subs.w	r4, r2, sl
 8003b4c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	00eb      	lsls	r3, r5, #3
 8003b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b5e:	00e2      	lsls	r2, r4, #3
 8003b60:	4614      	mov	r4, r2
 8003b62:	461d      	mov	r5, r3
 8003b64:	4643      	mov	r3, r8
 8003b66:	18e3      	adds	r3, r4, r3
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	eb45 0303 	adc.w	r3, r5, r3
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b7e:	4629      	mov	r1, r5
 8003b80:	028b      	lsls	r3, r1, #10
 8003b82:	4621      	mov	r1, r4
 8003b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b88:	4621      	mov	r1, r4
 8003b8a:	028a      	lsls	r2, r1, #10
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b92:	2200      	movs	r2, #0
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	61fa      	str	r2, [r7, #28]
 8003b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b9c:	f7fc fff6 	bl	8000b8c <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bc2:	e002      	b.n	8003bca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x204>)
 8003bc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3750      	adds	r7, #80	; 0x50
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	00f42400 	.word	0x00f42400
 8003be0:	007a1200 	.word	0x007a1200

08003be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20000000 	.word	0x20000000

08003bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c00:	f7ff fff0 	bl	8003be4 <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	0a9b      	lsrs	r3, r3, #10
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4903      	ldr	r1, [pc, #12]	; (8003c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	08008f70 	.word	0x08008f70

08003c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c28:	f7ff ffdc 	bl	8003be4 <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	0b5b      	lsrs	r3, r3, #13
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4903      	ldr	r1, [pc, #12]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	08008f70 	.word	0x08008f70

08003c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e03f      	b.n	8003cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fcb0 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2224      	movs	r2, #36	; 0x24
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f829 	bl	8003ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cec:	b0c0      	sub	sp, #256	; 0x100
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	68d9      	ldr	r1, [r3, #12]
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	ea40 0301 	orr.w	r3, r0, r1
 8003d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d40:	f021 010c 	bic.w	r1, r1, #12
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d62:	6999      	ldr	r1, [r3, #24]
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	ea40 0301 	orr.w	r3, r0, r1
 8003d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b8f      	ldr	r3, [pc, #572]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d005      	beq.n	8003d88 <UART_SetConfig+0xa0>
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b8d      	ldr	r3, [pc, #564]	; (8003fb8 <UART_SetConfig+0x2d0>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d104      	bne.n	8003d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7ff ff4c 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d90:	e003      	b.n	8003d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d92:	f7ff ff33 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 8003d96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da4:	f040 810c 	bne.w	8003fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003db2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dba:	4622      	mov	r2, r4
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	1891      	adds	r1, r2, r2
 8003dc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dc2:	415b      	adcs	r3, r3
 8003dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dca:	4621      	mov	r1, r4
 8003dcc:	eb12 0801 	adds.w	r8, r2, r1
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	eb43 0901 	adc.w	r9, r3, r1
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dea:	4690      	mov	r8, r2
 8003dec:	4699      	mov	r9, r3
 8003dee:	4623      	mov	r3, r4
 8003df0:	eb18 0303 	adds.w	r3, r8, r3
 8003df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003df8:	462b      	mov	r3, r5
 8003dfa:	eb49 0303 	adc.w	r3, r9, r3
 8003dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e16:	460b      	mov	r3, r1
 8003e18:	18db      	adds	r3, r3, r3
 8003e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	eb42 0303 	adc.w	r3, r2, r3
 8003e22:	657b      	str	r3, [r7, #84]	; 0x54
 8003e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e2c:	f7fc feae 	bl	8000b8c <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4b61      	ldr	r3, [pc, #388]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003e36:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	011c      	lsls	r4, r3, #4
 8003e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e50:	4642      	mov	r2, r8
 8003e52:	464b      	mov	r3, r9
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e60:	4641      	mov	r1, r8
 8003e62:	eb12 0a01 	adds.w	sl, r2, r1
 8003e66:	4649      	mov	r1, r9
 8003e68:	eb43 0b01 	adc.w	fp, r3, r1
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e80:	4692      	mov	sl, r2
 8003e82:	469b      	mov	fp, r3
 8003e84:	4643      	mov	r3, r8
 8003e86:	eb1a 0303 	adds.w	r3, sl, r3
 8003e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	eb4b 0303 	adc.w	r3, fp, r3
 8003e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003eac:	460b      	mov	r3, r1
 8003eae:	18db      	adds	r3, r3, r3
 8003eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ec2:	f7fc fe63 	bl	8000b8c <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003ece:	fba3 2301 	umull	r2, r3, r3, r1
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2264      	movs	r2, #100	; 0x64
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	1acb      	subs	r3, r1, r3
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ee2:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ef0:	441c      	add	r4, r3
 8003ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003efc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f14:	4641      	mov	r1, r8
 8003f16:	1851      	adds	r1, r2, r1
 8003f18:	6339      	str	r1, [r7, #48]	; 0x30
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	414b      	adcs	r3, r1
 8003f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	00cb      	lsls	r3, r1, #3
 8003f30:	4651      	mov	r1, sl
 8003f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f36:	4651      	mov	r1, sl
 8003f38:	00ca      	lsls	r2, r1, #3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4642      	mov	r2, r8
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f48:	464b      	mov	r3, r9
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f68:	460b      	mov	r3, r1
 8003f6a:	18db      	adds	r3, r3, r3
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6e:	4613      	mov	r3, r2
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f7e:	f7fc fe05 	bl	8000b8c <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	; 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	3332      	adds	r3, #50	; 0x32
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 0207 	and.w	r2, r3, #7
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4422      	add	r2, r4
 8003fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fb0:	e106      	b.n	80041c0 <UART_SetConfig+0x4d8>
 8003fb2:	bf00      	nop
 8003fb4:	40011000 	.word	0x40011000
 8003fb8:	40011400 	.word	0x40011400
 8003fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fd2:	4642      	mov	r2, r8
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	1891      	adds	r1, r2, r2
 8003fd8:	6239      	str	r1, [r7, #32]
 8003fda:	415b      	adcs	r3, r3
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	1854      	adds	r4, r2, r1
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	eb43 0501 	adc.w	r5, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	00eb      	lsls	r3, r5, #3
 8003ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffa:	00e2      	lsls	r2, r4, #3
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	461d      	mov	r5, r3
 8004000:	4643      	mov	r3, r8
 8004002:	18e3      	adds	r3, r4, r3
 8004004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004008:	464b      	mov	r3, r9
 800400a:	eb45 0303 	adc.w	r3, r5, r3
 800400e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800401e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800402e:	4629      	mov	r1, r5
 8004030:	008b      	lsls	r3, r1, #2
 8004032:	4621      	mov	r1, r4
 8004034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004038:	4621      	mov	r1, r4
 800403a:	008a      	lsls	r2, r1, #2
 800403c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004040:	f7fc fda4 	bl	8000b8c <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4b60      	ldr	r3, [pc, #384]	; (80041cc <UART_SetConfig+0x4e4>)
 800404a:	fba3 2302 	umull	r2, r3, r3, r2
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	011c      	lsls	r4, r3, #4
 8004052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800405c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	1891      	adds	r1, r2, r2
 800406a:	61b9      	str	r1, [r7, #24]
 800406c:	415b      	adcs	r3, r3
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004074:	4641      	mov	r1, r8
 8004076:	1851      	adds	r1, r2, r1
 8004078:	6139      	str	r1, [r7, #16]
 800407a:	4649      	mov	r1, r9
 800407c:	414b      	adcs	r3, r1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800408c:	4659      	mov	r1, fp
 800408e:	00cb      	lsls	r3, r1, #3
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004096:	4651      	mov	r1, sl
 8004098:	00ca      	lsls	r2, r1, #3
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	4642      	mov	r2, r8
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040a8:	464b      	mov	r3, r9
 80040aa:	460a      	mov	r2, r1
 80040ac:	eb42 0303 	adc.w	r3, r2, r3
 80040b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80040be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040cc:	4649      	mov	r1, r9
 80040ce:	008b      	lsls	r3, r1, #2
 80040d0:	4641      	mov	r1, r8
 80040d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d6:	4641      	mov	r1, r8
 80040d8:	008a      	lsls	r2, r1, #2
 80040da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040de:	f7fc fd55 	bl	8000b8c <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	4b38      	ldr	r3, [pc, #224]	; (80041cc <UART_SetConfig+0x4e4>)
 80040ea:	fba3 2301 	umull	r2, r3, r3, r1
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2264      	movs	r2, #100	; 0x64
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	1acb      	subs	r3, r1, r3
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	3332      	adds	r3, #50	; 0x32
 80040fc:	4a33      	ldr	r2, [pc, #204]	; (80041cc <UART_SetConfig+0x4e4>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004108:	441c      	add	r4, r3
 800410a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410e:	2200      	movs	r2, #0
 8004110:	673b      	str	r3, [r7, #112]	; 0x70
 8004112:	677a      	str	r2, [r7, #116]	; 0x74
 8004114:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	1891      	adds	r1, r2, r2
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	415b      	adcs	r3, r3
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004128:	4641      	mov	r1, r8
 800412a:	1851      	adds	r1, r2, r1
 800412c:	6039      	str	r1, [r7, #0]
 800412e:	4649      	mov	r1, r9
 8004130:	414b      	adcs	r3, r1
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004140:	4659      	mov	r1, fp
 8004142:	00cb      	lsls	r3, r1, #3
 8004144:	4651      	mov	r1, sl
 8004146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800414a:	4651      	mov	r1, sl
 800414c:	00ca      	lsls	r2, r1, #3
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	4603      	mov	r3, r0
 8004154:	4642      	mov	r2, r8
 8004156:	189b      	adds	r3, r3, r2
 8004158:	66bb      	str	r3, [r7, #104]	; 0x68
 800415a:	464b      	mov	r3, r9
 800415c:	460a      	mov	r2, r1
 800415e:	eb42 0303 	adc.w	r3, r2, r3
 8004162:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	663b      	str	r3, [r7, #96]	; 0x60
 800416e:	667a      	str	r2, [r7, #100]	; 0x64
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800417c:	4649      	mov	r1, r9
 800417e:	008b      	lsls	r3, r1, #2
 8004180:	4641      	mov	r1, r8
 8004182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004186:	4641      	mov	r1, r8
 8004188:	008a      	lsls	r2, r1, #2
 800418a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800418e:	f7fc fcfd 	bl	8000b8c <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <UART_SetConfig+0x4e4>)
 8004198:	fba3 1302 	umull	r1, r3, r3, r2
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	2164      	movs	r1, #100	; 0x64
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	3332      	adds	r3, #50	; 0x32
 80041aa:	4a08      	ldr	r2, [pc, #32]	; (80041cc <UART_SetConfig+0x4e4>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	f003 020f 	and.w	r2, r3, #15
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4422      	add	r2, r4
 80041be:	609a      	str	r2, [r3, #8]
}
 80041c0:	bf00      	nop
 80041c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041c6:	46bd      	mov	sp, r7
 80041c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041cc:	51eb851f 	.word	0x51eb851f

080041d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041d0:	b084      	sub	sp, #16
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	f107 001c 	add.w	r0, r7, #28
 80041de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d122      	bne.n	800422e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d105      	bne.n	8004222 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f001 fbee 	bl	8005a04 <USB_CoreReset>
 8004228:	4603      	mov	r3, r0
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	e01a      	b.n	8004264 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f001 fbe2 	bl	8005a04 <USB_CoreReset>
 8004240:	4603      	mov	r3, r0
 8004242:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
 8004256:	e005      	b.n	8004264 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	2b01      	cmp	r3, #1
 8004268:	d10b      	bne.n	8004282 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f043 0206 	orr.w	r2, r3, #6
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800428e:	b004      	add	sp, #16
 8004290:	4770      	bx	lr
	...

08004294 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	4613      	mov	r3, r2
 80042a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d165      	bne.n	8004374 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4a41      	ldr	r2, [pc, #260]	; (80043b0 <USB_SetTurnaroundTime+0x11c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d906      	bls.n	80042be <USB_SetTurnaroundTime+0x2a>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4a40      	ldr	r2, [pc, #256]	; (80043b4 <USB_SetTurnaroundTime+0x120>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d202      	bcs.n	80042be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042b8:	230f      	movs	r3, #15
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e062      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4a3c      	ldr	r2, [pc, #240]	; (80043b4 <USB_SetTurnaroundTime+0x120>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d306      	bcc.n	80042d4 <USB_SetTurnaroundTime+0x40>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <USB_SetTurnaroundTime+0x124>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d202      	bcs.n	80042d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042ce:	230e      	movs	r3, #14
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e057      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a38      	ldr	r2, [pc, #224]	; (80043b8 <USB_SetTurnaroundTime+0x124>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d306      	bcc.n	80042ea <USB_SetTurnaroundTime+0x56>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4a37      	ldr	r2, [pc, #220]	; (80043bc <USB_SetTurnaroundTime+0x128>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d202      	bcs.n	80042ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042e4:	230d      	movs	r3, #13
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e04c      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4a33      	ldr	r2, [pc, #204]	; (80043bc <USB_SetTurnaroundTime+0x128>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d306      	bcc.n	8004300 <USB_SetTurnaroundTime+0x6c>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4a32      	ldr	r2, [pc, #200]	; (80043c0 <USB_SetTurnaroundTime+0x12c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d802      	bhi.n	8004300 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042fa:	230c      	movs	r3, #12
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e041      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a2f      	ldr	r2, [pc, #188]	; (80043c0 <USB_SetTurnaroundTime+0x12c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d906      	bls.n	8004316 <USB_SetTurnaroundTime+0x82>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a2e      	ldr	r2, [pc, #184]	; (80043c4 <USB_SetTurnaroundTime+0x130>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d802      	bhi.n	8004316 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004310:	230b      	movs	r3, #11
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	e036      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <USB_SetTurnaroundTime+0x130>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d906      	bls.n	800432c <USB_SetTurnaroundTime+0x98>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <USB_SetTurnaroundTime+0x134>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d802      	bhi.n	800432c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004326:	230a      	movs	r3, #10
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e02b      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <USB_SetTurnaroundTime+0x134>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d906      	bls.n	8004342 <USB_SetTurnaroundTime+0xae>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4a25      	ldr	r2, [pc, #148]	; (80043cc <USB_SetTurnaroundTime+0x138>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d202      	bcs.n	8004342 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800433c:	2309      	movs	r3, #9
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	e020      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4a21      	ldr	r2, [pc, #132]	; (80043cc <USB_SetTurnaroundTime+0x138>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d306      	bcc.n	8004358 <USB_SetTurnaroundTime+0xc4>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4a20      	ldr	r2, [pc, #128]	; (80043d0 <USB_SetTurnaroundTime+0x13c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d802      	bhi.n	8004358 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004352:	2308      	movs	r3, #8
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e015      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <USB_SetTurnaroundTime+0x13c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d906      	bls.n	800436e <USB_SetTurnaroundTime+0xda>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <USB_SetTurnaroundTime+0x140>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d202      	bcs.n	800436e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004368:	2307      	movs	r3, #7
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e00a      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800436e:	2306      	movs	r3, #6
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e007      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800437a:	2309      	movs	r3, #9
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e001      	b.n	8004384 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004380:	2309      	movs	r3, #9
 8004382:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	029b      	lsls	r3, r3, #10
 8004398:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800439c:	431a      	orrs	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	00d8acbf 	.word	0x00d8acbf
 80043b4:	00e4e1c0 	.word	0x00e4e1c0
 80043b8:	00f42400 	.word	0x00f42400
 80043bc:	01067380 	.word	0x01067380
 80043c0:	011a499f 	.word	0x011a499f
 80043c4:	01312cff 	.word	0x01312cff
 80043c8:	014ca43f 	.word	0x014ca43f
 80043cc:	016e3600 	.word	0x016e3600
 80043d0:	01a6ab1f 	.word	0x01a6ab1f
 80043d4:	01e84800 	.word	0x01e84800

080043d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f023 0201 	bic.w	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d115      	bne.n	800446a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800444a:	2001      	movs	r0, #1
 800444c:	f7fd f9ee 	bl	800182c <HAL_Delay>
      ms++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3301      	adds	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f001 fa45 	bl	80058e6 <USB_GetMode>
 800445c:	4603      	mov	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d01e      	beq.n	80044a0 <USB_SetCurrentMode+0x84>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b31      	cmp	r3, #49	; 0x31
 8004466:	d9f0      	bls.n	800444a <USB_SetCurrentMode+0x2e>
 8004468:	e01a      	b.n	80044a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d115      	bne.n	800449c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800447c:	2001      	movs	r0, #1
 800447e:	f7fd f9d5 	bl	800182c <HAL_Delay>
      ms++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3301      	adds	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f001 fa2c 	bl	80058e6 <USB_GetMode>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <USB_SetCurrentMode+0x84>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b31      	cmp	r3, #49	; 0x31
 8004498:	d9f0      	bls.n	800447c <USB_SetCurrentMode+0x60>
 800449a:	e001      	b.n	80044a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e005      	b.n	80044ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b32      	cmp	r3, #50	; 0x32
 80044a4:	d101      	bne.n	80044aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b4:	b084      	sub	sp, #16
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e009      	b.n	80044e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	3340      	adds	r3, #64	; 0x40
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3301      	adds	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b0e      	cmp	r3, #14
 80044ec:	d9f2      	bls.n	80044d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11c      	bne.n	800452e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004502:	f043 0302 	orr.w	r3, r3, #2
 8004506:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
 800452c:	e00b      	b.n	8004546 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800454c:	461a      	mov	r2, r3
 800454e:	2300      	movs	r3, #0
 8004550:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	4619      	mov	r1, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004560:	461a      	mov	r2, r3
 8004562:	680b      	ldr	r3, [r1, #0]
 8004564:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10c      	bne.n	8004586 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004572:	2100      	movs	r1, #0
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f965 	bl	8004844 <USB_SetDevSpeed>
 800457a:	e008      	b.n	800458e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800457c:	2101      	movs	r1, #1
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f960 	bl	8004844 <USB_SetDevSpeed>
 8004584:	e003      	b.n	800458e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004586:	2103      	movs	r1, #3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f95b 	bl	8004844 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800458e:	2110      	movs	r1, #16
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f8f3 	bl	800477c <USB_FlushTxFifo>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f91f 	bl	80047e4 <USB_FlushRxFifo>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	461a      	mov	r2, r3
 80045b8:	2300      	movs	r3, #0
 80045ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c2:	461a      	mov	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ce:	461a      	mov	r2, r3
 80045d0:	2300      	movs	r3, #0
 80045d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	e043      	b.n	8004662 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045f0:	d118      	bne.n	8004624 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	461a      	mov	r2, r3
 8004606:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	e013      	b.n	8004636 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461a:	461a      	mov	r2, r3
 800461c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e008      	b.n	8004636 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	461a      	mov	r2, r3
 8004632:	2300      	movs	r3, #0
 8004634:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004642:	461a      	mov	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	461a      	mov	r2, r3
 8004656:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800465a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	3301      	adds	r3, #1
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	429a      	cmp	r2, r3
 8004668:	d3b7      	bcc.n	80045da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	e043      	b.n	80046f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004686:	d118      	bne.n	80046ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e013      	b.n	80046cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	461a      	mov	r2, r3
 80046b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e008      	b.n	80046cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	461a      	mov	r2, r3
 80046c8:	2300      	movs	r3, #0
 80046ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	461a      	mov	r2, r3
 80046da:	2300      	movs	r3, #0
 80046dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ea:	461a      	mov	r2, r3
 80046ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3301      	adds	r3, #1
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d3b7      	bcc.n	8004670 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800470e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004712:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004720:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	2b00      	cmp	r3, #0
 8004726:	d105      	bne.n	8004734 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f043 0210 	orr.w	r2, r3, #16
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699a      	ldr	r2, [r3, #24]
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <USB_DevInit+0x2c4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f043 0208 	orr.w	r2, r3, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d107      	bne.n	8004768 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004774:	b004      	add	sp, #16
 8004776:	4770      	bx	lr
 8004778:	803c3800 	.word	0x803c3800

0800477c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <USB_FlushTxFifo+0x64>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e01b      	b.n	80047d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	daf2      	bge.n	800478a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	019b      	lsls	r3, r3, #6
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <USB_FlushTxFifo+0x64>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e006      	b.n	80047d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d0f0      	beq.n	80047b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	00030d40 	.word	0x00030d40

080047e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a11      	ldr	r2, [pc, #68]	; (8004840 <USB_FlushRxFifo+0x5c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e018      	b.n	8004834 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	daf2      	bge.n	80047f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2210      	movs	r2, #16
 8004812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a08      	ldr	r2, [pc, #32]	; (8004840 <USB_FlushRxFifo+0x5c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e006      	b.n	8004834 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b10      	cmp	r3, #16
 8004830:	d0f0      	beq.n	8004814 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	00030d40 	.word	0x00030d40

08004844 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004876:	b480      	push	{r7}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0306 	and.w	r3, r3, #6
 800488e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004896:	2300      	movs	r3, #0
 8004898:	75fb      	strb	r3, [r7, #23]
 800489a:	e00a      	b.n	80048b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d002      	beq.n	80048a8 <USB_GetDevSpeed+0x32>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b06      	cmp	r3, #6
 80048a6:	d102      	bne.n	80048ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048a8:	2302      	movs	r3, #2
 80048aa:	75fb      	strb	r3, [r7, #23]
 80048ac:	e001      	b.n	80048b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048ae:	230f      	movs	r3, #15
 80048b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d13a      	bne.n	8004952 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	2101      	movs	r1, #1
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d155      	bne.n	80049c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	791b      	ldrb	r3, [r3, #4]
 800492e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004930:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	059b      	lsls	r3, r3, #22
 8004936:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004938:	4313      	orrs	r3, r2
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	440a      	add	r2, r1
 8004942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	e036      	b.n	80049c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	68f9      	ldr	r1, [r7, #12]
 800496c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004970:	4313      	orrs	r3, r2
 8004972:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11a      	bne.n	80049c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	791b      	ldrb	r3, [r3, #4]
 80049a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049a6:	430b      	orrs	r3, r1
 80049a8:	4313      	orrs	r3, r2
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d161      	bne.n	8004ab0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a02:	d11f      	bne.n	8004a44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	68f9      	ldr	r1, [r7, #12]
 8004a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a64:	4013      	ands	r3, r2
 8004a66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	2101      	movs	r1, #1
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	0159      	lsls	r1, r3, #5
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	440b      	add	r3, r1
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <USB_DeactivateEndpoint+0x1b0>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
 8004aae:	e060      	b.n	8004b72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ac6:	d11f      	bne.n	8004b08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ae6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	2101      	movs	r1, #1
 8004b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1e:	041b      	lsls	r3, r3, #16
 8004b20:	43db      	mvns	r3, r3
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b28:	4013      	ands	r3, r2
 8004b2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b42:	041b      	lsls	r3, r3, #16
 8004b44:	43db      	mvns	r3, r3
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	0159      	lsls	r1, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	440b      	add	r3, r1
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <USB_DeactivateEndpoint+0x1b4>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	ec337800 	.word	0xec337800
 8004b84:	eff37800 	.word	0xeff37800

08004b88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	f040 815c 	bne.w	8004e62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d132      	bne.n	8004c18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c10:	0cdb      	lsrs	r3, r3, #19
 8004c12:	04db      	lsls	r3, r3, #19
 8004c14:	6113      	str	r3, [r2, #16]
 8004c16:	e074      	b.n	8004d02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c32:	0cdb      	lsrs	r3, r3, #19
 8004c34:	04db      	lsls	r3, r3, #19
 8004c36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6999      	ldr	r1, [r3, #24]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	440b      	add	r3, r1
 8004c74:	1e59      	subs	r1, r3, #1
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c80:	4b9d      	ldr	r3, [pc, #628]	; (8004ef8 <USB_EPStartXfer+0x370>)
 8004c82:	400b      	ands	r3, r1
 8004c84:	69b9      	ldr	r1, [r7, #24]
 8004c86:	0148      	lsls	r0, r1, #5
 8004c88:	69f9      	ldr	r1, [r7, #28]
 8004c8a:	4401      	add	r1, r0
 8004c8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c90:	4313      	orrs	r3, r2
 8004c92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004caa:	69b9      	ldr	r1, [r7, #24]
 8004cac:	0148      	lsls	r0, r1, #5
 8004cae:	69f9      	ldr	r1, [r7, #28]
 8004cb0:	4401      	add	r1, r0
 8004cb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	791b      	ldrb	r3, [r3, #4]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d11f      	bne.n	8004d02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ce0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d14b      	bne.n	8004da0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d009      	beq.n	8004d24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	791b      	ldrb	r3, [r3, #4]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d128      	bne.n	8004d7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d110      	bne.n	8004d5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	e00f      	b.n	8004d7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e133      	b.n	8005008 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	791b      	ldrb	r3, [r3, #4]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d015      	beq.n	8004df4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 811b 	beq.w	8005008 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	2101      	movs	r1, #1
 8004de4:	fa01 f303 	lsl.w	r3, r1, r3
 8004de8:	69f9      	ldr	r1, [r7, #28]
 8004dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dee:	4313      	orrs	r3, r2
 8004df0:	634b      	str	r3, [r1, #52]	; 0x34
 8004df2:	e109      	b.n	8005008 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d110      	bne.n	8004e26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	e00f      	b.n	8004e46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6919      	ldr	r1, [r3, #16]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	b298      	uxth	r0, r3
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	4603      	mov	r3, r0
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fade 	bl	800541c <USB_WritePacket>
 8004e60:	e0d2      	b.n	8005008 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	0151      	lsls	r1, r2, #5
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	440a      	add	r2, r1
 8004e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7c:	0cdb      	lsrs	r3, r3, #19
 8004e7e:	04db      	lsls	r3, r3, #19
 8004e80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ea0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ea4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d126      	bne.n	8004efc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec4:	69b9      	ldr	r1, [r7, #24]
 8004ec6:	0148      	lsls	r0, r1, #5
 8004ec8:	69f9      	ldr	r1, [r7, #28]
 8004eca:	4401      	add	r1, r0
 8004ecc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ef2:	6113      	str	r3, [r2, #16]
 8004ef4:	e03a      	b.n	8004f6c <USB_EPStartXfer+0x3e4>
 8004ef6:	bf00      	nop
 8004ef8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4413      	add	r3, r2
 8004f06:	1e5a      	subs	r2, r3, #1
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	8afa      	ldrh	r2, [r7, #22]
 8004f18:	fb03 f202 	mul.w	r2, r3, r2
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	8afb      	ldrh	r3, [r7, #22]
 8004f30:	04d9      	lsls	r1, r3, #19
 8004f32:	4b38      	ldr	r3, [pc, #224]	; (8005014 <USB_EPStartXfer+0x48c>)
 8004f34:	400b      	ands	r3, r1
 8004f36:	69b9      	ldr	r1, [r7, #24]
 8004f38:	0148      	lsls	r0, r1, #5
 8004f3a:	69f9      	ldr	r1, [r7, #28]
 8004f3c:	4401      	add	r1, r0
 8004f3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f42:	4313      	orrs	r3, r2
 8004f44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f5c:	69b9      	ldr	r1, [r7, #24]
 8004f5e:	0148      	lsls	r0, r1, #5
 8004f60:	69f9      	ldr	r1, [r7, #28]
 8004f62:	4401      	add	r1, r0
 8004f64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d10d      	bne.n	8004f8e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6919      	ldr	r1, [r3, #16]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	791b      	ldrb	r3, [r3, #4]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d128      	bne.n	8004fe8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d110      	bne.n	8004fc8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e00f      	b.n	8004fe8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005002:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005006:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	1ff80000 	.word	0x1ff80000

08005018 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	4613      	mov	r3, r2
 8005024:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	2b01      	cmp	r3, #1
 8005036:	f040 80ce 	bne.w	80051d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d132      	bne.n	80050a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005060:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005084:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	440a      	add	r2, r1
 800509c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a0:	0cdb      	lsrs	r3, r3, #19
 80050a2:	04db      	lsls	r3, r3, #19
 80050a4:	6113      	str	r3, [r2, #16]
 80050a6:	e04e      	b.n	8005146 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c2:	0cdb      	lsrs	r3, r3, #19
 80050c4:	04db      	lsls	r3, r3, #19
 80050c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d903      	bls.n	8005100 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800511e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005136:	6939      	ldr	r1, [r7, #16]
 8005138:	0148      	lsls	r0, r1, #5
 800513a:	6979      	ldr	r1, [r7, #20]
 800513c:	4401      	add	r1, r0
 800513e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005142:	4313      	orrs	r3, r2
 8005144:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d11e      	bne.n	800518a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	461a      	mov	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005182:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	e097      	b.n	80052ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8083 	beq.w	80052ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	2101      	movs	r1, #1
 80051c6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ca:	6979      	ldr	r1, [r7, #20]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d0:	4313      	orrs	r3, r2
 80051d2:	634b      	str	r3, [r1, #52]	; 0x34
 80051d4:	e071      	b.n	80052ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f0:	0cdb      	lsrs	r3, r3, #19
 80051f2:	04db      	lsls	r3, r3, #19
 80051f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005218:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005250:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005268:	6939      	ldr	r1, [r7, #16]
 800526a:	0148      	lsls	r0, r1, #5
 800526c:	6979      	ldr	r1, [r7, #20]
 800526e:	4401      	add	r1, r0
 8005270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005274:	4313      	orrs	r3, r2
 8005276:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10d      	bne.n	800529a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6919      	ldr	r1, [r3, #16]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	460a      	mov	r2, r1
 8005298:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d14a      	bne.n	800537c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052fe:	f040 8086 	bne.w	800540e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005320:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005324:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005348:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f242 7210 	movw	r2, #10000	; 0x2710
 8005356:	4293      	cmp	r3, r2
 8005358:	d902      	bls.n	8005360 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
          break;
 800535e:	e056      	b.n	800540e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005378:	d0e7      	beq.n	800534a <USB_EPStopXfer+0x82>
 800537a:	e048      	b.n	800540e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005394:	d13b      	bne.n	800540e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	7812      	ldrb	r2, [r2, #0]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	7812      	ldrb	r2, [r2, #0]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3301      	adds	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d902      	bls.n	80053f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
          break;
 80053f2:	e00c      	b.n	800540e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540c:	d0e7      	beq.n	80053de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800540e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005410:	4618      	mov	r0, r3
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800541c:	b480      	push	{r7}
 800541e:	b089      	sub	sp, #36	; 0x24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4611      	mov	r1, r2
 8005428:	461a      	mov	r2, r3
 800542a:	460b      	mov	r3, r1
 800542c:	71fb      	strb	r3, [r7, #7]
 800542e:	4613      	mov	r3, r2
 8005430:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800543a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d123      	bne.n	800548a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005442:	88bb      	ldrh	r3, [r7, #4]
 8005444:	3303      	adds	r3, #3
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800544a:	2300      	movs	r3, #0
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e018      	b.n	8005482 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	031a      	lsls	r2, r3, #12
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4413      	add	r3, r2
 8005458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545c:	461a      	mov	r2, r3
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	3301      	adds	r3, #1
 8005468:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3301      	adds	r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	3301      	adds	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3301      	adds	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	3301      	adds	r3, #1
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	429a      	cmp	r2, r3
 8005488:	d3e2      	bcc.n	8005450 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3724      	adds	r7, #36	; 0x24
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005498:	b480      	push	{r7}
 800549a:	b08b      	sub	sp, #44	; 0x2c
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	4613      	mov	r3, r2
 80054a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054be:	2300      	movs	r3, #0
 80054c0:	623b      	str	r3, [r7, #32]
 80054c2:	e014      	b.n	80054ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	3301      	adds	r3, #1
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	3301      	adds	r3, #1
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	3301      	adds	r3, #1
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	3301      	adds	r3, #1
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	3301      	adds	r3, #1
 80054ec:	623b      	str	r3, [r7, #32]
 80054ee:	6a3a      	ldr	r2, [r7, #32]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d3e6      	bcc.n	80054c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054f6:	8bfb      	ldrh	r3, [r7, #30]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01e      	beq.n	800553a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005506:	461a      	mov	r2, r3
 8005508:	f107 0310 	add.w	r3, r7, #16
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
 800551c:	b2da      	uxtb	r2, r3
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	701a      	strb	r2, [r3, #0]
      i++;
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	3301      	adds	r3, #1
 8005526:	623b      	str	r3, [r7, #32]
      pDest++;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	3301      	adds	r3, #1
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800552e:	8bfb      	ldrh	r3, [r7, #30]
 8005530:	3b01      	subs	r3, #1
 8005532:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005534:	8bfb      	ldrh	r3, [r7, #30]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1ea      	bne.n	8005510 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800553c:	4618      	mov	r0, r3
 800553e:	372c      	adds	r7, #44	; 0x2c
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d12c      	bne.n	80055be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	db12      	blt.n	800559c <USB_EPSetStall+0x54>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00f      	beq.n	800559c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800559a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e02b      	b.n	8005616 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	db12      	blt.n	80055f6 <USB_EPSetStall+0xae>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00f      	beq.n	80055f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	440a      	add	r2, r1
 800560c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005614:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d128      	bne.n	8005692 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800565e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	791b      	ldrb	r3, [r3, #4]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d003      	beq.n	8005670 <USB_EPClearStall+0x4c>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	791b      	ldrb	r3, [r3, #4]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d138      	bne.n	80056e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e027      	b.n	80056e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	791b      	ldrb	r3, [r3, #4]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d003      	beq.n	80056c2 <USB_EPClearStall+0x9e>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	791b      	ldrb	r3, [r3, #4]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d10f      	bne.n	80056e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800570e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005712:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005724:	68f9      	ldr	r1, [r7, #12]
 8005726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800572a:	4313      	orrs	r3, r2
 800572c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005756:	f023 0303 	bic.w	r3, r3, #3
 800575a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576a:	f023 0302 	bic.w	r3, r3, #2
 800576e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005798:	f023 0303 	bic.w	r3, r3, #3
 800579c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ac:	f043 0302 	orr.w	r3, r3, #2
 80057b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4013      	ands	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057d8:	68fb      	ldr	r3, [r7, #12]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	4013      	ands	r3, r2
 8005808:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	0c1b      	lsrs	r3, r3, #16
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	4013      	ands	r3, r2
 800583c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	b29b      	uxth	r3, r3
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	4013      	ands	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800587c:	68bb      	ldr	r3, [r7, #8]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800588a:	b480      	push	{r7}
 800588c:	b087      	sub	sp, #28
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ba:	01db      	lsls	r3, r3, #7
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4013      	ands	r3, r2
 80058d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058d8:	68bb      	ldr	r3, [r7, #8]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0301 	and.w	r3, r3, #1
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005938:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	460b      	mov	r3, r1
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	333c      	adds	r3, #60	; 0x3c
 800595e:	3304      	adds	r3, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <USB_EP0_OutStart+0xb8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d90a      	bls.n	8005982 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800597c:	d101      	bne.n	8005982 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	e037      	b.n	80059f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005988:	461a      	mov	r2, r3
 800598a:	2300      	movs	r3, #0
 800598c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b0:	f043 0318 	orr.w	r3, r3, #24
 80059b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10f      	bne.n	80059f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	461a      	mov	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	4f54300a 	.word	0x4f54300a

08005a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3301      	adds	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4a13      	ldr	r2, [pc, #76]	; (8005a68 <USB_CoreReset+0x64>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e01b      	b.n	8005a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	daf2      	bge.n	8005a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f043 0201 	orr.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <USB_CoreReset+0x64>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e006      	b.n	8005a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d0f0      	beq.n	8005a3a <USB_CoreReset+0x36>

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	00030d40 	.word	0x00030d40

08005a6c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005a78:	2010      	movs	r0, #16
 8005a7a:	f002 f93d 	bl	8007cf8 <USBD_static_malloc>
 8005a7e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	32b0      	adds	r2, #176	; 0xb0
 8005a90:	2100      	movs	r1, #0
 8005a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a96:	2302      	movs	r3, #2
 8005a98:	e048      	b.n	8005b2c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	32b0      	adds	r2, #176	; 0xb0
 8005aa4:	68f9      	ldr	r1, [r7, #12]
 8005aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	32b0      	adds	r2, #176	; 0xb0
 8005ab4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	7c1b      	ldrb	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10d      	bne.n	8005ae2 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <USBD_HID_Init+0xc8>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	3326      	adds	r3, #38	; 0x26
 8005adc:	2207      	movs	r2, #7
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	e00c      	b.n	8005afc <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <USBD_HID_Init+0xc8>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f003 020f 	and.w	r2, r3, #15
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	3326      	adds	r3, #38	; 0x26
 8005af8:	220a      	movs	r2, #10
 8005afa:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <USBD_HID_Init+0xc8>)
 8005afe:	7819      	ldrb	r1, [r3, #0]
 8005b00:	2304      	movs	r3, #4
 8005b02:	2203      	movs	r2, #3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 ffe6 	bl	8007ad6 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <USBD_HID_Init+0xc8>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f003 020f 	and.w	r2, r3, #15
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	3324      	adds	r3, #36	; 0x24
 8005b20:	2201      	movs	r2, #1
 8005b22:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	200000ca 	.word	0x200000ca

08005b38 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005b44:	4b1f      	ldr	r3, [pc, #124]	; (8005bc4 <USBD_HID_DeInit+0x8c>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 ffe9 	bl	8007b22 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005b50:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <USBD_HID_DeInit+0x8c>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 020f 	and.w	r2, r3, #15
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3324      	adds	r3, #36	; 0x24
 8005b66:	2200      	movs	r2, #0
 8005b68:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005b6a:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <USBD_HID_DeInit+0x8c>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f003 020f 	and.w	r2, r3, #15
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	3326      	adds	r3, #38	; 0x26
 8005b80:	2200      	movs	r2, #0
 8005b82:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	32b0      	adds	r2, #176	; 0xb0
 8005b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d011      	beq.n	8005bba <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	32b0      	adds	r2, #176	; 0xb0
 8005ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f002 f8b5 	bl	8007d14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	32b0      	adds	r2, #176	; 0xb0
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	200000ca 	.word	0x200000ca

08005bc8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	32b0      	adds	r2, #176	; 0xb0
 8005bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e0e8      	b.n	8005dc6 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d046      	beq.n	8005c8e <USBD_HID_Setup+0xc6>
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	f040 80d8 	bne.w	8005db6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	3b02      	subs	r3, #2
 8005c0c:	2b09      	cmp	r3, #9
 8005c0e:	d836      	bhi.n	8005c7e <USBD_HID_Setup+0xb6>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <USBD_HID_Setup+0x50>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c6f 	.word	0x08005c6f
 8005c1c:	08005c4f 	.word	0x08005c4f
 8005c20:	08005c7f 	.word	0x08005c7f
 8005c24:	08005c7f 	.word	0x08005c7f
 8005c28:	08005c7f 	.word	0x08005c7f
 8005c2c:	08005c7f 	.word	0x08005c7f
 8005c30:	08005c7f 	.word	0x08005c7f
 8005c34:	08005c7f 	.word	0x08005c7f
 8005c38:	08005c5d 	.word	0x08005c5d
 8005c3c:	08005c41 	.word	0x08005c41
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	885b      	ldrh	r3, [r3, #2]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]
          break;
 8005c4c:	e01e      	b.n	8005c8c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fbe9 	bl	800742c <USBD_CtlSendData>
          break;
 8005c5a:	e017      	b.n	8005c8c <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	885b      	ldrh	r3, [r3, #2]
 8005c60:	0a1b      	lsrs	r3, r3, #8
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	605a      	str	r2, [r3, #4]
          break;
 8005c6c:	e00e      	b.n	8005c8c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3304      	adds	r3, #4
 8005c72:	2201      	movs	r2, #1
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 fbd8 	bl	800742c <USBD_CtlSendData>
          break;
 8005c7c:	e006      	b.n	8005c8c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 fb62 	bl	800734a <USBD_CtlError>
          ret = USBD_FAIL;
 8005c86:	2303      	movs	r3, #3
 8005c88:	75fb      	strb	r3, [r7, #23]
          break;
 8005c8a:	bf00      	nop
      }
      break;
 8005c8c:	e09a      	b.n	8005dc4 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b0b      	cmp	r3, #11
 8005c94:	f200 8086 	bhi.w	8005da4 <USBD_HID_Setup+0x1dc>
 8005c98:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <USBD_HID_Setup+0xd8>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005cd1 	.word	0x08005cd1
 8005ca4:	08005db3 	.word	0x08005db3
 8005ca8:	08005da5 	.word	0x08005da5
 8005cac:	08005da5 	.word	0x08005da5
 8005cb0:	08005da5 	.word	0x08005da5
 8005cb4:	08005da5 	.word	0x08005da5
 8005cb8:	08005cfb 	.word	0x08005cfb
 8005cbc:	08005da5 	.word	0x08005da5
 8005cc0:	08005da5 	.word	0x08005da5
 8005cc4:	08005da5 	.word	0x08005da5
 8005cc8:	08005d53 	.word	0x08005d53
 8005ccc:	08005d7d 	.word	0x08005d7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d107      	bne.n	8005cec <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cdc:	f107 030a 	add.w	r3, r7, #10
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fba1 	bl	800742c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cea:	e063      	b.n	8005db4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 fb2b 	bl	800734a <USBD_CtlError>
            ret = USBD_FAIL;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	75fb      	strb	r3, [r7, #23]
          break;
 8005cf8:	e05c      	b.n	8005db4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	885b      	ldrh	r3, [r3, #2]
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b22      	cmp	r3, #34	; 0x22
 8005d04:	d108      	bne.n	8005d18 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	88db      	ldrh	r3, [r3, #6]
 8005d0a:	2b4a      	cmp	r3, #74	; 0x4a
 8005d0c:	bf28      	it	cs
 8005d0e:	234a      	movcs	r3, #74	; 0x4a
 8005d10:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005d12:	4b2f      	ldr	r3, [pc, #188]	; (8005dd0 <USBD_HID_Setup+0x208>)
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	e015      	b.n	8005d44 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	885b      	ldrh	r3, [r3, #2]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b21      	cmp	r3, #33	; 0x21
 8005d22:	d108      	bne.n	8005d36 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005d24:	4b2b      	ldr	r3, [pc, #172]	; (8005dd4 <USBD_HID_Setup+0x20c>)
 8005d26:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	88db      	ldrh	r3, [r3, #6]
 8005d2c:	2b09      	cmp	r3, #9
 8005d2e:	bf28      	it	cs
 8005d30:	2309      	movcs	r3, #9
 8005d32:	82bb      	strh	r3, [r7, #20]
 8005d34:	e006      	b.n	8005d44 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 fb06 	bl	800734a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	75fb      	strb	r3, [r7, #23]
            break;
 8005d42:	e037      	b.n	8005db4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d44:	8abb      	ldrh	r3, [r7, #20]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6939      	ldr	r1, [r7, #16]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 fb6e 	bl	800742c <USBD_CtlSendData>
          break;
 8005d50:	e030      	b.n	8005db4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d107      	bne.n	8005d6e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3308      	adds	r3, #8
 8005d62:	2201      	movs	r2, #1
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 fb60 	bl	800742c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d6c:	e022      	b.n	8005db4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 faea 	bl	800734a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d76:	2303      	movs	r3, #3
 8005d78:	75fb      	strb	r3, [r7, #23]
          break;
 8005d7a:	e01b      	b.n	8005db4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d106      	bne.n	8005d96 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	885b      	ldrh	r3, [r3, #2]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d94:	e00e      	b.n	8005db4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 fad6 	bl	800734a <USBD_CtlError>
            ret = USBD_FAIL;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	75fb      	strb	r3, [r7, #23]
          break;
 8005da2:	e007      	b.n	8005db4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 facf 	bl	800734a <USBD_CtlError>
          ret = USBD_FAIL;
 8005dac:	2303      	movs	r3, #3
 8005dae:	75fb      	strb	r3, [r7, #23]
          break;
 8005db0:	e000      	b.n	8005db4 <USBD_HID_Setup+0x1ec>
          break;
 8005db2:	bf00      	nop
      }
      break;
 8005db4:	e006      	b.n	8005dc4 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fac6 	bl	800734a <USBD_CtlError>
      ret = USBD_FAIL;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc2:	bf00      	nop
  }

  return (uint8_t)ret;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000080 	.word	0x20000080
 8005dd4:	20000068 	.word	0x20000068

08005dd8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	32b0      	adds	r2, #176	; 0xb0
 8005df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e014      	b.n	8005e2a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d10d      	bne.n	8005e28 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	7b1b      	ldrb	r3, [r3, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d109      	bne.n	8005e28 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2201      	movs	r2, #1
 8005e18:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005e1a:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <USBD_HID_SendReport+0x5c>)
 8005e1c:	7819      	ldrb	r1, [r3, #0]
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f001 ff25 	bl	8007c72 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	200000ca 	.word	0x200000ca

08005e38 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	7c1b      	ldrb	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d102      	bne.n	8005e4e <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005e48:	2308      	movs	r3, #8
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e001      	b.n	8005e52 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005e4e:	230a      	movs	r3, #10
 8005e50:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005e52:	68fb      	ldr	r3, [r7, #12]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e68:	2181      	movs	r1, #129	; 0x81
 8005e6a:	4809      	ldr	r0, [pc, #36]	; (8005e90 <USBD_HID_GetFSCfgDesc+0x30>)
 8005e6c:	f000 fc35 	bl	80066da <USBD_GetEpDesc>
 8005e70:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2222      	movs	r2, #34	; 0x22
 8005e82:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e84:	4b02      	ldr	r3, [pc, #8]	; (8005e90 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000044 	.word	0x20000044

08005e94 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e9c:	2181      	movs	r1, #129	; 0x81
 8005e9e:	4809      	ldr	r0, [pc, #36]	; (8005ec4 <USBD_HID_GetHSCfgDesc+0x30>)
 8005ea0:	f000 fc1b 	bl	80066da <USBD_GetEpDesc>
 8005ea4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2207      	movs	r2, #7
 8005eb0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2222      	movs	r2, #34	; 0x22
 8005eb6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005eb8:	4b02      	ldr	r3, [pc, #8]	; (8005ec4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000044 	.word	0x20000044

08005ec8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005ed0:	2181      	movs	r1, #129	; 0x81
 8005ed2:	4809      	ldr	r0, [pc, #36]	; (8005ef8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005ed4:	f000 fc01 	bl	80066da <USBD_GetEpDesc>
 8005ed8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	220a      	movs	r2, #10
 8005ee4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2222      	movs	r2, #34	; 0x22
 8005eea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005eec:	4b02      	ldr	r3, [pc, #8]	; (8005ef8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000044 	.word	0x20000044

08005efc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	32b0      	adds	r2, #176	; 0xb0
 8005f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f16:	2200      	movs	r2, #0
 8005f18:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	220a      	movs	r2, #10
 8005f34:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005f36:	4b03      	ldr	r3, [pc, #12]	; (8005f44 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	20000074 	.word	0x20000074

08005f48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4613      	mov	r3, r2
 8005f54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e01f      	b.n	8005fa0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	79fa      	ldrb	r2, [r7, #7]
 8005f92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f001 fd37 	bl	8007a08 <USBD_LL_Init>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e025      	b.n	800600c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	32ae      	adds	r2, #174	; 0xae
 8005fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	32ae      	adds	r2, #174	; 0xae
 8005fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	f107 020e 	add.w	r2, r7, #14
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 fd3f 	bl	8007aa0 <USBD_LL_Start>
 8006022:	4603      	mov	r3, r0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006034:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	78fa      	ldrb	r2, [r7, #3]
 8006066:	4611      	mov	r1, r2
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	4611      	mov	r1, r2
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80060a0:	2303      	movs	r3, #3
 80060a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f001 f908 	bl	80072d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d01a      	beq.n	8006120 <USBD_LL_SetupStage+0x72>
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d822      	bhi.n	8006134 <USBD_LL_SetupStage+0x86>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <USBD_LL_SetupStage+0x4a>
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d00a      	beq.n	800610c <USBD_LL_SetupStage+0x5e>
 80060f6:	e01d      	b.n	8006134 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fb5f 	bl	80067c4 <USBD_StdDevReq>
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]
      break;
 800610a:	e020      	b.n	800614e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fbc7 	bl	80068a8 <USBD_StdItfReq>
 800611a:	4603      	mov	r3, r0
 800611c:	73fb      	strb	r3, [r7, #15]
      break;
 800611e:	e016      	b.n	800614e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fc29 	bl	8006980 <USBD_StdEPReq>
 800612e:	4603      	mov	r3, r0
 8006130:	73fb      	strb	r3, [r7, #15]
      break;
 8006132:	e00c      	b.n	800614e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800613a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800613e:	b2db      	uxtb	r3, r3
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fd0c 	bl	8007b60 <USBD_LL_StallEP>
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]
      break;
 800614c:	bf00      	nop
  }

  return ret;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	460b      	mov	r3, r1
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800616a:	7afb      	ldrb	r3, [r7, #11]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d16e      	bne.n	800624e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006176:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800617e:	2b03      	cmp	r3, #3
 8006180:	f040 8098 	bne.w	80062b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	429a      	cmp	r2, r3
 800618e:	d913      	bls.n	80061b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	1ad2      	subs	r2, r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	4293      	cmp	r3, r2
 80061a8:	bf28      	it	cs
 80061aa:	4613      	movcs	r3, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f001 f967 	bl	8007484 <USBD_CtlContinueRx>
 80061b6:	e07d      	b.n	80062b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d014      	beq.n	80061f0 <USBD_LL_DataOutStage+0x98>
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d81d      	bhi.n	8006206 <USBD_LL_DataOutStage+0xae>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <USBD_LL_DataOutStage+0x7c>
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d003      	beq.n	80061da <USBD_LL_DataOutStage+0x82>
 80061d2:	e018      	b.n	8006206 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	75bb      	strb	r3, [r7, #22]
            break;
 80061d8:	e018      	b.n	800620c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	4619      	mov	r1, r3
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fa5e 	bl	80066a6 <USBD_CoreFindIF>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75bb      	strb	r3, [r7, #22]
            break;
 80061ee:	e00d      	b.n	800620c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	4619      	mov	r1, r3
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fa60 	bl	80066c0 <USBD_CoreFindEP>
 8006200:	4603      	mov	r3, r0
 8006202:	75bb      	strb	r3, [r7, #22]
            break;
 8006204:	e002      	b.n	800620c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	75bb      	strb	r3, [r7, #22]
            break;
 800620a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800620c:	7dbb      	ldrb	r3, [r7, #22]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d119      	bne.n	8006246 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b03      	cmp	r3, #3
 800621c:	d113      	bne.n	8006246 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800621e:	7dba      	ldrb	r2, [r7, #22]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	32ae      	adds	r2, #174	; 0xae
 8006224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800622e:	7dba      	ldrb	r2, [r7, #22]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006236:	7dba      	ldrb	r2, [r7, #22]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	32ae      	adds	r2, #174	; 0xae
 800623c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f001 f92d 	bl	80074a6 <USBD_CtlSendStatus>
 800624c:	e032      	b.n	80062b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800624e:	7afb      	ldrb	r3, [r7, #11]
 8006250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006254:	b2db      	uxtb	r3, r3
 8006256:	4619      	mov	r1, r3
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fa31 	bl	80066c0 <USBD_CoreFindEP>
 800625e:	4603      	mov	r3, r0
 8006260:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006262:	7dbb      	ldrb	r3, [r7, #22]
 8006264:	2bff      	cmp	r3, #255	; 0xff
 8006266:	d025      	beq.n	80062b4 <USBD_LL_DataOutStage+0x15c>
 8006268:	7dbb      	ldrb	r3, [r7, #22]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d122      	bne.n	80062b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b03      	cmp	r3, #3
 8006278:	d117      	bne.n	80062aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800627a:	7dba      	ldrb	r2, [r7, #22]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	32ae      	adds	r2, #174	; 0xae
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00f      	beq.n	80062aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800628a:	7dba      	ldrb	r2, [r7, #22]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006292:	7dba      	ldrb	r2, [r7, #22]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	32ae      	adds	r2, #174	; 0xae
 8006298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	7afa      	ldrb	r2, [r7, #11]
 80062a0:	4611      	mov	r1, r2
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	4798      	blx	r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	e000      	b.n	80062b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b086      	sub	sp, #24
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	460b      	mov	r3, r1
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80062cc:	7afb      	ldrb	r3, [r7, #11]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d16f      	bne.n	80063b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3314      	adds	r3, #20
 80062d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d15a      	bne.n	8006398 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d914      	bls.n	8006318 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	461a      	mov	r2, r3
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f001 f8ac 	bl	8007462 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800630a:	2300      	movs	r3, #0
 800630c:	2200      	movs	r2, #0
 800630e:	2100      	movs	r1, #0
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f001 fccf 	bl	8007cb4 <USBD_LL_PrepareReceive>
 8006316:	e03f      	b.n	8006398 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	429a      	cmp	r2, r3
 8006322:	d11c      	bne.n	800635e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800632c:	429a      	cmp	r2, r3
 800632e:	d316      	bcc.n	800635e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800633a:	429a      	cmp	r2, r3
 800633c:	d20f      	bcs.n	800635e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800633e:	2200      	movs	r2, #0
 8006340:	2100      	movs	r1, #0
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f001 f88d 	bl	8007462 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006350:	2300      	movs	r3, #0
 8006352:	2200      	movs	r2, #0
 8006354:	2100      	movs	r1, #0
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f001 fcac 	bl	8007cb4 <USBD_LL_PrepareReceive>
 800635c:	e01c      	b.n	8006398 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b03      	cmp	r3, #3
 8006368:	d10f      	bne.n	800638a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800638a:	2180      	movs	r1, #128	; 0x80
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f001 fbe7 	bl	8007b60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f001 f89a 	bl	80074cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d03a      	beq.n	8006418 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff fe42 	bl	800602c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80063b0:	e032      	b.n	8006418 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80063b2:	7afb      	ldrb	r3, [r7, #11]
 80063b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	4619      	mov	r1, r3
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f97f 	bl	80066c0 <USBD_CoreFindEP>
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	2bff      	cmp	r3, #255	; 0xff
 80063ca:	d025      	beq.n	8006418 <USBD_LL_DataInStage+0x15a>
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d122      	bne.n	8006418 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d11c      	bne.n	8006418 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063de:	7dfa      	ldrb	r2, [r7, #23]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	32ae      	adds	r2, #174	; 0xae
 80063e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d014      	beq.n	8006418 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80063ee:	7dfa      	ldrb	r2, [r7, #23]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80063f6:	7dfa      	ldrb	r2, [r7, #23]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	32ae      	adds	r2, #174	; 0xae
 80063fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	7afa      	ldrb	r2, [r7, #11]
 8006404:	4611      	mov	r1, r2
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	4798      	blx	r3
 800640a:	4603      	mov	r3, r0
 800640c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800640e:	7dbb      	ldrb	r3, [r7, #22]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006414:	7dbb      	ldrb	r3, [r7, #22]
 8006416:	e000      	b.n	800641a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d014      	beq.n	8006488 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00e      	beq.n	8006488 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6852      	ldr	r2, [r2, #4]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	4611      	mov	r1, r2
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006484:	2303      	movs	r3, #3
 8006486:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006488:	2340      	movs	r3, #64	; 0x40
 800648a:	2200      	movs	r2, #0
 800648c:	2100      	movs	r1, #0
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 fb21 	bl	8007ad6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2240      	movs	r2, #64	; 0x40
 80064a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064a4:	2340      	movs	r3, #64	; 0x40
 80064a6:	2200      	movs	r2, #0
 80064a8:	2180      	movs	r1, #128	; 0x80
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fb13 	bl	8007ad6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2240      	movs	r2, #64	; 0x40
 80064ba:	621a      	str	r2, [r3, #32]

  return ret;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2204      	movs	r2, #4
 8006500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b04      	cmp	r3, #4
 8006524:	d106      	bne.n	8006534 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800652c:	b2da      	uxtb	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d110      	bne.n	8006578 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	32ae      	adds	r2, #174	; 0xae
 8006598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e01c      	b.n	80065de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d115      	bne.n	80065dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	32ae      	adds	r2, #174	; 0xae
 80065ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	32ae      	adds	r2, #174	; 0xae
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	4611      	mov	r1, r2
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	32ae      	adds	r2, #174	; 0xae
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006604:	2303      	movs	r3, #3
 8006606:	e01c      	b.n	8006642 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b03      	cmp	r3, #3
 8006612:	d115      	bne.n	8006640 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	32ae      	adds	r2, #174	; 0xae
 800661e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00b      	beq.n	8006640 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	32ae      	adds	r2, #174	; 0xae
 8006632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	4611      	mov	r1, r2
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00e      	beq.n	800669c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6852      	ldr	r2, [r2, #4]
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	4611      	mov	r1, r2
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006698:	2303      	movs	r3, #3
 800669a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	885b      	ldrh	r3, [r3, #2]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	429a      	cmp	r2, r3
 8006700:	d920      	bls.n	8006744 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800670a:	e013      	b.n	8006734 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800670c:	f107 030a 	add.w	r3, r7, #10
 8006710:	4619      	mov	r1, r3
 8006712:	6978      	ldr	r0, [r7, #20]
 8006714:	f000 f81b 	bl	800674e <USBD_GetNextDesc>
 8006718:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b05      	cmp	r3, #5
 8006720:	d108      	bne.n	8006734 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	789b      	ldrb	r3, [r3, #2]
 800672a:	78fa      	ldrb	r2, [r7, #3]
 800672c:	429a      	cmp	r2, r3
 800672e:	d008      	beq.n	8006742 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	885b      	ldrh	r3, [r3, #2]
 8006738:	b29a      	uxth	r2, r3
 800673a:	897b      	ldrh	r3, [r7, #10]
 800673c:	429a      	cmp	r2, r3
 800673e:	d8e5      	bhi.n	800670c <USBD_GetEpDesc+0x32>
 8006740:	e000      	b.n	8006744 <USBD_GetEpDesc+0x6a>
          break;
 8006742:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006744:	693b      	ldr	r3, [r7, #16]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	881a      	ldrh	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	4413      	add	r3, r2
 8006768:	b29a      	uxth	r2, r3
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800677a:	68fb      	ldr	r3, [r7, #12]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	3301      	adds	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067a6:	8a3b      	ldrh	r3, [r7, #16]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	b21a      	sxth	r2, r3
 80067ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	b21b      	sxth	r3, r3
 80067b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80067b6:	89fb      	ldrh	r3, [r7, #14]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d005      	beq.n	80067ea <USBD_StdDevReq+0x26>
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d857      	bhi.n	8006892 <USBD_StdDevReq+0xce>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00f      	beq.n	8006806 <USBD_StdDevReq+0x42>
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d153      	bne.n	8006892 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	32ae      	adds	r2, #174	; 0xae
 80067f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
      break;
 8006804:	e04a      	b.n	800689c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	2b09      	cmp	r3, #9
 800680c:	d83b      	bhi.n	8006886 <USBD_StdDevReq+0xc2>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <USBD_StdDevReq+0x50>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006869 	.word	0x08006869
 8006818:	0800687d 	.word	0x0800687d
 800681c:	08006887 	.word	0x08006887
 8006820:	08006873 	.word	0x08006873
 8006824:	08006887 	.word	0x08006887
 8006828:	08006847 	.word	0x08006847
 800682c:	0800683d 	.word	0x0800683d
 8006830:	08006887 	.word	0x08006887
 8006834:	0800685f 	.word	0x0800685f
 8006838:	08006851 	.word	0x08006851
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa3c 	bl	8006cbc <USBD_GetDescriptor>
          break;
 8006844:	e024      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fba1 	bl	8006f90 <USBD_SetAddress>
          break;
 800684e:	e01f      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fbe0 	bl	8007018 <USBD_SetConfig>
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
          break;
 800685c:	e018      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fc83 	bl	800716c <USBD_GetConfig>
          break;
 8006866:	e013      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fcb4 	bl	80071d8 <USBD_GetStatus>
          break;
 8006870:	e00e      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fce3 	bl	8007240 <USBD_SetFeature>
          break;
 800687a:	e009      	b.n	8006890 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fd07 	bl	8007292 <USBD_ClrFeature>
          break;
 8006884:	e004      	b.n	8006890 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fd5e 	bl	800734a <USBD_CtlError>
          break;
 800688e:	bf00      	nop
      }
      break;
 8006890:	e004      	b.n	800689c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fd58 	bl	800734a <USBD_CtlError>
      break;
 800689a:	bf00      	nop
  }

  return ret;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop

080068a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d005      	beq.n	80068ce <USBD_StdItfReq+0x26>
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d852      	bhi.n	800696c <USBD_StdItfReq+0xc4>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <USBD_StdItfReq+0x26>
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d14e      	bne.n	800696c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d840      	bhi.n	800695e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	889b      	ldrh	r3, [r3, #4]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d836      	bhi.n	8006954 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	889b      	ldrh	r3, [r3, #4]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff fed9 	bl	80066a6 <USBD_CoreFindIF>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	2bff      	cmp	r3, #255	; 0xff
 80068fc:	d01d      	beq.n	800693a <USBD_StdItfReq+0x92>
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d11a      	bne.n	800693a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006904:	7bba      	ldrb	r2, [r7, #14]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32ae      	adds	r2, #174	; 0xae
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00f      	beq.n	8006934 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006914:	7bba      	ldrb	r2, [r7, #14]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800691c:	7bba      	ldrb	r2, [r7, #14]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	32ae      	adds	r2, #174	; 0xae
 8006922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
 800692e:	4603      	mov	r3, r0
 8006930:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006932:	e004      	b.n	800693e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006938:	e001      	b.n	800693e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800693a:	2303      	movs	r3, #3
 800693c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	88db      	ldrh	r3, [r3, #6]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d110      	bne.n	8006968 <USBD_StdItfReq+0xc0>
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10d      	bne.n	8006968 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fdaa 	bl	80074a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006952:	e009      	b.n	8006968 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fcf7 	bl	800734a <USBD_CtlError>
          break;
 800695c:	e004      	b.n	8006968 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fcf2 	bl	800734a <USBD_CtlError>
          break;
 8006966:	e000      	b.n	800696a <USBD_StdItfReq+0xc2>
          break;
 8006968:	bf00      	nop
      }
      break;
 800696a:	e004      	b.n	8006976 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fceb 	bl	800734a <USBD_CtlError>
      break;
 8006974:	bf00      	nop
  }

  return ret;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	889b      	ldrh	r3, [r3, #4]
 8006992:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d007      	beq.n	80069b0 <USBD_StdEPReq+0x30>
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	f200 817f 	bhi.w	8006ca4 <USBD_StdEPReq+0x324>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d02a      	beq.n	8006a00 <USBD_StdEPReq+0x80>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	f040 817a 	bne.w	8006ca4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fe83 	bl	80066c0 <USBD_CoreFindEP>
 80069ba:	4603      	mov	r3, r0
 80069bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069be:	7b7b      	ldrb	r3, [r7, #13]
 80069c0:	2bff      	cmp	r3, #255	; 0xff
 80069c2:	f000 8174 	beq.w	8006cae <USBD_StdEPReq+0x32e>
 80069c6:	7b7b      	ldrb	r3, [r7, #13]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 8170 	bne.w	8006cae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80069ce:	7b7a      	ldrb	r2, [r7, #13]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80069d6:	7b7a      	ldrb	r2, [r7, #13]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	32ae      	adds	r2, #174	; 0xae
 80069dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8163 	beq.w	8006cae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80069e8:	7b7a      	ldrb	r2, [r7, #13]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	32ae      	adds	r2, #174	; 0xae
 80069ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	4798      	blx	r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069fe:	e156      	b.n	8006cae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d008      	beq.n	8006a1a <USBD_StdEPReq+0x9a>
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	f300 8145 	bgt.w	8006c98 <USBD_StdEPReq+0x318>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 809b 	beq.w	8006b4a <USBD_StdEPReq+0x1ca>
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d03c      	beq.n	8006a92 <USBD_StdEPReq+0x112>
 8006a18:	e13e      	b.n	8006c98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d002      	beq.n	8006a2c <USBD_StdEPReq+0xac>
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d016      	beq.n	8006a58 <USBD_StdEPReq+0xd8>
 8006a2a:	e02c      	b.n	8006a86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a2c:	7bbb      	ldrb	r3, [r7, #14]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00d      	beq.n	8006a4e <USBD_StdEPReq+0xce>
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b80      	cmp	r3, #128	; 0x80
 8006a36:	d00a      	beq.n	8006a4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 f88f 	bl	8007b60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a42:	2180      	movs	r1, #128	; 0x80
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 f88b 	bl	8007b60 <USBD_LL_StallEP>
 8006a4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a4c:	e020      	b.n	8006a90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fc7a 	bl	800734a <USBD_CtlError>
              break;
 8006a56:	e01b      	b.n	8006a90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	885b      	ldrh	r3, [r3, #2]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10e      	bne.n	8006a7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <USBD_StdEPReq+0xfe>
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b80      	cmp	r3, #128	; 0x80
 8006a6a:	d008      	beq.n	8006a7e <USBD_StdEPReq+0xfe>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	88db      	ldrh	r3, [r3, #6]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d104      	bne.n	8006a7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 f871 	bl	8007b60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fd11 	bl	80074a6 <USBD_CtlSendStatus>

              break;
 8006a84:	e004      	b.n	8006a90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fc5e 	bl	800734a <USBD_CtlError>
              break;
 8006a8e:	bf00      	nop
          }
          break;
 8006a90:	e107      	b.n	8006ca2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d002      	beq.n	8006aa4 <USBD_StdEPReq+0x124>
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d016      	beq.n	8006ad0 <USBD_StdEPReq+0x150>
 8006aa2:	e04b      	b.n	8006b3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00d      	beq.n	8006ac6 <USBD_StdEPReq+0x146>
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	2b80      	cmp	r3, #128	; 0x80
 8006aae:	d00a      	beq.n	8006ac6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 f853 	bl	8007b60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aba:	2180      	movs	r1, #128	; 0x80
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 f84f 	bl	8007b60 <USBD_LL_StallEP>
 8006ac2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac4:	e040      	b.n	8006b48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fc3e 	bl	800734a <USBD_CtlError>
              break;
 8006ace:	e03b      	b.n	8006b48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	885b      	ldrh	r3, [r3, #2]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d136      	bne.n	8006b46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 f859 	bl	8007b9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fcda 	bl	80074a6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff fde2 	bl	80066c0 <USBD_CoreFindEP>
 8006afc:	4603      	mov	r3, r0
 8006afe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b00:	7b7b      	ldrb	r3, [r7, #13]
 8006b02:	2bff      	cmp	r3, #255	; 0xff
 8006b04:	d01f      	beq.n	8006b46 <USBD_StdEPReq+0x1c6>
 8006b06:	7b7b      	ldrb	r3, [r7, #13]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11c      	bne.n	8006b46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b0c:	7b7a      	ldrb	r2, [r7, #13]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b14:	7b7a      	ldrb	r2, [r7, #13]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	32ae      	adds	r2, #174	; 0xae
 8006b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b24:	7b7a      	ldrb	r2, [r7, #13]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	32ae      	adds	r2, #174	; 0xae
 8006b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b3a:	e004      	b.n	8006b46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fc03 	bl	800734a <USBD_CtlError>
              break;
 8006b44:	e000      	b.n	8006b48 <USBD_StdEPReq+0x1c8>
              break;
 8006b46:	bf00      	nop
          }
          break;
 8006b48:	e0ab      	b.n	8006ca2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d002      	beq.n	8006b5c <USBD_StdEPReq+0x1dc>
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d032      	beq.n	8006bc0 <USBD_StdEPReq+0x240>
 8006b5a:	e097      	b.n	8006c8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <USBD_StdEPReq+0x1f2>
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	2b80      	cmp	r3, #128	; 0x80
 8006b66:	d004      	beq.n	8006b72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fbed 	bl	800734a <USBD_CtlError>
                break;
 8006b70:	e091      	b.n	8006c96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da0b      	bge.n	8006b92 <USBD_StdEPReq+0x212>
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	3310      	adds	r3, #16
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3304      	adds	r3, #4
 8006b90:	e00b      	b.n	8006baa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3304      	adds	r3, #4
 8006baa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fc37 	bl	800742c <USBD_CtlSendData>
              break;
 8006bbe:	e06a      	b.n	8006c96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da11      	bge.n	8006bec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	f003 020f 	and.w	r2, r3, #15
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	3324      	adds	r3, #36	; 0x24
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d117      	bne.n	8006c12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fbb0 	bl	800734a <USBD_CtlError>
                  break;
 8006bea:	e054      	b.n	8006c96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	f003 020f 	and.w	r2, r3, #15
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fb9d 	bl	800734a <USBD_CtlError>
                  break;
 8006c10:	e041      	b.n	8006c96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da0b      	bge.n	8006c32 <USBD_StdEPReq+0x2b2>
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	3310      	adds	r3, #16
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	3304      	adds	r3, #4
 8006c30:	e00b      	b.n	8006c4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4413      	add	r3, r2
 8006c48:	3304      	adds	r3, #4
 8006c4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <USBD_StdEPReq+0x2d8>
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b80      	cmp	r3, #128	; 0x80
 8006c56:	d103      	bne.n	8006c60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e00e      	b.n	8006c7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 ffb9 	bl	8007bdc <USBD_LL_IsStallEP>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e002      	b.n	8006c7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2202      	movs	r2, #2
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fbd1 	bl	800742c <USBD_CtlSendData>
              break;
 8006c8a:	e004      	b.n	8006c96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fb5b 	bl	800734a <USBD_CtlError>
              break;
 8006c94:	bf00      	nop
          }
          break;
 8006c96:	e004      	b.n	8006ca2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fb55 	bl	800734a <USBD_CtlError>
          break;
 8006ca0:	bf00      	nop
      }
      break;
 8006ca2:	e005      	b.n	8006cb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fb4f 	bl	800734a <USBD_CtlError>
      break;
 8006cac:	e000      	b.n	8006cb0 <USBD_StdEPReq+0x330>
      break;
 8006cae:	bf00      	nop
  }

  return ret;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	2b06      	cmp	r3, #6
 8006cde:	f200 8128 	bhi.w	8006f32 <USBD_GetDescriptor+0x276>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <USBD_GetDescriptor+0x2c>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d05 	.word	0x08006d05
 8006cec:	08006d1d 	.word	0x08006d1d
 8006cf0:	08006d5d 	.word	0x08006d5d
 8006cf4:	08006f33 	.word	0x08006f33
 8006cf8:	08006f33 	.word	0x08006f33
 8006cfc:	08006ed3 	.word	0x08006ed3
 8006d00:	08006eff 	.word	0x08006eff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	7c12      	ldrb	r2, [r2, #16]
 8006d10:	f107 0108 	add.w	r1, r7, #8
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
 8006d18:	60f8      	str	r0, [r7, #12]
      break;
 8006d1a:	e112      	b.n	8006f42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7c1b      	ldrb	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10d      	bne.n	8006d40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	f107 0208 	add.w	r2, r7, #8
 8006d30:	4610      	mov	r0, r2
 8006d32:	4798      	blx	r3
 8006d34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d3e:	e100      	b.n	8006f42 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	f107 0208 	add.w	r2, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3301      	adds	r3, #1
 8006d56:	2202      	movs	r2, #2
 8006d58:	701a      	strb	r2, [r3, #0]
      break;
 8006d5a:	e0f2      	b.n	8006f42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	885b      	ldrh	r3, [r3, #2]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	f200 80ac 	bhi.w	8006ec0 <USBD_GetDescriptor+0x204>
 8006d68:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <USBD_GetDescriptor+0xb4>)
 8006d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6e:	bf00      	nop
 8006d70:	08006d89 	.word	0x08006d89
 8006d74:	08006dbd 	.word	0x08006dbd
 8006d78:	08006df1 	.word	0x08006df1
 8006d7c:	08006e25 	.word	0x08006e25
 8006d80:	08006e59 	.word	0x08006e59
 8006d84:	08006e8d 	.word	0x08006e8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	7c12      	ldrb	r2, [r2, #16]
 8006da0:	f107 0108 	add.w	r1, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006daa:	e091      	b.n	8006ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 facb 	bl	800734a <USBD_CtlError>
            err++;
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	3301      	adds	r3, #1
 8006db8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dba:	e089      	b.n	8006ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	7c12      	ldrb	r2, [r2, #16]
 8006dd4:	f107 0108 	add.w	r1, r7, #8
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dde:	e077      	b.n	8006ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fab1 	bl	800734a <USBD_CtlError>
            err++;
 8006de8:	7afb      	ldrb	r3, [r7, #11]
 8006dea:	3301      	adds	r3, #1
 8006dec:	72fb      	strb	r3, [r7, #11]
          break;
 8006dee:	e06f      	b.n	8006ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	7c12      	ldrb	r2, [r2, #16]
 8006e08:	f107 0108 	add.w	r1, r7, #8
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e12:	e05d      	b.n	8006ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fa97 	bl	800734a <USBD_CtlError>
            err++;
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	72fb      	strb	r3, [r7, #11]
          break;
 8006e22:	e055      	b.n	8006ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7c12      	ldrb	r2, [r2, #16]
 8006e3c:	f107 0108 	add.w	r1, r7, #8
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
 8006e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e46:	e043      	b.n	8006ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fa7d 	bl	800734a <USBD_CtlError>
            err++;
 8006e50:	7afb      	ldrb	r3, [r7, #11]
 8006e52:	3301      	adds	r3, #1
 8006e54:	72fb      	strb	r3, [r7, #11]
          break;
 8006e56:	e03b      	b.n	8006ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	7c12      	ldrb	r2, [r2, #16]
 8006e70:	f107 0108 	add.w	r1, r7, #8
 8006e74:	4610      	mov	r0, r2
 8006e76:	4798      	blx	r3
 8006e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e7a:	e029      	b.n	8006ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa63 	bl	800734a <USBD_CtlError>
            err++;
 8006e84:	7afb      	ldrb	r3, [r7, #11]
 8006e86:	3301      	adds	r3, #1
 8006e88:	72fb      	strb	r3, [r7, #11]
          break;
 8006e8a:	e021      	b.n	8006ed0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00b      	beq.n	8006eb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	7c12      	ldrb	r2, [r2, #16]
 8006ea4:	f107 0108 	add.w	r1, r7, #8
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	4798      	blx	r3
 8006eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eae:	e00f      	b.n	8006ed0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa49 	bl	800734a <USBD_CtlError>
            err++;
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ebe:	e007      	b.n	8006ed0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa41 	bl	800734a <USBD_CtlError>
          err++;
 8006ec8:	7afb      	ldrb	r3, [r7, #11]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ece:	bf00      	nop
      }
      break;
 8006ed0:	e037      	b.n	8006f42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7c1b      	ldrb	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee2:	f107 0208 	add.w	r2, r7, #8
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	4798      	blx	r3
 8006eea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006eec:	e029      	b.n	8006f42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fa2a 	bl	800734a <USBD_CtlError>
        err++;
 8006ef6:	7afb      	ldrb	r3, [r7, #11]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	72fb      	strb	r3, [r7, #11]
      break;
 8006efc:	e021      	b.n	8006f42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7c1b      	ldrb	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10d      	bne.n	8006f22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	f107 0208 	add.w	r2, r7, #8
 8006f12:	4610      	mov	r0, r2
 8006f14:	4798      	blx	r3
 8006f16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	2207      	movs	r2, #7
 8006f1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f20:	e00f      	b.n	8006f42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa10 	bl	800734a <USBD_CtlError>
        err++;
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f30:	e007      	b.n	8006f42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fa08 	bl	800734a <USBD_CtlError>
      err++;
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f40:	bf00      	nop
  }

  if (err != 0U)
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d11e      	bne.n	8006f86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	88db      	ldrh	r3, [r3, #6]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d016      	beq.n	8006f7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f50:	893b      	ldrh	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00e      	beq.n	8006f74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	88da      	ldrh	r2, [r3, #6]
 8006f5a:	893b      	ldrh	r3, [r7, #8]
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	bf28      	it	cs
 8006f60:	4613      	movcs	r3, r2
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f66:	893b      	ldrh	r3, [r7, #8]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fa5d 	bl	800742c <USBD_CtlSendData>
 8006f72:	e009      	b.n	8006f88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f9e7 	bl	800734a <USBD_CtlError>
 8006f7c:	e004      	b.n	8006f88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa91 	bl	80074a6 <USBD_CtlSendStatus>
 8006f84:	e000      	b.n	8006f88 <USBD_GetDescriptor+0x2cc>
    return;
 8006f86:	bf00      	nop
  }
}
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop

08006f90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	889b      	ldrh	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d131      	bne.n	8007006 <USBD_SetAddress+0x76>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	88db      	ldrh	r3, [r3, #6]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d12d      	bne.n	8007006 <USBD_SetAddress+0x76>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	885b      	ldrh	r3, [r3, #2]
 8006fae:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb0:	d829      	bhi.n	8007006 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	885b      	ldrh	r3, [r3, #2]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d104      	bne.n	8006fd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f9bc 	bl	800734a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd2:	e01d      	b.n	8007010 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	7bfa      	ldrb	r2, [r7, #15]
 8006fd8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fe27 	bl	8007c34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa5d 	bl	80074a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffa:	e009      	b.n	8007010 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007004:	e004      	b.n	8007010 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f99e 	bl	800734a <USBD_CtlError>
  }
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	885b      	ldrh	r3, [r3, #2]
 800702a:	b2da      	uxtb	r2, r3
 800702c:	4b4e      	ldr	r3, [pc, #312]	; (8007168 <USBD_SetConfig+0x150>)
 800702e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007030:	4b4d      	ldr	r3, [pc, #308]	; (8007168 <USBD_SetConfig+0x150>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d905      	bls.n	8007044 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f985 	bl	800734a <USBD_CtlError>
    return USBD_FAIL;
 8007040:	2303      	movs	r3, #3
 8007042:	e08c      	b.n	800715e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d002      	beq.n	8007056 <USBD_SetConfig+0x3e>
 8007050:	2b03      	cmp	r3, #3
 8007052:	d029      	beq.n	80070a8 <USBD_SetConfig+0x90>
 8007054:	e075      	b.n	8007142 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007056:	4b44      	ldr	r3, [pc, #272]	; (8007168 <USBD_SetConfig+0x150>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d020      	beq.n	80070a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800705e:	4b42      	ldr	r3, [pc, #264]	; (8007168 <USBD_SetConfig+0x150>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007068:	4b3f      	ldr	r3, [pc, #252]	; (8007168 <USBD_SetConfig+0x150>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fe ffe7 	bl	8006042 <USBD_SetClassConfig>
 8007074:	4603      	mov	r3, r0
 8007076:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d008      	beq.n	8007090 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f962 	bl	800734a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2202      	movs	r2, #2
 800708a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800708e:	e065      	b.n	800715c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa08 	bl	80074a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2203      	movs	r2, #3
 800709a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800709e:	e05d      	b.n	800715c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fa00 	bl	80074a6 <USBD_CtlSendStatus>
      break;
 80070a6:	e059      	b.n	800715c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070a8:	4b2f      	ldr	r3, [pc, #188]	; (8007168 <USBD_SetConfig+0x150>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d112      	bne.n	80070d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80070b8:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <USBD_SetConfig+0x150>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070c2:	4b29      	ldr	r3, [pc, #164]	; (8007168 <USBD_SetConfig+0x150>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7fe ffd6 	bl	800607a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f9e9 	bl	80074a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070d4:	e042      	b.n	800715c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80070d6:	4b24      	ldr	r3, [pc, #144]	; (8007168 <USBD_SetConfig+0x150>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d02a      	beq.n	800713a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7fe ffc4 	bl	800607a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070f2:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <USBD_SetConfig+0x150>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070fc:	4b1a      	ldr	r3, [pc, #104]	; (8007168 <USBD_SetConfig+0x150>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fe ff9d 	bl	8006042 <USBD_SetClassConfig>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00f      	beq.n	8007132 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f918 	bl	800734a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fe ffa9 	bl	800607a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007130:	e014      	b.n	800715c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f9b7 	bl	80074a6 <USBD_CtlSendStatus>
      break;
 8007138:	e010      	b.n	800715c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f9b3 	bl	80074a6 <USBD_CtlSendStatus>
      break;
 8007140:	e00c      	b.n	800715c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f900 	bl	800734a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800714a:	4b07      	ldr	r3, [pc, #28]	; (8007168 <USBD_SetConfig+0x150>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7fe ff92 	bl	800607a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007156:	2303      	movs	r3, #3
 8007158:	73fb      	strb	r3, [r7, #15]
      break;
 800715a:	bf00      	nop
  }

  return ret;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000180 	.word	0x20000180

0800716c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d004      	beq.n	8007188 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f8e2 	bl	800734a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007186:	e023      	b.n	80071d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	dc02      	bgt.n	800719a <USBD_GetConfig+0x2e>
 8007194:	2b00      	cmp	r3, #0
 8007196:	dc03      	bgt.n	80071a0 <USBD_GetConfig+0x34>
 8007198:	e015      	b.n	80071c6 <USBD_GetConfig+0x5a>
 800719a:	2b03      	cmp	r3, #3
 800719c:	d00b      	beq.n	80071b6 <USBD_GetConfig+0x4a>
 800719e:	e012      	b.n	80071c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3308      	adds	r3, #8
 80071aa:	2201      	movs	r2, #1
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f93c 	bl	800742c <USBD_CtlSendData>
        break;
 80071b4:	e00c      	b.n	80071d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3304      	adds	r3, #4
 80071ba:	2201      	movs	r2, #1
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f934 	bl	800742c <USBD_CtlSendData>
        break;
 80071c4:	e004      	b.n	80071d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f8be 	bl	800734a <USBD_CtlError>
        break;
 80071ce:	bf00      	nop
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d81e      	bhi.n	800722e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	88db      	ldrh	r3, [r3, #6]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d004      	beq.n	8007202 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f8a5 	bl	800734a <USBD_CtlError>
        break;
 8007200:	e01a      	b.n	8007238 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d005      	beq.n	800721e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f043 0202 	orr.w	r2, r3, #2
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	330c      	adds	r3, #12
 8007222:	2202      	movs	r2, #2
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f900 	bl	800742c <USBD_CtlSendData>
      break;
 800722c:	e004      	b.n	8007238 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f88a 	bl	800734a <USBD_CtlError>
      break;
 8007236:	bf00      	nop
  }
}
 8007238:	bf00      	nop
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d107      	bne.n	8007262 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f923 	bl	80074a6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007260:	e013      	b.n	800728a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	885b      	ldrh	r3, [r3, #2]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d10b      	bne.n	8007282 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	889b      	ldrh	r3, [r3, #4]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	b29b      	uxth	r3, r3
 8007272:	b2da      	uxtb	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f913 	bl	80074a6 <USBD_CtlSendStatus>
}
 8007280:	e003      	b.n	800728a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f860 	bl	800734a <USBD_CtlError>
}
 800728a:	bf00      	nop
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	3b01      	subs	r3, #1
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d80b      	bhi.n	80072c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	885b      	ldrh	r3, [r3, #2]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d10c      	bne.n	80072cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8f3 	bl	80074a6 <USBD_CtlSendStatus>
      }
      break;
 80072c0:	e004      	b.n	80072cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f840 	bl	800734a <USBD_CtlError>
      break;
 80072ca:	e000      	b.n	80072ce <USBD_ClrFeature+0x3c>
      break;
 80072cc:	bf00      	nop
  }
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	781a      	ldrb	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	781a      	ldrb	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3301      	adds	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f7ff fa41 	bl	8006788 <SWAPBYTE>
 8007306:	4603      	mov	r3, r0
 8007308:	461a      	mov	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3301      	adds	r3, #1
 8007312:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3301      	adds	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7ff fa34 	bl	8006788 <SWAPBYTE>
 8007320:	4603      	mov	r3, r0
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3301      	adds	r3, #1
 800732c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff fa27 	bl	8006788 <SWAPBYTE>
 800733a:	4603      	mov	r3, r0
 800733c:	461a      	mov	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	80da      	strh	r2, [r3, #6]
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007354:	2180      	movs	r1, #128	; 0x80
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fc02 	bl	8007b60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800735c:	2100      	movs	r1, #0
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fbfe 	bl	8007b60 <USBD_LL_StallEP>
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d036      	beq.n	80073f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007386:	6938      	ldr	r0, [r7, #16]
 8007388:	f000 f836 	bl	80073f8 <USBD_GetLen>
 800738c:	4603      	mov	r3, r0
 800738e:	3301      	adds	r3, #1
 8007390:	b29b      	uxth	r3, r3
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	b29a      	uxth	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	4413      	add	r3, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	7812      	ldrb	r2, [r2, #0]
 80073a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	3301      	adds	r3, #1
 80073aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	4413      	add	r3, r2
 80073b2:	2203      	movs	r2, #3
 80073b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	3301      	adds	r3, #1
 80073ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073bc:	e013      	b.n	80073e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	4413      	add	r3, r2
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	7812      	ldrb	r2, [r2, #0]
 80073c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3301      	adds	r3, #1
 80073ce:	613b      	str	r3, [r7, #16]
    idx++;
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
 80073d2:	3301      	adds	r3, #1
 80073d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	4413      	add	r3, r2
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
    idx++;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	3301      	adds	r3, #1
 80073e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e7      	bne.n	80073be <USBD_GetString+0x52>
 80073ee:	e000      	b.n	80073f2 <USBD_GetString+0x86>
    return;
 80073f0:	bf00      	nop
  }
}
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007408:	e005      	b.n	8007416 <USBD_GetLen+0x1e>
  {
    len++;
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	3301      	adds	r3, #1
 800740e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	3301      	adds	r3, #1
 8007414:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f5      	bne.n	800740a <USBD_GetLen+0x12>
  }

  return len;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2202      	movs	r2, #2
 800743c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	2100      	movs	r1, #0
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fc0d 	bl	8007c72 <USBD_LL_Transmit>

  return USBD_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	2100      	movs	r1, #0
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fbfc 	bl	8007c72 <USBD_LL_Transmit>

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	2100      	movs	r1, #0
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fc0c 	bl	8007cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b082      	sub	sp, #8
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2204      	movs	r2, #4
 80074b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074b6:	2300      	movs	r3, #0
 80074b8:	2200      	movs	r2, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fbd8 	bl	8007c72 <USBD_LL_Transmit>

  return USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2205      	movs	r2, #5
 80074d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074dc:	2300      	movs	r3, #0
 80074de:	2200      	movs	r2, #0
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fbe6 	bl	8007cb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074f8:	2200      	movs	r2, #0
 80074fa:	490e      	ldr	r1, [pc, #56]	; (8007534 <MX_USB_DEVICE_Init+0x40>)
 80074fc:	480e      	ldr	r0, [pc, #56]	; (8007538 <MX_USB_DEVICE_Init+0x44>)
 80074fe:	f7fe fd23 	bl	8005f48 <USBD_Init>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007508:	f7fa f838 	bl	800157c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800750c:	490b      	ldr	r1, [pc, #44]	; (800753c <MX_USB_DEVICE_Init+0x48>)
 800750e:	480a      	ldr	r0, [pc, #40]	; (8007538 <MX_USB_DEVICE_Init+0x44>)
 8007510:	f7fe fd4a 	bl	8005fa8 <USBD_RegisterClass>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800751a:	f7fa f82f 	bl	800157c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800751e:	4806      	ldr	r0, [pc, #24]	; (8007538 <MX_USB_DEVICE_Init+0x44>)
 8007520:	f7fe fd78 	bl	8006014 <USBD_Start>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800752a:	f7fa f827 	bl	800157c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800752e:	bf00      	nop
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	200000cc 	.word	0x200000cc
 8007538:	20000184 	.word	0x20000184
 800753c:	2000000c 	.word	0x2000000c

08007540 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2212      	movs	r2, #18
 8007550:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007552:	4b03      	ldr	r3, [pc, #12]	; (8007560 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	200000e8 	.word	0x200000e8

08007564 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2204      	movs	r2, #4
 8007574:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007576:	4b03      	ldr	r3, [pc, #12]	; (8007584 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007578:	4618      	mov	r0, r3
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	200000fc 	.word	0x200000fc

08007588 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	6039      	str	r1, [r7, #0]
 8007592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d105      	bne.n	80075a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	4907      	ldr	r1, [pc, #28]	; (80075bc <USBD_FS_ProductStrDescriptor+0x34>)
 800759e:	4808      	ldr	r0, [pc, #32]	; (80075c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80075a0:	f7ff fee4 	bl	800736c <USBD_GetString>
 80075a4:	e004      	b.n	80075b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	4904      	ldr	r1, [pc, #16]	; (80075bc <USBD_FS_ProductStrDescriptor+0x34>)
 80075aa:	4805      	ldr	r0, [pc, #20]	; (80075c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80075ac:	f7ff fede 	bl	800736c <USBD_GetString>
  }
  return USBD_StrDesc;
 80075b0:	4b02      	ldr	r3, [pc, #8]	; (80075bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000460 	.word	0x20000460
 80075c0:	08008f18 	.word	0x08008f18

080075c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	6039      	str	r1, [r7, #0]
 80075ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	4904      	ldr	r1, [pc, #16]	; (80075e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075d4:	4804      	ldr	r0, [pc, #16]	; (80075e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075d6:	f7ff fec9 	bl	800736c <USBD_GetString>
  return USBD_StrDesc;
 80075da:	4b02      	ldr	r3, [pc, #8]	; (80075e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000460 	.word	0x20000460
 80075e8:	08008f30 	.word	0x08008f30

080075ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	6039      	str	r1, [r7, #0]
 80075f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	221a      	movs	r2, #26
 80075fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075fe:	f000 f843 	bl	8007688 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007602:	4b02      	ldr	r3, [pc, #8]	; (800760c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007604:	4618      	mov	r0, r3
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20000100 	.word	0x20000100

08007610 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	6039      	str	r1, [r7, #0]
 800761a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	4907      	ldr	r1, [pc, #28]	; (8007644 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007626:	4808      	ldr	r0, [pc, #32]	; (8007648 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007628:	f7ff fea0 	bl	800736c <USBD_GetString>
 800762c:	e004      	b.n	8007638 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	4904      	ldr	r1, [pc, #16]	; (8007644 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007632:	4805      	ldr	r0, [pc, #20]	; (8007648 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007634:	f7ff fe9a 	bl	800736c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20000460 	.word	0x20000460
 8007648:	08008f44 	.word	0x08008f44

0800764c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	6039      	str	r1, [r7, #0]
 8007656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	4907      	ldr	r1, [pc, #28]	; (8007680 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007662:	4808      	ldr	r0, [pc, #32]	; (8007684 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007664:	f7ff fe82 	bl	800736c <USBD_GetString>
 8007668:	e004      	b.n	8007674 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	4904      	ldr	r1, [pc, #16]	; (8007680 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800766e:	4805      	ldr	r0, [pc, #20]	; (8007684 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007670:	f7ff fe7c 	bl	800736c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007674:	4b02      	ldr	r3, [pc, #8]	; (8007680 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000460 	.word	0x20000460
 8007684:	08008f50 	.word	0x08008f50

08007688 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800768e:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <Get_SerialNum+0x44>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007694:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <Get_SerialNum+0x48>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800769a:	4b0e      	ldr	r3, [pc, #56]	; (80076d4 <Get_SerialNum+0x4c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4413      	add	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80076ae:	2208      	movs	r2, #8
 80076b0:	4909      	ldr	r1, [pc, #36]	; (80076d8 <Get_SerialNum+0x50>)
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f814 	bl	80076e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076b8:	2204      	movs	r2, #4
 80076ba:	4908      	ldr	r1, [pc, #32]	; (80076dc <Get_SerialNum+0x54>)
 80076bc:	68b8      	ldr	r0, [r7, #8]
 80076be:	f000 f80f 	bl	80076e0 <IntToUnicode>
  }
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	1fff7a10 	.word	0x1fff7a10
 80076d0:	1fff7a14 	.word	0x1fff7a14
 80076d4:	1fff7a18 	.word	0x1fff7a18
 80076d8:	20000102 	.word	0x20000102
 80076dc:	20000112 	.word	0x20000112

080076e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	4613      	mov	r3, r2
 80076ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076f2:	2300      	movs	r3, #0
 80076f4:	75fb      	strb	r3, [r7, #23]
 80076f6:	e027      	b.n	8007748 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	0f1b      	lsrs	r3, r3, #28
 80076fc:	2b09      	cmp	r3, #9
 80076fe:	d80b      	bhi.n	8007718 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	0f1b      	lsrs	r3, r3, #28
 8007704:	b2da      	uxtb	r2, r3
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	4619      	mov	r1, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	440b      	add	r3, r1
 8007710:	3230      	adds	r2, #48	; 0x30
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	e00a      	b.n	800772e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	0f1b      	lsrs	r3, r3, #28
 800771c:	b2da      	uxtb	r2, r3
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	4619      	mov	r1, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	440b      	add	r3, r1
 8007728:	3237      	adds	r2, #55	; 0x37
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	011b      	lsls	r3, r3, #4
 8007732:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	3301      	adds	r3, #1
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	4413      	add	r3, r2
 800773e:	2200      	movs	r2, #0
 8007740:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	3301      	adds	r3, #1
 8007746:	75fb      	strb	r3, [r7, #23]
 8007748:	7dfa      	ldrb	r2, [r7, #23]
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	429a      	cmp	r2, r3
 800774e:	d3d3      	bcc.n	80076f8 <IntToUnicode+0x18>
  }
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08a      	sub	sp, #40	; 0x28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007768:	f107 0314 	add.w	r3, r7, #20
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	605a      	str	r2, [r3, #4]
 8007772:	609a      	str	r2, [r3, #8]
 8007774:	60da      	str	r2, [r3, #12]
 8007776:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007780:	d147      	bne.n	8007812 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007782:	2300      	movs	r3, #0
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	4b25      	ldr	r3, [pc, #148]	; (800781c <HAL_PCD_MspInit+0xbc>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	4a24      	ldr	r2, [pc, #144]	; (800781c <HAL_PCD_MspInit+0xbc>)
 800778c:	f043 0301 	orr.w	r3, r3, #1
 8007790:	6313      	str	r3, [r2, #48]	; 0x30
 8007792:	4b22      	ldr	r3, [pc, #136]	; (800781c <HAL_PCD_MspInit+0xbc>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	613b      	str	r3, [r7, #16]
 800779c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800779e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80077a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a4:	2302      	movs	r3, #2
 80077a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ac:	2303      	movs	r3, #3
 80077ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077b0:	230a      	movs	r3, #10
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077b4:	f107 0314 	add.w	r3, r7, #20
 80077b8:	4619      	mov	r1, r3
 80077ba:	4819      	ldr	r0, [pc, #100]	; (8007820 <HAL_PCD_MspInit+0xc0>)
 80077bc:	f7fa f96c 	bl	8001a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80077c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80077ce:	f107 0314 	add.w	r3, r7, #20
 80077d2:	4619      	mov	r1, r3
 80077d4:	4812      	ldr	r0, [pc, #72]	; (8007820 <HAL_PCD_MspInit+0xc0>)
 80077d6:	f7fa f95f 	bl	8001a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077da:	4b10      	ldr	r3, [pc, #64]	; (800781c <HAL_PCD_MspInit+0xbc>)
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077de:	4a0f      	ldr	r2, [pc, #60]	; (800781c <HAL_PCD_MspInit+0xbc>)
 80077e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e4:	6353      	str	r3, [r2, #52]	; 0x34
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	4b0c      	ldr	r3, [pc, #48]	; (800781c <HAL_PCD_MspInit+0xbc>)
 80077ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ee:	4a0b      	ldr	r2, [pc, #44]	; (800781c <HAL_PCD_MspInit+0xbc>)
 80077f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077f4:	6453      	str	r3, [r2, #68]	; 0x44
 80077f6:	4b09      	ldr	r3, [pc, #36]	; (800781c <HAL_PCD_MspInit+0xbc>)
 80077f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007802:	2200      	movs	r2, #0
 8007804:	2100      	movs	r1, #0
 8007806:	2043      	movs	r0, #67	; 0x43
 8007808:	f7fa f90f 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800780c:	2043      	movs	r0, #67	; 0x43
 800780e:	f7fa f928 	bl	8001a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007812:	bf00      	nop
 8007814:	3728      	adds	r7, #40	; 0x28
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	40023800 	.word	0x40023800
 8007820:	40020000 	.word	0x40020000

08007824 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007838:	4619      	mov	r1, r3
 800783a:	4610      	mov	r0, r2
 800783c:	f7fe fc37 	bl	80060ae <USBD_LL_SetupStage>
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800785a:	78fa      	ldrb	r2, [r7, #3]
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	4613      	mov	r3, r2
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	4619      	mov	r1, r3
 8007872:	f7fe fc71 	bl	8006158 <USBD_LL_DataOutStage>
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	334c      	adds	r3, #76	; 0x4c
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	4619      	mov	r1, r3
 80078a6:	f7fe fd0a 	bl	80062be <USBD_LL_DataInStage>
}
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fe3e 	bl	8006542 <USBD_LL_SOF>
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078d6:	2301      	movs	r3, #1
 80078d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
 80078e6:	e008      	b.n	80078fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d102      	bne.n	80078f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078f0:	2301      	movs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
 80078f4:	e001      	b.n	80078fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078f6:	f7f9 fe41 	bl	800157c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007900:	7bfa      	ldrb	r2, [r7, #15]
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe fdde 	bl	80064c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fd86 	bl	8006422 <USBD_LL_Reset>
}
 8007916:	bf00      	nop
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe fdd9 	bl	80064e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007954:	4b04      	ldr	r3, [pc, #16]	; (8007968 <HAL_PCD_SuspendCallback+0x48>)
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	4a03      	ldr	r2, [pc, #12]	; (8007968 <HAL_PCD_SuspendCallback+0x48>)
 800795a:	f043 0306 	orr.w	r3, r3, #6
 800795e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	e000ed00 	.word	0xe000ed00

0800796c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fdc9 	bl	8006512 <USBD_LL_Resume>
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe fe21 	bl	80065e6 <USBD_LL_IsoOUTIncomplete>
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fddd 	bl	8006582 <USBD_LL_IsoINIncomplete>
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fe33 	bl	800664a <USBD_LL_DevConnected>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fe fe30 	bl	8006660 <USBD_LL_DevDisconnected>
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d13c      	bne.n	8007a92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a18:	4a20      	ldr	r2, [pc, #128]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a1e      	ldr	r2, [pc, #120]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a28:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a30:	4b1a      	ldr	r3, [pc, #104]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a32:	2204      	movs	r2, #4
 8007a34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a36:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a38:	2202      	movs	r2, #2
 8007a3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a3c:	4b17      	ldr	r3, [pc, #92]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a42:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a44:	2202      	movs	r2, #2
 8007a46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007a48:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a54:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007a5a:	4b10      	ldr	r3, [pc, #64]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a60:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a66:	480d      	ldr	r0, [pc, #52]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a68:	f7fa f9f3 	bl	8001e52 <HAL_PCD_Init>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a72:	f7f9 fd83 	bl	800157c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a76:	2180      	movs	r1, #128	; 0x80
 8007a78:	4808      	ldr	r0, [pc, #32]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a7a:	f7fb fc32 	bl	80032e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a7e:	2240      	movs	r2, #64	; 0x40
 8007a80:	2100      	movs	r1, #0
 8007a82:	4806      	ldr	r0, [pc, #24]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a84:	f7fb fbe6 	bl	8003254 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a88:	2280      	movs	r2, #128	; 0x80
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	4803      	ldr	r0, [pc, #12]	; (8007a9c <USBD_LL_Init+0x94>)
 8007a8e:	f7fb fbe1 	bl	8003254 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20000660 	.word	0x20000660

08007aa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fa fae8 	bl	800208c <HAL_PCD_Start>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f930 	bl	8007d28 <USBD_Get_USB_Status>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	70fb      	strb	r3, [r7, #3]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70bb      	strb	r3, [r7, #2]
 8007aec:	4613      	mov	r3, r2
 8007aee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007afe:	78bb      	ldrb	r3, [r7, #2]
 8007b00:	883a      	ldrh	r2, [r7, #0]
 8007b02:	78f9      	ldrb	r1, [r7, #3]
 8007b04:	f7fa ffb9 	bl	8002a7a <HAL_PCD_EP_Open>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 f90a 	bl	8007d28 <USBD_Get_USB_Status>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fb f802 	bl	8002b4a <HAL_PCD_EP_Close>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 f8eb 	bl	8007d28 <USBD_Get_USB_Status>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fb f8c2 	bl	8002d08 <HAL_PCD_EP_SetStall>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 f8cc 	bl	8007d28 <USBD_Get_USB_Status>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fb f907 	bl	8002dd0 <HAL_PCD_EP_ClrStall>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 f8ad 	bl	8007d28 <USBD_Get_USB_Status>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	da0b      	bge.n	8007c10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bfe:	68f9      	ldr	r1, [r7, #12]
 8007c00:	4613      	mov	r3, r2
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	333e      	adds	r3, #62	; 0x3e
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	e00b      	b.n	8007c28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c16:	68f9      	ldr	r1, [r7, #12]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007c26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fa feec 	bl	8002a30 <HAL_PCD_SetAddress>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 f862 	bl	8007d28 <USBD_Get_USB_Status>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c90:	7af9      	ldrb	r1, [r7, #11]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	f7fa ffed 	bl	8002c74 <HAL_PCD_EP_Transmit>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 f841 	bl	8007d28 <USBD_Get_USB_Status>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007caa:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007cd2:	7af9      	ldrb	r1, [r7, #11]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	f7fa ff81 	bl	8002bde <HAL_PCD_EP_Receive>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f820 	bl	8007d28 <USBD_Get_USB_Status>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cec:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d00:	4b03      	ldr	r3, [pc, #12]	; (8007d10 <USBD_static_malloc+0x18>)
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	20000b6c 	.word	0x20000b6c

08007d14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]

}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d817      	bhi.n	8007d6c <USBD_Get_USB_Status+0x44>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <USBD_Get_USB_Status+0x1c>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d5b 	.word	0x08007d5b
 8007d4c:	08007d61 	.word	0x08007d61
 8007d50:	08007d67 	.word	0x08007d67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
    break;
 8007d58:	e00b      	b.n	8007d72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5e:	e008      	b.n	8007d72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
    break;
 8007d64:	e005      	b.n	8007d72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d66:	2303      	movs	r3, #3
 8007d68:	73fb      	strb	r3, [r7, #15]
    break;
 8007d6a:	e002      	b.n	8007d72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d70:	bf00      	nop
  }
  return usb_status;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <memset>:
 8007d80:	4402      	add	r2, r0
 8007d82:	4603      	mov	r3, r0
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d100      	bne.n	8007d8a <memset+0xa>
 8007d88:	4770      	bx	lr
 8007d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8e:	e7f9      	b.n	8007d84 <memset+0x4>

08007d90 <__libc_init_array>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	4d0d      	ldr	r5, [pc, #52]	; (8007dc8 <__libc_init_array+0x38>)
 8007d94:	4c0d      	ldr	r4, [pc, #52]	; (8007dcc <__libc_init_array+0x3c>)
 8007d96:	1b64      	subs	r4, r4, r5
 8007d98:	10a4      	asrs	r4, r4, #2
 8007d9a:	2600      	movs	r6, #0
 8007d9c:	42a6      	cmp	r6, r4
 8007d9e:	d109      	bne.n	8007db4 <__libc_init_array+0x24>
 8007da0:	4d0b      	ldr	r5, [pc, #44]	; (8007dd0 <__libc_init_array+0x40>)
 8007da2:	4c0c      	ldr	r4, [pc, #48]	; (8007dd4 <__libc_init_array+0x44>)
 8007da4:	f001 f8ac 	bl	8008f00 <_init>
 8007da8:	1b64      	subs	r4, r4, r5
 8007daa:	10a4      	asrs	r4, r4, #2
 8007dac:	2600      	movs	r6, #0
 8007dae:	42a6      	cmp	r6, r4
 8007db0:	d105      	bne.n	8007dbe <__libc_init_array+0x2e>
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
 8007db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db8:	4798      	blx	r3
 8007dba:	3601      	adds	r6, #1
 8007dbc:	e7ee      	b.n	8007d9c <__libc_init_array+0xc>
 8007dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc2:	4798      	blx	r3
 8007dc4:	3601      	adds	r6, #1
 8007dc6:	e7f2      	b.n	8007dae <__libc_init_array+0x1e>
 8007dc8:	08009158 	.word	0x08009158
 8007dcc:	08009158 	.word	0x08009158
 8007dd0:	08009158 	.word	0x08009158
 8007dd4:	0800915c 	.word	0x0800915c

08007dd8 <cos>:
 8007dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dda:	ec53 2b10 	vmov	r2, r3, d0
 8007dde:	4826      	ldr	r0, [pc, #152]	; (8007e78 <cos+0xa0>)
 8007de0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007de4:	4281      	cmp	r1, r0
 8007de6:	dc06      	bgt.n	8007df6 <cos+0x1e>
 8007de8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007e70 <cos+0x98>
 8007dec:	b005      	add	sp, #20
 8007dee:	f85d eb04 	ldr.w	lr, [sp], #4
 8007df2:	f000 b89d 	b.w	8007f30 <__kernel_cos>
 8007df6:	4821      	ldr	r0, [pc, #132]	; (8007e7c <cos+0xa4>)
 8007df8:	4281      	cmp	r1, r0
 8007dfa:	dd09      	ble.n	8007e10 <cos+0x38>
 8007dfc:	ee10 0a10 	vmov	r0, s0
 8007e00:	4619      	mov	r1, r3
 8007e02:	f7f8 f9f9 	bl	80001f8 <__aeabi_dsub>
 8007e06:	ec41 0b10 	vmov	d0, r0, r1
 8007e0a:	b005      	add	sp, #20
 8007e0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e10:	4668      	mov	r0, sp
 8007e12:	f000 fa15 	bl	8008240 <__ieee754_rem_pio2>
 8007e16:	f000 0003 	and.w	r0, r0, #3
 8007e1a:	2801      	cmp	r0, #1
 8007e1c:	d00b      	beq.n	8007e36 <cos+0x5e>
 8007e1e:	2802      	cmp	r0, #2
 8007e20:	d016      	beq.n	8007e50 <cos+0x78>
 8007e22:	b9e0      	cbnz	r0, 8007e5e <cos+0x86>
 8007e24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e28:	ed9d 0b00 	vldr	d0, [sp]
 8007e2c:	f000 f880 	bl	8007f30 <__kernel_cos>
 8007e30:	ec51 0b10 	vmov	r0, r1, d0
 8007e34:	e7e7      	b.n	8007e06 <cos+0x2e>
 8007e36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e3a:	ed9d 0b00 	vldr	d0, [sp]
 8007e3e:	f000 f93f 	bl	80080c0 <__kernel_sin>
 8007e42:	ec53 2b10 	vmov	r2, r3, d0
 8007e46:	ee10 0a10 	vmov	r0, s0
 8007e4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e4e:	e7da      	b.n	8007e06 <cos+0x2e>
 8007e50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e54:	ed9d 0b00 	vldr	d0, [sp]
 8007e58:	f000 f86a 	bl	8007f30 <__kernel_cos>
 8007e5c:	e7f1      	b.n	8007e42 <cos+0x6a>
 8007e5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e62:	ed9d 0b00 	vldr	d0, [sp]
 8007e66:	2001      	movs	r0, #1
 8007e68:	f000 f92a 	bl	80080c0 <__kernel_sin>
 8007e6c:	e7e0      	b.n	8007e30 <cos+0x58>
 8007e6e:	bf00      	nop
	...
 8007e78:	3fe921fb 	.word	0x3fe921fb
 8007e7c:	7fefffff 	.word	0x7fefffff

08007e80 <sin>:
 8007e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e82:	ec53 2b10 	vmov	r2, r3, d0
 8007e86:	4828      	ldr	r0, [pc, #160]	; (8007f28 <sin+0xa8>)
 8007e88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e8c:	4281      	cmp	r1, r0
 8007e8e:	dc07      	bgt.n	8007ea0 <sin+0x20>
 8007e90:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007f20 <sin+0xa0>
 8007e94:	2000      	movs	r0, #0
 8007e96:	b005      	add	sp, #20
 8007e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e9c:	f000 b910 	b.w	80080c0 <__kernel_sin>
 8007ea0:	4822      	ldr	r0, [pc, #136]	; (8007f2c <sin+0xac>)
 8007ea2:	4281      	cmp	r1, r0
 8007ea4:	dd09      	ble.n	8007eba <sin+0x3a>
 8007ea6:	ee10 0a10 	vmov	r0, s0
 8007eaa:	4619      	mov	r1, r3
 8007eac:	f7f8 f9a4 	bl	80001f8 <__aeabi_dsub>
 8007eb0:	ec41 0b10 	vmov	d0, r0, r1
 8007eb4:	b005      	add	sp, #20
 8007eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007eba:	4668      	mov	r0, sp
 8007ebc:	f000 f9c0 	bl	8008240 <__ieee754_rem_pio2>
 8007ec0:	f000 0003 	and.w	r0, r0, #3
 8007ec4:	2801      	cmp	r0, #1
 8007ec6:	d00c      	beq.n	8007ee2 <sin+0x62>
 8007ec8:	2802      	cmp	r0, #2
 8007eca:	d011      	beq.n	8007ef0 <sin+0x70>
 8007ecc:	b9f0      	cbnz	r0, 8007f0c <sin+0x8c>
 8007ece:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ed2:	ed9d 0b00 	vldr	d0, [sp]
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f000 f8f2 	bl	80080c0 <__kernel_sin>
 8007edc:	ec51 0b10 	vmov	r0, r1, d0
 8007ee0:	e7e6      	b.n	8007eb0 <sin+0x30>
 8007ee2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ee6:	ed9d 0b00 	vldr	d0, [sp]
 8007eea:	f000 f821 	bl	8007f30 <__kernel_cos>
 8007eee:	e7f5      	b.n	8007edc <sin+0x5c>
 8007ef0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ef4:	ed9d 0b00 	vldr	d0, [sp]
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f000 f8e1 	bl	80080c0 <__kernel_sin>
 8007efe:	ec53 2b10 	vmov	r2, r3, d0
 8007f02:	ee10 0a10 	vmov	r0, s0
 8007f06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f0a:	e7d1      	b.n	8007eb0 <sin+0x30>
 8007f0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f10:	ed9d 0b00 	vldr	d0, [sp]
 8007f14:	f000 f80c 	bl	8007f30 <__kernel_cos>
 8007f18:	e7f1      	b.n	8007efe <sin+0x7e>
 8007f1a:	bf00      	nop
 8007f1c:	f3af 8000 	nop.w
	...
 8007f28:	3fe921fb 	.word	0x3fe921fb
 8007f2c:	7fefffff 	.word	0x7fefffff

08007f30 <__kernel_cos>:
 8007f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	ec57 6b10 	vmov	r6, r7, d0
 8007f38:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007f3c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007f40:	ed8d 1b00 	vstr	d1, [sp]
 8007f44:	da07      	bge.n	8007f56 <__kernel_cos+0x26>
 8007f46:	ee10 0a10 	vmov	r0, s0
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 fda6 	bl	8000a9c <__aeabi_d2iz>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	f000 8088 	beq.w	8008066 <__kernel_cos+0x136>
 8007f56:	4632      	mov	r2, r6
 8007f58:	463b      	mov	r3, r7
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	f7f8 fb03 	bl	8000568 <__aeabi_dmul>
 8007f62:	4b51      	ldr	r3, [pc, #324]	; (80080a8 <__kernel_cos+0x178>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	460d      	mov	r5, r1
 8007f6a:	f7f8 fafd 	bl	8000568 <__aeabi_dmul>
 8007f6e:	a340      	add	r3, pc, #256	; (adr r3, 8008070 <__kernel_cos+0x140>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4682      	mov	sl, r0
 8007f76:	468b      	mov	fp, r1
 8007f78:	4620      	mov	r0, r4
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f7f8 faf4 	bl	8000568 <__aeabi_dmul>
 8007f80:	a33d      	add	r3, pc, #244	; (adr r3, 8008078 <__kernel_cos+0x148>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 f939 	bl	80001fc <__adddf3>
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	f7f8 faeb 	bl	8000568 <__aeabi_dmul>
 8007f92:	a33b      	add	r3, pc, #236	; (adr r3, 8008080 <__kernel_cos+0x150>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f92e 	bl	80001f8 <__aeabi_dsub>
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	462b      	mov	r3, r5
 8007fa0:	f7f8 fae2 	bl	8000568 <__aeabi_dmul>
 8007fa4:	a338      	add	r3, pc, #224	; (adr r3, 8008088 <__kernel_cos+0x158>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f927 	bl	80001fc <__adddf3>
 8007fae:	4622      	mov	r2, r4
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	f7f8 fad9 	bl	8000568 <__aeabi_dmul>
 8007fb6:	a336      	add	r3, pc, #216	; (adr r3, 8008090 <__kernel_cos+0x160>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 f91c 	bl	80001f8 <__aeabi_dsub>
 8007fc0:	4622      	mov	r2, r4
 8007fc2:	462b      	mov	r3, r5
 8007fc4:	f7f8 fad0 	bl	8000568 <__aeabi_dmul>
 8007fc8:	a333      	add	r3, pc, #204	; (adr r3, 8008098 <__kernel_cos+0x168>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f7f8 f915 	bl	80001fc <__adddf3>
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	f7f8 fac7 	bl	8000568 <__aeabi_dmul>
 8007fda:	4622      	mov	r2, r4
 8007fdc:	462b      	mov	r3, r5
 8007fde:	f7f8 fac3 	bl	8000568 <__aeabi_dmul>
 8007fe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	460d      	mov	r5, r1
 8007fea:	4630      	mov	r0, r6
 8007fec:	4639      	mov	r1, r7
 8007fee:	f7f8 fabb 	bl	8000568 <__aeabi_dmul>
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f7f8 f8fd 	bl	80001f8 <__aeabi_dsub>
 8007ffe:	4b2b      	ldr	r3, [pc, #172]	; (80080ac <__kernel_cos+0x17c>)
 8008000:	4598      	cmp	r8, r3
 8008002:	4606      	mov	r6, r0
 8008004:	460f      	mov	r7, r1
 8008006:	dc10      	bgt.n	800802a <__kernel_cos+0xfa>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4650      	mov	r0, sl
 800800e:	4659      	mov	r1, fp
 8008010:	f7f8 f8f2 	bl	80001f8 <__aeabi_dsub>
 8008014:	460b      	mov	r3, r1
 8008016:	4926      	ldr	r1, [pc, #152]	; (80080b0 <__kernel_cos+0x180>)
 8008018:	4602      	mov	r2, r0
 800801a:	2000      	movs	r0, #0
 800801c:	f7f8 f8ec 	bl	80001f8 <__aeabi_dsub>
 8008020:	ec41 0b10 	vmov	d0, r0, r1
 8008024:	b003      	add	sp, #12
 8008026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802a:	4b22      	ldr	r3, [pc, #136]	; (80080b4 <__kernel_cos+0x184>)
 800802c:	4920      	ldr	r1, [pc, #128]	; (80080b0 <__kernel_cos+0x180>)
 800802e:	4598      	cmp	r8, r3
 8008030:	bfcc      	ite	gt
 8008032:	4d21      	ldrgt	r5, [pc, #132]	; (80080b8 <__kernel_cos+0x188>)
 8008034:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008038:	2400      	movs	r4, #0
 800803a:	4622      	mov	r2, r4
 800803c:	462b      	mov	r3, r5
 800803e:	2000      	movs	r0, #0
 8008040:	f7f8 f8da 	bl	80001f8 <__aeabi_dsub>
 8008044:	4622      	mov	r2, r4
 8008046:	4680      	mov	r8, r0
 8008048:	4689      	mov	r9, r1
 800804a:	462b      	mov	r3, r5
 800804c:	4650      	mov	r0, sl
 800804e:	4659      	mov	r1, fp
 8008050:	f7f8 f8d2 	bl	80001f8 <__aeabi_dsub>
 8008054:	4632      	mov	r2, r6
 8008056:	463b      	mov	r3, r7
 8008058:	f7f8 f8ce 	bl	80001f8 <__aeabi_dsub>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4640      	mov	r0, r8
 8008062:	4649      	mov	r1, r9
 8008064:	e7da      	b.n	800801c <__kernel_cos+0xec>
 8008066:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80080a0 <__kernel_cos+0x170>
 800806a:	e7db      	b.n	8008024 <__kernel_cos+0xf4>
 800806c:	f3af 8000 	nop.w
 8008070:	be8838d4 	.word	0xbe8838d4
 8008074:	bda8fae9 	.word	0xbda8fae9
 8008078:	bdb4b1c4 	.word	0xbdb4b1c4
 800807c:	3e21ee9e 	.word	0x3e21ee9e
 8008080:	809c52ad 	.word	0x809c52ad
 8008084:	3e927e4f 	.word	0x3e927e4f
 8008088:	19cb1590 	.word	0x19cb1590
 800808c:	3efa01a0 	.word	0x3efa01a0
 8008090:	16c15177 	.word	0x16c15177
 8008094:	3f56c16c 	.word	0x3f56c16c
 8008098:	5555554c 	.word	0x5555554c
 800809c:	3fa55555 	.word	0x3fa55555
 80080a0:	00000000 	.word	0x00000000
 80080a4:	3ff00000 	.word	0x3ff00000
 80080a8:	3fe00000 	.word	0x3fe00000
 80080ac:	3fd33332 	.word	0x3fd33332
 80080b0:	3ff00000 	.word	0x3ff00000
 80080b4:	3fe90000 	.word	0x3fe90000
 80080b8:	3fd20000 	.word	0x3fd20000
 80080bc:	00000000 	.word	0x00000000

080080c0 <__kernel_sin>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	ed2d 8b04 	vpush	{d8-d9}
 80080c8:	eeb0 8a41 	vmov.f32	s16, s2
 80080cc:	eef0 8a61 	vmov.f32	s17, s3
 80080d0:	ec55 4b10 	vmov	r4, r5, d0
 80080d4:	b083      	sub	sp, #12
 80080d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80080da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80080de:	9001      	str	r0, [sp, #4]
 80080e0:	da06      	bge.n	80080f0 <__kernel_sin+0x30>
 80080e2:	ee10 0a10 	vmov	r0, s0
 80080e6:	4629      	mov	r1, r5
 80080e8:	f7f8 fcd8 	bl	8000a9c <__aeabi_d2iz>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d051      	beq.n	8008194 <__kernel_sin+0xd4>
 80080f0:	4622      	mov	r2, r4
 80080f2:	462b      	mov	r3, r5
 80080f4:	4620      	mov	r0, r4
 80080f6:	4629      	mov	r1, r5
 80080f8:	f7f8 fa36 	bl	8000568 <__aeabi_dmul>
 80080fc:	4682      	mov	sl, r0
 80080fe:	468b      	mov	fp, r1
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4620      	mov	r0, r4
 8008106:	4629      	mov	r1, r5
 8008108:	f7f8 fa2e 	bl	8000568 <__aeabi_dmul>
 800810c:	a341      	add	r3, pc, #260	; (adr r3, 8008214 <__kernel_sin+0x154>)
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	4680      	mov	r8, r0
 8008114:	4689      	mov	r9, r1
 8008116:	4650      	mov	r0, sl
 8008118:	4659      	mov	r1, fp
 800811a:	f7f8 fa25 	bl	8000568 <__aeabi_dmul>
 800811e:	a33f      	add	r3, pc, #252	; (adr r3, 800821c <__kernel_sin+0x15c>)
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f7f8 f868 	bl	80001f8 <__aeabi_dsub>
 8008128:	4652      	mov	r2, sl
 800812a:	465b      	mov	r3, fp
 800812c:	f7f8 fa1c 	bl	8000568 <__aeabi_dmul>
 8008130:	a33c      	add	r3, pc, #240	; (adr r3, 8008224 <__kernel_sin+0x164>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f7f8 f861 	bl	80001fc <__adddf3>
 800813a:	4652      	mov	r2, sl
 800813c:	465b      	mov	r3, fp
 800813e:	f7f8 fa13 	bl	8000568 <__aeabi_dmul>
 8008142:	a33a      	add	r3, pc, #232	; (adr r3, 800822c <__kernel_sin+0x16c>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f7f8 f856 	bl	80001f8 <__aeabi_dsub>
 800814c:	4652      	mov	r2, sl
 800814e:	465b      	mov	r3, fp
 8008150:	f7f8 fa0a 	bl	8000568 <__aeabi_dmul>
 8008154:	a337      	add	r3, pc, #220	; (adr r3, 8008234 <__kernel_sin+0x174>)
 8008156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815a:	f7f8 f84f 	bl	80001fc <__adddf3>
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	4606      	mov	r6, r0
 8008162:	460f      	mov	r7, r1
 8008164:	b9eb      	cbnz	r3, 80081a2 <__kernel_sin+0xe2>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4650      	mov	r0, sl
 800816c:	4659      	mov	r1, fp
 800816e:	f7f8 f9fb 	bl	8000568 <__aeabi_dmul>
 8008172:	a325      	add	r3, pc, #148	; (adr r3, 8008208 <__kernel_sin+0x148>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f83e 	bl	80001f8 <__aeabi_dsub>
 800817c:	4642      	mov	r2, r8
 800817e:	464b      	mov	r3, r9
 8008180:	f7f8 f9f2 	bl	8000568 <__aeabi_dmul>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4620      	mov	r0, r4
 800818a:	4629      	mov	r1, r5
 800818c:	f7f8 f836 	bl	80001fc <__adddf3>
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	ec45 4b10 	vmov	d0, r4, r5
 8008198:	b003      	add	sp, #12
 800819a:	ecbd 8b04 	vpop	{d8-d9}
 800819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a2:	4b1b      	ldr	r3, [pc, #108]	; (8008210 <__kernel_sin+0x150>)
 80081a4:	ec51 0b18 	vmov	r0, r1, d8
 80081a8:	2200      	movs	r2, #0
 80081aa:	f7f8 f9dd 	bl	8000568 <__aeabi_dmul>
 80081ae:	4632      	mov	r2, r6
 80081b0:	ec41 0b19 	vmov	d9, r0, r1
 80081b4:	463b      	mov	r3, r7
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	f7f8 f9d5 	bl	8000568 <__aeabi_dmul>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	ec51 0b19 	vmov	r0, r1, d9
 80081c6:	f7f8 f817 	bl	80001f8 <__aeabi_dsub>
 80081ca:	4652      	mov	r2, sl
 80081cc:	465b      	mov	r3, fp
 80081ce:	f7f8 f9cb 	bl	8000568 <__aeabi_dmul>
 80081d2:	ec53 2b18 	vmov	r2, r3, d8
 80081d6:	f7f8 f80f 	bl	80001f8 <__aeabi_dsub>
 80081da:	a30b      	add	r3, pc, #44	; (adr r3, 8008208 <__kernel_sin+0x148>)
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	4606      	mov	r6, r0
 80081e2:	460f      	mov	r7, r1
 80081e4:	4640      	mov	r0, r8
 80081e6:	4649      	mov	r1, r9
 80081e8:	f7f8 f9be 	bl	8000568 <__aeabi_dmul>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4630      	mov	r0, r6
 80081f2:	4639      	mov	r1, r7
 80081f4:	f7f8 f802 	bl	80001fc <__adddf3>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4620      	mov	r0, r4
 80081fe:	4629      	mov	r1, r5
 8008200:	f7f7 fffa 	bl	80001f8 <__aeabi_dsub>
 8008204:	e7c4      	b.n	8008190 <__kernel_sin+0xd0>
 8008206:	bf00      	nop
 8008208:	55555549 	.word	0x55555549
 800820c:	3fc55555 	.word	0x3fc55555
 8008210:	3fe00000 	.word	0x3fe00000
 8008214:	5acfd57c 	.word	0x5acfd57c
 8008218:	3de5d93a 	.word	0x3de5d93a
 800821c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008220:	3e5ae5e6 	.word	0x3e5ae5e6
 8008224:	57b1fe7d 	.word	0x57b1fe7d
 8008228:	3ec71de3 	.word	0x3ec71de3
 800822c:	19c161d5 	.word	0x19c161d5
 8008230:	3f2a01a0 	.word	0x3f2a01a0
 8008234:	1110f8a6 	.word	0x1110f8a6
 8008238:	3f811111 	.word	0x3f811111
 800823c:	00000000 	.word	0x00000000

08008240 <__ieee754_rem_pio2>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	ed2d 8b02 	vpush	{d8}
 8008248:	ec55 4b10 	vmov	r4, r5, d0
 800824c:	4bca      	ldr	r3, [pc, #808]	; (8008578 <__ieee754_rem_pio2+0x338>)
 800824e:	b08b      	sub	sp, #44	; 0x2c
 8008250:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008254:	4598      	cmp	r8, r3
 8008256:	4682      	mov	sl, r0
 8008258:	9502      	str	r5, [sp, #8]
 800825a:	dc08      	bgt.n	800826e <__ieee754_rem_pio2+0x2e>
 800825c:	2200      	movs	r2, #0
 800825e:	2300      	movs	r3, #0
 8008260:	ed80 0b00 	vstr	d0, [r0]
 8008264:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008268:	f04f 0b00 	mov.w	fp, #0
 800826c:	e028      	b.n	80082c0 <__ieee754_rem_pio2+0x80>
 800826e:	4bc3      	ldr	r3, [pc, #780]	; (800857c <__ieee754_rem_pio2+0x33c>)
 8008270:	4598      	cmp	r8, r3
 8008272:	dc78      	bgt.n	8008366 <__ieee754_rem_pio2+0x126>
 8008274:	9b02      	ldr	r3, [sp, #8]
 8008276:	4ec2      	ldr	r6, [pc, #776]	; (8008580 <__ieee754_rem_pio2+0x340>)
 8008278:	2b00      	cmp	r3, #0
 800827a:	ee10 0a10 	vmov	r0, s0
 800827e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008540 <__ieee754_rem_pio2+0x300>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	4629      	mov	r1, r5
 8008286:	dd39      	ble.n	80082fc <__ieee754_rem_pio2+0xbc>
 8008288:	f7f7 ffb6 	bl	80001f8 <__aeabi_dsub>
 800828c:	45b0      	cmp	r8, r6
 800828e:	4604      	mov	r4, r0
 8008290:	460d      	mov	r5, r1
 8008292:	d01b      	beq.n	80082cc <__ieee754_rem_pio2+0x8c>
 8008294:	a3ac      	add	r3, pc, #688	; (adr r3, 8008548 <__ieee754_rem_pio2+0x308>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f7 ffad 	bl	80001f8 <__aeabi_dsub>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	e9ca 2300 	strd	r2, r3, [sl]
 80082a6:	4620      	mov	r0, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7f7 ffa5 	bl	80001f8 <__aeabi_dsub>
 80082ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8008548 <__ieee754_rem_pio2+0x308>)
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f7f7 ffa0 	bl	80001f8 <__aeabi_dsub>
 80082b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80082bc:	f04f 0b01 	mov.w	fp, #1
 80082c0:	4658      	mov	r0, fp
 80082c2:	b00b      	add	sp, #44	; 0x2c
 80082c4:	ecbd 8b02 	vpop	{d8}
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8008550 <__ieee754_rem_pio2+0x310>)
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	f7f7 ff91 	bl	80001f8 <__aeabi_dsub>
 80082d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008558 <__ieee754_rem_pio2+0x318>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	4604      	mov	r4, r0
 80082de:	460d      	mov	r5, r1
 80082e0:	f7f7 ff8a 	bl	80001f8 <__aeabi_dsub>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	e9ca 2300 	strd	r2, r3, [sl]
 80082ec:	4620      	mov	r0, r4
 80082ee:	4629      	mov	r1, r5
 80082f0:	f7f7 ff82 	bl	80001f8 <__aeabi_dsub>
 80082f4:	a398      	add	r3, pc, #608	; (adr r3, 8008558 <__ieee754_rem_pio2+0x318>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	e7db      	b.n	80082b4 <__ieee754_rem_pio2+0x74>
 80082fc:	f7f7 ff7e 	bl	80001fc <__adddf3>
 8008300:	45b0      	cmp	r8, r6
 8008302:	4604      	mov	r4, r0
 8008304:	460d      	mov	r5, r1
 8008306:	d016      	beq.n	8008336 <__ieee754_rem_pio2+0xf6>
 8008308:	a38f      	add	r3, pc, #572	; (adr r3, 8008548 <__ieee754_rem_pio2+0x308>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f7f7 ff75 	bl	80001fc <__adddf3>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	e9ca 2300 	strd	r2, r3, [sl]
 800831a:	4620      	mov	r0, r4
 800831c:	4629      	mov	r1, r5
 800831e:	f7f7 ff6b 	bl	80001f8 <__aeabi_dsub>
 8008322:	a389      	add	r3, pc, #548	; (adr r3, 8008548 <__ieee754_rem_pio2+0x308>)
 8008324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008328:	f7f7 ff68 	bl	80001fc <__adddf3>
 800832c:	f04f 3bff 	mov.w	fp, #4294967295
 8008330:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008334:	e7c4      	b.n	80082c0 <__ieee754_rem_pio2+0x80>
 8008336:	a386      	add	r3, pc, #536	; (adr r3, 8008550 <__ieee754_rem_pio2+0x310>)
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f7f7 ff5e 	bl	80001fc <__adddf3>
 8008340:	a385      	add	r3, pc, #532	; (adr r3, 8008558 <__ieee754_rem_pio2+0x318>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	4604      	mov	r4, r0
 8008348:	460d      	mov	r5, r1
 800834a:	f7f7 ff57 	bl	80001fc <__adddf3>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	e9ca 2300 	strd	r2, r3, [sl]
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f7 ff4d 	bl	80001f8 <__aeabi_dsub>
 800835e:	a37e      	add	r3, pc, #504	; (adr r3, 8008558 <__ieee754_rem_pio2+0x318>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	e7e0      	b.n	8008328 <__ieee754_rem_pio2+0xe8>
 8008366:	4b87      	ldr	r3, [pc, #540]	; (8008584 <__ieee754_rem_pio2+0x344>)
 8008368:	4598      	cmp	r8, r3
 800836a:	f300 80d8 	bgt.w	800851e <__ieee754_rem_pio2+0x2de>
 800836e:	f000 f96d 	bl	800864c <fabs>
 8008372:	ec55 4b10 	vmov	r4, r5, d0
 8008376:	ee10 0a10 	vmov	r0, s0
 800837a:	a379      	add	r3, pc, #484	; (adr r3, 8008560 <__ieee754_rem_pio2+0x320>)
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	4629      	mov	r1, r5
 8008382:	f7f8 f8f1 	bl	8000568 <__aeabi_dmul>
 8008386:	4b80      	ldr	r3, [pc, #512]	; (8008588 <__ieee754_rem_pio2+0x348>)
 8008388:	2200      	movs	r2, #0
 800838a:	f7f7 ff37 	bl	80001fc <__adddf3>
 800838e:	f7f8 fb85 	bl	8000a9c <__aeabi_d2iz>
 8008392:	4683      	mov	fp, r0
 8008394:	f7f8 f87e 	bl	8000494 <__aeabi_i2d>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	ec43 2b18 	vmov	d8, r2, r3
 80083a0:	a367      	add	r3, pc, #412	; (adr r3, 8008540 <__ieee754_rem_pio2+0x300>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f7f8 f8df 	bl	8000568 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4620      	mov	r0, r4
 80083b0:	4629      	mov	r1, r5
 80083b2:	f7f7 ff21 	bl	80001f8 <__aeabi_dsub>
 80083b6:	a364      	add	r3, pc, #400	; (adr r3, 8008548 <__ieee754_rem_pio2+0x308>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	4606      	mov	r6, r0
 80083be:	460f      	mov	r7, r1
 80083c0:	ec51 0b18 	vmov	r0, r1, d8
 80083c4:	f7f8 f8d0 	bl	8000568 <__aeabi_dmul>
 80083c8:	f1bb 0f1f 	cmp.w	fp, #31
 80083cc:	4604      	mov	r4, r0
 80083ce:	460d      	mov	r5, r1
 80083d0:	dc0d      	bgt.n	80083ee <__ieee754_rem_pio2+0x1ae>
 80083d2:	4b6e      	ldr	r3, [pc, #440]	; (800858c <__ieee754_rem_pio2+0x34c>)
 80083d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80083d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083dc:	4543      	cmp	r3, r8
 80083de:	d006      	beq.n	80083ee <__ieee754_rem_pio2+0x1ae>
 80083e0:	4622      	mov	r2, r4
 80083e2:	462b      	mov	r3, r5
 80083e4:	4630      	mov	r0, r6
 80083e6:	4639      	mov	r1, r7
 80083e8:	f7f7 ff06 	bl	80001f8 <__aeabi_dsub>
 80083ec:	e00e      	b.n	800840c <__ieee754_rem_pio2+0x1cc>
 80083ee:	462b      	mov	r3, r5
 80083f0:	4622      	mov	r2, r4
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f7 feff 	bl	80001f8 <__aeabi_dsub>
 80083fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80083fe:	9303      	str	r3, [sp, #12]
 8008400:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008404:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008408:	2b10      	cmp	r3, #16
 800840a:	dc02      	bgt.n	8008412 <__ieee754_rem_pio2+0x1d2>
 800840c:	e9ca 0100 	strd	r0, r1, [sl]
 8008410:	e039      	b.n	8008486 <__ieee754_rem_pio2+0x246>
 8008412:	a34f      	add	r3, pc, #316	; (adr r3, 8008550 <__ieee754_rem_pio2+0x310>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	ec51 0b18 	vmov	r0, r1, d8
 800841c:	f7f8 f8a4 	bl	8000568 <__aeabi_dmul>
 8008420:	4604      	mov	r4, r0
 8008422:	460d      	mov	r5, r1
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4630      	mov	r0, r6
 800842a:	4639      	mov	r1, r7
 800842c:	f7f7 fee4 	bl	80001f8 <__aeabi_dsub>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4680      	mov	r8, r0
 8008436:	4689      	mov	r9, r1
 8008438:	4630      	mov	r0, r6
 800843a:	4639      	mov	r1, r7
 800843c:	f7f7 fedc 	bl	80001f8 <__aeabi_dsub>
 8008440:	4622      	mov	r2, r4
 8008442:	462b      	mov	r3, r5
 8008444:	f7f7 fed8 	bl	80001f8 <__aeabi_dsub>
 8008448:	a343      	add	r3, pc, #268	; (adr r3, 8008558 <__ieee754_rem_pio2+0x318>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	4604      	mov	r4, r0
 8008450:	460d      	mov	r5, r1
 8008452:	ec51 0b18 	vmov	r0, r1, d8
 8008456:	f7f8 f887 	bl	8000568 <__aeabi_dmul>
 800845a:	4622      	mov	r2, r4
 800845c:	462b      	mov	r3, r5
 800845e:	f7f7 fecb 	bl	80001f8 <__aeabi_dsub>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4604      	mov	r4, r0
 8008468:	460d      	mov	r5, r1
 800846a:	4640      	mov	r0, r8
 800846c:	4649      	mov	r1, r9
 800846e:	f7f7 fec3 	bl	80001f8 <__aeabi_dsub>
 8008472:	9a03      	ldr	r2, [sp, #12]
 8008474:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b31      	cmp	r3, #49	; 0x31
 800847c:	dc24      	bgt.n	80084c8 <__ieee754_rem_pio2+0x288>
 800847e:	e9ca 0100 	strd	r0, r1, [sl]
 8008482:	4646      	mov	r6, r8
 8008484:	464f      	mov	r7, r9
 8008486:	e9da 8900 	ldrd	r8, r9, [sl]
 800848a:	4630      	mov	r0, r6
 800848c:	4642      	mov	r2, r8
 800848e:	464b      	mov	r3, r9
 8008490:	4639      	mov	r1, r7
 8008492:	f7f7 feb1 	bl	80001f8 <__aeabi_dsub>
 8008496:	462b      	mov	r3, r5
 8008498:	4622      	mov	r2, r4
 800849a:	f7f7 fead 	bl	80001f8 <__aeabi_dsub>
 800849e:	9b02      	ldr	r3, [sp, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084a6:	f6bf af0b 	bge.w	80082c0 <__ieee754_rem_pio2+0x80>
 80084aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80084ae:	f8ca 3004 	str.w	r3, [sl, #4]
 80084b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084b6:	f8ca 8000 	str.w	r8, [sl]
 80084ba:	f8ca 0008 	str.w	r0, [sl, #8]
 80084be:	f8ca 300c 	str.w	r3, [sl, #12]
 80084c2:	f1cb 0b00 	rsb	fp, fp, #0
 80084c6:	e6fb      	b.n	80082c0 <__ieee754_rem_pio2+0x80>
 80084c8:	a327      	add	r3, pc, #156	; (adr r3, 8008568 <__ieee754_rem_pio2+0x328>)
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	ec51 0b18 	vmov	r0, r1, d8
 80084d2:	f7f8 f849 	bl	8000568 <__aeabi_dmul>
 80084d6:	4604      	mov	r4, r0
 80084d8:	460d      	mov	r5, r1
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	4640      	mov	r0, r8
 80084e0:	4649      	mov	r1, r9
 80084e2:	f7f7 fe89 	bl	80001f8 <__aeabi_dsub>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4606      	mov	r6, r0
 80084ec:	460f      	mov	r7, r1
 80084ee:	4640      	mov	r0, r8
 80084f0:	4649      	mov	r1, r9
 80084f2:	f7f7 fe81 	bl	80001f8 <__aeabi_dsub>
 80084f6:	4622      	mov	r2, r4
 80084f8:	462b      	mov	r3, r5
 80084fa:	f7f7 fe7d 	bl	80001f8 <__aeabi_dsub>
 80084fe:	a31c      	add	r3, pc, #112	; (adr r3, 8008570 <__ieee754_rem_pio2+0x330>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	4604      	mov	r4, r0
 8008506:	460d      	mov	r5, r1
 8008508:	ec51 0b18 	vmov	r0, r1, d8
 800850c:	f7f8 f82c 	bl	8000568 <__aeabi_dmul>
 8008510:	4622      	mov	r2, r4
 8008512:	462b      	mov	r3, r5
 8008514:	f7f7 fe70 	bl	80001f8 <__aeabi_dsub>
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	e760      	b.n	80083e0 <__ieee754_rem_pio2+0x1a0>
 800851e:	4b1c      	ldr	r3, [pc, #112]	; (8008590 <__ieee754_rem_pio2+0x350>)
 8008520:	4598      	cmp	r8, r3
 8008522:	dd37      	ble.n	8008594 <__ieee754_rem_pio2+0x354>
 8008524:	ee10 2a10 	vmov	r2, s0
 8008528:	462b      	mov	r3, r5
 800852a:	4620      	mov	r0, r4
 800852c:	4629      	mov	r1, r5
 800852e:	f7f7 fe63 	bl	80001f8 <__aeabi_dsub>
 8008532:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008536:	e9ca 0100 	strd	r0, r1, [sl]
 800853a:	e695      	b.n	8008268 <__ieee754_rem_pio2+0x28>
 800853c:	f3af 8000 	nop.w
 8008540:	54400000 	.word	0x54400000
 8008544:	3ff921fb 	.word	0x3ff921fb
 8008548:	1a626331 	.word	0x1a626331
 800854c:	3dd0b461 	.word	0x3dd0b461
 8008550:	1a600000 	.word	0x1a600000
 8008554:	3dd0b461 	.word	0x3dd0b461
 8008558:	2e037073 	.word	0x2e037073
 800855c:	3ba3198a 	.word	0x3ba3198a
 8008560:	6dc9c883 	.word	0x6dc9c883
 8008564:	3fe45f30 	.word	0x3fe45f30
 8008568:	2e000000 	.word	0x2e000000
 800856c:	3ba3198a 	.word	0x3ba3198a
 8008570:	252049c1 	.word	0x252049c1
 8008574:	397b839a 	.word	0x397b839a
 8008578:	3fe921fb 	.word	0x3fe921fb
 800857c:	4002d97b 	.word	0x4002d97b
 8008580:	3ff921fb 	.word	0x3ff921fb
 8008584:	413921fb 	.word	0x413921fb
 8008588:	3fe00000 	.word	0x3fe00000
 800858c:	08008f78 	.word	0x08008f78
 8008590:	7fefffff 	.word	0x7fefffff
 8008594:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008598:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800859c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80085a0:	4620      	mov	r0, r4
 80085a2:	460d      	mov	r5, r1
 80085a4:	f7f8 fa7a 	bl	8000a9c <__aeabi_d2iz>
 80085a8:	f7f7 ff74 	bl	8000494 <__aeabi_i2d>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4620      	mov	r0, r4
 80085b2:	4629      	mov	r1, r5
 80085b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085b8:	f7f7 fe1e 	bl	80001f8 <__aeabi_dsub>
 80085bc:	4b21      	ldr	r3, [pc, #132]	; (8008644 <__ieee754_rem_pio2+0x404>)
 80085be:	2200      	movs	r2, #0
 80085c0:	f7f7 ffd2 	bl	8000568 <__aeabi_dmul>
 80085c4:	460d      	mov	r5, r1
 80085c6:	4604      	mov	r4, r0
 80085c8:	f7f8 fa68 	bl	8000a9c <__aeabi_d2iz>
 80085cc:	f7f7 ff62 	bl	8000494 <__aeabi_i2d>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4620      	mov	r0, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80085dc:	f7f7 fe0c 	bl	80001f8 <__aeabi_dsub>
 80085e0:	4b18      	ldr	r3, [pc, #96]	; (8008644 <__ieee754_rem_pio2+0x404>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	f7f7 ffc0 	bl	8000568 <__aeabi_dmul>
 80085e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80085f0:	2703      	movs	r7, #3
 80085f2:	2400      	movs	r4, #0
 80085f4:	2500      	movs	r5, #0
 80085f6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80085fa:	4622      	mov	r2, r4
 80085fc:	462b      	mov	r3, r5
 80085fe:	46b9      	mov	r9, r7
 8008600:	3f01      	subs	r7, #1
 8008602:	f7f8 fa19 	bl	8000a38 <__aeabi_dcmpeq>
 8008606:	2800      	cmp	r0, #0
 8008608:	d1f5      	bne.n	80085f6 <__ieee754_rem_pio2+0x3b6>
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <__ieee754_rem_pio2+0x408>)
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	2302      	movs	r3, #2
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	4632      	mov	r2, r6
 8008614:	464b      	mov	r3, r9
 8008616:	4651      	mov	r1, sl
 8008618:	a804      	add	r0, sp, #16
 800861a:	f000 f821 	bl	8008660 <__kernel_rem_pio2>
 800861e:	9b02      	ldr	r3, [sp, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	4683      	mov	fp, r0
 8008624:	f6bf ae4c 	bge.w	80082c0 <__ieee754_rem_pio2+0x80>
 8008628:	e9da 2100 	ldrd	r2, r1, [sl]
 800862c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008630:	e9ca 2300 	strd	r2, r3, [sl]
 8008634:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008638:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800863c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008640:	e73f      	b.n	80084c2 <__ieee754_rem_pio2+0x282>
 8008642:	bf00      	nop
 8008644:	41700000 	.word	0x41700000
 8008648:	08008ff8 	.word	0x08008ff8

0800864c <fabs>:
 800864c:	ec51 0b10 	vmov	r0, r1, d0
 8008650:	ee10 2a10 	vmov	r2, s0
 8008654:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008658:	ec43 2b10 	vmov	d0, r2, r3
 800865c:	4770      	bx	lr
	...

08008660 <__kernel_rem_pio2>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	ed2d 8b02 	vpush	{d8}
 8008668:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800866c:	f112 0f14 	cmn.w	r2, #20
 8008670:	9306      	str	r3, [sp, #24]
 8008672:	9104      	str	r1, [sp, #16]
 8008674:	4bc2      	ldr	r3, [pc, #776]	; (8008980 <__kernel_rem_pio2+0x320>)
 8008676:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008678:	9009      	str	r0, [sp, #36]	; 0x24
 800867a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	9b06      	ldr	r3, [sp, #24]
 8008682:	f103 33ff 	add.w	r3, r3, #4294967295
 8008686:	bfa8      	it	ge
 8008688:	1ed4      	subge	r4, r2, #3
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	bfb2      	itee	lt
 800868e:	2400      	movlt	r4, #0
 8008690:	2318      	movge	r3, #24
 8008692:	fb94 f4f3 	sdivge	r4, r4, r3
 8008696:	f06f 0317 	mvn.w	r3, #23
 800869a:	fb04 3303 	mla	r3, r4, r3, r3
 800869e:	eb03 0a02 	add.w	sl, r3, r2
 80086a2:	9b00      	ldr	r3, [sp, #0]
 80086a4:	9a05      	ldr	r2, [sp, #20]
 80086a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008970 <__kernel_rem_pio2+0x310>
 80086aa:	eb03 0802 	add.w	r8, r3, r2
 80086ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80086b0:	1aa7      	subs	r7, r4, r2
 80086b2:	ae20      	add	r6, sp, #128	; 0x80
 80086b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80086b8:	2500      	movs	r5, #0
 80086ba:	4545      	cmp	r5, r8
 80086bc:	dd13      	ble.n	80086e6 <__kernel_rem_pio2+0x86>
 80086be:	9b06      	ldr	r3, [sp, #24]
 80086c0:	aa20      	add	r2, sp, #128	; 0x80
 80086c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80086c6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80086ca:	f04f 0800 	mov.w	r8, #0
 80086ce:	9b00      	ldr	r3, [sp, #0]
 80086d0:	4598      	cmp	r8, r3
 80086d2:	dc31      	bgt.n	8008738 <__kernel_rem_pio2+0xd8>
 80086d4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008970 <__kernel_rem_pio2+0x310>
 80086d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80086dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80086e0:	462f      	mov	r7, r5
 80086e2:	2600      	movs	r6, #0
 80086e4:	e01b      	b.n	800871e <__kernel_rem_pio2+0xbe>
 80086e6:	42ef      	cmn	r7, r5
 80086e8:	d407      	bmi.n	80086fa <__kernel_rem_pio2+0x9a>
 80086ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80086ee:	f7f7 fed1 	bl	8000494 <__aeabi_i2d>
 80086f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80086f6:	3501      	adds	r5, #1
 80086f8:	e7df      	b.n	80086ba <__kernel_rem_pio2+0x5a>
 80086fa:	ec51 0b18 	vmov	r0, r1, d8
 80086fe:	e7f8      	b.n	80086f2 <__kernel_rem_pio2+0x92>
 8008700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008704:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008708:	f7f7 ff2e 	bl	8000568 <__aeabi_dmul>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008714:	f7f7 fd72 	bl	80001fc <__adddf3>
 8008718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800871c:	3601      	adds	r6, #1
 800871e:	9b05      	ldr	r3, [sp, #20]
 8008720:	429e      	cmp	r6, r3
 8008722:	f1a7 0708 	sub.w	r7, r7, #8
 8008726:	ddeb      	ble.n	8008700 <__kernel_rem_pio2+0xa0>
 8008728:	ed9d 7b02 	vldr	d7, [sp, #8]
 800872c:	f108 0801 	add.w	r8, r8, #1
 8008730:	ecab 7b02 	vstmia	fp!, {d7}
 8008734:	3508      	adds	r5, #8
 8008736:	e7ca      	b.n	80086ce <__kernel_rem_pio2+0x6e>
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	aa0c      	add	r2, sp, #48	; 0x30
 800873c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008740:	930b      	str	r3, [sp, #44]	; 0x2c
 8008742:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008744:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008748:	9c00      	ldr	r4, [sp, #0]
 800874a:	930a      	str	r3, [sp, #40]	; 0x28
 800874c:	00e3      	lsls	r3, r4, #3
 800874e:	9308      	str	r3, [sp, #32]
 8008750:	ab98      	add	r3, sp, #608	; 0x260
 8008752:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008756:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800875a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800875e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008760:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008764:	46c3      	mov	fp, r8
 8008766:	46a1      	mov	r9, r4
 8008768:	f1b9 0f00 	cmp.w	r9, #0
 800876c:	f1a5 0508 	sub.w	r5, r5, #8
 8008770:	dc77      	bgt.n	8008862 <__kernel_rem_pio2+0x202>
 8008772:	ec47 6b10 	vmov	d0, r6, r7
 8008776:	4650      	mov	r0, sl
 8008778:	f000 fac2 	bl	8008d00 <scalbn>
 800877c:	ec57 6b10 	vmov	r6, r7, d0
 8008780:	2200      	movs	r2, #0
 8008782:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008786:	ee10 0a10 	vmov	r0, s0
 800878a:	4639      	mov	r1, r7
 800878c:	f7f7 feec 	bl	8000568 <__aeabi_dmul>
 8008790:	ec41 0b10 	vmov	d0, r0, r1
 8008794:	f000 fb34 	bl	8008e00 <floor>
 8008798:	4b7a      	ldr	r3, [pc, #488]	; (8008984 <__kernel_rem_pio2+0x324>)
 800879a:	ec51 0b10 	vmov	r0, r1, d0
 800879e:	2200      	movs	r2, #0
 80087a0:	f7f7 fee2 	bl	8000568 <__aeabi_dmul>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4630      	mov	r0, r6
 80087aa:	4639      	mov	r1, r7
 80087ac:	f7f7 fd24 	bl	80001f8 <__aeabi_dsub>
 80087b0:	460f      	mov	r7, r1
 80087b2:	4606      	mov	r6, r0
 80087b4:	f7f8 f972 	bl	8000a9c <__aeabi_d2iz>
 80087b8:	9002      	str	r0, [sp, #8]
 80087ba:	f7f7 fe6b 	bl	8000494 <__aeabi_i2d>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4630      	mov	r0, r6
 80087c4:	4639      	mov	r1, r7
 80087c6:	f7f7 fd17 	bl	80001f8 <__aeabi_dsub>
 80087ca:	f1ba 0f00 	cmp.w	sl, #0
 80087ce:	4606      	mov	r6, r0
 80087d0:	460f      	mov	r7, r1
 80087d2:	dd6d      	ble.n	80088b0 <__kernel_rem_pio2+0x250>
 80087d4:	1e61      	subs	r1, r4, #1
 80087d6:	ab0c      	add	r3, sp, #48	; 0x30
 80087d8:	9d02      	ldr	r5, [sp, #8]
 80087da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087de:	f1ca 0018 	rsb	r0, sl, #24
 80087e2:	fa43 f200 	asr.w	r2, r3, r0
 80087e6:	4415      	add	r5, r2
 80087e8:	4082      	lsls	r2, r0
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	aa0c      	add	r2, sp, #48	; 0x30
 80087ee:	9502      	str	r5, [sp, #8]
 80087f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80087f4:	f1ca 0217 	rsb	r2, sl, #23
 80087f8:	fa43 fb02 	asr.w	fp, r3, r2
 80087fc:	f1bb 0f00 	cmp.w	fp, #0
 8008800:	dd65      	ble.n	80088ce <__kernel_rem_pio2+0x26e>
 8008802:	9b02      	ldr	r3, [sp, #8]
 8008804:	2200      	movs	r2, #0
 8008806:	3301      	adds	r3, #1
 8008808:	9302      	str	r3, [sp, #8]
 800880a:	4615      	mov	r5, r2
 800880c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008810:	4294      	cmp	r4, r2
 8008812:	f300 809f 	bgt.w	8008954 <__kernel_rem_pio2+0x2f4>
 8008816:	f1ba 0f00 	cmp.w	sl, #0
 800881a:	dd07      	ble.n	800882c <__kernel_rem_pio2+0x1cc>
 800881c:	f1ba 0f01 	cmp.w	sl, #1
 8008820:	f000 80c1 	beq.w	80089a6 <__kernel_rem_pio2+0x346>
 8008824:	f1ba 0f02 	cmp.w	sl, #2
 8008828:	f000 80c7 	beq.w	80089ba <__kernel_rem_pio2+0x35a>
 800882c:	f1bb 0f02 	cmp.w	fp, #2
 8008830:	d14d      	bne.n	80088ce <__kernel_rem_pio2+0x26e>
 8008832:	4632      	mov	r2, r6
 8008834:	463b      	mov	r3, r7
 8008836:	4954      	ldr	r1, [pc, #336]	; (8008988 <__kernel_rem_pio2+0x328>)
 8008838:	2000      	movs	r0, #0
 800883a:	f7f7 fcdd 	bl	80001f8 <__aeabi_dsub>
 800883e:	4606      	mov	r6, r0
 8008840:	460f      	mov	r7, r1
 8008842:	2d00      	cmp	r5, #0
 8008844:	d043      	beq.n	80088ce <__kernel_rem_pio2+0x26e>
 8008846:	4650      	mov	r0, sl
 8008848:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008978 <__kernel_rem_pio2+0x318>
 800884c:	f000 fa58 	bl	8008d00 <scalbn>
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	ec53 2b10 	vmov	r2, r3, d0
 8008858:	f7f7 fcce 	bl	80001f8 <__aeabi_dsub>
 800885c:	4606      	mov	r6, r0
 800885e:	460f      	mov	r7, r1
 8008860:	e035      	b.n	80088ce <__kernel_rem_pio2+0x26e>
 8008862:	4b4a      	ldr	r3, [pc, #296]	; (800898c <__kernel_rem_pio2+0x32c>)
 8008864:	2200      	movs	r2, #0
 8008866:	4630      	mov	r0, r6
 8008868:	4639      	mov	r1, r7
 800886a:	f7f7 fe7d 	bl	8000568 <__aeabi_dmul>
 800886e:	f7f8 f915 	bl	8000a9c <__aeabi_d2iz>
 8008872:	f7f7 fe0f 	bl	8000494 <__aeabi_i2d>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	ec43 2b18 	vmov	d8, r2, r3
 800887e:	4b44      	ldr	r3, [pc, #272]	; (8008990 <__kernel_rem_pio2+0x330>)
 8008880:	2200      	movs	r2, #0
 8008882:	f7f7 fe71 	bl	8000568 <__aeabi_dmul>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4630      	mov	r0, r6
 800888c:	4639      	mov	r1, r7
 800888e:	f7f7 fcb3 	bl	80001f8 <__aeabi_dsub>
 8008892:	f7f8 f903 	bl	8000a9c <__aeabi_d2iz>
 8008896:	e9d5 2300 	ldrd	r2, r3, [r5]
 800889a:	f84b 0b04 	str.w	r0, [fp], #4
 800889e:	ec51 0b18 	vmov	r0, r1, d8
 80088a2:	f7f7 fcab 	bl	80001fc <__adddf3>
 80088a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80088aa:	4606      	mov	r6, r0
 80088ac:	460f      	mov	r7, r1
 80088ae:	e75b      	b.n	8008768 <__kernel_rem_pio2+0x108>
 80088b0:	d106      	bne.n	80088c0 <__kernel_rem_pio2+0x260>
 80088b2:	1e63      	subs	r3, r4, #1
 80088b4:	aa0c      	add	r2, sp, #48	; 0x30
 80088b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80088be:	e79d      	b.n	80087fc <__kernel_rem_pio2+0x19c>
 80088c0:	4b34      	ldr	r3, [pc, #208]	; (8008994 <__kernel_rem_pio2+0x334>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	f7f8 f8d6 	bl	8000a74 <__aeabi_dcmpge>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d140      	bne.n	800894e <__kernel_rem_pio2+0x2ee>
 80088cc:	4683      	mov	fp, r0
 80088ce:	2200      	movs	r2, #0
 80088d0:	2300      	movs	r3, #0
 80088d2:	4630      	mov	r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	f7f8 f8af 	bl	8000a38 <__aeabi_dcmpeq>
 80088da:	2800      	cmp	r0, #0
 80088dc:	f000 80c1 	beq.w	8008a62 <__kernel_rem_pio2+0x402>
 80088e0:	1e65      	subs	r5, r4, #1
 80088e2:	462b      	mov	r3, r5
 80088e4:	2200      	movs	r2, #0
 80088e6:	9900      	ldr	r1, [sp, #0]
 80088e8:	428b      	cmp	r3, r1
 80088ea:	da6d      	bge.n	80089c8 <__kernel_rem_pio2+0x368>
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	f000 808a 	beq.w	8008a06 <__kernel_rem_pio2+0x3a6>
 80088f2:	ab0c      	add	r3, sp, #48	; 0x30
 80088f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80088f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 80ae 	beq.w	8008a5e <__kernel_rem_pio2+0x3fe>
 8008902:	4650      	mov	r0, sl
 8008904:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008978 <__kernel_rem_pio2+0x318>
 8008908:	f000 f9fa 	bl	8008d00 <scalbn>
 800890c:	1c6b      	adds	r3, r5, #1
 800890e:	00da      	lsls	r2, r3, #3
 8008910:	9205      	str	r2, [sp, #20]
 8008912:	ec57 6b10 	vmov	r6, r7, d0
 8008916:	aa70      	add	r2, sp, #448	; 0x1c0
 8008918:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800898c <__kernel_rem_pio2+0x32c>
 800891c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008920:	462c      	mov	r4, r5
 8008922:	f04f 0800 	mov.w	r8, #0
 8008926:	2c00      	cmp	r4, #0
 8008928:	f280 80d4 	bge.w	8008ad4 <__kernel_rem_pio2+0x474>
 800892c:	462c      	mov	r4, r5
 800892e:	2c00      	cmp	r4, #0
 8008930:	f2c0 8102 	blt.w	8008b38 <__kernel_rem_pio2+0x4d8>
 8008934:	4b18      	ldr	r3, [pc, #96]	; (8008998 <__kernel_rem_pio2+0x338>)
 8008936:	461e      	mov	r6, r3
 8008938:	ab70      	add	r3, sp, #448	; 0x1c0
 800893a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800893e:	1b2b      	subs	r3, r5, r4
 8008940:	f04f 0900 	mov.w	r9, #0
 8008944:	f04f 0a00 	mov.w	sl, #0
 8008948:	2700      	movs	r7, #0
 800894a:	9306      	str	r3, [sp, #24]
 800894c:	e0e6      	b.n	8008b1c <__kernel_rem_pio2+0x4bc>
 800894e:	f04f 0b02 	mov.w	fp, #2
 8008952:	e756      	b.n	8008802 <__kernel_rem_pio2+0x1a2>
 8008954:	f8d8 3000 	ldr.w	r3, [r8]
 8008958:	bb05      	cbnz	r5, 800899c <__kernel_rem_pio2+0x33c>
 800895a:	b123      	cbz	r3, 8008966 <__kernel_rem_pio2+0x306>
 800895c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008960:	f8c8 3000 	str.w	r3, [r8]
 8008964:	2301      	movs	r3, #1
 8008966:	3201      	adds	r2, #1
 8008968:	f108 0804 	add.w	r8, r8, #4
 800896c:	461d      	mov	r5, r3
 800896e:	e74f      	b.n	8008810 <__kernel_rem_pio2+0x1b0>
	...
 800897c:	3ff00000 	.word	0x3ff00000
 8008980:	08009140 	.word	0x08009140
 8008984:	40200000 	.word	0x40200000
 8008988:	3ff00000 	.word	0x3ff00000
 800898c:	3e700000 	.word	0x3e700000
 8008990:	41700000 	.word	0x41700000
 8008994:	3fe00000 	.word	0x3fe00000
 8008998:	08009100 	.word	0x08009100
 800899c:	1acb      	subs	r3, r1, r3
 800899e:	f8c8 3000 	str.w	r3, [r8]
 80089a2:	462b      	mov	r3, r5
 80089a4:	e7df      	b.n	8008966 <__kernel_rem_pio2+0x306>
 80089a6:	1e62      	subs	r2, r4, #1
 80089a8:	ab0c      	add	r3, sp, #48	; 0x30
 80089aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80089b2:	a90c      	add	r1, sp, #48	; 0x30
 80089b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80089b8:	e738      	b.n	800882c <__kernel_rem_pio2+0x1cc>
 80089ba:	1e62      	subs	r2, r4, #1
 80089bc:	ab0c      	add	r3, sp, #48	; 0x30
 80089be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80089c6:	e7f4      	b.n	80089b2 <__kernel_rem_pio2+0x352>
 80089c8:	a90c      	add	r1, sp, #48	; 0x30
 80089ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	430a      	orrs	r2, r1
 80089d2:	e788      	b.n	80088e6 <__kernel_rem_pio2+0x286>
 80089d4:	3301      	adds	r3, #1
 80089d6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80089da:	2900      	cmp	r1, #0
 80089dc:	d0fa      	beq.n	80089d4 <__kernel_rem_pio2+0x374>
 80089de:	9a08      	ldr	r2, [sp, #32]
 80089e0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80089e4:	446a      	add	r2, sp
 80089e6:	3a98      	subs	r2, #152	; 0x98
 80089e8:	9208      	str	r2, [sp, #32]
 80089ea:	9a06      	ldr	r2, [sp, #24]
 80089ec:	a920      	add	r1, sp, #128	; 0x80
 80089ee:	18a2      	adds	r2, r4, r2
 80089f0:	18e3      	adds	r3, r4, r3
 80089f2:	f104 0801 	add.w	r8, r4, #1
 80089f6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	4543      	cmp	r3, r8
 8008a00:	da04      	bge.n	8008a0c <__kernel_rem_pio2+0x3ac>
 8008a02:	461c      	mov	r4, r3
 8008a04:	e6a2      	b.n	800874c <__kernel_rem_pio2+0xec>
 8008a06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e7e4      	b.n	80089d6 <__kernel_rem_pio2+0x376>
 8008a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a0e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008a12:	f7f7 fd3f 	bl	8000494 <__aeabi_i2d>
 8008a16:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1c:	46ab      	mov	fp, r5
 8008a1e:	461c      	mov	r4, r3
 8008a20:	f04f 0900 	mov.w	r9, #0
 8008a24:	2600      	movs	r6, #0
 8008a26:	2700      	movs	r7, #0
 8008a28:	9b05      	ldr	r3, [sp, #20]
 8008a2a:	4599      	cmp	r9, r3
 8008a2c:	dd06      	ble.n	8008a3c <__kernel_rem_pio2+0x3dc>
 8008a2e:	9b08      	ldr	r3, [sp, #32]
 8008a30:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008a34:	f108 0801 	add.w	r8, r8, #1
 8008a38:	9308      	str	r3, [sp, #32]
 8008a3a:	e7df      	b.n	80089fc <__kernel_rem_pio2+0x39c>
 8008a3c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008a40:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008a44:	f7f7 fd90 	bl	8000568 <__aeabi_dmul>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	4639      	mov	r1, r7
 8008a50:	f7f7 fbd4 	bl	80001fc <__adddf3>
 8008a54:	f109 0901 	add.w	r9, r9, #1
 8008a58:	4606      	mov	r6, r0
 8008a5a:	460f      	mov	r7, r1
 8008a5c:	e7e4      	b.n	8008a28 <__kernel_rem_pio2+0x3c8>
 8008a5e:	3d01      	subs	r5, #1
 8008a60:	e747      	b.n	80088f2 <__kernel_rem_pio2+0x292>
 8008a62:	ec47 6b10 	vmov	d0, r6, r7
 8008a66:	f1ca 0000 	rsb	r0, sl, #0
 8008a6a:	f000 f949 	bl	8008d00 <scalbn>
 8008a6e:	ec57 6b10 	vmov	r6, r7, d0
 8008a72:	4ba0      	ldr	r3, [pc, #640]	; (8008cf4 <__kernel_rem_pio2+0x694>)
 8008a74:	ee10 0a10 	vmov	r0, s0
 8008a78:	2200      	movs	r2, #0
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	f7f7 fffa 	bl	8000a74 <__aeabi_dcmpge>
 8008a80:	b1f8      	cbz	r0, 8008ac2 <__kernel_rem_pio2+0x462>
 8008a82:	4b9d      	ldr	r3, [pc, #628]	; (8008cf8 <__kernel_rem_pio2+0x698>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	4630      	mov	r0, r6
 8008a88:	4639      	mov	r1, r7
 8008a8a:	f7f7 fd6d 	bl	8000568 <__aeabi_dmul>
 8008a8e:	f7f8 f805 	bl	8000a9c <__aeabi_d2iz>
 8008a92:	4680      	mov	r8, r0
 8008a94:	f7f7 fcfe 	bl	8000494 <__aeabi_i2d>
 8008a98:	4b96      	ldr	r3, [pc, #600]	; (8008cf4 <__kernel_rem_pio2+0x694>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f7f7 fd64 	bl	8000568 <__aeabi_dmul>
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7f7 fba6 	bl	80001f8 <__aeabi_dsub>
 8008aac:	f7f7 fff6 	bl	8000a9c <__aeabi_d2iz>
 8008ab0:	1c65      	adds	r5, r4, #1
 8008ab2:	ab0c      	add	r3, sp, #48	; 0x30
 8008ab4:	f10a 0a18 	add.w	sl, sl, #24
 8008ab8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008abc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008ac0:	e71f      	b.n	8008902 <__kernel_rem_pio2+0x2a2>
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	f7f7 ffe9 	bl	8000a9c <__aeabi_d2iz>
 8008aca:	ab0c      	add	r3, sp, #48	; 0x30
 8008acc:	4625      	mov	r5, r4
 8008ace:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008ad2:	e716      	b.n	8008902 <__kernel_rem_pio2+0x2a2>
 8008ad4:	ab0c      	add	r3, sp, #48	; 0x30
 8008ad6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008ada:	f7f7 fcdb 	bl	8000494 <__aeabi_i2d>
 8008ade:	4632      	mov	r2, r6
 8008ae0:	463b      	mov	r3, r7
 8008ae2:	f7f7 fd41 	bl	8000568 <__aeabi_dmul>
 8008ae6:	4642      	mov	r2, r8
 8008ae8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008aec:	464b      	mov	r3, r9
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fd39 	bl	8000568 <__aeabi_dmul>
 8008af6:	3c01      	subs	r4, #1
 8008af8:	4606      	mov	r6, r0
 8008afa:	460f      	mov	r7, r1
 8008afc:	e713      	b.n	8008926 <__kernel_rem_pio2+0x2c6>
 8008afe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008b02:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008b06:	f7f7 fd2f 	bl	8000568 <__aeabi_dmul>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4648      	mov	r0, r9
 8008b10:	4651      	mov	r1, sl
 8008b12:	f7f7 fb73 	bl	80001fc <__adddf3>
 8008b16:	3701      	adds	r7, #1
 8008b18:	4681      	mov	r9, r0
 8008b1a:	468a      	mov	sl, r1
 8008b1c:	9b00      	ldr	r3, [sp, #0]
 8008b1e:	429f      	cmp	r7, r3
 8008b20:	dc02      	bgt.n	8008b28 <__kernel_rem_pio2+0x4c8>
 8008b22:	9b06      	ldr	r3, [sp, #24]
 8008b24:	429f      	cmp	r7, r3
 8008b26:	ddea      	ble.n	8008afe <__kernel_rem_pio2+0x49e>
 8008b28:	9a06      	ldr	r2, [sp, #24]
 8008b2a:	ab48      	add	r3, sp, #288	; 0x120
 8008b2c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008b30:	e9c6 9a00 	strd	r9, sl, [r6]
 8008b34:	3c01      	subs	r4, #1
 8008b36:	e6fa      	b.n	800892e <__kernel_rem_pio2+0x2ce>
 8008b38:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	dc0b      	bgt.n	8008b56 <__kernel_rem_pio2+0x4f6>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	dc39      	bgt.n	8008bb6 <__kernel_rem_pio2+0x556>
 8008b42:	d05d      	beq.n	8008c00 <__kernel_rem_pio2+0x5a0>
 8008b44:	9b02      	ldr	r3, [sp, #8]
 8008b46:	f003 0007 	and.w	r0, r3, #7
 8008b4a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008b4e:	ecbd 8b02 	vpop	{d8}
 8008b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d1f3      	bne.n	8008b44 <__kernel_rem_pio2+0x4e4>
 8008b5c:	9b05      	ldr	r3, [sp, #20]
 8008b5e:	9500      	str	r5, [sp, #0]
 8008b60:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008b64:	eb0d 0403 	add.w	r4, sp, r3
 8008b68:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008b6c:	46a2      	mov	sl, r4
 8008b6e:	9b00      	ldr	r3, [sp, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f1aa 0a08 	sub.w	sl, sl, #8
 8008b76:	dc69      	bgt.n	8008c4c <__kernel_rem_pio2+0x5ec>
 8008b78:	46aa      	mov	sl, r5
 8008b7a:	f1ba 0f01 	cmp.w	sl, #1
 8008b7e:	f1a4 0408 	sub.w	r4, r4, #8
 8008b82:	f300 8083 	bgt.w	8008c8c <__kernel_rem_pio2+0x62c>
 8008b86:	9c05      	ldr	r4, [sp, #20]
 8008b88:	ab48      	add	r3, sp, #288	; 0x120
 8008b8a:	441c      	add	r4, r3
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	2100      	movs	r1, #0
 8008b90:	2d01      	cmp	r5, #1
 8008b92:	f300 809a 	bgt.w	8008cca <__kernel_rem_pio2+0x66a>
 8008b96:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008b9a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008b9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ba2:	f040 8098 	bne.w	8008cd6 <__kernel_rem_pio2+0x676>
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	e9c3 7800 	strd	r7, r8, [r3]
 8008bac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008bb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008bb4:	e7c6      	b.n	8008b44 <__kernel_rem_pio2+0x4e4>
 8008bb6:	9e05      	ldr	r6, [sp, #20]
 8008bb8:	ab48      	add	r3, sp, #288	; 0x120
 8008bba:	441e      	add	r6, r3
 8008bbc:	462c      	mov	r4, r5
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	da33      	bge.n	8008c2e <__kernel_rem_pio2+0x5ce>
 8008bc6:	f1bb 0f00 	cmp.w	fp, #0
 8008bca:	d036      	beq.n	8008c3a <__kernel_rem_pio2+0x5da>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bd2:	9c04      	ldr	r4, [sp, #16]
 8008bd4:	e9c4 2300 	strd	r2, r3, [r4]
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008be0:	f7f7 fb0a 	bl	80001f8 <__aeabi_dsub>
 8008be4:	ae4a      	add	r6, sp, #296	; 0x128
 8008be6:	2401      	movs	r4, #1
 8008be8:	42a5      	cmp	r5, r4
 8008bea:	da29      	bge.n	8008c40 <__kernel_rem_pio2+0x5e0>
 8008bec:	f1bb 0f00 	cmp.w	fp, #0
 8008bf0:	d002      	beq.n	8008bf8 <__kernel_rem_pio2+0x598>
 8008bf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	9b04      	ldr	r3, [sp, #16]
 8008bfa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008bfe:	e7a1      	b.n	8008b44 <__kernel_rem_pio2+0x4e4>
 8008c00:	9c05      	ldr	r4, [sp, #20]
 8008c02:	ab48      	add	r3, sp, #288	; 0x120
 8008c04:	441c      	add	r4, r3
 8008c06:	2000      	movs	r0, #0
 8008c08:	2100      	movs	r1, #0
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	da09      	bge.n	8008c22 <__kernel_rem_pio2+0x5c2>
 8008c0e:	f1bb 0f00 	cmp.w	fp, #0
 8008c12:	d002      	beq.n	8008c1a <__kernel_rem_pio2+0x5ba>
 8008c14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c18:	4619      	mov	r1, r3
 8008c1a:	9b04      	ldr	r3, [sp, #16]
 8008c1c:	e9c3 0100 	strd	r0, r1, [r3]
 8008c20:	e790      	b.n	8008b44 <__kernel_rem_pio2+0x4e4>
 8008c22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008c26:	f7f7 fae9 	bl	80001fc <__adddf3>
 8008c2a:	3d01      	subs	r5, #1
 8008c2c:	e7ed      	b.n	8008c0a <__kernel_rem_pio2+0x5aa>
 8008c2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008c32:	f7f7 fae3 	bl	80001fc <__adddf3>
 8008c36:	3c01      	subs	r4, #1
 8008c38:	e7c3      	b.n	8008bc2 <__kernel_rem_pio2+0x562>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	e7c8      	b.n	8008bd2 <__kernel_rem_pio2+0x572>
 8008c40:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008c44:	f7f7 fada 	bl	80001fc <__adddf3>
 8008c48:	3401      	adds	r4, #1
 8008c4a:	e7cd      	b.n	8008be8 <__kernel_rem_pio2+0x588>
 8008c4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008c50:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008c54:	9b00      	ldr	r3, [sp, #0]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	4632      	mov	r2, r6
 8008c5c:	463b      	mov	r3, r7
 8008c5e:	4640      	mov	r0, r8
 8008c60:	4649      	mov	r1, r9
 8008c62:	f7f7 facb 	bl	80001fc <__adddf3>
 8008c66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4640      	mov	r0, r8
 8008c70:	4649      	mov	r1, r9
 8008c72:	f7f7 fac1 	bl	80001f8 <__aeabi_dsub>
 8008c76:	4632      	mov	r2, r6
 8008c78:	463b      	mov	r3, r7
 8008c7a:	f7f7 fabf 	bl	80001fc <__adddf3>
 8008c7e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008c82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c86:	ed8a 7b00 	vstr	d7, [sl]
 8008c8a:	e770      	b.n	8008b6e <__kernel_rem_pio2+0x50e>
 8008c8c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008c90:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008c94:	4640      	mov	r0, r8
 8008c96:	4632      	mov	r2, r6
 8008c98:	463b      	mov	r3, r7
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	f7f7 faae 	bl	80001fc <__adddf3>
 8008ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4640      	mov	r0, r8
 8008caa:	4649      	mov	r1, r9
 8008cac:	f7f7 faa4 	bl	80001f8 <__aeabi_dsub>
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	f7f7 faa2 	bl	80001fc <__adddf3>
 8008cb8:	ed9d 7b00 	vldr	d7, [sp]
 8008cbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008cc0:	ed84 7b00 	vstr	d7, [r4]
 8008cc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cc8:	e757      	b.n	8008b7a <__kernel_rem_pio2+0x51a>
 8008cca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008cce:	f7f7 fa95 	bl	80001fc <__adddf3>
 8008cd2:	3d01      	subs	r5, #1
 8008cd4:	e75c      	b.n	8008b90 <__kernel_rem_pio2+0x530>
 8008cd6:	9b04      	ldr	r3, [sp, #16]
 8008cd8:	9a04      	ldr	r2, [sp, #16]
 8008cda:	601f      	str	r7, [r3, #0]
 8008cdc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008ce0:	605c      	str	r4, [r3, #4]
 8008ce2:	609d      	str	r5, [r3, #8]
 8008ce4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ce8:	60d3      	str	r3, [r2, #12]
 8008cea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cee:	6110      	str	r0, [r2, #16]
 8008cf0:	6153      	str	r3, [r2, #20]
 8008cf2:	e727      	b.n	8008b44 <__kernel_rem_pio2+0x4e4>
 8008cf4:	41700000 	.word	0x41700000
 8008cf8:	3e700000 	.word	0x3e700000
 8008cfc:	00000000 	.word	0x00000000

08008d00 <scalbn>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	ec55 4b10 	vmov	r4, r5, d0
 8008d06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	b999      	cbnz	r1, 8008d38 <scalbn+0x38>
 8008d10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008d14:	4323      	orrs	r3, r4
 8008d16:	d03f      	beq.n	8008d98 <scalbn+0x98>
 8008d18:	4b35      	ldr	r3, [pc, #212]	; (8008df0 <scalbn+0xf0>)
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	ee10 0a10 	vmov	r0, s0
 8008d20:	2200      	movs	r2, #0
 8008d22:	f7f7 fc21 	bl	8000568 <__aeabi_dmul>
 8008d26:	4b33      	ldr	r3, [pc, #204]	; (8008df4 <scalbn+0xf4>)
 8008d28:	429e      	cmp	r6, r3
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	da10      	bge.n	8008d52 <scalbn+0x52>
 8008d30:	a327      	add	r3, pc, #156	; (adr r3, 8008dd0 <scalbn+0xd0>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	e01f      	b.n	8008d78 <scalbn+0x78>
 8008d38:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008d3c:	4291      	cmp	r1, r2
 8008d3e:	d10c      	bne.n	8008d5a <scalbn+0x5a>
 8008d40:	ee10 2a10 	vmov	r2, s0
 8008d44:	4620      	mov	r0, r4
 8008d46:	4629      	mov	r1, r5
 8008d48:	f7f7 fa58 	bl	80001fc <__adddf3>
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	460d      	mov	r5, r1
 8008d50:	e022      	b.n	8008d98 <scalbn+0x98>
 8008d52:	460b      	mov	r3, r1
 8008d54:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008d58:	3936      	subs	r1, #54	; 0x36
 8008d5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008d5e:	4296      	cmp	r6, r2
 8008d60:	dd0d      	ble.n	8008d7e <scalbn+0x7e>
 8008d62:	2d00      	cmp	r5, #0
 8008d64:	a11c      	add	r1, pc, #112	; (adr r1, 8008dd8 <scalbn+0xd8>)
 8008d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d6a:	da02      	bge.n	8008d72 <scalbn+0x72>
 8008d6c:	a11c      	add	r1, pc, #112	; (adr r1, 8008de0 <scalbn+0xe0>)
 8008d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d72:	a319      	add	r3, pc, #100	; (adr r3, 8008dd8 <scalbn+0xd8>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f7f7 fbf6 	bl	8000568 <__aeabi_dmul>
 8008d7c:	e7e6      	b.n	8008d4c <scalbn+0x4c>
 8008d7e:	1872      	adds	r2, r6, r1
 8008d80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d84:	428a      	cmp	r2, r1
 8008d86:	dcec      	bgt.n	8008d62 <scalbn+0x62>
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	dd08      	ble.n	8008d9e <scalbn+0x9e>
 8008d8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d98:	ec45 4b10 	vmov	d0, r4, r5
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
 8008d9e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008da2:	da08      	bge.n	8008db6 <scalbn+0xb6>
 8008da4:	2d00      	cmp	r5, #0
 8008da6:	a10a      	add	r1, pc, #40	; (adr r1, 8008dd0 <scalbn+0xd0>)
 8008da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dac:	dac0      	bge.n	8008d30 <scalbn+0x30>
 8008dae:	a10e      	add	r1, pc, #56	; (adr r1, 8008de8 <scalbn+0xe8>)
 8008db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db4:	e7bc      	b.n	8008d30 <scalbn+0x30>
 8008db6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008dba:	3236      	adds	r2, #54	; 0x36
 8008dbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <scalbn+0xf8>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	e7d5      	b.n	8008d78 <scalbn+0x78>
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	c2f8f359 	.word	0xc2f8f359
 8008dd4:	01a56e1f 	.word	0x01a56e1f
 8008dd8:	8800759c 	.word	0x8800759c
 8008ddc:	7e37e43c 	.word	0x7e37e43c
 8008de0:	8800759c 	.word	0x8800759c
 8008de4:	fe37e43c 	.word	0xfe37e43c
 8008de8:	c2f8f359 	.word	0xc2f8f359
 8008dec:	81a56e1f 	.word	0x81a56e1f
 8008df0:	43500000 	.word	0x43500000
 8008df4:	ffff3cb0 	.word	0xffff3cb0
 8008df8:	3c900000 	.word	0x3c900000
 8008dfc:	00000000 	.word	0x00000000

08008e00 <floor>:
 8008e00:	ec51 0b10 	vmov	r0, r1, d0
 8008e04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008e10:	2e13      	cmp	r6, #19
 8008e12:	ee10 5a10 	vmov	r5, s0
 8008e16:	ee10 8a10 	vmov	r8, s0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	dc31      	bgt.n	8008e82 <floor+0x82>
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	da14      	bge.n	8008e4c <floor+0x4c>
 8008e22:	a333      	add	r3, pc, #204	; (adr r3, 8008ef0 <floor+0xf0>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	f7f7 f9e8 	bl	80001fc <__adddf3>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f7f7 fe2a 	bl	8000a88 <__aeabi_dcmpgt>
 8008e34:	b138      	cbz	r0, 8008e46 <floor+0x46>
 8008e36:	2c00      	cmp	r4, #0
 8008e38:	da53      	bge.n	8008ee2 <floor+0xe2>
 8008e3a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008e3e:	4325      	orrs	r5, r4
 8008e40:	d052      	beq.n	8008ee8 <floor+0xe8>
 8008e42:	4c2d      	ldr	r4, [pc, #180]	; (8008ef8 <floor+0xf8>)
 8008e44:	2500      	movs	r5, #0
 8008e46:	4621      	mov	r1, r4
 8008e48:	4628      	mov	r0, r5
 8008e4a:	e024      	b.n	8008e96 <floor+0x96>
 8008e4c:	4f2b      	ldr	r7, [pc, #172]	; (8008efc <floor+0xfc>)
 8008e4e:	4137      	asrs	r7, r6
 8008e50:	ea01 0307 	and.w	r3, r1, r7
 8008e54:	4303      	orrs	r3, r0
 8008e56:	d01e      	beq.n	8008e96 <floor+0x96>
 8008e58:	a325      	add	r3, pc, #148	; (adr r3, 8008ef0 <floor+0xf0>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 f9cd 	bl	80001fc <__adddf3>
 8008e62:	2200      	movs	r2, #0
 8008e64:	2300      	movs	r3, #0
 8008e66:	f7f7 fe0f 	bl	8000a88 <__aeabi_dcmpgt>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d0eb      	beq.n	8008e46 <floor+0x46>
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	bfbe      	ittt	lt
 8008e72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008e76:	4133      	asrlt	r3, r6
 8008e78:	18e4      	addlt	r4, r4, r3
 8008e7a:	ea24 0407 	bic.w	r4, r4, r7
 8008e7e:	2500      	movs	r5, #0
 8008e80:	e7e1      	b.n	8008e46 <floor+0x46>
 8008e82:	2e33      	cmp	r6, #51	; 0x33
 8008e84:	dd0b      	ble.n	8008e9e <floor+0x9e>
 8008e86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008e8a:	d104      	bne.n	8008e96 <floor+0x96>
 8008e8c:	ee10 2a10 	vmov	r2, s0
 8008e90:	460b      	mov	r3, r1
 8008e92:	f7f7 f9b3 	bl	80001fc <__adddf3>
 8008e96:	ec41 0b10 	vmov	d0, r0, r1
 8008e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e9e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008ea2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ea6:	40df      	lsrs	r7, r3
 8008ea8:	4238      	tst	r0, r7
 8008eaa:	d0f4      	beq.n	8008e96 <floor+0x96>
 8008eac:	a310      	add	r3, pc, #64	; (adr r3, 8008ef0 <floor+0xf0>)
 8008eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb2:	f7f7 f9a3 	bl	80001fc <__adddf3>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f7f7 fde5 	bl	8000a88 <__aeabi_dcmpgt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d0c1      	beq.n	8008e46 <floor+0x46>
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	da0a      	bge.n	8008edc <floor+0xdc>
 8008ec6:	2e14      	cmp	r6, #20
 8008ec8:	d101      	bne.n	8008ece <floor+0xce>
 8008eca:	3401      	adds	r4, #1
 8008ecc:	e006      	b.n	8008edc <floor+0xdc>
 8008ece:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	40b3      	lsls	r3, r6
 8008ed6:	441d      	add	r5, r3
 8008ed8:	45a8      	cmp	r8, r5
 8008eda:	d8f6      	bhi.n	8008eca <floor+0xca>
 8008edc:	ea25 0507 	bic.w	r5, r5, r7
 8008ee0:	e7b1      	b.n	8008e46 <floor+0x46>
 8008ee2:	2500      	movs	r5, #0
 8008ee4:	462c      	mov	r4, r5
 8008ee6:	e7ae      	b.n	8008e46 <floor+0x46>
 8008ee8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008eec:	e7ab      	b.n	8008e46 <floor+0x46>
 8008eee:	bf00      	nop
 8008ef0:	8800759c 	.word	0x8800759c
 8008ef4:	7e37e43c 	.word	0x7e37e43c
 8008ef8:	bff00000 	.word	0xbff00000
 8008efc:	000fffff 	.word	0x000fffff

08008f00 <_init>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr

08008f0c <_fini>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr
