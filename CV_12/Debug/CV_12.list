
CV_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a458  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e168  0801a608  0801a608  0002a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028770  08028770  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  08028770  08028770  00038770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028778  08028778  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028778  08028778  00038778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802877c  0802877c  0003877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08028780  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          00011114  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200111a4  200111a4  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037c6d  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008a34  00000000  00000000  00077d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002898  00000000  00000000  000807a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002034  00000000  00000000  00083040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038461  00000000  00000000  00085074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000426b5  00000000  00000000  000bd4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104fae  00000000  00000000  000ffb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b330  00000000  00000000  00204b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0020fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a5f0 	.word	0x0801a5f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0801a5f0 	.word	0x0801a5f0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	2000014c 	.word	0x2000014c

080005f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f6:	f001 f913 	bl	8001820 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005fa:	f000 f821 	bl	8000640 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fe:	f000 f907 	bl	8000810 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000602:	f000 f8db 	bl	80007bc <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8000606:	f000 f885 	bl	8000714 <MX_I2C1_Init>
	MX_RNG_Init();
 800060a:	f000 f8c3 	bl	8000794 <MX_RNG_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x48>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f005 f84f 	bl	80056c8 <osThreadCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <main+0x4c>)
 800062e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000630:	f005 f833 	bl	800569a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000634:	e7fe      	b.n	8000634 <main+0x44>
 8000636:	bf00      	nop
 8000638:	0801a614 	.word	0x0801a614
 800063c:	200003f4 	.word	0x200003f4

08000640 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f018 fea9 	bl	80193a6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	; 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 ffe1 	bl	800368c <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
		Error_Handler();
 80006d0:	f000 f99a 	bl	8000a08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fa42 	bl	8003b7c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
		Error_Handler();
 80006fe:	f000 f983 	bl	8000a08 <Error_Handler>
	}
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_I2C1_Init+0x74>)
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <MX_I2C1_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_I2C1_Init+0x74>)
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MX_I2C1_Init+0x7c>)
 8000722:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_I2C1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_I2C1_Init+0x74>)
 8000732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000736:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2C1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_I2C1_Init+0x74>)
 8000752:	f002 fddb 	bl	800330c <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800075c:	f000 f954 	bl	8000a08 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000760:	2100      	movs	r1, #0
 8000762:	4809      	ldr	r0, [pc, #36]	; (8000788 <MX_I2C1_Init+0x74>)
 8000764:	f002 ff16 	bl	8003594 <HAL_I2CEx_ConfigAnalogFilter>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800076e:	f000 f94b 	bl	8000a08 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000772:	2100      	movs	r1, #0
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_I2C1_Init+0x74>)
 8000776:	f002 ff49 	bl	800360c <HAL_I2CEx_ConfigDigitalFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x70>
		Error_Handler();
 8000780:	f000 f942 	bl	8000a08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000034c 	.word	0x2000034c
 800078c:	40005400 	.word	0x40005400
 8000790:	000186a0 	.word	0x000186a0

08000794 <MX_RNG_Init>:
/**
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_RNG_Init+0x20>)
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <MX_RNG_Init+0x24>)
 800079c:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_RNG_Init+0x20>)
 80007a0:	f003 fc3e 	bl	8004020 <HAL_RNG_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_RNG_Init+0x1a>
		Error_Handler();
 80007aa:	f000 f92d 	bl	8000a08 <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200003a0 	.word	0x200003a0
 80007b8:	50060800 	.word	0x50060800

080007bc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART3_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART3_UART_Init+0x4c>)
 80007f4:	f003 ff42 	bl	800467c <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80007fe:	f000 f903 	bl	8000a08 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200003b0 	.word	0x200003b0
 800080c:	40004800 	.word	0x40004800

08000810 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b5b      	ldr	r3, [pc, #364]	; (8000998 <MX_GPIO_Init+0x188>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a5a      	ldr	r2, [pc, #360]	; (8000998 <MX_GPIO_Init+0x188>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b58      	ldr	r3, [pc, #352]	; (8000998 <MX_GPIO_Init+0x188>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b54      	ldr	r3, [pc, #336]	; (8000998 <MX_GPIO_Init+0x188>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a53      	ldr	r2, [pc, #332]	; (8000998 <MX_GPIO_Init+0x188>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b51      	ldr	r3, [pc, #324]	; (8000998 <MX_GPIO_Init+0x188>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <MX_GPIO_Init+0x188>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a4c      	ldr	r2, [pc, #304]	; (8000998 <MX_GPIO_Init+0x188>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b4a      	ldr	r3, [pc, #296]	; (8000998 <MX_GPIO_Init+0x188>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b46      	ldr	r3, [pc, #280]	; (8000998 <MX_GPIO_Init+0x188>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a45      	ldr	r2, [pc, #276]	; (8000998 <MX_GPIO_Init+0x188>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b43      	ldr	r3, [pc, #268]	; (8000998 <MX_GPIO_Init+0x188>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <MX_GPIO_Init+0x188>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <MX_GPIO_Init+0x188>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_GPIO_Init+0x188>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <MX_GPIO_Init+0x188>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a37      	ldr	r2, [pc, #220]	; (8000998 <MX_GPIO_Init+0x188>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_GPIO_Init+0x188>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED3_Pin | LED2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008d4:	4831      	ldr	r0, [pc, #196]	; (800099c <MX_GPIO_Init+0x18c>)
 80008d6:	f002 fcff 	bl	80032d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	4830      	ldr	r0, [pc, #192]	; (80009a0 <MX_GPIO_Init+0x190>)
 80008e0:	f002 fcfa 	bl	80032d8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	482a      	ldr	r0, [pc, #168]	; (80009a4 <MX_GPIO_Init+0x194>)
 80008fc:	f002 fb28 	bl	8002f50 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED3_Pin | LED2_Pin;
 8000900:	f244 0381 	movw	r3, #16513	; 0x4081
 8000904:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4820      	ldr	r0, [pc, #128]	; (800099c <MX_GPIO_Init+0x18c>)
 800091a:	f002 fb19 	bl	8002f50 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800091e:	2340      	movs	r3, #64	; 0x40
 8000920:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	481a      	ldr	r0, [pc, #104]	; (80009a0 <MX_GPIO_Init+0x190>)
 8000936:	f002 fb0b 	bl	8002f50 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4814      	ldr	r0, [pc, #80]	; (80009a0 <MX_GPIO_Init+0x190>)
 800094e:	f002 faff 	bl	8002f50 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8000952:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000956:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000964:	230a      	movs	r3, #10
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <MX_GPIO_Init+0x198>)
 8000970:	f002 faee 	bl	8002f50 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000978:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <MX_GPIO_Init+0x198>)
 800098a:	f002 fae1 	bl	8002f50 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020000 	.word	0x40020000

080009ac <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	uint32_t rnd;
	HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <StartDefaultTask+0x34>)
 80009bc:	f003 fb5a 	bl	8004074 <HAL_RNG_GenerateRandomNumber>
	srand(rnd);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f018 fb34 	bl	8019030 <srand>
	/* init code for LWIP */
	MX_LWIP_Init();
 80009c8:	f004 f91a 	bl	8004c00 <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */
	/* Initialize tcp echo server */
	tcpecho_init();
 80009cc:	f000 fae2 	bl	8000f94 <tcpecho_init>
	/* Initialize HTTP server */
	/* Initialize tcp echo server */
	telnet_init();
 80009d0:	f000 fd88 	bl	80014e4 <telnet_init>
	httpd_init();
 80009d4:	f00b f8c2 	bl	800bb5c <httpd_init>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f004 fec1 	bl	8005760 <osDelay>
 80009de:	e7fb      	b.n	80009d8 <StartDefaultTask+0x2c>
 80009e0:	200003a0 	.word	0x200003a0

080009e4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80009f6:	f000 ff35 	bl	8001864 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40002000 	.word	0x40002000

08000a08 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_MspInit+0x54>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <HAL_MspInit+0x54>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x54>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_MspInit+0x54>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_MspInit+0x54>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_MspInit+0x54>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	210f      	movs	r1, #15
 8000a56:	f06f 0001 	mvn.w	r0, #1
 8000a5a:	f000 ffff 	bl	8001a5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_I2C_MspInit+0x84>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12c      	bne.n	8000ae8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000aaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab0:	2312      	movs	r3, #18
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000abc:	2304      	movs	r3, #4
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <HAL_I2C_MspInit+0x8c>)
 8000ac8:	f002 fa42 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400

08000afc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <HAL_RNG_MspInit+0x3c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10d      	bne.n	8000b2a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_RNG_MspInit+0x40>)
 8000b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b16:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <HAL_RNG_MspInit+0x40>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	6353      	str	r3, [r2, #52]	; 0x34
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <HAL_RNG_MspInit+0x40>)
 8000b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	50060800 	.word	0x50060800
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bac:	2307      	movs	r3, #7
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_UART_MspInit+0x8c>)
 8000bb8:	f002 f9ca 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40004800 	.word	0x40004800
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020c00 	.word	0x40020c00

08000bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <HAL_InitTick+0xe4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a32      	ldr	r2, [pc, #200]	; (8000cb4 <HAL_InitTick+0xe4>)
 8000bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <HAL_InitTick+0xe4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfc:	f107 0210 	add.w	r2, r7, #16
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 f9d8 	bl	8003fbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c16:	f003 f9a9 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 8000c1a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c1c:	e004      	b.n	8000c28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c1e:	f003 f9a5 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 8000c22:	4603      	mov	r3, r0
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <HAL_InitTick+0xe8>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	0c9b      	lsrs	r3, r3, #18
 8000c32:	3b01      	subs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_InitTick+0xec>)
 8000c38:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <HAL_InitTick+0xf0>)
 8000c3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <HAL_InitTick+0xec>)
 8000c3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c42:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000c44:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <HAL_InitTick+0xec>)
 8000c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c48:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <HAL_InitTick+0xec>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <HAL_InitTick+0xec>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_InitTick+0xec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000c5c:	4817      	ldr	r0, [pc, #92]	; (8000cbc <HAL_InitTick+0xec>)
 8000c5e:	f003 fa5f 	bl	8004120 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d11b      	bne.n	8000ca8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <HAL_InitTick+0xec>)
 8000c72:	f003 faaf 	bl	80041d4 <HAL_TIM_Base_Start_IT>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d111      	bne.n	8000ca8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000c84:	202d      	movs	r0, #45	; 0x2d
 8000c86:	f000 ff05 	bl	8001a94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d808      	bhi.n	8000ca2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	202d      	movs	r0, #45	; 0x2d
 8000c96:	f000 fee1 	bl	8001a5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_InitTick+0xf4>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e002      	b.n	8000ca8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3738      	adds	r7, #56	; 0x38
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	431bde83 	.word	0x431bde83
 8000cbc:	200003f8 	.word	0x200003f8
 8000cc0:	40002000 	.word	0x40002000
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000cfa:	f003 fadb 	bl	80042b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200003f8 	.word	0x200003f8

08000d08 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <ETH_IRQHandler+0x10>)
 8000d0e:	f001 fa49 	bl	80021a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20005064 	.word	0x20005064

08000d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return 1;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_kill>:

int _kill(int pid, int sig)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <_kill+0x20>)
 8000d38:	2216      	movs	r2, #22
 8000d3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20011194 	.word	0x20011194

08000d50 <_exit>:

void _exit (int status)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ffe5 	bl	8000d2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d62:	e7fe      	b.n	8000d62 <_exit+0x12>

08000d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	e00a      	b.n	8000d8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d76:	f3af 8000 	nop.w
 8000d7a:	4601      	mov	r1, r0
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	b2ca      	uxtb	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf0      	blt.n	8000d76 <_read+0x12>
  }

  return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e009      	b.n	8000dc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf1      	blt.n	8000db0 <_write+0x12>
  }
  return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_close>:

int _close(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_isatty>:

int _isatty(int file)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d205      	bcs.n	8000e7c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <_sbrk+0x6c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20030000 	.word	0x20030000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000440 	.word	0x20000440
 8000ea8:	200111a8 	.word	0x200111a8
 8000eac:	20011194 	.word	0x20011194

08000eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2010      	movs	r0, #16
 8000ee2:	f007 fbc9 	bl	8008678 <netconn_new_with_proto_and_callback>
 8000ee6:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d04e      	beq.n	8000f8c <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000eee:	2207      	movs	r2, #7
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	69f8      	ldr	r0, [r7, #28]
 8000ef4:	f007 fc7a 	bl	80087ec <netconn_bind>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000efc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d13f      	bne.n	8000f84 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000f04:	21ff      	movs	r1, #255	; 0xff
 8000f06:	69f8      	ldr	r0, [r7, #28]
 8000f08:	f007 fce0 	bl	80088cc <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	69f8      	ldr	r0, [r7, #28]
 8000f14:	f007 fd06 	bl	8008924 <netconn_accept>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000f1c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f3      	bne.n	8000f0c <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000f24:	e01b      	b.n	8000f5e <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	f107 020a 	add.w	r2, r7, #10
 8000f2c:	f107 010c 	add.w	r1, r7, #12
 8000f30:	4618      	mov	r0, r3
 8000f32:	f009 fde7 	bl	800ab04 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	68f9      	ldr	r1, [r7, #12]
 8000f3a:	897b      	ldrh	r3, [r7, #10]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	f007 ff70 	bl	8008e28 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f009 fe24 	bl	800ab98 <netbuf_next>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	dae7      	bge.n	8000f26 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f009 fdb3 	bl	800aac4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f107 0210 	add.w	r2, r7, #16
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f007 fee4 	bl	8008d34 <netconn_recv>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0d9      	beq.n	8000f26 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f008 f859 	bl	800902c <netconn_close>
          netconn_delete(newconn);
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f007 fc19 	bl	80087b4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000f82:	e7c3      	b.n	8000f0c <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f007 fc14 	bl	80087b4 <netconn_delete>
    }
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4903      	ldr	r1, [pc, #12]	; (8000fb4 <tcpecho_init+0x20>)
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <tcpecho_init+0x24>)
 8000fa8:	f017 fffe 	bl	8018fa8 <sys_thread_new>
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08000ed5 	.word	0x08000ed5
 8000fb8:	0801a630 	.word	0x0801a630

08000fbc <telnet_process_command>:
#define telnet_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 256

/*-----------------------------------------------------------------------------------*/
static void http_client(char *s, uint16_t size);
static void telnet_process_command(char *cmd, struct netconn *conn) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000fc2:	af02      	add	r7, sp, #8
 8000fc4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000fc8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000fcc:	6018      	str	r0, [r3, #0]
 8000fce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000fd2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000fd6:	6019      	str	r1, [r3, #0]
	char *token;
	//static char data[CMD_BUFFER_LEN];

	token = strtok(cmd, " ");
 8000fd8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000fdc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000fe0:	49ad      	ldr	r1, [pc, #692]	; (8001298 <telnet_process_command+0x2dc>)
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	f018 fa22 	bl	801942c <strtok>
 8000fe8:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c

	// -------------------------- HELLO command --------------------------
	if (strcasecmp(token, "HELLO") == 0) { // budeme porovnavat token se slovem HELLO
 8000fec:	49ab      	ldr	r1, [pc, #684]	; (800129c <telnet_process_command+0x2e0>)
 8000fee:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000ff2:	f018 f9e1 	bl	80193b8 <strcasecmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10c      	bne.n	8001016 <telnet_process_command+0x5a>
		netconn_write(conn, "budliky OK\\rn", strlen("budliky OK\n\r"),
 8000ffc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001000:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 8001004:	2300      	movs	r3, #0
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	220c      	movs	r2, #12
 800100c:	49a4      	ldr	r1, [pc, #656]	; (80012a0 <telnet_process_command+0x2e4>)
 800100e:	6800      	ldr	r0, [r0, #0]
 8001010:	f007 ff0a 	bl	8008e28 <netconn_write_partly>

		netconn_write(conn, "Neplatny prikaz\n\r",
				strlen("Neplatny prikaz\n\r"), NETCONN_COPY);

	}
}
 8001014:	e13b      	b.n	800128e <telnet_process_command+0x2d2>
	} else if (strcasecmp(token, "LED1") == 0) { //if 0 command sedi
 8001016:	49a3      	ldr	r1, [pc, #652]	; (80012a4 <telnet_process_command+0x2e8>)
 8001018:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800101c:	f018 f9cc 	bl	80193b8 <strcasecmp>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d12d      	bne.n	8001082 <telnet_process_command+0xc6>
		token = strtok(NULL, " ");
 8001026:	499c      	ldr	r1, [pc, #624]	; (8001298 <telnet_process_command+0x2dc>)
 8001028:	2000      	movs	r0, #0
 800102a:	f018 f9ff 	bl	801942c <strtok>
 800102e:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if (strcasecmp(token, "ON") == 0)
 8001032:	499d      	ldr	r1, [pc, #628]	; (80012a8 <telnet_process_command+0x2ec>)
 8001034:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001038:	f018 f9be 	bl	80193b8 <strcasecmp>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <telnet_process_command+0x92>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2101      	movs	r1, #1
 8001046:	4899      	ldr	r0, [pc, #612]	; (80012ac <telnet_process_command+0x2f0>)
 8001048:	f002 f946 	bl	80032d8 <HAL_GPIO_WritePin>
 800104c:	e00c      	b.n	8001068 <telnet_process_command+0xac>
		else if (strcasecmp(token, "OFF") == 0)
 800104e:	4998      	ldr	r1, [pc, #608]	; (80012b0 <telnet_process_command+0x2f4>)
 8001050:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001054:	f018 f9b0 	bl	80193b8 <strcasecmp>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <telnet_process_command+0xac>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2101      	movs	r1, #1
 8001062:	4892      	ldr	r0, [pc, #584]	; (80012ac <telnet_process_command+0x2f0>)
 8001064:	f002 f938 	bl	80032d8 <HAL_GPIO_WritePin>
		netconn_write(conn, "OK\n\r", strlen("OK\n\r"), NETCONN_COPY);
 8001068:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800106c:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 8001070:	2300      	movs	r3, #0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	2204      	movs	r2, #4
 8001078:	498e      	ldr	r1, [pc, #568]	; (80012b4 <telnet_process_command+0x2f8>)
 800107a:	6800      	ldr	r0, [r0, #0]
 800107c:	f007 fed4 	bl	8008e28 <netconn_write_partly>
}
 8001080:	e105      	b.n	800128e <telnet_process_command+0x2d2>
	} else if (strcasecmp(token, "LED2") == 0) {
 8001082:	498d      	ldr	r1, [pc, #564]	; (80012b8 <telnet_process_command+0x2fc>)
 8001084:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001088:	f018 f996 	bl	80193b8 <strcasecmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d12d      	bne.n	80010ee <telnet_process_command+0x132>
		token = strtok(NULL, " ");
 8001092:	4981      	ldr	r1, [pc, #516]	; (8001298 <telnet_process_command+0x2dc>)
 8001094:	2000      	movs	r0, #0
 8001096:	f018 f9c9 	bl	801942c <strtok>
 800109a:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if (strcasecmp(token, "ON") == 0)
 800109e:	4982      	ldr	r1, [pc, #520]	; (80012a8 <telnet_process_command+0x2ec>)
 80010a0:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80010a4:	f018 f988 	bl	80193b8 <strcasecmp>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d105      	bne.n	80010ba <telnet_process_command+0xfe>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	487e      	ldr	r0, [pc, #504]	; (80012ac <telnet_process_command+0x2f0>)
 80010b4:	f002 f910 	bl	80032d8 <HAL_GPIO_WritePin>
 80010b8:	e00c      	b.n	80010d4 <telnet_process_command+0x118>
		else if (strcasecmp(token, "OFF") == 0)
 80010ba:	497d      	ldr	r1, [pc, #500]	; (80012b0 <telnet_process_command+0x2f4>)
 80010bc:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80010c0:	f018 f97a 	bl	80193b8 <strcasecmp>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d104      	bne.n	80010d4 <telnet_process_command+0x118>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	4877      	ldr	r0, [pc, #476]	; (80012ac <telnet_process_command+0x2f0>)
 80010d0:	f002 f902 	bl	80032d8 <HAL_GPIO_WritePin>
		netconn_write(conn, "OK\n\r", strlen("OK\n\r"), NETCONN_COPY);
 80010d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80010d8:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 80010dc:	2300      	movs	r3, #0
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	2204      	movs	r2, #4
 80010e4:	4973      	ldr	r1, [pc, #460]	; (80012b4 <telnet_process_command+0x2f8>)
 80010e6:	6800      	ldr	r0, [r0, #0]
 80010e8:	f007 fe9e 	bl	8008e28 <netconn_write_partly>
}
 80010ec:	e0cf      	b.n	800128e <telnet_process_command+0x2d2>
	} else if (strcasecmp(token, "LED3") == 0) {
 80010ee:	4973      	ldr	r1, [pc, #460]	; (80012bc <telnet_process_command+0x300>)
 80010f0:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80010f4:	f018 f960 	bl	80193b8 <strcasecmp>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d12f      	bne.n	800115e <telnet_process_command+0x1a2>
		token = strtok(NULL, " ");
 80010fe:	4966      	ldr	r1, [pc, #408]	; (8001298 <telnet_process_command+0x2dc>)
 8001100:	2000      	movs	r0, #0
 8001102:	f018 f993 	bl	801942c <strtok>
 8001106:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if (strcasecmp(token, "ON") == 0)
 800110a:	4967      	ldr	r1, [pc, #412]	; (80012a8 <telnet_process_command+0x2ec>)
 800110c:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001110:	f018 f952 	bl	80193b8 <strcasecmp>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <telnet_process_command+0x16c>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001120:	4862      	ldr	r0, [pc, #392]	; (80012ac <telnet_process_command+0x2f0>)
 8001122:	f002 f8d9 	bl	80032d8 <HAL_GPIO_WritePin>
 8001126:	e00d      	b.n	8001144 <telnet_process_command+0x188>
		else if (strcasecmp(token, "OFF") == 0)
 8001128:	4961      	ldr	r1, [pc, #388]	; (80012b0 <telnet_process_command+0x2f4>)
 800112a:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800112e:	f018 f943 	bl	80193b8 <strcasecmp>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d105      	bne.n	8001144 <telnet_process_command+0x188>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113e:	485b      	ldr	r0, [pc, #364]	; (80012ac <telnet_process_command+0x2f0>)
 8001140:	f002 f8ca 	bl	80032d8 <HAL_GPIO_WritePin>
		netconn_write(conn, "OK\n\r", strlen("OK\n\r"), NETCONN_COPY);
 8001144:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001148:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 800114c:	2300      	movs	r3, #0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	2204      	movs	r2, #4
 8001154:	4957      	ldr	r1, [pc, #348]	; (80012b4 <telnet_process_command+0x2f8>)
 8001156:	6800      	ldr	r0, [r0, #0]
 8001158:	f007 fe66 	bl	8008e28 <netconn_write_partly>
}
 800115c:	e097      	b.n	800128e <telnet_process_command+0x2d2>
	} else if (strcasecmp(token, "STATUS") == 0) {
 800115e:	4958      	ldr	r1, [pc, #352]	; (80012c0 <telnet_process_command+0x304>)
 8001160:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001164:	f018 f928 	bl	80193b8 <strcasecmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d161      	bne.n	8001232 <telnet_process_command+0x276>
		if (HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin))
 800116e:	2101      	movs	r1, #1
 8001170:	484e      	ldr	r0, [pc, #312]	; (80012ac <telnet_process_command+0x2f0>)
 8001172:	f002 f899 	bl	80032a8 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00c      	beq.n	8001196 <telnet_process_command+0x1da>
			netconn_write(conn, "LED1 ON\n\r", strlen("LED1 ON\n\r"),
 800117c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001180:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 8001184:	2300      	movs	r3, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	2209      	movs	r2, #9
 800118c:	494d      	ldr	r1, [pc, #308]	; (80012c4 <telnet_process_command+0x308>)
 800118e:	6800      	ldr	r0, [r0, #0]
 8001190:	f007 fe4a 	bl	8008e28 <netconn_write_partly>
 8001194:	e00b      	b.n	80011ae <telnet_process_command+0x1f2>
			netconn_write(conn, "LED1 OFF\n\r", strlen("LED1 OFF\n\r"),
 8001196:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800119a:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 800119e:	2300      	movs	r3, #0
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	220a      	movs	r2, #10
 80011a6:	4948      	ldr	r1, [pc, #288]	; (80012c8 <telnet_process_command+0x30c>)
 80011a8:	6800      	ldr	r0, [r0, #0]
 80011aa:	f007 fe3d 	bl	8008e28 <netconn_write_partly>
		if (HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin))
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	483e      	ldr	r0, [pc, #248]	; (80012ac <telnet_process_command+0x2f0>)
 80011b2:	f002 f879 	bl	80032a8 <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00c      	beq.n	80011d6 <telnet_process_command+0x21a>
			netconn_write(conn, "LED2 ON\n\r", strlen("LED2 ON\n\r"),
 80011bc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80011c0:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 80011c4:	2300      	movs	r3, #0
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2209      	movs	r2, #9
 80011cc:	493f      	ldr	r1, [pc, #252]	; (80012cc <telnet_process_command+0x310>)
 80011ce:	6800      	ldr	r0, [r0, #0]
 80011d0:	f007 fe2a 	bl	8008e28 <netconn_write_partly>
 80011d4:	e00b      	b.n	80011ee <telnet_process_command+0x232>
			netconn_write(conn, "LED2 OFF\n\r", strlen("LED2 OFF\n\r"),
 80011d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80011da:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 80011de:	2300      	movs	r3, #0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	220a      	movs	r2, #10
 80011e6:	493a      	ldr	r1, [pc, #232]	; (80012d0 <telnet_process_command+0x314>)
 80011e8:	6800      	ldr	r0, [r0, #0]
 80011ea:	f007 fe1d 	bl	8008e28 <netconn_write_partly>
		if (HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin))
 80011ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f2:	482e      	ldr	r0, [pc, #184]	; (80012ac <telnet_process_command+0x2f0>)
 80011f4:	f002 f858 	bl	80032a8 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00c      	beq.n	8001218 <telnet_process_command+0x25c>
			netconn_write(conn, "LED3 ON\n\r", strlen("LED3 ON\n\r"),
 80011fe:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001202:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 8001206:	2300      	movs	r3, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2209      	movs	r2, #9
 800120e:	4931      	ldr	r1, [pc, #196]	; (80012d4 <telnet_process_command+0x318>)
 8001210:	6800      	ldr	r0, [r0, #0]
 8001212:	f007 fe09 	bl	8008e28 <netconn_write_partly>
}
 8001216:	e03a      	b.n	800128e <telnet_process_command+0x2d2>
			netconn_write(conn, "LED3 OFF\n\r", strlen("LED3 OFF\n\r"),
 8001218:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800121c:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 8001220:	2300      	movs	r3, #0
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	220a      	movs	r2, #10
 8001228:	492b      	ldr	r1, [pc, #172]	; (80012d8 <telnet_process_command+0x31c>)
 800122a:	6800      	ldr	r0, [r0, #0]
 800122c:	f007 fdfc 	bl	8008e28 <netconn_write_partly>
}
 8001230:	e02d      	b.n	800128e <telnet_process_command+0x2d2>
	} else if (strcasecmp(token, "CLIENT") == 0) {
 8001232:	492a      	ldr	r1, [pc, #168]	; (80012dc <telnet_process_command+0x320>)
 8001234:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001238:	f018 f8be 	bl	80193b8 <strcasecmp>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d119      	bne.n	8001276 <telnet_process_command+0x2ba>
		http_client(&s, CMD_BUFFER_LEN*2);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f8e6 	bl	800141c <http_client>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4618      	mov	r0, r3
 8001256:	f7fe ffd5 	bl	8000204 <strlen>
 800125a:	4602      	mov	r2, r0
 800125c:	f107 010c 	add.w	r1, r7, #12
 8001260:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001264:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 8001268:	2300      	movs	r3, #0
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	6800      	ldr	r0, [r0, #0]
 8001270:	f007 fdda 	bl	8008e28 <netconn_write_partly>
}
 8001274:	e00b      	b.n	800128e <telnet_process_command+0x2d2>
		netconn_write(conn, "Neplatny prikaz\n\r",
 8001276:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800127a:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	2211      	movs	r2, #17
 8001286:	4916      	ldr	r1, [pc, #88]	; (80012e0 <telnet_process_command+0x324>)
 8001288:	6800      	ldr	r0, [r0, #0]
 800128a:	f007 fdcd 	bl	8008e28 <netconn_write_partly>
}
 800128e:	bf00      	nop
 8001290:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	0801a640 	.word	0x0801a640
 800129c:	0801a644 	.word	0x0801a644
 80012a0:	0801a64c 	.word	0x0801a64c
 80012a4:	0801a65c 	.word	0x0801a65c
 80012a8:	0801a664 	.word	0x0801a664
 80012ac:	40020400 	.word	0x40020400
 80012b0:	0801a668 	.word	0x0801a668
 80012b4:	0801a66c 	.word	0x0801a66c
 80012b8:	0801a674 	.word	0x0801a674
 80012bc:	0801a67c 	.word	0x0801a67c
 80012c0:	0801a684 	.word	0x0801a684
 80012c4:	0801a68c 	.word	0x0801a68c
 80012c8:	0801a698 	.word	0x0801a698
 80012cc:	0801a6a4 	.word	0x0801a6a4
 80012d0:	0801a6b0 	.word	0x0801a6b0
 80012d4:	0801a6bc 	.word	0x0801a6bc
 80012d8:	0801a6c8 	.word	0x0801a6c8
 80012dc:	0801a6d4 	.word	0x0801a6d4
 80012e0:	0801a6dc 	.word	0x0801a6dc

080012e4 <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];

	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127)
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <telnet_byte_available+0x60>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	2bff      	cmp	r3, #255	; 0xff
 80012f6:	d810      	bhi.n	800131a <telnet_byte_available+0x36>
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b1f      	cmp	r3, #31
 80012fc:	d90d      	bls.n	800131a <telnet_byte_available+0x36>
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db09      	blt.n	800131a <telnet_byte_available+0x36>
		data[cnt++] = c;
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <telnet_byte_available+0x60>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	b291      	uxth	r1, r2
 800130e:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <telnet_byte_available+0x60>)
 8001310:	8011      	strh	r1, [r2, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <telnet_byte_available+0x64>)
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	5453      	strb	r3, [r2, r1]
	if (c == '\n') {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d10c      	bne.n	800133a <telnet_byte_available+0x56>
		data[cnt] = '\0';
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <telnet_byte_available+0x60>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <telnet_byte_available+0x64>)
 8001328:	2100      	movs	r1, #0
 800132a:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <telnet_byte_available+0x64>)
 8001330:	f7ff fe44 	bl	8000fbc <telnet_process_command>
		cnt = 0;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <telnet_byte_available+0x60>)
 8001336:	2200      	movs	r2, #0
 8001338:	801a      	strh	r2, [r3, #0]
	}
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000444 	.word	0x20000444
 8001348:	20000448 	.word	0x20000448

0800134c <telnet_thread>:

static void telnet_thread(void *arg) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2010      	movs	r0, #16
 800135a:	f007 f98d 	bl	8008678 <netconn_new_with_proto_and_callback>
 800135e:	61f8      	str	r0, [r7, #28]

	if (conn != NULL) {
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d055      	beq.n	8001412 <telnet_thread+0xc6>
		/* Bind connection to well known port number 23. */
		err = netconn_bind(conn, NULL, 23);
 8001366:	2217      	movs	r2, #23
 8001368:	2100      	movs	r1, #0
 800136a:	69f8      	ldr	r0, [r7, #28]
 800136c:	f007 fa3e 	bl	80087ec <netconn_bind>
 8001370:	4603      	mov	r3, r0
 8001372:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK) {
 8001374:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d146      	bne.n	800140a <telnet_thread+0xbe>
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 800137c:	21ff      	movs	r1, #255	; 0xff
 800137e:	69f8      	ldr	r0, [r7, #28]
 8001380:	f007 faa4 	bl	80088cc <netconn_listen_with_backlog>

			while (1) {
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	69f8      	ldr	r0, [r7, #28]
 800138c:	f007 faca 	bl	8008924 <netconn_accept>
 8001390:	4603      	mov	r3, r0
 8001392:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK) {
 8001394:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f3      	bne.n	8001384 <telnet_thread+0x38>

					while (netconn_recv(newconn, &buf) == ERR_OK) {
 800139c:	e022      	b.n	80013e4 <telnet_thread+0x98>
						do {
							netbuf_data(buf, (void**) &data, &len);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	f107 020a 	add.w	r2, r7, #10
 80013a4:	f107 010c 	add.w	r1, r7, #12
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 fbab 	bl	800ab04 <netbuf_data>
							while (len--)
 80013ae:	e008      	b.n	80013c2 <telnet_thread+0x76>
								telnet_byte_available(*data++, newconn);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	60fa      	str	r2, [r7, #12]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff91 	bl	80012e4 <telnet_byte_available>
							while (len--)
 80013c2:	897b      	ldrh	r3, [r7, #10]
 80013c4:	1e5a      	subs	r2, r3, #1
 80013c6:	b292      	uxth	r2, r2
 80013c8:	817a      	strh	r2, [r7, #10]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <telnet_thread+0x64>

						} while (netbuf_next(buf) >= 0);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f009 fbe1 	bl	800ab98 <netbuf_next>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dae0      	bge.n	800139e <telnet_thread+0x52>

						netbuf_delete(buf);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4618      	mov	r0, r3
 80013e0:	f009 fb70 	bl	800aac4 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK) {
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f107 0210 	add.w	r2, r7, #16
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f007 fca1 	bl	8008d34 <netconn_recv>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0d2      	beq.n	800139e <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 fe16 	bl	800902c <netconn_close>
					netconn_delete(newconn);
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	4618      	mov	r0, r3
 8001404:	f007 f9d6 	bl	80087b4 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 8001408:	e7bc      	b.n	8001384 <telnet_thread+0x38>
				}
			}
		} else {
			netconn_delete(newconn);
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	4618      	mov	r0, r3
 800140e:	f007 f9d1 	bl	80087b4 <netconn_delete>
		}
	}
}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <http_client>:

static void http_client(char *s, uint16_t size) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af02      	add	r7, sp, #8
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
	struct netconn *client;
	struct netbuf *buf;
	ip_addr_t ip;
	uint16_t len = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	83fb      	strh	r3, [r7, #30]
	IP_ADDR4(&ip, 147, 229, 144, 124);
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <http_client+0xbc>)
 800142e:	60fb      	str	r3, [r7, #12]
	const char *request = "GET /ip.php HTTP/1.1\r\n"
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <http_client+0xc0>)
 8001432:	61bb      	str	r3, [r7, #24]
			"Host: www.urel.feec.vutbr.cz\r\n"
			"Connection: close\r\n"
			"\r\n\r\n";
	client = netconn_new(NETCONN_TCP);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	2010      	movs	r0, #16
 800143a:	f007 f91d 	bl	8008678 <netconn_new_with_proto_and_callback>
 800143e:	6178      	str	r0, [r7, #20]
	if (netconn_connect(client, &ip, 80) == ERR_OK) {
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2250      	movs	r2, #80	; 0x50
 8001446:	4619      	mov	r1, r3
 8001448:	6978      	ldr	r0, [r7, #20]
 800144a:	f007 fa07 	bl	800885c <netconn_connect>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d136      	bne.n	80014c2 <http_client+0xa6>
		netconn_write(client, request, strlen(request), NETCONN_COPY);
 8001454:	69b8      	ldr	r0, [r7, #24]
 8001456:	f7fe fed5 	bl	8000204 <strlen>
 800145a:	4602      	mov	r2, r0
 800145c:	2300      	movs	r3, #0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	6978      	ldr	r0, [r7, #20]
 8001466:	f007 fcdf 	bl	8008e28 <netconn_write_partly>
		// Receive the HTTP response
		s[0] = 0;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8001470:	e019      	b.n	80014a6 <http_client+0x8a>
			len += netbuf_copy(buf, &s[len], size - len);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	8bfb      	ldrh	r3, [r7, #30]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	18d1      	adds	r1, r2, r3
 800147c:	887a      	ldrh	r2, [r7, #2]
 800147e:	8bfb      	ldrh	r3, [r7, #30]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	b29a      	uxth	r2, r3
 8001484:	2300      	movs	r3, #0
 8001486:	f00c f9c3 	bl	800d810 <pbuf_copy_partial>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	4413      	add	r3, r2
 8001492:	83fb      	strh	r3, [r7, #30]
			s[len] = 0;
 8001494:	8bfb      	ldrh	r3, [r7, #30]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
			netbuf_delete(buf);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f009 fb0f 	bl	800aac4 <netbuf_delete>
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 80014a6:	8bfa      	ldrh	r2, [r7, #30]
 80014a8:	887b      	ldrh	r3, [r7, #2]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d20d      	bcs.n	80014ca <http_client+0xae>
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4619      	mov	r1, r3
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f007 fc3d 	bl	8008d34 <netconn_recv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0d8      	beq.n	8001472 <http_client+0x56>
 80014c0:	e003      	b.n	80014ca <http_client+0xae>
		}
	} else {
		sprintf(s, "Chyba pripojeni\n");
 80014c2:	4907      	ldr	r1, [pc, #28]	; (80014e0 <http_client+0xc4>)
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f017 fee1 	bl	801928c <siprintf>
	}
	netconn_delete(client);
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f007 f972 	bl	80087b4 <netconn_delete>
}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	7c90e593 	.word	0x7c90e593
 80014dc:	0801a6f0 	.word	0x0801a6f0
 80014e0:	0801a73c 	.word	0x0801a73c

080014e4 <telnet_init>:

/*-----------------------------------------------------------------------------------*/

void telnet_init(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL,
 80014ea:	2304      	movs	r3, #4
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f2:	2200      	movs	r2, #0
 80014f4:	4903      	ldr	r1, [pc, #12]	; (8001504 <telnet_init+0x20>)
 80014f6:	4804      	ldr	r0, [pc, #16]	; (8001508 <telnet_init+0x24>)
 80014f8:	f017 fd56 	bl	8018fa8 <sys_thread_new>
	DEFAULT_THREAD_STACKSIZE, telnet_THREAD_PRIO);
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	0800134d 	.word	0x0800134d
 8001508:	0801a750 	.word	0x0801a750

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001528:	4c0b      	ldr	r4, [pc, #44]	; (8001558 <LoopFillZerobss+0x26>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001536:	f7ff fcbb 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f018 f86f 	bl	801961c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff f857 	bl	80005f0 <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001544:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001550:	08028780 	.word	0x08028780
  ldr r2, =_sbss
 8001554:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001558:	200111a4 	.word	0x200111a4

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>

0800155e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <LAN8742_RegisterBusIO+0x28>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <LAN8742_RegisterBusIO+0x28>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <LAN8742_RegisterBusIO+0x28>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e014      	b.n	80015b6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d17c      	bne.n	80016dc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2220      	movs	r2, #32
 80015f4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e01c      	b.n	8001636 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f107 0208 	add.w	r2, r7, #8
 8001604:	2112      	movs	r1, #18
 8001606:	6978      	ldr	r0, [r7, #20]
 8001608:	4798      	blx	r3
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	da03      	bge.n	8001618 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001610:	f06f 0304 	mvn.w	r3, #4
 8001614:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001616:	e00b      	b.n	8001630 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	d105      	bne.n	8001630 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
         break;
 800162e:	e005      	b.n	800163c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b1f      	cmp	r3, #31
 800163a:	d9df      	bls.n	80015fc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b1f      	cmp	r3, #31
 8001642:	d902      	bls.n	800164a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001644:	f06f 0302 	mvn.w	r3, #2
 8001648:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d145      	bne.n	80016dc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6810      	ldr	r0, [r2, #0]
 8001658:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165c:	2100      	movs	r1, #0
 800165e:	4798      	blx	r3
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	db37      	blt.n	80016d6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6810      	ldr	r0, [r2, #0]
 800166e:	f107 0208 	add.w	r2, r7, #8
 8001672:	2100      	movs	r1, #0
 8001674:	4798      	blx	r3
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	db28      	blt.n	80016ce <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4798      	blx	r3
 8001682:	4603      	mov	r3, r0
 8001684:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001686:	e01c      	b.n	80016c2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4798      	blx	r3
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800169a:	d80e      	bhi.n	80016ba <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6810      	ldr	r0, [r2, #0]
 80016a4:	f107 0208 	add.w	r2, r7, #8
 80016a8:	2100      	movs	r1, #0
 80016aa:	4798      	blx	r3
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da07      	bge.n	80016c2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80016b2:	f06f 0304 	mvn.w	r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
                 break;
 80016b8:	e010      	b.n	80016dc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80016ba:	f06f 0301 	mvn.w	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
               break;
 80016c0:	e00c      	b.n	80016dc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1dd      	bne.n	8001688 <LAN8742_Init+0xc6>
 80016cc:	e006      	b.n	80016dc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80016ce:	f06f 0304 	mvn.w	r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	e002      	b.n	80016dc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80016d6:	f06f 0303 	mvn.w	r3, #3
 80016da:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d112      	bne.n	8001708 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4798      	blx	r3
 80016e8:	4603      	mov	r3, r0
 80016ea:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80016ec:	bf00      	nop
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	4798      	blx	r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001700:	d9f5      	bls.n	80016ee <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001708:	693b      	ldr	r3, [r7, #16]
 }
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6810      	ldr	r0, [r2, #0]
 8001726:	f107 020c 	add.w	r2, r7, #12
 800172a:	2101      	movs	r1, #1
 800172c:	4798      	blx	r3
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	da02      	bge.n	800173a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001734:	f06f 0304 	mvn.w	r3, #4
 8001738:	e06e      	b.n	8001818 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6810      	ldr	r0, [r2, #0]
 8001742:	f107 020c 	add.w	r2, r7, #12
 8001746:	2101      	movs	r1, #1
 8001748:	4798      	blx	r3
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	da02      	bge.n	8001756 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001750:	f06f 0304 	mvn.w	r3, #4
 8001754:	e060      	b.n	8001818 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001760:	2301      	movs	r3, #1
 8001762:	e059      	b.n	8001818 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6810      	ldr	r0, [r2, #0]
 800176c:	f107 020c 	add.w	r2, r7, #12
 8001770:	2100      	movs	r1, #0
 8001772:	4798      	blx	r3
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	da02      	bge.n	8001780 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800177a:	f06f 0304 	mvn.w	r3, #4
 800177e:	e04b      	b.n	8001818 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11b      	bne.n	80017c2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <LAN8742_GetLinkState+0x90>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800179e:	2302      	movs	r3, #2
 80017a0:	e03a      	b.n	8001818 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e033      	b.n	8001818 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017ba:	2304      	movs	r3, #4
 80017bc:	e02c      	b.n	8001818 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017be:	2305      	movs	r3, #5
 80017c0:	e02a      	b.n	8001818 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6810      	ldr	r0, [r2, #0]
 80017ca:	f107 020c 	add.w	r2, r7, #12
 80017ce:	211f      	movs	r1, #31
 80017d0:	4798      	blx	r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	da02      	bge.n	80017de <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80017d8:	f06f 0304 	mvn.w	r3, #4
 80017dc:	e01c      	b.n	8001818 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80017e8:	2306      	movs	r3, #6
 80017ea:	e015      	b.n	8001818 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 031c 	and.w	r3, r3, #28
 80017f2:	2b18      	cmp	r3, #24
 80017f4:	d101      	bne.n	80017fa <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017f6:	2302      	movs	r3, #2
 80017f8:	e00e      	b.n	8001818 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 031c 	and.w	r3, r3, #28
 8001800:	2b08      	cmp	r3, #8
 8001802:	d101      	bne.n	8001808 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001804:	2303      	movs	r3, #3
 8001806:	e007      	b.n	8001818 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 031c 	and.w	r3, r3, #28
 800180e:	2b14      	cmp	r3, #20
 8001810:	d101      	bne.n	8001816 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001812:	2304      	movs	r3, #4
 8001814:	e000      	b.n	8001818 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001816:	2305      	movs	r3, #5
    }				
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <HAL_Init+0x40>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <HAL_Init+0x40>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_Init+0x40>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 f8fc 	bl	8001a46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184e:	200f      	movs	r0, #15
 8001850:	f7ff f9be 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001854:	f7ff f8de 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008
 8001888:	20000548 	.word	0x20000548

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000548 	.word	0x20000548

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffee 	bl	800188c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffde 	bl	800188c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff4c 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6e:	f7ff ff61 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001a72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	6978      	ldr	r0, [r7, #20]
 8001a7a:	f7ff ffb1 	bl	80019e0 <NVIC_EncodePriority>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff80 	bl	800198c <__NVIC_SetPriority>
}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff54 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e06c      	b.n	8001b9c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d106      	bne.n	8001ada <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2223      	movs	r2, #35	; 0x23
 8001ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f003 fb91 	bl	80051fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_ETH_Init+0xf4>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_ETH_Init+0xf4>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_ETH_Init+0xf4>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <HAL_ETH_Init+0xf8>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <HAL_ETH_Init+0xf8>)
 8001afc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b00:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b02:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <HAL_ETH_Init+0xf8>)
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	4927      	ldr	r1, [pc, #156]	; (8001ba8 <HAL_ETH_Init+0xf8>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_ETH_Init+0xf8>)
 8001b12:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b2c:	f7ff feae 	bl	800188c <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b32:	e011      	b.n	8001b58 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b34:	f7ff feaa 	bl	800188c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b42:	d909      	bls.n	8001b58 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2204      	movs	r2, #4
 8001b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	22e0      	movs	r2, #224	; 0xe0
 8001b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e021      	b.n	8001b9c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e4      	bne.n	8001b34 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 ff4a 	bl	8002a04 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fff1 	bl	8002b58 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f001 f847 	bl	8002c0a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	461a      	mov	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 ffaf 	bl	8002ae8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2210      	movs	r2, #16
 8001b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40013800 	.word	0x40013800

08001bac <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bba:	2b10      	cmp	r3, #16
 8001bbc:	d17f      	bne.n	8001cbe <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2223      	movs	r2, #35	; 0x23
 8001bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bf0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001c04:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f9f8 	bl	8002004 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0208 	orr.w	r2, r2, #8
 8001c22:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff fe39 	bl	80018a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0204 	orr.w	r2, r2, #4
 8001c48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c52:	2001      	movs	r0, #1
 8001c54:	f7ff fe26 	bl	80018a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fd70 	bl	8002746 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c7c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c94:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001ca8:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001cac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cb0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2223      	movs	r2, #35	; 0x23
 8001cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cd6:	2b23      	cmp	r3, #35	; 0x23
 8001cd8:	d170      	bne.n	8001dbc <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2223      	movs	r2, #35	; 0x23
 8001cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001cf4:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cfc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d14:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	f023 0302 	bic.w	r3, r3, #2
 8001d28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d2c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0204 	bic.w	r2, r2, #4
 8001d3c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff fdac 	bl	80018a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fcf6 	bl	8002746 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0208 	bic.w	r2, r2, #8
 8001d68:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f7ff fd96 	bl	80018a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e00e      	b.n	8001da4 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	3212      	adds	r2, #18
 8001d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d90:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d9ed      	bls.n	8001d86 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2210      	movs	r2, #16
 8001db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e045      	b.n	8001e76 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df0:	2b23      	cmp	r3, #35	; 0x23
 8001df2:	d13f      	bne.n	8001e74 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 ff6f 	bl	8002ce4 <ETH_Prepare_Tx_Descriptors>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e02a      	b.n	8001e76 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e20:	f3bf 8f4f 	dsb	sy
}
 8001e24:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d904      	bls.n	8001e42 <HAL_ETH_Transmit_IT+0x7c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	1f1a      	subs	r2, r3, #4
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00d      	beq.n	8001e70 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2304      	movs	r3, #4
 8001e60:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e000      	b.n	8001e76 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b088      	sub	sp, #32
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0a8      	b.n	8001ffc <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eb0:	2b23      	cmp	r3, #35	; 0x23
 8001eb2:	d001      	beq.n	8001eb8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0a1      	b.n	8001ffc <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	3212      	adds	r2, #18
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ece:	f1c3 0304 	rsb	r3, r3, #4
 8001ed2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ed4:	e06a      	b.n	8001fac <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <HAL_ETH_ReadData+0x88>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d040      	beq.n	8001f88 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00c      	beq.n	8001f4a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f62:	461a      	mov	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	f003 fb22 	bl	80055b0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	441a      	add	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d902      	bls.n	8001f9a <HAL_ETH_ReadData+0x11c>
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	3b04      	subs	r3, #4
 8001f98:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	3212      	adds	r2, #18
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db06      	blt.n	8001fc2 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d202      	bcs.n	8001fc2 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d089      	beq.n	8001ed6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	441a      	add	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f814 	bl	8002004 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d108      	bne.n	8001ffa <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002010:	2301      	movs	r3, #1
 8002012:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002018:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	3212      	adds	r2, #18
 8002020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002024:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800202a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800202c:	e040      	b.n	80020b0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d112      	bne.n	800205c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002036:	f107 030c 	add.w	r3, r7, #12
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fa88 	bl	8005550 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	74fb      	strb	r3, [r7, #19]
 800204a:	e007      	b.n	800205c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	461a      	mov	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	461a      	mov	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d026      	beq.n	80020b0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <ETH_UpdateDescriptor+0xe4>)
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	e003      	b.n	800207a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002078:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800207a:	f3bf 8f5f 	dmb	sy
}
 800207e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	3301      	adds	r3, #1
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d902      	bls.n	800209e <ETH_UpdateDescriptor+0x9a>
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3b04      	subs	r3, #4
 800209c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	3212      	adds	r2, #18
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	617b      	str	r3, [r7, #20]
      desccount--;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <ETH_UpdateDescriptor+0xb8>
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1b8      	bne.n	800202e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d00c      	beq.n	80020e0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ce:	461a      	mov	r2, r3
 80020d0:	2300      	movs	r3, #0
 80020d2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	80004600 	.word	0x80004600

080020ec <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3318      	adds	r3, #24
 80020f8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800210a:	e03f      	b.n	800218c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800210c:	2301      	movs	r3, #1
 800210e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3b01      	subs	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	3304      	adds	r3, #4
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	3301      	adds	r3, #1
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d028      	beq.n	800218c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68d9      	ldr	r1, [r3, #12]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db1b      	blt.n	8002188 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	3304      	adds	r3, #4
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fa67 	bl	8005630 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	3304      	adds	r3, #4
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	3301      	adds	r3, #1
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c
 8002186:	e001      	b.n	800218c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_ETH_ReleaseTxPacket+0xac>
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1b9      	bne.n	800210c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b40      	cmp	r3, #64	; 0x40
 80021bc:	d112      	bne.n	80021e4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d109      	bne.n	80021e4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d8:	461a      	mov	r2, r3
 80021da:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_ETH_IRQHandler+0x178>)
 80021dc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f002 fd70 	bl	8004cc4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d113      	bne.n	800221e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10a      	bne.n	800221e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002210:	461a      	mov	r2, r3
 8002212:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002216:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f002 fd63 	bl	8004ce4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800222c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002230:	d14c      	bne.n	80022cc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002244:	d142      	bne.n	80022cc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224c:	f043 0208 	orr.w	r2, r3, #8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002268:	d11a      	bne.n	80022a0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_ETH_IRQHandler+0x17c>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002290:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002294:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	22e0      	movs	r2, #224	; 0xe0
 800229a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800229e:	e012      	b.n	80022c6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	f248 6380 	movw	r3, #34432	; 0x8680
 80022ae:	4013      	ands	r3, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022be:	461a      	mov	r2, r3
 80022c0:	f248 6380 	movw	r3, #34432	; 0x8680
 80022c4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f002 fd1c 	bl	8004d04 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d10e      	bne.n	80022f8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f81c 	bl	8002328 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_ETH_IRQHandler+0x180>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <HAL_ETH_IRQHandler+0x180>)
 8002306:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800230a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f815 	bl	800233c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	00010040 	.word	0x00010040
 8002320:	007e2000 	.word	0x007e2000
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 031c 	and.w	r3, r3, #28
 800236c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	02db      	lsls	r3, r3, #11
 8002372:	b29b      	uxth	r3, r3
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	019b      	lsls	r3, r3, #6
 800237e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f023 0302 	bic.w	r3, r3, #2
 800238e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80023a0:	f7ff fa74 	bl	800188c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023a6:	e00d      	b.n	80023c4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80023a8:	f7ff fa70 	bl	800188c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b6:	d301      	bcc.n	80023bc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e010      	b.n	80023de <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ec      	bne.n	80023a8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 031c 	and.w	r3, r3, #28
 8002402:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	02db      	lsls	r3, r3, #11
 8002408:	b29b      	uxth	r3, r3
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	019b      	lsls	r3, r3, #6
 8002414:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7ff fa24 	bl	800188c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002446:	e00d      	b.n	8002464 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002448:	f7ff fa20 	bl	800188c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002456:	d301      	bcc.n	800245c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e009      	b.n	8002470 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1ec      	bne.n	8002448 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d9      	b.n	8002640 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	bf14      	ite	ne
 800249a:	2301      	movne	r3, #1
 800249c:	2300      	moveq	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf14      	ite	ne
 8002514:	2301      	movne	r3, #1
 8002516:	2300      	moveq	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf14      	ite	ne
 80025a6:	2301      	movne	r3, #1
 80025a8:	2300      	moveq	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	0c1b      	lsrs	r3, r3, #16
 8002600:	b29a      	uxth	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e00b      	b.n	8002678 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002666:	2b10      	cmp	r3, #16
 8002668:	d105      	bne.n	8002676 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800266a:	6839      	ldr	r1, [r7, #0]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f88f 	bl	8002790 <ETH_SetMACConfig>

    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 031c 	bic.w	r3, r3, #28
 8002696:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002698:	f001 fc5c 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 800269c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <HAL_ETH_SetMDIOClockRange+0x98>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d908      	bls.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x38>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d804      	bhi.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f043 0308 	orr.w	r3, r3, #8
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e027      	b.n	8002708 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d908      	bls.n	80026d2 <HAL_ETH_SetMDIOClockRange+0x52>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4a17      	ldr	r2, [pc, #92]	; (8002720 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d204      	bcs.n	80026d2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f043 030c 	orr.w	r3, r3, #12
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e01a      	b.n	8002708 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d303      	bcc.n	80026e2 <HAL_ETH_SetMDIOClockRange+0x62>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d911      	bls.n	8002706 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d908      	bls.n	80026fc <HAL_ETH_SetMDIOClockRange+0x7c>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d804      	bhi.n	80026fc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	e005      	b.n	8002708 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e000      	b.n	8002708 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002706:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	611a      	str	r2, [r3, #16]
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	01312cff 	.word	0x01312cff
 800271c:	02160ebf 	.word	0x02160ebf
 8002720:	03938700 	.word	0x03938700
 8002724:	05f5e0ff 	.word	0x05f5e0ff
 8002728:	08f0d17f 	.word	0x08f0d17f

0800272c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002764:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002768:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002776:	2001      	movs	r0, #1
 8002778:	f7ff f894 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002786:	6193      	str	r3, [r2, #24]
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4b51      	ldr	r3, [pc, #324]	; (80028ec <ETH_SetMACConfig+0x15c>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	7c1b      	ldrb	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <ETH_SetMACConfig+0x28>
 80027b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027b6:	e000      	b.n	80027ba <ETH_SetMACConfig+0x2a>
 80027b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	7c5b      	ldrb	r3, [r3, #17]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <ETH_SetMACConfig+0x38>
 80027c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027c6:	e000      	b.n	80027ca <ETH_SetMACConfig+0x3a>
 80027c8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027ca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	7fdb      	ldrb	r3, [r3, #31]
 80027d6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027d8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	7f92      	ldrb	r2, [r2, #30]
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d102      	bne.n	80027ee <ETH_SetMACConfig+0x5e>
 80027e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ec:	e000      	b.n	80027f0 <ETH_SetMACConfig+0x60>
 80027ee:	2200      	movs	r2, #0
                        macconf->Speed |
 80027f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	7f1b      	ldrb	r3, [r3, #28]
 80027f6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027f8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	791b      	ldrb	r3, [r3, #4]
 8002804:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002806:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800280e:	2a00      	cmp	r2, #0
 8002810:	d102      	bne.n	8002818 <ETH_SetMACConfig+0x88>
 8002812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002816:	e000      	b.n	800281a <ETH_SetMACConfig+0x8a>
 8002818:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800281a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	7bdb      	ldrb	r3, [r3, #15]
 8002820:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002822:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002828:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002830:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002832:	4313      	orrs	r3, r2
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800284a:	2001      	movs	r0, #1
 800284c:	f7ff f82a 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002866:	4013      	ands	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002876:	2a00      	cmp	r2, #0
 8002878:	d101      	bne.n	800287e <ETH_SetMACConfig+0xee>
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	e000      	b.n	8002880 <ETH_SetMACConfig+0xf0>
 800287e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002880:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002886:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800288e:	2a01      	cmp	r2, #1
 8002890:	d101      	bne.n	8002896 <ETH_SetMACConfig+0x106>
 8002892:	2208      	movs	r2, #8
 8002894:	e000      	b.n	8002898 <ETH_SetMACConfig+0x108>
 8002896:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002898:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028a0:	2a01      	cmp	r2, #1
 80028a2:	d101      	bne.n	80028a8 <ETH_SetMACConfig+0x118>
 80028a4:	2204      	movs	r2, #4
 80028a6:	e000      	b.n	80028aa <ETH_SetMACConfig+0x11a>
 80028a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028b2:	2a01      	cmp	r2, #1
 80028b4:	d101      	bne.n	80028ba <ETH_SetMACConfig+0x12a>
 80028b6:	2202      	movs	r2, #2
 80028b8:	e000      	b.n	80028bc <ETH_SetMACConfig+0x12c>
 80028ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028bc:	4313      	orrs	r3, r2
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7fe ffe5 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	ff20810f 	.word	0xff20810f

080028f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <ETH_SetDMAConfig+0x110>)
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	7b1b      	ldrb	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <ETH_SetDMAConfig+0x2c>
 8002916:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800291a:	e000      	b.n	800291e <ETH_SetDMAConfig+0x2e>
 800291c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	7b5b      	ldrb	r3, [r3, #13]
 8002922:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002924:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	7f52      	ldrb	r2, [r2, #29]
 800292a:	2a00      	cmp	r2, #0
 800292c:	d102      	bne.n	8002934 <ETH_SetDMAConfig+0x44>
 800292e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002932:	e000      	b.n	8002936 <ETH_SetDMAConfig+0x46>
 8002934:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002936:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	7b9b      	ldrb	r3, [r3, #14]
 800293c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800293e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002944:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	7f1b      	ldrb	r3, [r3, #28]
 800294a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800294c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	7f9b      	ldrb	r3, [r3, #30]
 8002952:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002954:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800295a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002962:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002964:	4313      	orrs	r3, r2
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002974:	461a      	mov	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002986:	2001      	movs	r0, #1
 8002988:	f7fe ff8c 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002994:	461a      	mov	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	791b      	ldrb	r3, [r3, #4]
 800299e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fe ff5d 	bl	80018a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	f8de3f23 	.word	0xf8de3f23

08002a04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b0a6      	sub	sp, #152	; 0x98
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a40:	2300      	movs	r3, #0
 8002a42:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fe86 	bl	8002790 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002abe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ad4:	f107 0308 	add.w	r3, r7, #8
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff08 	bl	80028f0 <ETH_SetDMAConfig>
}
 8002ae0:	bf00      	nop
 8002ae2:	3798      	adds	r7, #152	; 0x98
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3305      	adds	r3, #5
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	3204      	adds	r2, #4
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <ETH_MACAddressConfig+0x68>)
 8002b0a:	4413      	add	r3, r2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3303      	adds	r3, #3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	061a      	lsls	r2, r3, #24
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3301      	adds	r3, #1
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <ETH_MACAddressConfig+0x6c>)
 8002b3a:	4413      	add	r3, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	6013      	str	r3, [r2, #0]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40028040 	.word	0x40028040
 8002b54:	40028044 	.word	0x40028044

08002b58 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e03e      	b.n	8002be4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68d9      	ldr	r1, [r3, #12]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	3206      	adds	r2, #6
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d80c      	bhi.n	8002bc8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68d9      	ldr	r1, [r3, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	e004      	b.n	8002bd2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3301      	adds	r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d9bd      	bls.n	8002b66 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bfc:	611a      	str	r2, [r3, #16]
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e046      	b.n	8002ca6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6919      	ldr	r1, [r3, #16]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c54:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002c5c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	3212      	adds	r2, #18
 8002c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d80c      	bhi.n	8002c96 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6919      	ldr	r1, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	e004      	b.n	8002ca0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d9b5      	bls.n	8002c18 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd6:	60da      	str	r2, [r3, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b08d      	sub	sp, #52	; 0x34
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3318      	adds	r3, #24
 8002cf4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d26:	d007      	beq.n	8002d38 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e103      	b.n	8002f44 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	3301      	adds	r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002d54:	f023 031f 	bic.w	r3, r3, #31
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	6852      	ldr	r2, [r2, #4]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002dc2:	f3bf 8f5f 	dmb	sy
}
 8002dc6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002dd4:	e084      	b.n	8002ee0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d006      	beq.n	8002df6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e005      	b.n	8002e02 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	3301      	adds	r3, #1
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d902      	bls.n	8002e14 <ETH_Prepare_Tx_Descriptors+0x130>
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	3b04      	subs	r3, #4
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e36:	d007      	beq.n	8002e48 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d029      	beq.n	8002e9c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e54:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5a:	e019      	b.n	8002e90 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e5c:	f3bf 8f5f 	dmb	sy
}
 8002e60:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	3301      	adds	r3, #1
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d902      	bls.n	8002e80 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	3b04      	subs	r3, #4
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e88:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d3e1      	bcc.n	8002e5c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e053      	b.n	8002f44 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002eba:	f023 031f 	bic.w	r3, r3, #31
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	6852      	ldr	r2, [r2, #4]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ece:	f3bf 8f5f 	dmb	sy
}
 8002ed2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f af76 	bne.w	8002dd6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e005      	b.n	8002f0a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1a:	6979      	ldr	r1, [r7, #20]
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	3304      	adds	r3, #4
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2c:	b672      	cpsid	i
}
 8002f2e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002f3e:	b662      	cpsie	i
}
 8002f40:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3734      	adds	r7, #52	; 0x34
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e177      	b.n	800325c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8166 	bne.w	8003256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d005      	beq.n	8002fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d130      	bne.n	8003004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd8:	2201      	movs	r2, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 0201 	and.w	r2, r3, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b03      	cmp	r3, #3
 800300e:	d017      	beq.n	8003040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d123      	bne.n	8003094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80c0 	beq.w	8003256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b66      	ldr	r3, [pc, #408]	; (8003274 <HAL_GPIO_Init+0x324>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a65      	ldr	r2, [pc, #404]	; (8003274 <HAL_GPIO_Init+0x324>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b63      	ldr	r3, [pc, #396]	; (8003274 <HAL_GPIO_Init+0x324>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f2:	4a61      	ldr	r2, [pc, #388]	; (8003278 <HAL_GPIO_Init+0x328>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_GPIO_Init+0x32c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d037      	beq.n	800318e <HAL_GPIO_Init+0x23e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a57      	ldr	r2, [pc, #348]	; (8003280 <HAL_GPIO_Init+0x330>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <HAL_GPIO_Init+0x23a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a56      	ldr	r2, [pc, #344]	; (8003284 <HAL_GPIO_Init+0x334>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02b      	beq.n	8003186 <HAL_GPIO_Init+0x236>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a55      	ldr	r2, [pc, #340]	; (8003288 <HAL_GPIO_Init+0x338>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d025      	beq.n	8003182 <HAL_GPIO_Init+0x232>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a54      	ldr	r2, [pc, #336]	; (800328c <HAL_GPIO_Init+0x33c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01f      	beq.n	800317e <HAL_GPIO_Init+0x22e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a53      	ldr	r2, [pc, #332]	; (8003290 <HAL_GPIO_Init+0x340>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d019      	beq.n	800317a <HAL_GPIO_Init+0x22a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_GPIO_Init+0x344>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_GPIO_Init+0x226>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a51      	ldr	r2, [pc, #324]	; (8003298 <HAL_GPIO_Init+0x348>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00d      	beq.n	8003172 <HAL_GPIO_Init+0x222>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a50      	ldr	r2, [pc, #320]	; (800329c <HAL_GPIO_Init+0x34c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <HAL_GPIO_Init+0x21e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4f      	ldr	r2, [pc, #316]	; (80032a0 <HAL_GPIO_Init+0x350>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_GPIO_Init+0x21a>
 8003166:	2309      	movs	r3, #9
 8003168:	e012      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800316a:	230a      	movs	r3, #10
 800316c:	e010      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800316e:	2308      	movs	r3, #8
 8003170:	e00e      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003172:	2307      	movs	r3, #7
 8003174:	e00c      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003176:	2306      	movs	r3, #6
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800317a:	2305      	movs	r3, #5
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800318e:	2300      	movs	r3, #0
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a0:	4935      	ldr	r1, [pc, #212]	; (8003278 <HAL_GPIO_Init+0x328>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <HAL_GPIO_Init+0x354>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d2:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <HAL_GPIO_Init+0x354>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d8:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <HAL_GPIO_Init+0x354>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031fc:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <HAL_GPIO_Init+0x354>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003202:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <HAL_GPIO_Init+0x354>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003226:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <HAL_GPIO_Init+0x354>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <HAL_GPIO_Init+0x354>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003250:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <HAL_GPIO_Init+0x354>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	f67f ae84 	bls.w	8002f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800
 8003298:	40021c00 	.word	0x40021c00
 800329c:	40022000 	.word	0x40022000
 80032a0:	40022400 	.word	0x40022400
 80032a4:	40013c00 	.word	0x40013c00

080032a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e001      	b.n	80032ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
 80032e4:	4613      	mov	r3, r2
 80032e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e8:	787b      	ldrb	r3, [r7, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f4:	e003      	b.n	80032fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032f6:	887b      	ldrh	r3, [r7, #2]
 80032f8:	041a      	lsls	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e12b      	b.n	8003576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fb9a 	bl	8000a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003370:	f000 fdfc 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 8003374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a81      	ldr	r2, [pc, #516]	; (8003580 <HAL_I2C_Init+0x274>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d807      	bhi.n	8003390 <HAL_I2C_Init+0x84>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a80      	ldr	r2, [pc, #512]	; (8003584 <HAL_I2C_Init+0x278>)
 8003384:	4293      	cmp	r3, r2
 8003386:	bf94      	ite	ls
 8003388:	2301      	movls	r3, #1
 800338a:	2300      	movhi	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e006      	b.n	800339e <HAL_I2C_Init+0x92>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a7d      	ldr	r2, [pc, #500]	; (8003588 <HAL_I2C_Init+0x27c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	bf94      	ite	ls
 8003398:	2301      	movls	r3, #1
 800339a:	2300      	movhi	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0e7      	b.n	8003576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a78      	ldr	r2, [pc, #480]	; (800358c <HAL_I2C_Init+0x280>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0c9b      	lsrs	r3, r3, #18
 80033b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a6a      	ldr	r2, [pc, #424]	; (8003580 <HAL_I2C_Init+0x274>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d802      	bhi.n	80033e0 <HAL_I2C_Init+0xd4>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3301      	adds	r3, #1
 80033de:	e009      	b.n	80033f4 <HAL_I2C_Init+0xe8>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	4a69      	ldr	r2, [pc, #420]	; (8003590 <HAL_I2C_Init+0x284>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	3301      	adds	r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	495c      	ldr	r1, [pc, #368]	; (8003580 <HAL_I2C_Init+0x274>)
 8003410:	428b      	cmp	r3, r1
 8003412:	d819      	bhi.n	8003448 <HAL_I2C_Init+0x13c>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e59      	subs	r1, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003428:	400b      	ands	r3, r1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_I2C_Init+0x138>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e59      	subs	r1, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fbb1 f3f3 	udiv	r3, r1, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	e051      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 8003444:	2304      	movs	r3, #4
 8003446:	e04f      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d111      	bne.n	8003474 <HAL_I2C_Init+0x168>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	440b      	add	r3, r1
 800345e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e012      	b.n	800349a <HAL_I2C_Init+0x18e>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e58      	subs	r0, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	0099      	lsls	r1, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Init+0x196>
 800349e:	2301      	movs	r3, #1
 80034a0:	e022      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10e      	bne.n	80034c8 <HAL_I2C_Init+0x1bc>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1e58      	subs	r0, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	440b      	add	r3, r1
 80034b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c6:	e00f      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e58      	subs	r0, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	0099      	lsls	r1, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	fbb0 f3f3 	udiv	r3, r0, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	6809      	ldr	r1, [r1, #0]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6911      	ldr	r1, [r2, #16]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68d2      	ldr	r2, [r2, #12]
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	430b      	orrs	r3, r1
 800352a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	000186a0 	.word	0x000186a0
 8003584:	001e847f 	.word	0x001e847f
 8003588:	003d08ff 	.word	0x003d08ff
 800358c:	431bde83 	.word	0x431bde83
 8003590:	10624dd3 	.word	0x10624dd3

08003594 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d129      	bne.n	80035fe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2224      	movs	r2, #36	; 0x24
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0210 	bic.w	r2, r2, #16
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e000      	b.n	8003600 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
  }
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	d12a      	bne.n	800367c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2224      	movs	r2, #36	; 0x24
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003646:	89fb      	ldrh	r3, [r7, #14]
 8003648:	f023 030f 	bic.w	r3, r3, #15
 800364c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	b29a      	uxth	r2, r3
 8003652:	89fb      	ldrh	r3, [r7, #14]
 8003654:	4313      	orrs	r3, r2
 8003656:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	89fa      	ldrh	r2, [r7, #14]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e267      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d075      	beq.n	8003796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036aa:	4b88      	ldr	r3, [pc, #544]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d00c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b6:	4b85      	ldr	r3, [pc, #532]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d112      	bne.n	80036e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c2:	4b82      	ldr	r3, [pc, #520]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ce:	d10b      	bne.n	80036e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d0:	4b7e      	ldr	r3, [pc, #504]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d05b      	beq.n	8003794 <HAL_RCC_OscConfig+0x108>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d157      	bne.n	8003794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e242      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f0:	d106      	bne.n	8003700 <HAL_RCC_OscConfig+0x74>
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a75      	ldr	r2, [pc, #468]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e01d      	b.n	800373c <HAL_RCC_OscConfig+0xb0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x98>
 800370a:	4b70      	ldr	r3, [pc, #448]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6f      	ldr	r2, [pc, #444]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 8003710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	4b6d      	ldr	r3, [pc, #436]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a6c      	ldr	r2, [pc, #432]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e00b      	b.n	800373c <HAL_RCC_OscConfig+0xb0>
 8003724:	4b69      	ldr	r3, [pc, #420]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a68      	ldr	r2, [pc, #416]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 800372a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	4b66      	ldr	r3, [pc, #408]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a65      	ldr	r2, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 8003736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe f8a2 	bl	800188c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800374c:	f7fe f89e 	bl	800188c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e207      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	4b5b      	ldr	r3, [pc, #364]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0xc0>
 800376a:	e014      	b.n	8003796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fe f88e 	bl	800188c <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003774:	f7fe f88a 	bl	800188c <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e1f3      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003786:	4b51      	ldr	r3, [pc, #324]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0xe8>
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d063      	beq.n	800386a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a2:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d11c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ba:	4b44      	ldr	r3, [pc, #272]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d116      	bne.n	80037f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_RCC_OscConfig+0x152>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e1c7      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037de:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4937      	ldr	r1, [pc, #220]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	e03a      	b.n	800386a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037fc:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <HAL_RCC_OscConfig+0x244>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fe f843 	bl	800188c <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380a:	f7fe f83f 	bl	800188c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e1a8      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381c:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4925      	ldr	r1, [pc, #148]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]
 800383c:	e015      	b.n	800386a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x244>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fe f822 	bl	800188c <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800384c:	f7fe f81e 	bl	800188c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e187      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d036      	beq.n	80038e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d016      	beq.n	80038ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <HAL_RCC_OscConfig+0x248>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe f802 	bl	800188c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388c:	f7fd fffe 	bl	800188c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e167      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x240>)
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x200>
 80038aa:	e01b      	b.n	80038e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_RCC_OscConfig+0x248>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b2:	f7fd ffeb 	bl	800188c <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b8:	e00e      	b.n	80038d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ba:	f7fd ffe7 	bl	800188c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d907      	bls.n	80038d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e150      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	42470000 	.word	0x42470000
 80038d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 80038da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ea      	bne.n	80038ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8097 	beq.w	8003a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f6:	4b81      	ldr	r3, [pc, #516]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	4b7d      	ldr	r3, [pc, #500]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a7c      	ldr	r2, [pc, #496]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b7a      	ldr	r3, [pc, #488]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003922:	4b77      	ldr	r3, [pc, #476]	; (8003b00 <HAL_RCC_OscConfig+0x474>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d118      	bne.n	8003960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392e:	4b74      	ldr	r3, [pc, #464]	; (8003b00 <HAL_RCC_OscConfig+0x474>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a73      	ldr	r2, [pc, #460]	; (8003b00 <HAL_RCC_OscConfig+0x474>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393a:	f7fd ffa7 	bl	800188c <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003942:	f7fd ffa3 	bl	800188c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e10c      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	4b6a      	ldr	r3, [pc, #424]	; (8003b00 <HAL_RCC_OscConfig+0x474>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x2ea>
 8003968:	4b64      	ldr	r3, [pc, #400]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	4a63      	ldr	r2, [pc, #396]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6713      	str	r3, [r2, #112]	; 0x70
 8003974:	e01c      	b.n	80039b0 <HAL_RCC_OscConfig+0x324>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b05      	cmp	r3, #5
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x30c>
 800397e:	4b5f      	ldr	r3, [pc, #380]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a5e      	ldr	r2, [pc, #376]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
 800398a:	4b5c      	ldr	r3, [pc, #368]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a5b      	ldr	r2, [pc, #364]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0x324>
 8003998:	4b58      	ldr	r3, [pc, #352]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	4a57      	ldr	r2, [pc, #348]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	6713      	str	r3, [r2, #112]	; 0x70
 80039a4:	4b55      	ldr	r3, [pc, #340]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4a54      	ldr	r2, [pc, #336]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 80039aa:	f023 0304 	bic.w	r3, r3, #4
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d015      	beq.n	80039e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fd ff68 	bl	800188c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c0:	f7fd ff64 	bl	800188c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0cb      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	4b49      	ldr	r3, [pc, #292]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ee      	beq.n	80039c0 <HAL_RCC_OscConfig+0x334>
 80039e2:	e014      	b.n	8003a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e4:	f7fd ff52 	bl	800188c <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fd ff4e 	bl	800188c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0b5      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ee      	bne.n	80039ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a14:	4b39      	ldr	r3, [pc, #228]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4a38      	ldr	r2, [pc, #224]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80a1 	beq.w	8003b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2a:	4b34      	ldr	r3, [pc, #208]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d05c      	beq.n	8003af0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d141      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <HAL_RCC_OscConfig+0x478>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fd ff22 	bl	800188c <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fd ff1e 	bl	800188c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e087      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	3b01      	subs	r3, #1
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	491b      	ldr	r1, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a94:	4b1b      	ldr	r3, [pc, #108]	; (8003b04 <HAL_RCC_OscConfig+0x478>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9a:	f7fd fef7 	bl	800188c <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa2:	f7fd fef3 	bl	800188c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e05c      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x416>
 8003ac0:	e054      	b.n	8003b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <HAL_RCC_OscConfig+0x478>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fd fee0 	bl	800188c <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd fedc 	bl	800188c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e045      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_OscConfig+0x470>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x444>
 8003aee:	e03d      	b.n	8003b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e038      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40007000 	.word	0x40007000
 8003b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x4ec>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d028      	beq.n	8003b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d121      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d11a      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b38:	4013      	ands	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d111      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	3b01      	subs	r3, #1
 8003b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800

08003b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0cc      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b68      	ldr	r3, [pc, #416]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d90c      	bls.n	8003bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b63      	ldr	r3, [pc, #396]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0b8      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d020      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd0:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a58      	ldr	r2, [pc, #352]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be8:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a52      	ldr	r2, [pc, #328]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf4:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	494d      	ldr	r1, [pc, #308]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d044      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d119      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e07f      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3a:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e06f      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e067      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5a:	4b37      	ldr	r3, [pc, #220]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4934      	ldr	r1, [pc, #208]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fd fe0e 	bl	800188c <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7fd fe0a 	bl	800188c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e04f      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	4b2b      	ldr	r3, [pc, #172]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 020c 	and.w	r2, r3, #12
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1eb      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d20c      	bcs.n	8003cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e032      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd0:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4916      	ldr	r1, [pc, #88]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	490e      	ldr	r1, [pc, #56]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d02:	f000 f821 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003d06:	4602      	mov	r2, r0
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	490a      	ldr	r1, [pc, #40]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003d14:	5ccb      	ldrb	r3, [r1, r3]
 8003d16:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc ff54 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023c00 	.word	0x40023c00
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	0801e294 	.word	0x0801e294
 8003d40:	20000000 	.word	0x20000000
 8003d44:	20000004 	.word	0x20000004

08003d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b094      	sub	sp, #80	; 0x50
 8003d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	647b      	str	r3, [r7, #68]	; 0x44
 8003d54:	2300      	movs	r3, #0
 8003d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d58:	2300      	movs	r3, #0
 8003d5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d60:	4b79      	ldr	r3, [pc, #484]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 030c 	and.w	r3, r3, #12
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d00d      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x40>
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	f200 80e1 	bhi.w	8003f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x34>
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d003      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d7a:	e0db      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d80:	e0db      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d82:	4b73      	ldr	r3, [pc, #460]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d86:	e0d8      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d88:	4b6f      	ldr	r3, [pc, #444]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d92:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d063      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9e:	4b6a      	ldr	r3, [pc, #424]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	2200      	movs	r2, #0
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	633b      	str	r3, [r7, #48]	; 0x30
 8003db2:	2300      	movs	r3, #0
 8003db4:	637b      	str	r3, [r7, #52]	; 0x34
 8003db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dba:	4622      	mov	r2, r4
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	f04f 0000 	mov.w	r0, #0
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	0159      	lsls	r1, r3, #5
 8003dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dcc:	0150      	lsls	r0, r2, #5
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	1a51      	subs	r1, r2, r1
 8003dd6:	6139      	str	r1, [r7, #16]
 8003dd8:	4629      	mov	r1, r5
 8003dda:	eb63 0301 	sbc.w	r3, r3, r1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dec:	4659      	mov	r1, fp
 8003dee:	018b      	lsls	r3, r1, #6
 8003df0:	4651      	mov	r1, sl
 8003df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df6:	4651      	mov	r1, sl
 8003df8:	018a      	lsls	r2, r1, #6
 8003dfa:	4651      	mov	r1, sl
 8003dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8003e00:	4659      	mov	r1, fp
 8003e02:	eb63 0901 	sbc.w	r9, r3, r1
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e1a:	4690      	mov	r8, r2
 8003e1c:	4699      	mov	r9, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	eb18 0303 	adds.w	r3, r8, r3
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	462b      	mov	r3, r5
 8003e28:	eb49 0303 	adc.w	r3, r9, r3
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	024b      	lsls	r3, r1, #9
 8003e3e:	4621      	mov	r1, r4
 8003e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e44:	4621      	mov	r1, r4
 8003e46:	024a      	lsls	r2, r1, #9
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4e:	2200      	movs	r2, #0
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e58:	f7fc fa32 	bl	80002c0 <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4613      	mov	r3, r2
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e64:	e058      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e66:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	099b      	lsrs	r3, r3, #6
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	4611      	mov	r1, r2
 8003e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	0159      	lsls	r1, r3, #5
 8003e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e92:	0150      	lsls	r0, r2, #5
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4641      	mov	r1, r8
 8003e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	00eb      	lsls	r3, r5, #3
 8003eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ece:	00e2      	lsls	r2, r4, #3
 8003ed0:	4614      	mov	r4, r2
 8003ed2:	461d      	mov	r5, r3
 8003ed4:	4643      	mov	r3, r8
 8003ed6:	18e3      	adds	r3, r4, r3
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	464b      	mov	r3, r9
 8003edc:	eb45 0303 	adc.w	r3, r5, r3
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eee:	4629      	mov	r1, r5
 8003ef0:	028b      	lsls	r3, r1, #10
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef8:	4621      	mov	r1, r4
 8003efa:	028a      	lsls	r2, r1, #10
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f02:	2200      	movs	r2, #0
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	61fa      	str	r2, [r7, #28]
 8003f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f0c:	f7fc f9d8 	bl	80002c0 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3750      	adds	r7, #80	; 0x50
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	007a1200 	.word	0x007a1200

08003f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000000 	.word	0x20000000

08003f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f70:	f7ff fff0 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0a9b      	lsrs	r3, r3, #10
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	0801e2a4 	.word	0x0801e2a4

08003f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f98:	f7ff ffdc 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	0b5b      	lsrs	r3, r3, #13
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	4903      	ldr	r1, [pc, #12]	; (8003fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	0801e2a4 	.word	0x0801e2a4

08003fbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	220f      	movs	r2, #15
 8003fca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <HAL_RCC_GetClockConfig+0x5c>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0203 	and.w	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <HAL_RCC_GetClockConfig+0x5c>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_RCC_GetClockConfig+0x5c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	08db      	lsrs	r3, r3, #3
 8003ff6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ffe:	4b07      	ldr	r3, [pc, #28]	; (800401c <HAL_RCC_GetClockConfig+0x60>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 020f 	and.w	r2, r3, #15
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	601a      	str	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	40023c00 	.word	0x40023c00

08004020 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e01c      	b.n	800406c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	795b      	ldrb	r3, [r3, #5]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc fd5a 	bl	8000afc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0204 	orr.w	r2, r2, #4
 800405c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	791b      	ldrb	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_RNG_GenerateRandomNumber+0x1a>
 800408a:	2302      	movs	r3, #2
 800408c:	e044      	b.n	8004118 <HAL_RNG_GenerateRandomNumber+0xa4>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	795b      	ldrb	r3, [r3, #5]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d133      	bne.n	8004106 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fd fbf2 	bl	800188c <HAL_GetTick>
 80040a8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80040aa:	e018      	b.n	80040de <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80040ac:	f7fd fbee 	bl	800188c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d911      	bls.n	80040de <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d00a      	beq.n	80040de <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e01c      	b.n	8004118 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d1df      	bne.n	80040ac <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	715a      	strb	r2, [r3, #5]
 8004104:	e004      	b.n	8004110 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2204      	movs	r2, #4
 800410a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	711a      	strb	r2, [r3, #4]

  return status;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e041      	b.n	80041b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f839 	bl	80041be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f000 f9d8 	bl	8004514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d001      	beq.n	80041ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e04e      	b.n	800428a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a23      	ldr	r2, [pc, #140]	; (8004298 <HAL_TIM_Base_Start_IT+0xc4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d022      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x80>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004216:	d01d      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x80>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_TIM_Base_Start_IT+0xc8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d018      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x80>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x80>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x80>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d009      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x80>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a19      	ldr	r2, [pc, #100]	; (80042ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x80>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d111      	bne.n	8004278 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b06      	cmp	r3, #6
 8004264:	d010      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004276:	e007      	b.n	8004288 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40010000 	.word	0x40010000
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	40010400 	.word	0x40010400
 80042ac:	40014000 	.word	0x40014000
 80042b0:	40001800 	.word	0x40001800

080042b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d122      	bne.n	8004310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d11b      	bne.n	8004310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0202 	mvn.w	r2, #2
 80042e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8ee 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8e0 	bl	80044c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f8f1 	bl	80044ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b04      	cmp	r3, #4
 800431c:	d122      	bne.n	8004364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b04      	cmp	r3, #4
 800432a:	d11b      	bne.n	8004364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0204 	mvn.w	r2, #4
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8c4 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8b6 	bl	80044c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f8c7 	bl	80044ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b08      	cmp	r3, #8
 8004370:	d122      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d11b      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0208 	mvn.w	r2, #8
 8004388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2204      	movs	r2, #4
 800438e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f89a 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f88c 	bl	80044c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f89d 	bl	80044ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d122      	bne.n	800440c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d11b      	bne.n	800440c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0210 	mvn.w	r2, #16
 80043dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2208      	movs	r2, #8
 80043e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f870 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 80043f8:	e005      	b.n	8004406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f862 	bl	80044c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f873 	bl	80044ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10e      	bne.n	8004438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0201 	mvn.w	r2, #1
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fad6 	bl	80009e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b80      	cmp	r3, #128	; 0x80
 8004444:	d10e      	bne.n	8004464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d107      	bne.n	8004464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f902 	bl	8004668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d107      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f838 	bl	8004500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0220 	mvn.w	r2, #32
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8cc 	bl	8004654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a40      	ldr	r2, [pc, #256]	; (8004628 <TIM_Base_SetConfig+0x114>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004532:	d00f      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a3d      	ldr	r2, [pc, #244]	; (800462c <TIM_Base_SetConfig+0x118>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00b      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a3c      	ldr	r2, [pc, #240]	; (8004630 <TIM_Base_SetConfig+0x11c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d007      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a3b      	ldr	r2, [pc, #236]	; (8004634 <TIM_Base_SetConfig+0x120>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3a      	ldr	r2, [pc, #232]	; (8004638 <TIM_Base_SetConfig+0x124>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d108      	bne.n	8004566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2f      	ldr	r2, [pc, #188]	; (8004628 <TIM_Base_SetConfig+0x114>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d02b      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004574:	d027      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a2c      	ldr	r2, [pc, #176]	; (800462c <TIM_Base_SetConfig+0x118>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d023      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2b      	ldr	r2, [pc, #172]	; (8004630 <TIM_Base_SetConfig+0x11c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01f      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2a      	ldr	r2, [pc, #168]	; (8004634 <TIM_Base_SetConfig+0x120>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01b      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a29      	ldr	r2, [pc, #164]	; (8004638 <TIM_Base_SetConfig+0x124>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d017      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a28      	ldr	r2, [pc, #160]	; (800463c <TIM_Base_SetConfig+0x128>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a27      	ldr	r2, [pc, #156]	; (8004640 <TIM_Base_SetConfig+0x12c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a26      	ldr	r2, [pc, #152]	; (8004644 <TIM_Base_SetConfig+0x130>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a25      	ldr	r2, [pc, #148]	; (8004648 <TIM_Base_SetConfig+0x134>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a24      	ldr	r2, [pc, #144]	; (800464c <TIM_Base_SetConfig+0x138>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a23      	ldr	r2, [pc, #140]	; (8004650 <TIM_Base_SetConfig+0x13c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <TIM_Base_SetConfig+0x114>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <TIM_Base_SetConfig+0xf8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a0c      	ldr	r2, [pc, #48]	; (8004638 <TIM_Base_SetConfig+0x124>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d103      	bne.n	8004614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	615a      	str	r2, [r3, #20]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40010400 	.word	0x40010400
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800
 8004648:	40001800 	.word	0x40001800
 800464c:	40001c00 	.word	0x40001c00
 8004650:	40002000 	.word	0x40002000

08004654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e03f      	b.n	800470e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fa4c 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2224      	movs	r2, #36	; 0x24
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f829 	bl	8004718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695a      	ldr	r2, [r3, #20]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800471c:	b0c0      	sub	sp, #256	; 0x100
 800471e:	af00      	add	r7, sp, #0
 8004720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	68d9      	ldr	r1, [r3, #12]
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	ea40 0301 	orr.w	r3, r0, r1
 8004740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	431a      	orrs	r2, r3
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	431a      	orrs	r2, r3
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004770:	f021 010c 	bic.w	r1, r1, #12
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800477e:	430b      	orrs	r3, r1
 8004780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	6999      	ldr	r1, [r3, #24]
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	ea40 0301 	orr.w	r3, r0, r1
 800479e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b8f      	ldr	r3, [pc, #572]	; (80049e4 <UART_SetConfig+0x2cc>)
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d005      	beq.n	80047b8 <UART_SetConfig+0xa0>
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b8d      	ldr	r3, [pc, #564]	; (80049e8 <UART_SetConfig+0x2d0>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d104      	bne.n	80047c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7ff fbec 	bl	8003f94 <HAL_RCC_GetPCLK2Freq>
 80047bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047c0:	e003      	b.n	80047ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047c2:	f7ff fbd3 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 80047c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	f040 810c 	bne.w	80049f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047ea:	4622      	mov	r2, r4
 80047ec:	462b      	mov	r3, r5
 80047ee:	1891      	adds	r1, r2, r2
 80047f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047f2:	415b      	adcs	r3, r3
 80047f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047fa:	4621      	mov	r1, r4
 80047fc:	eb12 0801 	adds.w	r8, r2, r1
 8004800:	4629      	mov	r1, r5
 8004802:	eb43 0901 	adc.w	r9, r3, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	4623      	mov	r3, r4
 8004820:	eb18 0303 	adds.w	r3, r8, r3
 8004824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004828:	462b      	mov	r3, r5
 800482a:	eb49 0303 	adc.w	r3, r9, r3
 800482e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800483e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004846:	460b      	mov	r3, r1
 8004848:	18db      	adds	r3, r3, r3
 800484a:	653b      	str	r3, [r7, #80]	; 0x50
 800484c:	4613      	mov	r3, r2
 800484e:	eb42 0303 	adc.w	r3, r2, r3
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
 8004854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800485c:	f7fb fd30 	bl	80002c0 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4b61      	ldr	r3, [pc, #388]	; (80049ec <UART_SetConfig+0x2d4>)
 8004866:	fba3 2302 	umull	r2, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	011c      	lsls	r4, r3, #4
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800487c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	64b9      	str	r1, [r7, #72]	; 0x48
 8004888:	415b      	adcs	r3, r3
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800488c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004890:	4641      	mov	r1, r8
 8004892:	eb12 0a01 	adds.w	sl, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb43 0b01 	adc.w	fp, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048b0:	4692      	mov	sl, r2
 80048b2:	469b      	mov	fp, r3
 80048b4:	4643      	mov	r3, r8
 80048b6:	eb1a 0303 	adds.w	r3, sl, r3
 80048ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048be:	464b      	mov	r3, r9
 80048c0:	eb4b 0303 	adc.w	r3, fp, r3
 80048c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048dc:	460b      	mov	r3, r1
 80048de:	18db      	adds	r3, r3, r3
 80048e0:	643b      	str	r3, [r7, #64]	; 0x40
 80048e2:	4613      	mov	r3, r2
 80048e4:	eb42 0303 	adc.w	r3, r2, r3
 80048e8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048f2:	f7fb fce5 	bl	80002c0 <__aeabi_uldivmod>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <UART_SetConfig+0x2d4>)
 80048fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	2264      	movs	r2, #100	; 0x64
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	1acb      	subs	r3, r1, r3
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <UART_SetConfig+0x2d4>)
 8004914:	fba3 2302 	umull	r2, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004920:	441c      	add	r4, r3
 8004922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004926:	2200      	movs	r2, #0
 8004928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800492c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	1891      	adds	r1, r2, r2
 800493a:	63b9      	str	r1, [r7, #56]	; 0x38
 800493c:	415b      	adcs	r3, r3
 800493e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004944:	4641      	mov	r1, r8
 8004946:	1851      	adds	r1, r2, r1
 8004948:	6339      	str	r1, [r7, #48]	; 0x30
 800494a:	4649      	mov	r1, r9
 800494c:	414b      	adcs	r3, r1
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800495c:	4659      	mov	r1, fp
 800495e:	00cb      	lsls	r3, r1, #3
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004966:	4651      	mov	r1, sl
 8004968:	00ca      	lsls	r2, r1, #3
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	4603      	mov	r3, r0
 8004970:	4642      	mov	r2, r8
 8004972:	189b      	adds	r3, r3, r2
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004978:	464b      	mov	r3, r9
 800497a:	460a      	mov	r2, r1
 800497c:	eb42 0303 	adc.w	r3, r2, r3
 8004980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004998:	460b      	mov	r3, r1
 800499a:	18db      	adds	r3, r3, r3
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
 800499e:	4613      	mov	r3, r2
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049ae:	f7fb fc87 	bl	80002c0 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <UART_SetConfig+0x2d4>)
 80049b8:	fba3 1302 	umull	r1, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	2164      	movs	r1, #100	; 0x64
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	3332      	adds	r3, #50	; 0x32
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <UART_SetConfig+0x2d4>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f003 0207 	and.w	r2, r3, #7
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4422      	add	r2, r4
 80049de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049e0:	e106      	b.n	8004bf0 <UART_SetConfig+0x4d8>
 80049e2:	bf00      	nop
 80049e4:	40011000 	.word	0x40011000
 80049e8:	40011400 	.word	0x40011400
 80049ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a02:	4642      	mov	r2, r8
 8004a04:	464b      	mov	r3, r9
 8004a06:	1891      	adds	r1, r2, r2
 8004a08:	6239      	str	r1, [r7, #32]
 8004a0a:	415b      	adcs	r3, r3
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a12:	4641      	mov	r1, r8
 8004a14:	1854      	adds	r4, r2, r1
 8004a16:	4649      	mov	r1, r9
 8004a18:	eb43 0501 	adc.w	r5, r3, r1
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	00eb      	lsls	r3, r5, #3
 8004a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2a:	00e2      	lsls	r2, r4, #3
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	461d      	mov	r5, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	18e3      	adds	r3, r4, r3
 8004a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a38:	464b      	mov	r3, r9
 8004a3a:	eb45 0303 	adc.w	r3, r5, r3
 8004a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a5e:	4629      	mov	r1, r5
 8004a60:	008b      	lsls	r3, r1, #2
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a68:	4621      	mov	r1, r4
 8004a6a:	008a      	lsls	r2, r1, #2
 8004a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a70:	f7fb fc26 	bl	80002c0 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	011c      	lsls	r4, r3, #4
 8004a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	1891      	adds	r1, r2, r2
 8004a9a:	61b9      	str	r1, [r7, #24]
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	1851      	adds	r1, r2, r1
 8004aa8:	6139      	str	r1, [r7, #16]
 8004aaa:	4649      	mov	r1, r9
 8004aac:	414b      	adcs	r3, r1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004abc:	4659      	mov	r1, fp
 8004abe:	00cb      	lsls	r3, r1, #3
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	00ca      	lsls	r2, r1, #3
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ad8:	464b      	mov	r3, r9
 8004ada:	460a      	mov	r2, r1
 8004adc:	eb42 0303 	adc.w	r3, r2, r3
 8004ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004afc:	4649      	mov	r1, r9
 8004afe:	008b      	lsls	r3, r1, #2
 8004b00:	4641      	mov	r1, r8
 8004b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b06:	4641      	mov	r1, r8
 8004b08:	008a      	lsls	r2, r1, #2
 8004b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b0e:	f7fb fbd7 	bl	80002c0 <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2264      	movs	r2, #100	; 0x64
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	1acb      	subs	r3, r1, r3
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	3332      	adds	r3, #50	; 0x32
 8004b2c:	4a33      	ldr	r2, [pc, #204]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b38:	441c      	add	r4, r3
 8004b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b3e:	2200      	movs	r2, #0
 8004b40:	673b      	str	r3, [r7, #112]	; 0x70
 8004b42:	677a      	str	r2, [r7, #116]	; 0x74
 8004b44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	1891      	adds	r1, r2, r2
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	415b      	adcs	r3, r3
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b58:	4641      	mov	r1, r8
 8004b5a:	1851      	adds	r1, r2, r1
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	4649      	mov	r1, r9
 8004b60:	414b      	adcs	r3, r1
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b70:	4659      	mov	r1, fp
 8004b72:	00cb      	lsls	r3, r1, #3
 8004b74:	4651      	mov	r1, sl
 8004b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7a:	4651      	mov	r1, sl
 8004b7c:	00ca      	lsls	r2, r1, #3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	4642      	mov	r2, r8
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	eb42 0303 	adc.w	r3, r2, r3
 8004b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b9e:	667a      	str	r2, [r7, #100]	; 0x64
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bac:	4649      	mov	r1, r9
 8004bae:	008b      	lsls	r3, r1, #2
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	008a      	lsls	r2, r1, #2
 8004bba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bbe:	f7fb fb7f 	bl	80002c0 <__aeabi_uldivmod>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	2164      	movs	r1, #100	; 0x64
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	3332      	adds	r3, #50	; 0x32
 8004bda:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <UART_SetConfig+0x4e4>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	f003 020f 	and.w	r2, r3, #15
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4422      	add	r2, r4
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfc:	51eb851f 	.word	0x51eb851f

08004c00 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004c00:	b5b0      	push	{r4, r5, r7, lr}
 8004c02:	b08c      	sub	sp, #48	; 0x30
 8004c04:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004c06:	2100      	movs	r1, #0
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f006 f963 	bl	800aed4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004c0e:	4b20      	ldr	r3, [pc, #128]	; (8004c90 <MX_LWIP_Init+0x90>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004c14:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <MX_LWIP_Init+0x94>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004c1a:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <MX_LWIP_Init+0x98>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004c20:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <MX_LWIP_Init+0x9c>)
 8004c22:	9302      	str	r3, [sp, #8]
 8004c24:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <MX_LWIP_Init+0xa0>)
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <MX_LWIP_Init+0x98>)
 8004c2e:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <MX_LWIP_Init+0x94>)
 8004c30:	4917      	ldr	r1, [pc, #92]	; (8004c90 <MX_LWIP_Init+0x90>)
 8004c32:	481c      	ldr	r0, [pc, #112]	; (8004ca4 <MX_LWIP_Init+0xa4>)
 8004c34:	f007 fd68 	bl	800c708 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c38:	481a      	ldr	r0, [pc, #104]	; (8004ca4 <MX_LWIP_Init+0xa4>)
 8004c3a:	f007 ff1f 	bl	800ca7c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004c3e:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <MX_LWIP_Init+0xa4>)
 8004c40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004c50:	4814      	ldr	r0, [pc, #80]	; (8004ca4 <MX_LWIP_Init+0xa4>)
 8004c52:	f007 ff23 	bl	800ca9c <netif_set_up>
 8004c56:	e002      	b.n	8004c5e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004c58:	4812      	ldr	r0, [pc, #72]	; (8004ca4 <MX_LWIP_Init+0xa4>)
 8004c5a:	f007 ff8b 	bl	800cb74 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004c5e:	4912      	ldr	r1, [pc, #72]	; (8004ca8 <MX_LWIP_Init+0xa8>)
 8004c60:	4810      	ldr	r0, [pc, #64]	; (8004ca4 <MX_LWIP_Init+0xa4>)
 8004c62:	f008 f821 	bl	800cca8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <MX_LWIP_Init+0xac>)
 8004c68:	1d3c      	adds	r4, r7, #4
 8004c6a:	461d      	mov	r5, r3
 8004c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004c78:	1d3b      	adds	r3, r7, #4
 8004c7a:	490a      	ldr	r1, [pc, #40]	; (8004ca4 <MX_LWIP_Init+0xa4>)
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fd23 	bl	80056c8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004c82:	4808      	ldr	r0, [pc, #32]	; (8004ca4 <MX_LWIP_Init+0xa4>)
 8004c84:	f010 f9f4 	bl	8015070 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004c88:	bf00      	nop
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c90:	20000584 	.word	0x20000584
 8004c94:	20000588 	.word	0x20000588
 8004c98:	2000058c 	.word	0x2000058c
 8004c9c:	0800ade5 	.word	0x0800ade5
 8004ca0:	08005151 	.word	0x08005151
 8004ca4:	2000054c 	.word	0x2000054c
 8004ca8:	08004cb1 	.word	0x08004cb1
 8004cac:	0801a768 	.word	0x0801a768

08004cb0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004ccc:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <HAL_ETH_RxCpltCallback+0x1c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fe75 	bl	80059c0 <osSemaphoreRelease>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	2000505c 	.word	0x2000505c

08004ce4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <HAL_ETH_TxCpltCallback+0x1c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fe65 	bl	80059c0 <osSemaphoreRelease>
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20005060 	.word	0x20005060

08004d04 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fd fd0d 	bl	800272c <HAL_ETH_GetDMAError>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d18:	2b80      	cmp	r3, #128	; 0x80
 8004d1a:	d104      	bne.n	8004d26 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <HAL_ETH_ErrorCallback+0x2c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fe4d 	bl	80059c0 <osSemaphoreRelease>
  }
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	2000505c 	.word	0x2000505c

08004d34 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004d34:	b5b0      	push	{r4, r5, r7, lr}
 8004d36:	b0a8      	sub	sp, #160	; 0xa0
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d52:	2264      	movs	r2, #100	; 0x64
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f014 fb25 	bl	80193a6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004d5c:	4b85      	ldr	r3, [pc, #532]	; (8004f74 <low_level_init+0x240>)
 8004d5e:	4a86      	ldr	r2, [pc, #536]	; (8004f78 <low_level_init+0x244>)
 8004d60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004d6e:	23e1      	movs	r3, #225	; 0xe1
 8004d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 8004d74:	23fe      	movs	r3, #254	; 0xfe
 8004d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 8004d7a:	23ec      	movs	r3, #236	; 0xec
 8004d7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x78;
 8004d80:	2378      	movs	r3, #120	; 0x78
 8004d82:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004d86:	4a7b      	ldr	r2, [pc, #492]	; (8004f74 <low_level_init+0x240>)
 8004d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d8c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004d8e:	4b79      	ldr	r3, [pc, #484]	; (8004f74 <low_level_init+0x240>)
 8004d90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d94:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004d96:	4b77      	ldr	r3, [pc, #476]	; (8004f74 <low_level_init+0x240>)
 8004d98:	4a78      	ldr	r2, [pc, #480]	; (8004f7c <low_level_init+0x248>)
 8004d9a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004d9c:	4b75      	ldr	r3, [pc, #468]	; (8004f74 <low_level_init+0x240>)
 8004d9e:	4a78      	ldr	r2, [pc, #480]	; (8004f80 <low_level_init+0x24c>)
 8004da0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004da2:	4b74      	ldr	r3, [pc, #464]	; (8004f74 <low_level_init+0x240>)
 8004da4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004da8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004daa:	4872      	ldr	r0, [pc, #456]	; (8004f74 <low_level_init+0x240>)
 8004dac:	f7fc fe80 	bl	8001ab0 <HAL_ETH_Init>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004db6:	2238      	movs	r2, #56	; 0x38
 8004db8:	2100      	movs	r1, #0
 8004dba:	4872      	ldr	r0, [pc, #456]	; (8004f84 <low_level_init+0x250>)
 8004dbc:	f014 faf3 	bl	80193a6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004dc0:	4b70      	ldr	r3, [pc, #448]	; (8004f84 <low_level_init+0x250>)
 8004dc2:	2221      	movs	r2, #33	; 0x21
 8004dc4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004dc6:	4b6f      	ldr	r3, [pc, #444]	; (8004f84 <low_level_init+0x250>)
 8004dc8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004dcc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004dce:	4b6d      	ldr	r3, [pc, #436]	; (8004f84 <low_level_init+0x250>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004dd4:	486c      	ldr	r0, [pc, #432]	; (8004f88 <low_level_init+0x254>)
 8004dd6:	f007 fb51 	bl	800c47c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2206      	movs	r2, #6
 8004dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004de2:	4b64      	ldr	r3, [pc, #400]	; (8004f74 <low_level_init+0x240>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004dee:	4b61      	ldr	r3, [pc, #388]	; (8004f74 <low_level_init+0x240>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	785a      	ldrb	r2, [r3, #1]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004dfa:	4b5e      	ldr	r3, [pc, #376]	; (8004f74 <low_level_init+0x240>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	789a      	ldrb	r2, [r3, #2]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004e06:	4b5b      	ldr	r3, [pc, #364]	; (8004f74 <low_level_init+0x240>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	78da      	ldrb	r2, [r3, #3]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004e12:	4b58      	ldr	r3, [pc, #352]	; (8004f74 <low_level_init+0x240>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	791a      	ldrb	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004e1e:	4b55      	ldr	r3, [pc, #340]	; (8004f74 <low_level_init+0x240>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	795a      	ldrb	r2, [r3, #5]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e30:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e38:	f043 030a 	orr.w	r3, r3, #10
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004e44:	2203      	movs	r2, #3
 8004e46:	2100      	movs	r1, #0
 8004e48:	2001      	movs	r0, #1
 8004e4a:	f001 f89d 	bl	8005f88 <xQueueGenericCreate>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4a4e      	ldr	r2, [pc, #312]	; (8004f8c <low_level_init+0x258>)
 8004e52:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004e54:	2203      	movs	r2, #3
 8004e56:	2100      	movs	r1, #0
 8004e58:	2001      	movs	r0, #1
 8004e5a:	f001 f895 	bl	8005f88 <xQueueGenericCreate>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4a4b      	ldr	r2, [pc, #300]	; (8004f90 <low_level_init+0x25c>)
 8004e62:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004e64:	4b4b      	ldr	r3, [pc, #300]	; (8004f94 <low_level_init+0x260>)
 8004e66:	f107 0408 	add.w	r4, r7, #8
 8004e6a:	461d      	mov	r5, r3
 8004e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004e78:	f107 0308 	add.w	r3, r7, #8
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fc22 	bl	80056c8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004e84:	4944      	ldr	r1, [pc, #272]	; (8004f98 <low_level_init+0x264>)
 8004e86:	4845      	ldr	r0, [pc, #276]	; (8004f9c <low_level_init+0x268>)
 8004e88:	f7fc fb69 	bl	800155e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004e8c:	4843      	ldr	r0, [pc, #268]	; (8004f9c <low_level_init+0x268>)
 8004e8e:	f7fc fb98 	bl	80015c2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004e92:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d165      	bne.n	8004f66 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e9a:	4840      	ldr	r0, [pc, #256]	; (8004f9c <low_level_init+0x268>)
 8004e9c:	f7fc fc39 	bl	8001712 <LAN8742_GetLinkState>
 8004ea0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	dc06      	bgt.n	8004eba <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f007 fecb 	bl	800cc48 <netif_set_link_down>
      netif_set_down(netif);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f007 fe5e 	bl	800cb74 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004eb8:	e057      	b.n	8004f6a <low_level_init+0x236>
      switch (PHYLinkState)
 8004eba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ebe:	3b02      	subs	r3, #2
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d82b      	bhi.n	8004f1c <low_level_init+0x1e8>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <low_level_init+0x198>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004edd 	.word	0x08004edd
 8004ed0:	08004eef 	.word	0x08004eef
 8004ed4:	08004eff 	.word	0x08004eff
 8004ed8:	08004f0f 	.word	0x08004f0f
        duplex = ETH_FULLDUPLEX_MODE;
 8004edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004ee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004eec:	e01f      	b.n	8004f2e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004ef4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004efc:	e017      	b.n	8004f2e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004f06:	2300      	movs	r3, #0
 8004f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004f0c:	e00f      	b.n	8004f2e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004f1a:	e008      	b.n	8004f2e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004f24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004f2c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f32:	4619      	mov	r1, r3
 8004f34:	480f      	ldr	r0, [pc, #60]	; (8004f74 <low_level_init+0x240>)
 8004f36:	f7fd fa9f 	bl	8002478 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004f3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f3e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f44:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4809      	ldr	r0, [pc, #36]	; (8004f74 <low_level_init+0x240>)
 8004f4e:	f7fd fb7d 	bl	800264c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004f52:	4808      	ldr	r0, [pc, #32]	; (8004f74 <low_level_init+0x240>)
 8004f54:	f7fc fe2a 	bl	8001bac <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f007 fd9f 	bl	800ca9c <netif_set_up>
    netif_set_link_up(netif);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f007 fe3a 	bl	800cbd8 <netif_set_link_up>
}
 8004f64:	e001      	b.n	8004f6a <low_level_init+0x236>
    Error_Handler();
 8004f66:	f7fb fd4f 	bl	8000a08 <Error_Handler>
}
 8004f6a:	bf00      	nop
 8004f6c:	37a0      	adds	r7, #160	; 0xa0
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bdb0      	pop	{r4, r5, r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20005064 	.word	0x20005064
 8004f78:	40028000 	.word	0x40028000
 8004f7c:	20004fbc 	.word	0x20004fbc
 8004f80:	20004f1c 	.word	0x20004f1c
 8004f84:	20005114 	.word	0x20005114
 8004f88:	0801e2ac 	.word	0x0801e2ac
 8004f8c:	2000505c 	.word	0x2000505c
 8004f90:	20005060 	.word	0x20005060
 8004f94:	0801a78c 	.word	0x0801a78c
 8004f98:	2000000c 	.word	0x2000000c
 8004f9c:	2000514c 	.word	0x2000514c

08004fa0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b092      	sub	sp, #72	; 0x48
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004fb8:	f107 030c 	add.w	r3, r7, #12
 8004fbc:	2230      	movs	r2, #48	; 0x30
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f014 f9f0 	bl	80193a6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004fc6:	f107 030c 	add.w	r3, r7, #12
 8004fca:	2230      	movs	r2, #48	; 0x30
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f014 f9e9 	bl	80193a6 <memset>

  for(q = p; q != NULL; q = q->next)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8004fd8:	e045      	b.n	8005066 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d902      	bls.n	8004fe6 <low_level_output+0x46>
      return ERR_IF;
 8004fe0:	f06f 030b 	mvn.w	r3, #11
 8004fe4:	e065      	b.n	80050b2 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	3348      	adds	r3, #72	; 0x48
 8004ff6:	443b      	add	r3, r7
 8004ff8:	3b3c      	subs	r3, #60	; 0x3c
 8004ffa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffe:	895b      	ldrh	r3, [r3, #10]
 8005000:	4619      	mov	r1, r3
 8005002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	3348      	adds	r3, #72	; 0x48
 800500e:	443b      	add	r3, r7
 8005010:	3b38      	subs	r3, #56	; 0x38
 8005012:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005016:	2b00      	cmp	r3, #0
 8005018:	d011      	beq.n	800503e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800501a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800501c:	1e5a      	subs	r2, r3, #1
 800501e:	f107 000c 	add.w	r0, r7, #12
 8005022:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005024:	460b      	mov	r3, r1
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	440b      	add	r3, r1
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	18c1      	adds	r1, r0, r3
 800502e:	4613      	mov	r3, r2
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	3348      	adds	r3, #72	; 0x48
 8005038:	443b      	add	r3, r7
 800503a:	3b34      	subs	r3, #52	; 0x34
 800503c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800503e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	3348      	adds	r3, #72	; 0x48
 8005052:	443b      	add	r3, r7
 8005054:	3b34      	subs	r3, #52	; 0x34
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
    }

    i++;
 800505a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505c:	3301      	adds	r3, #1
 800505e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	643b      	str	r3, [r7, #64]	; 0x40
 8005066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1b6      	bne.n	8004fda <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	891b      	ldrh	r3, [r3, #8]
 8005070:	461a      	mov	r2, r3
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <low_level_output+0x11c>)
 8005074:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005076:	4a11      	ldr	r2, [pc, #68]	; (80050bc <low_level_output+0x11c>)
 8005078:	f107 030c 	add.w	r3, r7, #12
 800507c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800507e:	4a0f      	ldr	r2, [pc, #60]	; (80050bc <low_level_output+0x11c>)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005084:	6838      	ldr	r0, [r7, #0]
 8005086:	f008 fa63 	bl	800d550 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800508a:	490c      	ldr	r1, [pc, #48]	; (80050bc <low_level_output+0x11c>)
 800508c:	480c      	ldr	r0, [pc, #48]	; (80050c0 <low_level_output+0x120>)
 800508e:	f7fc fe9a 	bl	8001dc6 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005092:	bf00      	nop
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <low_level_output+0x124>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f04f 31ff 	mov.w	r1, #4294967295
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fc41 	bl	8005924 <osSemaphoreWait>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f5      	bne.n	8005094 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80050a8:	4805      	ldr	r0, [pc, #20]	; (80050c0 <low_level_output+0x120>)
 80050aa:	f7fd f81f 	bl	80020ec <HAL_ETH_ReleaseTxPacket>

  return errval;
 80050ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3748      	adds	r7, #72	; 0x48
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20005114 	.word	0x20005114
 80050c0:	20005064 	.word	0x20005064
 80050c4:	20005060 	.word	0x20005060

080050c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80050d4:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <low_level_input+0x2c>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d105      	bne.n	80050e8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80050dc:	f107 030c 	add.w	r3, r7, #12
 80050e0:	4619      	mov	r1, r3
 80050e2:	4805      	ldr	r0, [pc, #20]	; (80050f8 <low_level_input+0x30>)
 80050e4:	f7fc fecb 	bl	8001e7e <HAL_ETH_ReadData>
  }

  return p;
 80050e8:	68fb      	ldr	r3, [r7, #12]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20004f18 	.word	0x20004f18
 80050f8:	20005064 	.word	0x20005064

080050fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800510c:	4b0f      	ldr	r3, [pc, #60]	; (800514c <ethernetif_input+0x50>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f04f 31ff 	mov.w	r1, #4294967295
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fc05 	bl	8005924 <osSemaphoreWait>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f5      	bne.n	800510c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005120:	68b8      	ldr	r0, [r7, #8]
 8005122:	f7ff ffd1 	bl	80050c8 <low_level_input>
 8005126:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	4798      	blx	r3
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f008 f960 	bl	800d404 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1ea      	bne.n	8005120 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800514a:	e7df      	b.n	800510c <ethernetif_input+0x10>
 800514c:	2000505c 	.word	0x2000505c

08005150 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <ethernetif_init+0x1c>
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <ethernetif_init+0x48>)
 8005160:	f240 12df 	movw	r2, #479	; 0x1df
 8005164:	490d      	ldr	r1, [pc, #52]	; (800519c <ethernetif_init+0x4c>)
 8005166:	480e      	ldr	r0, [pc, #56]	; (80051a0 <ethernetif_init+0x50>)
 8005168:	f014 f87e 	bl	8019268 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2273      	movs	r2, #115	; 0x73
 8005170:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2274      	movs	r2, #116	; 0x74
 8005178:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <ethernetif_init+0x54>)
 8005180:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <ethernetif_init+0x58>)
 8005186:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fdd3 	bl	8004d34 <low_level_init>

  return ERR_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	0801a7a8 	.word	0x0801a7a8
 800519c:	0801a7c4 	.word	0x0801a7c4
 80051a0:	0801a7d4 	.word	0x0801a7d4
 80051a4:	08016f3d 	.word	0x08016f3d
 80051a8:	08004fa1 	.word	0x08004fa1

080051ac <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80051b8:	68f9      	ldr	r1, [r7, #12]
 80051ba:	4809      	ldr	r0, [pc, #36]	; (80051e0 <pbuf_free_custom+0x34>)
 80051bc:	f007 fa4e 	bl	800c65c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <pbuf_free_custom+0x38>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <pbuf_free_custom+0x38>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <pbuf_free_custom+0x3c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fbf4 	bl	80059c0 <osSemaphoreRelease>
  }
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	0801e2ac 	.word	0x0801e2ac
 80051e4:	20004f18 	.word	0x20004f18
 80051e8:	2000505c 	.word	0x2000505c

080051ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80051f0:	f7fc fb4c 	bl	800188c <HAL_GetTick>
 80051f4:	4603      	mov	r3, r0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08e      	sub	sp, #56	; 0x38
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a59      	ldr	r2, [pc, #356]	; (8005380 <HAL_ETH_MspInit+0x184>)
 800521a:	4293      	cmp	r3, r2
 800521c:	f040 80ac 	bne.w	8005378 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005220:	2300      	movs	r3, #0
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	4b57      	ldr	r3, [pc, #348]	; (8005384 <HAL_ETH_MspInit+0x188>)
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	4a56      	ldr	r2, [pc, #344]	; (8005384 <HAL_ETH_MspInit+0x188>)
 800522a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800522e:	6313      	str	r3, [r2, #48]	; 0x30
 8005230:	4b54      	ldr	r3, [pc, #336]	; (8005384 <HAL_ETH_MspInit+0x188>)
 8005232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	623b      	str	r3, [r7, #32]
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	2300      	movs	r3, #0
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	4b50      	ldr	r3, [pc, #320]	; (8005384 <HAL_ETH_MspInit+0x188>)
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	4a4f      	ldr	r2, [pc, #316]	; (8005384 <HAL_ETH_MspInit+0x188>)
 8005246:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800524a:	6313      	str	r3, [r2, #48]	; 0x30
 800524c:	4b4d      	ldr	r3, [pc, #308]	; (8005384 <HAL_ETH_MspInit+0x188>)
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	2300      	movs	r3, #0
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	4b49      	ldr	r3, [pc, #292]	; (8005384 <HAL_ETH_MspInit+0x188>)
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	4a48      	ldr	r2, [pc, #288]	; (8005384 <HAL_ETH_MspInit+0x188>)
 8005262:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005266:	6313      	str	r3, [r2, #48]	; 0x30
 8005268:	4b46      	ldr	r3, [pc, #280]	; (8005384 <HAL_ETH_MspInit+0x188>)
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	4b42      	ldr	r3, [pc, #264]	; (8005384 <HAL_ETH_MspInit+0x188>)
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	4a41      	ldr	r2, [pc, #260]	; (8005384 <HAL_ETH_MspInit+0x188>)
 800527e:	f043 0304 	orr.w	r3, r3, #4
 8005282:	6313      	str	r3, [r2, #48]	; 0x30
 8005284:	4b3f      	ldr	r3, [pc, #252]	; (8005384 <HAL_ETH_MspInit+0x188>)
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005290:	2300      	movs	r3, #0
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	4b3b      	ldr	r3, [pc, #236]	; (8005384 <HAL_ETH_MspInit+0x188>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	4a3a      	ldr	r2, [pc, #232]	; (8005384 <HAL_ETH_MspInit+0x188>)
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	6313      	str	r3, [r2, #48]	; 0x30
 80052a0:	4b38      	ldr	r3, [pc, #224]	; (8005384 <HAL_ETH_MspInit+0x188>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	4b34      	ldr	r3, [pc, #208]	; (8005384 <HAL_ETH_MspInit+0x188>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	4a33      	ldr	r2, [pc, #204]	; (8005384 <HAL_ETH_MspInit+0x188>)
 80052b6:	f043 0302 	orr.w	r3, r3, #2
 80052ba:	6313      	str	r3, [r2, #48]	; 0x30
 80052bc:	4b31      	ldr	r3, [pc, #196]	; (8005384 <HAL_ETH_MspInit+0x188>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	4b2d      	ldr	r3, [pc, #180]	; (8005384 <HAL_ETH_MspInit+0x188>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	4a2c      	ldr	r2, [pc, #176]	; (8005384 <HAL_ETH_MspInit+0x188>)
 80052d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d6:	6313      	str	r3, [r2, #48]	; 0x30
 80052d8:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <HAL_ETH_MspInit+0x188>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80052e4:	2332      	movs	r3, #50	; 0x32
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e8:	2302      	movs	r3, #2
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052f0:	2303      	movs	r3, #3
 80052f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052f4:	230b      	movs	r3, #11
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052fc:	4619      	mov	r1, r3
 80052fe:	4822      	ldr	r0, [pc, #136]	; (8005388 <HAL_ETH_MspInit+0x18c>)
 8005300:	f7fd fe26 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005304:	2386      	movs	r3, #134	; 0x86
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005308:	2302      	movs	r3, #2
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530c:	2300      	movs	r3, #0
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005310:	2303      	movs	r3, #3
 8005312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005314:	230b      	movs	r3, #11
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800531c:	4619      	mov	r1, r3
 800531e:	481b      	ldr	r0, [pc, #108]	; (800538c <HAL_ETH_MspInit+0x190>)
 8005320:	f7fd fe16 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800532a:	2302      	movs	r3, #2
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532e:	2300      	movs	r3, #0
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005332:	2303      	movs	r3, #3
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005336:	230b      	movs	r3, #11
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800533a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800533e:	4619      	mov	r1, r3
 8005340:	4813      	ldr	r0, [pc, #76]	; (8005390 <HAL_ETH_MspInit+0x194>)
 8005342:	f7fd fe05 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005346:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534c:	2302      	movs	r3, #2
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005354:	2303      	movs	r3, #3
 8005356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005358:	230b      	movs	r3, #11
 800535a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800535c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005360:	4619      	mov	r1, r3
 8005362:	480c      	ldr	r0, [pc, #48]	; (8005394 <HAL_ETH_MspInit+0x198>)
 8005364:	f7fd fdf4 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005368:	2200      	movs	r2, #0
 800536a:	2105      	movs	r1, #5
 800536c:	203d      	movs	r0, #61	; 0x3d
 800536e:	f7fc fb75 	bl	8001a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005372:	203d      	movs	r0, #61	; 0x3d
 8005374:	f7fc fb8e 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005378:	bf00      	nop
 800537a:	3738      	adds	r7, #56	; 0x38
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40028000 	.word	0x40028000
 8005384:	40023800 	.word	0x40023800
 8005388:	40020800 	.word	0x40020800
 800538c:	40020000 	.word	0x40020000
 8005390:	40020400 	.word	0x40020400
 8005394:	40021800 	.word	0x40021800

08005398 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800539c:	4802      	ldr	r0, [pc, #8]	; (80053a8 <ETH_PHY_IO_Init+0x10>)
 800539e:	f7fd f96f 	bl	8002680 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20005064 	.word	0x20005064

080053ac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return 0;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	68f9      	ldr	r1, [r7, #12]
 80053ce:	4807      	ldr	r0, [pc, #28]	; (80053ec <ETH_PHY_IO_ReadReg+0x30>)
 80053d0:	f7fc ffbe 	bl	8002350 <HAL_ETH_ReadPHYRegister>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	e000      	b.n	80053e2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20005064 	.word	0x20005064

080053f0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	68f9      	ldr	r1, [r7, #12]
 8005402:	4807      	ldr	r0, [pc, #28]	; (8005420 <ETH_PHY_IO_WriteReg+0x30>)
 8005404:	f7fc ffef 	bl	80023e6 <HAL_ETH_WritePHYRegister>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800540e:	f04f 33ff 	mov.w	r3, #4294967295
 8005412:	e000      	b.n	8005416 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20005064 	.word	0x20005064

08005424 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005428:	f7fc fa30 	bl	800188c <HAL_GetTick>
 800542c:	4603      	mov	r3, r0
}
 800542e:	4618      	mov	r0, r3
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b0a0      	sub	sp, #128	; 0x80
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800543c:	f107 0308 	add.w	r3, r7, #8
 8005440:	2264      	movs	r2, #100	; 0x64
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f013 ffae 	bl	80193a6 <memset>
  int32_t PHYLinkState = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005452:	2300      	movs	r3, #0
 8005454:	67bb      	str	r3, [r7, #120]	; 0x78
 8005456:	2300      	movs	r3, #0
 8005458:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800545e:	483a      	ldr	r0, [pc, #232]	; (8005548 <ethernet_link_thread+0x114>)
 8005460:	f7fc f957 	bl	8001712 <LAN8742_GetLinkState>
 8005464:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005468:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800546c:	089b      	lsrs	r3, r3, #2
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00c      	beq.n	8005492 <ethernet_link_thread+0x5e>
 8005478:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800547a:	2b01      	cmp	r3, #1
 800547c:	dc09      	bgt.n	8005492 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800547e:	4833      	ldr	r0, [pc, #204]	; (800554c <ethernet_link_thread+0x118>)
 8005480:	f7fc fc22 	bl	8001cc8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005484:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005486:	f007 fb75 	bl	800cb74 <netif_set_down>
    netif_set_link_down(netif);
 800548a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800548c:	f007 fbdc 	bl	800cc48 <netif_set_link_down>
 8005490:	e055      	b.n	800553e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005494:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d14e      	bne.n	800553e <ethernet_link_thread+0x10a>
 80054a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	dd4b      	ble.n	800553e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80054a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a8:	3b02      	subs	r3, #2
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d82a      	bhi.n	8005504 <ethernet_link_thread+0xd0>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <ethernet_link_thread+0x80>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054c5 	.word	0x080054c5
 80054b8:	080054d7 	.word	0x080054d7
 80054bc:	080054e7 	.word	0x080054e7
 80054c0:	080054f7 	.word	0x080054f7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80054c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054c8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054d0:	2301      	movs	r3, #1
 80054d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054d4:	e017      	b.n	8005506 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054e0:	2301      	movs	r3, #1
 80054e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054e4:	e00f      	b.n	8005506 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80054e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054ea:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80054ec:	2300      	movs	r3, #0
 80054ee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054f0:	2301      	movs	r3, #1
 80054f2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054f4:	e007      	b.n	8005506 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80054fa:	2300      	movs	r3, #0
 80054fc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054fe:	2301      	movs	r3, #1
 8005500:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005502:	e000      	b.n	8005506 <ethernet_link_thread+0xd2>
    default:
      break;
 8005504:	bf00      	nop
    }

    if(linkchanged)
 8005506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d018      	beq.n	800553e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800550c:	f107 0308 	add.w	r3, r7, #8
 8005510:	4619      	mov	r1, r3
 8005512:	480e      	ldr	r0, [pc, #56]	; (800554c <ethernet_link_thread+0x118>)
 8005514:	f7fc ffb0 	bl	8002478 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800551c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005520:	f107 0308 	add.w	r3, r7, #8
 8005524:	4619      	mov	r1, r3
 8005526:	4809      	ldr	r0, [pc, #36]	; (800554c <ethernet_link_thread+0x118>)
 8005528:	f7fd f890 	bl	800264c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800552c:	4807      	ldr	r0, [pc, #28]	; (800554c <ethernet_link_thread+0x118>)
 800552e:	f7fc fb3d 	bl	8001bac <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005532:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005534:	f007 fab2 	bl	800ca9c <netif_set_up>
      netif_set_link_up(netif);
 8005538:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800553a:	f007 fb4d 	bl	800cbd8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800553e:	2064      	movs	r0, #100	; 0x64
 8005540:	f000 f90e 	bl	8005760 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005544:	e78b      	b.n	800545e <ethernet_link_thread+0x2a>
 8005546:	bf00      	nop
 8005548:	2000514c 	.word	0x2000514c
 800554c:	20005064 	.word	0x20005064

08005550 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af02      	add	r7, sp, #8
 8005556:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005558:	4812      	ldr	r0, [pc, #72]	; (80055a4 <HAL_ETH_RxAllocateCallback+0x54>)
 800555a:	f007 f80b 	bl	800c574 <memp_malloc_pool>
 800555e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d014      	beq.n	8005590 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f103 0220 	add.w	r2, r3, #32
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <HAL_ETH_RxAllocateCallback+0x58>)
 8005574:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800557e:	9201      	str	r2, [sp, #4]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2241      	movs	r2, #65	; 0x41
 8005586:	2100      	movs	r1, #0
 8005588:	2000      	movs	r0, #0
 800558a:	f007 fd81 	bl	800d090 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800558e:	e005      	b.n	800559c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_ETH_RxAllocateCallback+0x5c>)
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
}
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	0801e2ac 	.word	0x0801e2ac
 80055a8:	080051ad 	.word	0x080051ad
 80055ac:	20004f18 	.word	0x20004f18

080055b0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b089      	sub	sp, #36	; 0x24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3b20      	subs	r3, #32
 80055ce:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	2200      	movs	r2, #0
 80055da:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	887a      	ldrh	r2, [r7, #2]
 80055e0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e003      	b.n	80055fa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e009      	b.n	800561c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	891a      	ldrh	r2, [r3, #8]
 800560c:	887b      	ldrh	r3, [r7, #2]
 800560e:	4413      	add	r3, r2
 8005610:	b29a      	uxth	r2, r3
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f2      	bne.n	8005608 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005622:	bf00      	nop
 8005624:	bf00      	nop
 8005626:	3724      	adds	r7, #36	; 0x24
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f007 fee3 	bl	800d404 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	4603      	mov	r3, r0
 800564e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005658:	2b84      	cmp	r3, #132	; 0x84
 800565a:	d005      	beq.n	8005668 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800565c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	3303      	adds	r3, #3
 8005666:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800567c:	f3ef 8305 	mrs	r3, IPSR
 8005680:	607b      	str	r3, [r7, #4]
  return(result);
 8005682:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005684:	2b00      	cmp	r3, #0
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
}
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800569e:	f001 fd3b 	bl	8007118 <vTaskStartScheduler>
  
  return osOK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80056ac:	f7ff ffe3 	bl	8005676 <inHandlerMode>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80056b6:	f001 fe53 	bl	8007360 <xTaskGetTickCountFromISR>
 80056ba:	4603      	mov	r3, r0
 80056bc:	e002      	b.n	80056c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80056be:	f001 fe3f 	bl	8007340 <xTaskGetTickCount>
 80056c2:	4603      	mov	r3, r0
  }
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80056c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ca:	b089      	sub	sp, #36	; 0x24
 80056cc:	af04      	add	r7, sp, #16
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d020      	beq.n	800571c <osThreadCreate+0x54>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01c      	beq.n	800571c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685c      	ldr	r4, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691e      	ldr	r6, [r3, #16]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff ffa6 	bl	8005646 <makeFreeRtosPriority>
 80056fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005704:	9202      	str	r2, [sp, #8]
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	9100      	str	r1, [sp, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	4632      	mov	r2, r6
 800570e:	4629      	mov	r1, r5
 8005710:	4620      	mov	r0, r4
 8005712:	f001 fb23 	bl	8006d5c <xTaskCreateStatic>
 8005716:	4603      	mov	r3, r0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	e01c      	b.n	8005756 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685c      	ldr	r4, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005728:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff ff88 	bl	8005646 <makeFreeRtosPriority>
 8005736:	4602      	mov	r2, r0
 8005738:	f107 030c 	add.w	r3, r7, #12
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	9200      	str	r2, [sp, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	4632      	mov	r2, r6
 8005744:	4629      	mov	r1, r5
 8005746:	4620      	mov	r0, r4
 8005748:	f001 fb65 	bl	8006e16 <xTaskCreate>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d001      	beq.n	8005756 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	e000      	b.n	8005758 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005756:	68fb      	ldr	r3, [r7, #12]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005760 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <osDelay+0x16>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	e000      	b.n	8005778 <osDelay+0x18>
 8005776:	2301      	movs	r3, #1
 8005778:	4618      	mov	r0, r3
 800577a:	f001 fc99 	bl	80070b0 <vTaskDelay>
  
  return osOK;
 800577e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4619      	mov	r1, r3
 800579e:	2001      	movs	r0, #1
 80057a0:	f000 fc7d 	bl	800609e <xQueueCreateMutexStatic>
 80057a4:	4603      	mov	r3, r0
 80057a6:	e003      	b.n	80057b0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80057a8:	2001      	movs	r0, #1
 80057aa:	f000 fc60 	bl	800606e <xQueueCreateMutex>
 80057ae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80057c2:	2300      	movs	r3, #0
 80057c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <osMutexWait+0x18>
    return osErrorParameter;
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	e03a      	b.n	8005846 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d103      	bne.n	80057e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	e009      	b.n	80057f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d006      	beq.n	80057f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <osMutexWait+0x40>
      ticks = 1;
 80057f4:	2301      	movs	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80057f8:	f7ff ff3d 	bl	8005676 <inHandlerMode>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d017      	beq.n	8005832 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005802:	f107 0308 	add.w	r3, r7, #8
 8005806:	461a      	mov	r2, r3
 8005808:	2100      	movs	r1, #0
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 f874 	bl	80068f8 <xQueueReceiveFromISR>
 8005810:	4603      	mov	r3, r0
 8005812:	2b01      	cmp	r3, #1
 8005814:	d001      	beq.n	800581a <osMutexWait+0x62>
      return osErrorOS;
 8005816:	23ff      	movs	r3, #255	; 0xff
 8005818:	e015      	b.n	8005846 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d011      	beq.n	8005844 <osMutexWait+0x8c>
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <osMutexWait+0x98>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	e008      	b.n	8005844 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005832:	68f9      	ldr	r1, [r7, #12]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 ff53 	bl	80066e0 <xQueueSemaphoreTake>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <osMutexWait+0x8c>
    return osErrorOS;
 8005840:	23ff      	movs	r3, #255	; 0xff
 8005842:	e000      	b.n	8005846 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005864:	f7ff ff07 	bl	8005676 <inHandlerMode>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d016      	beq.n	800589c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fdc6 	bl	8006406 <xQueueGiveFromISR>
 800587a:	4603      	mov	r3, r0
 800587c:	2b01      	cmp	r3, #1
 800587e:	d001      	beq.n	8005884 <osMutexRelease+0x30>
      return osErrorOS;
 8005880:	23ff      	movs	r3, #255	; 0xff
 8005882:	e017      	b.n	80058b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d013      	beq.n	80058b2 <osMutexRelease+0x5e>
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <osMutexRelease+0x68>)
 800588c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	e00a      	b.n	80058b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800589c:	2300      	movs	r3, #0
 800589e:	2200      	movs	r2, #0
 80058a0:	2100      	movs	r1, #0
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fc16 	bl	80060d4 <xQueueGenericSend>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d001      	beq.n	80058b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80058ae:	23ff      	movs	r3, #255	; 0xff
 80058b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00f      	beq.n	80058f2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d10a      	bne.n	80058ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2203      	movs	r2, #3
 80058de:	9200      	str	r2, [sp, #0]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2100      	movs	r1, #0
 80058e4:	2001      	movs	r0, #1
 80058e6:	f000 fad7 	bl	8005e98 <xQueueGenericCreateStatic>
 80058ea:	4603      	mov	r3, r0
 80058ec:	e016      	b.n	800591c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e014      	b.n	800591c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d110      	bne.n	800591a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80058f8:	2203      	movs	r2, #3
 80058fa:	2100      	movs	r1, #0
 80058fc:	2001      	movs	r0, #1
 80058fe:	f000 fb43 	bl	8005f88 <xQueueGenericCreate>
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <osSemaphoreCreate+0x56>
 800590a:	2300      	movs	r3, #0
 800590c:	2200      	movs	r2, #0
 800590e:	2100      	movs	r1, #0
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fbdf 	bl	80060d4 <xQueueGenericSend>
      return sema;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	e000      	b.n	800591c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800591a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005938:	2380      	movs	r3, #128	; 0x80
 800593a:	e03a      	b.n	80059b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d103      	bne.n	8005950 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e009      	b.n	8005964 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d006      	beq.n	8005964 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <osSemaphoreWait+0x40>
      ticks = 1;
 8005960:	2301      	movs	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005964:	f7ff fe87 	bl	8005676 <inHandlerMode>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d017      	beq.n	800599e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800596e:	f107 0308 	add.w	r3, r7, #8
 8005972:	461a      	mov	r2, r3
 8005974:	2100      	movs	r1, #0
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 ffbe 	bl	80068f8 <xQueueReceiveFromISR>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d001      	beq.n	8005986 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005982:	23ff      	movs	r3, #255	; 0xff
 8005984:	e015      	b.n	80059b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d011      	beq.n	80059b0 <osSemaphoreWait+0x8c>
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <osSemaphoreWait+0x98>)
 800598e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	e008      	b.n	80059b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fe9d 	bl	80066e0 <xQueueSemaphoreTake>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d001      	beq.n	80059b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80059ac:	23ff      	movs	r3, #255	; 0xff
 80059ae:	e000      	b.n	80059b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80059d0:	f7ff fe51 	bl	8005676 <inHandlerMode>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d016      	beq.n	8005a08 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80059da:	f107 0308 	add.w	r3, r7, #8
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fd10 	bl	8006406 <xQueueGiveFromISR>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d001      	beq.n	80059f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80059ec:	23ff      	movs	r3, #255	; 0xff
 80059ee:	e017      	b.n	8005a20 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d013      	beq.n	8005a1e <osSemaphoreRelease+0x5e>
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <osSemaphoreRelease+0x68>)
 80059f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	e00a      	b.n	8005a1e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fb60 	bl	80060d4 <xQueueGenericSend>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d001      	beq.n	8005a1e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005a1a:	23ff      	movs	r3, #255	; 0xff
 8005a1c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005a34:	f7ff fe1f 	bl	8005676 <inHandlerMode>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005a3e:	2382      	movs	r3, #130	; 0x82
 8005a40:	e003      	b.n	8005a4a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 f814 	bl	8006a70 <vQueueDelete>

  return osOK; 
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005a52:	b590      	push	{r4, r7, lr}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af02      	add	r7, sp, #8
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d011      	beq.n	8005a88 <osMessageCreate+0x36>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00d      	beq.n	8005a88 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6818      	ldr	r0, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6859      	ldr	r1, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	2400      	movs	r4, #0
 8005a7e:	9400      	str	r4, [sp, #0]
 8005a80:	f000 fa0a 	bl	8005e98 <xQueueGenericCreateStatic>
 8005a84:	4603      	mov	r3, r0
 8005a86:	e008      	b.n	8005a9a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	4619      	mov	r1, r3
 8005a94:	f000 fa78 	bl	8005f88 <xQueueGenericCreate>
 8005a98:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd90      	pop	{r4, r7, pc}
	...

08005aa4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <osMessagePut+0x1e>
    ticks = 1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005ac2:	f7ff fdd8 	bl	8005676 <inHandlerMode>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d018      	beq.n	8005afe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005acc:	f107 0210 	add.w	r2, r7, #16
 8005ad0:	f107 0108 	add.w	r1, r7, #8
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fbfa 	bl	80062d0 <xQueueGenericSendFromISR>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d001      	beq.n	8005ae6 <osMessagePut+0x42>
      return osErrorOS;
 8005ae2:	23ff      	movs	r3, #255	; 0xff
 8005ae4:	e018      	b.n	8005b18 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d014      	beq.n	8005b16 <osMessagePut+0x72>
 8005aec:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <osMessagePut+0x7c>)
 8005aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	e00b      	b.n	8005b16 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005afe:	f107 0108 	add.w	r1, r7, #8
 8005b02:	2300      	movs	r3, #0
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fae4 	bl	80060d4 <xQueueGenericSend>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d001      	beq.n	8005b16 <osMessagePut+0x72>
      return osErrorOS;
 8005b12:	23ff      	movs	r3, #255	; 0xff
 8005b14:	e000      	b.n	8005b18 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b08b      	sub	sp, #44	; 0x2c
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	617b      	str	r3, [r7, #20]
    return event;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	461c      	mov	r4, r3
 8005b46:	f107 0314 	add.w	r3, r7, #20
 8005b4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b52:	e054      	b.n	8005bfe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d103      	bne.n	8005b6c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005b64:	f04f 33ff 	mov.w	r3, #4294967295
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6a:	e009      	b.n	8005b80 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <osMessageGet+0x5c>
      ticks = 1;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005b80:	f7ff fd79 	bl	8005676 <inHandlerMode>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01c      	beq.n	8005bc4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005b8a:	f107 0220 	add.w	r2, r7, #32
 8005b8e:	f107 0314 	add.w	r3, r7, #20
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	68b8      	ldr	r0, [r7, #8]
 8005b98:	f000 feae 	bl	80068f8 <xQueueReceiveFromISR>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d102      	bne.n	8005ba8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005ba2:	2310      	movs	r3, #16
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e001      	b.n	8005bac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01d      	beq.n	8005bee <osMessageGet+0xca>
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <osMessageGet+0xe4>)
 8005bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	e014      	b.n	8005bee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005bc4:	f107 0314 	add.w	r3, r7, #20
 8005bc8:	3304      	adds	r3, #4
 8005bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bcc:	4619      	mov	r1, r3
 8005bce:	68b8      	ldr	r0, [r7, #8]
 8005bd0:	f000 fca6 	bl	8006520 <xQueueReceive>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d102      	bne.n	8005be0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005bda:	2310      	movs	r3, #16
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	e006      	b.n	8005bee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <osMessageGet+0xc6>
 8005be6:	2300      	movs	r3, #0
 8005be8:	e000      	b.n	8005bec <osMessageGet+0xc8>
 8005bea:	2340      	movs	r3, #64	; 0x40
 8005bec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	461c      	mov	r4, r3
 8005bf2:	f107 0314 	add.w	r3, r7, #20
 8005bf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	372c      	adds	r7, #44	; 0x2c
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd90      	pop	{r4, r7, pc}
 8005c06:	bf00      	nop
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005c14:	f7ff fd2f 	bl	8005676 <inHandlerMode>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 ff08 	bl	8006a34 <uxQueueMessagesWaitingFromISR>
 8005c24:	4603      	mov	r3, r0
 8005c26:	e003      	b.n	8005c30 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fee5 	bl	80069f8 <uxQueueMessagesWaiting>
 8005c2e:	4603      	mov	r3, r0
  }
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005c40:	f7ff fd19 	bl	8005676 <inHandlerMode>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <osMessageDelete+0x16>
    return osErrorISR;
 8005c4a:	2382      	movs	r3, #130	; 0x82
 8005c4c:	e003      	b.n	8005c56 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 ff0e 	bl	8006a70 <vQueueDelete>

  return osOK; 
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f103 0208 	add.w	r2, r3, #8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f04f 32ff 	mov.w	r2, #4294967295
 8005c76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f103 0208 	add.w	r2, r3, #8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f103 0208 	add.w	r2, r3, #8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d103      	bne.n	8005d20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	e00c      	b.n	8005d3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3308      	adds	r3, #8
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e002      	b.n	8005d2e <vListInsert+0x2e>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d2f6      	bcs.n	8005d28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	601a      	str	r2, [r3, #0]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6892      	ldr	r2, [r2, #8]
 8005d88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6852      	ldr	r2, [r2, #4]
 8005d92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d103      	bne.n	8005da6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	1e5a      	subs	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005df2:	f002 f917 	bl	8008024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	441a      	add	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e22:	3b01      	subs	r3, #1
 8005e24:	68f9      	ldr	r1, [r7, #12]
 8005e26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	441a      	add	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	22ff      	movs	r2, #255	; 0xff
 8005e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d114      	bne.n	8005e72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01a      	beq.n	8005e86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3310      	adds	r3, #16
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 fbd3 	bl	8007600 <xTaskRemoveFromEventList>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d012      	beq.n	8005e86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e60:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <xQueueGenericReset+0xcc>)
 8005e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	e009      	b.n	8005e86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3310      	adds	r3, #16
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fef1 	bl	8005c5e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3324      	adds	r3, #36	; 0x24
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff feec 	bl	8005c5e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e86:	f002 f8fd 	bl	8008084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e8a:	2301      	movs	r3, #1
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	; 0x38
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <xQueueGenericCreateStatic+0x52>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <xQueueGenericCreateStatic+0x56>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueGenericCreateStatic+0x58>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	623b      	str	r3, [r7, #32]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <xQueueGenericCreateStatic+0x7e>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <xQueueGenericCreateStatic+0x82>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <xQueueGenericCreateStatic+0x84>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	61fb      	str	r3, [r7, #28]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f36:	2348      	movs	r3, #72	; 0x48
 8005f38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b48      	cmp	r3, #72	; 0x48
 8005f3e:	d00a      	beq.n	8005f56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61bb      	str	r3, [r7, #24]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f83f 	bl	8005ffc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3730      	adds	r7, #48	; 0x30
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	613b      	str	r3, [r7, #16]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	3348      	adds	r3, #72	; 0x48
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f002 f951 	bl	8008268 <pvPortMalloc>
 8005fc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d011      	beq.n	8005ff2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	3348      	adds	r3, #72	; 0x48
 8005fd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fe0:	79fa      	ldrb	r2, [r7, #7]
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f805 	bl	8005ffc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3720      	adds	r7, #32
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d103      	bne.n	8006018 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	e002      	b.n	800601e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800602a:	2101      	movs	r1, #1
 800602c:	69b8      	ldr	r0, [r7, #24]
 800602e:	f7ff fecb 	bl	8005dc8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800605a:	2300      	movs	r3, #0
 800605c:	2200      	movs	r2, #0
 800605e:	2100      	movs	r1, #0
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f837 	bl	80060d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	4603      	mov	r3, r0
 8006076:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006078:	2301      	movs	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	2300      	movs	r3, #0
 800607e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006080:	79fb      	ldrb	r3, [r7, #7]
 8006082:	461a      	mov	r2, r3
 8006084:	6939      	ldr	r1, [r7, #16]
 8006086:	6978      	ldr	r0, [r7, #20]
 8006088:	f7ff ff7e 	bl	8005f88 <xQueueGenericCreate>
 800608c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff ffd3 	bl	800603a <prvInitialiseMutex>

		return xNewQueue;
 8006094:	68fb      	ldr	r3, [r7, #12]
	}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b088      	sub	sp, #32
 80060a2:	af02      	add	r7, sp, #8
 80060a4:	4603      	mov	r3, r0
 80060a6:	6039      	str	r1, [r7, #0]
 80060a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060aa:	2301      	movs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	2300      	movs	r3, #0
 80060b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2200      	movs	r2, #0
 80060ba:	6939      	ldr	r1, [r7, #16]
 80060bc:	6978      	ldr	r0, [r7, #20]
 80060be:	f7ff feeb 	bl	8005e98 <xQueueGenericCreateStatic>
 80060c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff ffb8 	bl	800603a <prvInitialiseMutex>

		return xNewQueue;
 80060ca:	68fb      	ldr	r3, [r7, #12]
	}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08e      	sub	sp, #56	; 0x38
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060e2:	2300      	movs	r3, #0
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <xQueueGenericSend+0x32>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <xQueueGenericSend+0x40>
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <xQueueGenericSend+0x44>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <xQueueGenericSend+0x46>
 8006118:	2300      	movs	r3, #0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <xQueueGenericSend+0x60>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d103      	bne.n	8006142 <xQueueGenericSend+0x6e>
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <xQueueGenericSend+0x72>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <xQueueGenericSend+0x74>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xQueueGenericSend+0x8e>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	623b      	str	r3, [r7, #32]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006162:	f001 fc0d 	bl	8007980 <xTaskGetSchedulerState>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <xQueueGenericSend+0x9e>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <xQueueGenericSend+0xa2>
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <xQueueGenericSend+0xa4>
 8006176:	2300      	movs	r3, #0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <xQueueGenericSend+0xbe>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	61fb      	str	r3, [r7, #28]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006192:	f001 ff47 	bl	8008024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <xQueueGenericSend+0xd4>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d129      	bne.n	80061fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ae:	f000 fc9a 	bl	8006ae6 <prvCopyDataToQueue>
 80061b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d010      	beq.n	80061de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	3324      	adds	r3, #36	; 0x24
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 fa1d 	bl	8007600 <xTaskRemoveFromEventList>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d013      	beq.n	80061f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061cc:	4b3f      	ldr	r3, [pc, #252]	; (80062cc <xQueueGenericSend+0x1f8>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	e00a      	b.n	80061f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d007      	beq.n	80061f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061e4:	4b39      	ldr	r3, [pc, #228]	; (80062cc <xQueueGenericSend+0x1f8>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061f4:	f001 ff46 	bl	8008084 <vPortExitCritical>
				return pdPASS;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e063      	b.n	80062c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d103      	bne.n	800620a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006202:	f001 ff3f 	bl	8008084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006206:	2300      	movs	r3, #0
 8006208:	e05c      	b.n	80062c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800620a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620c:	2b00      	cmp	r3, #0
 800620e:	d106      	bne.n	800621e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006210:	f107 0314 	add.w	r3, r7, #20
 8006214:	4618      	mov	r0, r3
 8006216:	f001 fa55 	bl	80076c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800621a:	2301      	movs	r3, #1
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800621e:	f001 ff31 	bl	8008084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006222:	f000 ffe3 	bl	80071ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006226:	f001 fefd 	bl	8008024 <vPortEnterCritical>
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006230:	b25b      	sxtb	r3, r3
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006236:	d103      	bne.n	8006240 <xQueueGenericSend+0x16c>
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006246:	b25b      	sxtb	r3, r3
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d103      	bne.n	8006256 <xQueueGenericSend+0x182>
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006256:	f001 ff15 	bl	8008084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800625a:	1d3a      	adds	r2, r7, #4
 800625c:	f107 0314 	add.w	r3, r7, #20
 8006260:	4611      	mov	r1, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fa44 	bl	80076f0 <xTaskCheckForTimeOut>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d124      	bne.n	80062b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800626e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006270:	f000 fd31 	bl	8006cd6 <prvIsQueueFull>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d018      	beq.n	80062ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	3310      	adds	r3, #16
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	4611      	mov	r1, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f001 f998 	bl	80075b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800628a:	f000 fcbc 	bl	8006c06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800628e:	f000 ffbb 	bl	8007208 <xTaskResumeAll>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	f47f af7c 	bne.w	8006192 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <xQueueGenericSend+0x1f8>)
 800629c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	e772      	b.n	8006192 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ae:	f000 fcaa 	bl	8006c06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062b2:	f000 ffa9 	bl	8007208 <xTaskResumeAll>
 80062b6:	e76c      	b.n	8006192 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ba:	f000 fca4 	bl	8006c06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062be:	f000 ffa3 	bl	8007208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3738      	adds	r7, #56	; 0x38
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	e000ed04 	.word	0xe000ed04

080062d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b090      	sub	sp, #64	; 0x40
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d103      	bne.n	800630c <xQueueGenericSendFromISR+0x3c>
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <xQueueGenericSendFromISR+0x40>
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <xQueueGenericSendFromISR+0x42>
 8006310:	2300      	movs	r3, #0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d103      	bne.n	800633a <xQueueGenericSendFromISR+0x6a>
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <xQueueGenericSendFromISR+0x6e>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <xQueueGenericSendFromISR+0x70>
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	623b      	str	r3, [r7, #32]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800635a:	f001 ff45 	bl	80081e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800635e:	f3ef 8211 	mrs	r2, BASEPRI
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	61fa      	str	r2, [r7, #28]
 8006374:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006376:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	429a      	cmp	r2, r3
 8006384:	d302      	bcc.n	800638c <xQueueGenericSendFromISR+0xbc>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d12f      	bne.n	80063ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063a2:	f000 fba0 	bl	8006ae6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d112      	bne.n	80063d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d016      	beq.n	80063e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	3324      	adds	r3, #36	; 0x24
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f91f 	bl	8007600 <xTaskRemoveFromEventList>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00e      	beq.n	80063e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e007      	b.n	80063e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063da:	3301      	adds	r3, #1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	b25a      	sxtb	r2, r3
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063e6:	2301      	movs	r3, #1
 80063e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063ea:	e001      	b.n	80063f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3740      	adds	r7, #64	; 0x40
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b08e      	sub	sp, #56	; 0x38
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	623b      	str	r3, [r7, #32]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	61fb      	str	r3, [r7, #28]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <xQueueGiveFromISR+0x58>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <xQueueGiveFromISR+0x5c>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <xQueueGiveFromISR+0x5e>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61bb      	str	r3, [r7, #24]
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800647e:	f001 feb3 	bl	80081e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006482:	f3ef 8211 	mrs	r2, BASEPRI
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	617a      	str	r2, [r7, #20]
 8006498:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800649a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d22b      	bcs.n	8006506 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d112      	bne.n	80064f0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	3324      	adds	r3, #36	; 0x24
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 f892 	bl	8007600 <xTaskRemoveFromEventList>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2201      	movs	r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e007      	b.n	8006500 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064f4:	3301      	adds	r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	b25a      	sxtb	r2, r3
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006500:	2301      	movs	r3, #1
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
 8006504:	e001      	b.n	800650a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006506:	2300      	movs	r3, #0
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f383 8811 	msr	BASEPRI, r3
}
 8006514:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006518:	4618      	mov	r0, r3
 800651a:	3738      	adds	r7, #56	; 0x38
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800652c:	2300      	movs	r3, #0
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <xQueueReceive+0x30>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	623b      	str	r3, [r7, #32]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d103      	bne.n	800655e <xQueueReceive+0x3e>
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <xQueueReceive+0x42>
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <xQueueReceive+0x44>
 8006562:	2300      	movs	r3, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueReceive+0x5e>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	61fb      	str	r3, [r7, #28]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800657e:	f001 f9ff 	bl	8007980 <xTaskGetSchedulerState>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <xQueueReceive+0x6e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <xQueueReceive+0x72>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <xQueueReceive+0x74>
 8006592:	2300      	movs	r3, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <xQueueReceive+0x8e>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	61bb      	str	r3, [r7, #24]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ae:	f001 fd39 	bl	8008024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d01f      	beq.n	80065fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c2:	f000 fafa 	bl	8006bba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1e5a      	subs	r2, r3, #1
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00f      	beq.n	80065f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	3310      	adds	r3, #16
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f810 	bl	8007600 <xTaskRemoveFromEventList>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065e6:	4b3d      	ldr	r3, [pc, #244]	; (80066dc <xQueueReceive+0x1bc>)
 80065e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065f6:	f001 fd45 	bl	8008084 <vPortExitCritical>
				return pdPASS;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e069      	b.n	80066d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d103      	bne.n	800660c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006604:	f001 fd3e 	bl	8008084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006608:	2300      	movs	r3, #0
 800660a:	e062      	b.n	80066d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006612:	f107 0310 	add.w	r3, r7, #16
 8006616:	4618      	mov	r0, r3
 8006618:	f001 f854 	bl	80076c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006620:	f001 fd30 	bl	8008084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006624:	f000 fde2 	bl	80071ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006628:	f001 fcfc 	bl	8008024 <vPortEnterCritical>
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006632:	b25b      	sxtb	r3, r3
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d103      	bne.n	8006642 <xQueueReceive+0x122>
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006648:	b25b      	sxtb	r3, r3
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664e:	d103      	bne.n	8006658 <xQueueReceive+0x138>
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006658:	f001 fd14 	bl	8008084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800665c:	1d3a      	adds	r2, r7, #4
 800665e:	f107 0310 	add.w	r3, r7, #16
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f001 f843 	bl	80076f0 <xTaskCheckForTimeOut>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d123      	bne.n	80066b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006672:	f000 fb1a 	bl	8006caa <prvIsQueueEmpty>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d017      	beq.n	80066ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	3324      	adds	r3, #36	; 0x24
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	4611      	mov	r1, r2
 8006684:	4618      	mov	r0, r3
 8006686:	f000 ff97 	bl	80075b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800668a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668c:	f000 fabb 	bl	8006c06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006690:	f000 fdba 	bl	8007208 <xTaskResumeAll>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d189      	bne.n	80065ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800669a:	4b10      	ldr	r3, [pc, #64]	; (80066dc <xQueueReceive+0x1bc>)
 800669c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	e780      	b.n	80065ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ae:	f000 faaa 	bl	8006c06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066b2:	f000 fda9 	bl	8007208 <xTaskResumeAll>
 80066b6:	e77a      	b.n	80065ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ba:	f000 faa4 	bl	8006c06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066be:	f000 fda3 	bl	8007208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c4:	f000 faf1 	bl	8006caa <prvIsQueueEmpty>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f43f af6f 	beq.w	80065ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3730      	adds	r7, #48	; 0x30
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08e      	sub	sp, #56	; 0x38
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	61fb      	str	r3, [r7, #28]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006730:	f001 f926 	bl	8007980 <xTaskGetSchedulerState>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <xQueueSemaphoreTake+0x60>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <xQueueSemaphoreTake+0x64>
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <xQueueSemaphoreTake+0x66>
 8006744:	2300      	movs	r3, #0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	61bb      	str	r3, [r7, #24]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006760:	f001 fc60 	bl	8008024 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	d024      	beq.n	80067ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	1e5a      	subs	r2, r3, #1
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006780:	f001 faa6 	bl	8007cd0 <pvTaskIncrementMutexHeldCount>
 8006784:	4602      	mov	r2, r0
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00f      	beq.n	80067b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	3310      	adds	r3, #16
 8006796:	4618      	mov	r0, r3
 8006798:	f000 ff32 	bl	8007600 <xTaskRemoveFromEventList>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067a2:	4b54      	ldr	r3, [pc, #336]	; (80068f4 <xQueueSemaphoreTake+0x214>)
 80067a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067b2:	f001 fc67 	bl	8008084 <vPortExitCritical>
				return pdPASS;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e097      	b.n	80068ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d111      	bne.n	80067e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	617b      	str	r3, [r7, #20]
}
 80067d8:	bf00      	nop
 80067da:	e7fe      	b.n	80067da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80067dc:	f001 fc52 	bl	8008084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e082      	b.n	80068ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067ea:	f107 030c 	add.w	r3, r7, #12
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 ff68 	bl	80076c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067f4:	2301      	movs	r3, #1
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067f8:	f001 fc44 	bl	8008084 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067fc:	f000 fcf6 	bl	80071ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006800:	f001 fc10 	bl	8008024 <vPortEnterCritical>
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800680a:	b25b      	sxtb	r3, r3
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d103      	bne.n	800681a <xQueueSemaphoreTake+0x13a>
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006820:	b25b      	sxtb	r3, r3
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d103      	bne.n	8006830 <xQueueSemaphoreTake+0x150>
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006830:	f001 fc28 	bl	8008084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006834:	463a      	mov	r2, r7
 8006836:	f107 030c 	add.w	r3, r7, #12
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f000 ff57 	bl	80076f0 <xTaskCheckForTimeOut>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d132      	bne.n	80068ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800684a:	f000 fa2e 	bl	8006caa <prvIsQueueEmpty>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d026      	beq.n	80068a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800685c:	f001 fbe2 	bl	8008024 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4618      	mov	r0, r3
 8006866:	f001 f8a9 	bl	80079bc <xTaskPriorityInherit>
 800686a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800686c:	f001 fc0a 	bl	8008084 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	3324      	adds	r3, #36	; 0x24
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	4611      	mov	r1, r2
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fe9d 	bl	80075b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800687e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006880:	f000 f9c1 	bl	8006c06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006884:	f000 fcc0 	bl	8007208 <xTaskResumeAll>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	f47f af68 	bne.w	8006760 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006890:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <xQueueSemaphoreTake+0x214>)
 8006892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	e75e      	b.n	8006760 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80068a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068a4:	f000 f9af 	bl	8006c06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068a8:	f000 fcae 	bl	8007208 <xTaskResumeAll>
 80068ac:	e758      	b.n	8006760 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80068ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068b0:	f000 f9a9 	bl	8006c06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068b4:	f000 fca8 	bl	8007208 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068ba:	f000 f9f6 	bl	8006caa <prvIsQueueEmpty>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f43f af4d 	beq.w	8006760 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00d      	beq.n	80068e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80068cc:	f001 fbaa 	bl	8008024 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80068d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068d2:	f000 f8f0 	bl	8006ab6 <prvGetDisinheritPriorityAfterTimeout>
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 f968 	bl	8007bb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80068e4:	f001 fbce 	bl	8008084 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3738      	adds	r7, #56	; 0x38
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08e      	sub	sp, #56	; 0x38
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	623b      	str	r3, [r7, #32]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <xQueueReceiveFromISR+0x3a>
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <xQueueReceiveFromISR+0x3e>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <xQueueReceiveFromISR+0x40>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	61fb      	str	r3, [r7, #28]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006952:	f001 fc49 	bl	80081e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006956:	f3ef 8211 	mrs	r2, BASEPRI
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	61ba      	str	r2, [r7, #24]
 800696c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800696e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006970:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d02f      	beq.n	80069de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800698c:	f000 f915 	bl	8006bba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	1e5a      	subs	r2, r3, #1
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006998:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d112      	bne.n	80069c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	3310      	adds	r3, #16
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fe26 	bl	8007600 <xTaskRemoveFromEventList>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00b      	beq.n	80069d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	e007      	b.n	80069d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80069c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069cc:	3301      	adds	r3, #1
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	b25a      	sxtb	r2, r3
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80069d8:	2301      	movs	r3, #1
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
 80069dc:	e001      	b.n	80069e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80069de:	2300      	movs	r3, #0
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f383 8811 	msr	BASEPRI, r3
}
 80069ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3738      	adds	r7, #56	; 0x38
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	60bb      	str	r3, [r7, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	e7fe      	b.n	8006a1a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006a1c:	f001 fb02 	bl	8008024 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006a26:	f001 fb2d 	bl	8008084 <vPortExitCritical>

	return uxReturn;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	60fb      	str	r3, [r7, #12]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006a62:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006a64:	4618      	mov	r0, r3
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <vQueueDelete+0x28>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60bb      	str	r3, [r7, #8]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f935 	bl	8006d08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f001 fca9 	bl	8008400 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d006      	beq.n	8006ad4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f1c3 0307 	rsb	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	e001      	b.n	8006ad8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
	}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10d      	bne.n	8006b20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d14d      	bne.n	8006ba8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 ffc9 	bl	8007aa8 <xTaskPriorityDisinherit>
 8006b16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	609a      	str	r2, [r3, #8]
 8006b1e:	e043      	b.n	8006ba8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d119      	bne.n	8006b5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6858      	ldr	r0, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	461a      	mov	r2, r3
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	f012 fd99 	bl	8019668 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	441a      	add	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d32b      	bcc.n	8006ba8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	605a      	str	r2, [r3, #4]
 8006b58:	e026      	b.n	8006ba8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68d8      	ldr	r0, [r3, #12]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	461a      	mov	r2, r3
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	f012 fd7f 	bl	8019668 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	425b      	negs	r3, r3
 8006b74:	441a      	add	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d207      	bcs.n	8006b96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	425b      	negs	r3, r3
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d105      	bne.n	8006ba8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bb0:	697b      	ldr	r3, [r7, #20]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d018      	beq.n	8006bfe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	441a      	add	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d303      	bcc.n	8006bee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68d9      	ldr	r1, [r3, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6838      	ldr	r0, [r7, #0]
 8006bfa:	f012 fd35 	bl	8019668 <memcpy>
	}
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c0e:	f001 fa09 	bl	8008024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c1a:	e011      	b.n	8006c40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d012      	beq.n	8006c4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3324      	adds	r3, #36	; 0x24
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fce9 	bl	8007600 <xTaskRemoveFromEventList>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c34:	f000 fdbe 	bl	80077b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dce9      	bgt.n	8006c1c <prvUnlockQueue+0x16>
 8006c48:	e000      	b.n	8006c4c <prvUnlockQueue+0x46>
					break;
 8006c4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	22ff      	movs	r2, #255	; 0xff
 8006c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c54:	f001 fa16 	bl	8008084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c58:	f001 f9e4 	bl	8008024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c64:	e011      	b.n	8006c8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d012      	beq.n	8006c94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3310      	adds	r3, #16
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fcc4 	bl	8007600 <xTaskRemoveFromEventList>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c7e:	f000 fd99 	bl	80077b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	dce9      	bgt.n	8006c66 <prvUnlockQueue+0x60>
 8006c92:	e000      	b.n	8006c96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	22ff      	movs	r2, #255	; 0xff
 8006c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c9e:	f001 f9f1 	bl	8008084 <vPortExitCritical>
}
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cb2:	f001 f9b7 	bl	8008024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e001      	b.n	8006cc8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cc8:	f001 f9dc 	bl	8008084 <vPortExitCritical>

	return xReturn;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cde:	f001 f9a1 	bl	8008024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d102      	bne.n	8006cf4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	e001      	b.n	8006cf8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cf8:	f001 f9c4 	bl	8008084 <vPortExitCritical>

	return xReturn;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	e016      	b.n	8006d44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006d16:	4a10      	ldr	r2, [pc, #64]	; (8006d58 <vQueueUnregisterQueue+0x50>)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	4413      	add	r3, r2
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d10b      	bne.n	8006d3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006d26:	4a0c      	ldr	r2, [pc, #48]	; (8006d58 <vQueueUnregisterQueue+0x50>)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006d30:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <vQueueUnregisterQueue+0x50>)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	4413      	add	r3, r2
 8006d38:	2200      	movs	r2, #0
 8006d3a:	605a      	str	r2, [r3, #4]
				break;
 8006d3c:	e006      	b.n	8006d4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3301      	adds	r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b07      	cmp	r3, #7
 8006d48:	d9e5      	bls.n	8006d16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	2000516c 	.word	0x2000516c

08006d5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08e      	sub	sp, #56	; 0x38
 8006d60:	af04      	add	r7, sp, #16
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	623b      	str	r3, [r7, #32]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <xTaskCreateStatic+0x46>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	61fb      	str	r3, [r7, #28]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006da2:	23a0      	movs	r3, #160	; 0xa0
 8006da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2ba0      	cmp	r3, #160	; 0xa0
 8006daa:	d00a      	beq.n	8006dc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	61bb      	str	r3, [r7, #24]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006dc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01e      	beq.n	8006e08 <xTaskCreateStatic+0xac>
 8006dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01b      	beq.n	8006e08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	2202      	movs	r2, #2
 8006dde:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006de2:	2300      	movs	r3, #0
 8006de4:	9303      	str	r3, [sp, #12]
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	9302      	str	r3, [sp, #8]
 8006dea:	f107 0314 	add.w	r3, r7, #20
 8006dee:	9301      	str	r3, [sp, #4]
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f850 	bl	8006ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e02:	f000 f8eb 	bl	8006fdc <prvAddNewTaskToReadyList>
 8006e06:	e001      	b.n	8006e0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e0c:	697b      	ldr	r3, [r7, #20]
	}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3728      	adds	r7, #40	; 0x28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b08c      	sub	sp, #48	; 0x30
 8006e1a:	af04      	add	r7, sp, #16
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	603b      	str	r3, [r7, #0]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 fa1c 	bl	8008268 <pvPortMalloc>
 8006e30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00e      	beq.n	8006e56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e38:	20a0      	movs	r0, #160	; 0xa0
 8006e3a:	f001 fa15 	bl	8008268 <pvPortMalloc>
 8006e3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e4c:	e005      	b.n	8006e5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e4e:	6978      	ldr	r0, [r7, #20]
 8006e50:	f001 fad6 	bl	8008400 <vPortFree>
 8006e54:	e001      	b.n	8006e5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d017      	beq.n	8006e90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9303      	str	r3, [sp, #12]
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	9302      	str	r3, [sp, #8]
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f80e 	bl	8006ea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e84:	69f8      	ldr	r0, [r7, #28]
 8006e86:	f000 f8a9 	bl	8006fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	61bb      	str	r3, [r7, #24]
 8006e8e:	e002      	b.n	8006e96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e96:	69bb      	ldr	r3, [r7, #24]
	}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	f023 0307 	bic.w	r3, r3, #7
 8006ec6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	617b      	str	r3, [r7, #20]
}
 8006ee4:	bf00      	nop
 8006ee6:	e7fe      	b.n	8006ee6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01f      	beq.n	8006f2e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	e012      	b.n	8006f1a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	7819      	ldrb	r1, [r3, #0]
 8006efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	4413      	add	r3, r2
 8006f02:	3334      	adds	r3, #52	; 0x34
 8006f04:	460a      	mov	r2, r1
 8006f06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d006      	beq.n	8006f22 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	2b0f      	cmp	r3, #15
 8006f1e:	d9e9      	bls.n	8006ef4 <prvInitialiseNewTask+0x54>
 8006f20:	e000      	b.n	8006f24 <prvInitialiseNewTask+0x84>
			{
				break;
 8006f22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f2c:	e003      	b.n	8006f36 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	2b06      	cmp	r3, #6
 8006f3a:	d901      	bls.n	8006f40 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f3c:	2306      	movs	r3, #6
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f4a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	2200      	movs	r2, #0
 8006f50:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	3304      	adds	r3, #4
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fea1 	bl	8005c9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	3318      	adds	r3, #24
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe fe9c 	bl	8005c9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	f1c3 0207 	rsb	r2, r3, #7
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	334c      	adds	r3, #76	; 0x4c
 8006f90:	224c      	movs	r2, #76	; 0x4c
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f012 fa06 	bl	80193a6 <memset>
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	4a0c      	ldr	r2, [pc, #48]	; (8006fd0 <prvInitialiseNewTask+0x130>)
 8006f9e:	651a      	str	r2, [r3, #80]	; 0x50
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	4a0c      	ldr	r2, [pc, #48]	; (8006fd4 <prvInitialiseNewTask+0x134>)
 8006fa4:	655a      	str	r2, [r3, #84]	; 0x54
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	4a0b      	ldr	r2, [pc, #44]	; (8006fd8 <prvInitialiseNewTask+0x138>)
 8006faa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	68f9      	ldr	r1, [r7, #12]
 8006fb0:	69b8      	ldr	r0, [r7, #24]
 8006fb2:	f000 ff07 	bl	8007dc4 <pxPortInitialiseStack>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fc8:	bf00      	nop
 8006fca:	3720      	adds	r7, #32
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20011058 	.word	0x20011058
 8006fd4:	200110c0 	.word	0x200110c0
 8006fd8:	20011128 	.word	0x20011128

08006fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006fe4:	f001 f81e 	bl	8008024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fe8:	4b2a      	ldr	r3, [pc, #168]	; (8007094 <prvAddNewTaskToReadyList+0xb8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3301      	adds	r3, #1
 8006fee:	4a29      	ldr	r2, [pc, #164]	; (8007094 <prvAddNewTaskToReadyList+0xb8>)
 8006ff0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ff2:	4b29      	ldr	r3, [pc, #164]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ffa:	4a27      	ldr	r2, [pc, #156]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007000:	4b24      	ldr	r3, [pc, #144]	; (8007094 <prvAddNewTaskToReadyList+0xb8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d110      	bne.n	800702a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007008:	f000 fbf8 	bl	80077fc <prvInitialiseTaskLists>
 800700c:	e00d      	b.n	800702a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800700e:	4b23      	ldr	r3, [pc, #140]	; (800709c <prvAddNewTaskToReadyList+0xc0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007016:	4b20      	ldr	r3, [pc, #128]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	429a      	cmp	r2, r3
 8007022:	d802      	bhi.n	800702a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007024:	4a1c      	ldr	r2, [pc, #112]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800702a:	4b1d      	ldr	r3, [pc, #116]	; (80070a0 <prvAddNewTaskToReadyList+0xc4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3301      	adds	r3, #1
 8007030:	4a1b      	ldr	r2, [pc, #108]	; (80070a0 <prvAddNewTaskToReadyList+0xc4>)
 8007032:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	2201      	movs	r2, #1
 800703a:	409a      	lsls	r2, r3
 800703c:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <prvAddNewTaskToReadyList+0xc8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4313      	orrs	r3, r2
 8007042:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <prvAddNewTaskToReadyList+0xc8>)
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <prvAddNewTaskToReadyList+0xcc>)
 8007054:	441a      	add	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7fe fe2b 	bl	8005cb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007062:	f001 f80f 	bl	8008084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007066:	4b0d      	ldr	r3, [pc, #52]	; (800709c <prvAddNewTaskToReadyList+0xc0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00e      	beq.n	800708c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800706e:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <prvAddNewTaskToReadyList+0xbc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	429a      	cmp	r2, r3
 800707a:	d207      	bcs.n	800708c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <prvAddNewTaskToReadyList+0xd0>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	200052ac 	.word	0x200052ac
 8007098:	200051ac 	.word	0x200051ac
 800709c:	200052b8 	.word	0x200052b8
 80070a0:	200052c8 	.word	0x200052c8
 80070a4:	200052b4 	.word	0x200052b4
 80070a8:	200051b0 	.word	0x200051b0
 80070ac:	e000ed04 	.word	0xe000ed04

080070b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d017      	beq.n	80070f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070c2:	4b13      	ldr	r3, [pc, #76]	; (8007110 <vTaskDelay+0x60>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <vTaskDelay+0x30>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	60bb      	str	r3, [r7, #8]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070e0:	f000 f884 	bl	80071ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070e4:	2100      	movs	r1, #0
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fe06 	bl	8007cf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070ec:	f000 f88c 	bl	8007208 <xTaskResumeAll>
 80070f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d107      	bne.n	8007108 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80070f8:	4b06      	ldr	r3, [pc, #24]	; (8007114 <vTaskDelay+0x64>)
 80070fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	200052d4 	.word	0x200052d4
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007126:	463a      	mov	r2, r7
 8007128:	1d39      	adds	r1, r7, #4
 800712a:	f107 0308 	add.w	r3, r7, #8
 800712e:	4618      	mov	r0, r3
 8007130:	f7f9 fa44 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	9202      	str	r2, [sp, #8]
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	2300      	movs	r3, #0
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	460a      	mov	r2, r1
 8007146:	4921      	ldr	r1, [pc, #132]	; (80071cc <vTaskStartScheduler+0xb4>)
 8007148:	4821      	ldr	r0, [pc, #132]	; (80071d0 <vTaskStartScheduler+0xb8>)
 800714a:	f7ff fe07 	bl	8006d5c <xTaskCreateStatic>
 800714e:	4603      	mov	r3, r0
 8007150:	4a20      	ldr	r2, [pc, #128]	; (80071d4 <vTaskStartScheduler+0xbc>)
 8007152:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007154:	4b1f      	ldr	r3, [pc, #124]	; (80071d4 <vTaskStartScheduler+0xbc>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	e001      	b.n	8007166 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d11b      	bne.n	80071a4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	613b      	str	r3, [r7, #16]
}
 800717e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007180:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <vTaskStartScheduler+0xc0>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	334c      	adds	r3, #76	; 0x4c
 8007186:	4a15      	ldr	r2, [pc, #84]	; (80071dc <vTaskStartScheduler+0xc4>)
 8007188:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800718a:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <vTaskStartScheduler+0xc8>)
 800718c:	f04f 32ff 	mov.w	r2, #4294967295
 8007190:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007192:	4b14      	ldr	r3, [pc, #80]	; (80071e4 <vTaskStartScheduler+0xcc>)
 8007194:	2201      	movs	r2, #1
 8007196:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007198:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <vTaskStartScheduler+0xd0>)
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800719e:	f000 fe9f 	bl	8007ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071a2:	e00e      	b.n	80071c2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d10a      	bne.n	80071c2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60fb      	str	r3, [r7, #12]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <vTaskStartScheduler+0xa8>
}
 80071c2:	bf00      	nop
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	0801a7fc 	.word	0x0801a7fc
 80071d0:	080077cd 	.word	0x080077cd
 80071d4:	200052d0 	.word	0x200052d0
 80071d8:	200051ac 	.word	0x200051ac
 80071dc:	2000008c 	.word	0x2000008c
 80071e0:	200052cc 	.word	0x200052cc
 80071e4:	200052b8 	.word	0x200052b8
 80071e8:	200052b0 	.word	0x200052b0

080071ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071f0:	4b04      	ldr	r3, [pc, #16]	; (8007204 <vTaskSuspendAll+0x18>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3301      	adds	r3, #1
 80071f6:	4a03      	ldr	r2, [pc, #12]	; (8007204 <vTaskSuspendAll+0x18>)
 80071f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071fa:	bf00      	nop
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	200052d4 	.word	0x200052d4

08007208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007212:	2300      	movs	r3, #0
 8007214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007216:	4b41      	ldr	r3, [pc, #260]	; (800731c <xTaskResumeAll+0x114>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <xTaskResumeAll+0x2c>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	603b      	str	r3, [r7, #0]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007234:	f000 fef6 	bl	8008024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007238:	4b38      	ldr	r3, [pc, #224]	; (800731c <xTaskResumeAll+0x114>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3b01      	subs	r3, #1
 800723e:	4a37      	ldr	r2, [pc, #220]	; (800731c <xTaskResumeAll+0x114>)
 8007240:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007242:	4b36      	ldr	r3, [pc, #216]	; (800731c <xTaskResumeAll+0x114>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d161      	bne.n	800730e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800724a:	4b35      	ldr	r3, [pc, #212]	; (8007320 <xTaskResumeAll+0x118>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d05d      	beq.n	800730e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007252:	e02e      	b.n	80072b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007254:	4b33      	ldr	r3, [pc, #204]	; (8007324 <xTaskResumeAll+0x11c>)
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3318      	adds	r3, #24
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe fd86 	bl	8005d72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3304      	adds	r3, #4
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fd81 	bl	8005d72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	2201      	movs	r2, #1
 8007276:	409a      	lsls	r2, r3
 8007278:	4b2b      	ldr	r3, [pc, #172]	; (8007328 <xTaskResumeAll+0x120>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4313      	orrs	r3, r2
 800727e:	4a2a      	ldr	r2, [pc, #168]	; (8007328 <xTaskResumeAll+0x120>)
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4a27      	ldr	r2, [pc, #156]	; (800732c <xTaskResumeAll+0x124>)
 8007290:	441a      	add	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3304      	adds	r3, #4
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7fe fd0d 	bl	8005cb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a2:	4b23      	ldr	r3, [pc, #140]	; (8007330 <xTaskResumeAll+0x128>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d302      	bcc.n	80072b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80072ac:	4b21      	ldr	r3, [pc, #132]	; (8007334 <xTaskResumeAll+0x12c>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072b2:	4b1c      	ldr	r3, [pc, #112]	; (8007324 <xTaskResumeAll+0x11c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1cc      	bne.n	8007254 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072c0:	f000 fb3e 	bl	8007940 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80072c4:	4b1c      	ldr	r3, [pc, #112]	; (8007338 <xTaskResumeAll+0x130>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d010      	beq.n	80072f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072d0:	f000 f858 	bl	8007384 <xTaskIncrementTick>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80072da:	4b16      	ldr	r3, [pc, #88]	; (8007334 <xTaskResumeAll+0x12c>)
 80072dc:	2201      	movs	r2, #1
 80072de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1f1      	bne.n	80072d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80072ec:	4b12      	ldr	r3, [pc, #72]	; (8007338 <xTaskResumeAll+0x130>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072f2:	4b10      	ldr	r3, [pc, #64]	; (8007334 <xTaskResumeAll+0x12c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072fa:	2301      	movs	r3, #1
 80072fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <xTaskResumeAll+0x134>)
 8007300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800730e:	f000 feb9 	bl	8008084 <vPortExitCritical>

	return xAlreadyYielded;
 8007312:	68bb      	ldr	r3, [r7, #8]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	200052d4 	.word	0x200052d4
 8007320:	200052ac 	.word	0x200052ac
 8007324:	2000526c 	.word	0x2000526c
 8007328:	200052b4 	.word	0x200052b4
 800732c:	200051b0 	.word	0x200051b0
 8007330:	200051ac 	.word	0x200051ac
 8007334:	200052c0 	.word	0x200052c0
 8007338:	200052bc 	.word	0x200052bc
 800733c:	e000ed04 	.word	0xe000ed04

08007340 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007346:	4b05      	ldr	r3, [pc, #20]	; (800735c <xTaskGetTickCount+0x1c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800734c:	687b      	ldr	r3, [r7, #4]
}
 800734e:	4618      	mov	r0, r3
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	200052b0 	.word	0x200052b0

08007360 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007366:	f000 ff3f 	bl	80081e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800736e:	4b04      	ldr	r3, [pc, #16]	; (8007380 <xTaskGetTickCountFromISR+0x20>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007374:	683b      	ldr	r3, [r7, #0]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	200052b0 	.word	0x200052b0

08007384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800738e:	4b4e      	ldr	r3, [pc, #312]	; (80074c8 <xTaskIncrementTick+0x144>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f040 808e 	bne.w	80074b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007398:	4b4c      	ldr	r3, [pc, #304]	; (80074cc <xTaskIncrementTick+0x148>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073a0:	4a4a      	ldr	r2, [pc, #296]	; (80074cc <xTaskIncrementTick+0x148>)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d120      	bne.n	80073ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073ac:	4b48      	ldr	r3, [pc, #288]	; (80074d0 <xTaskIncrementTick+0x14c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <xTaskIncrementTick+0x48>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	603b      	str	r3, [r7, #0]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <xTaskIncrementTick+0x46>
 80073cc:	4b40      	ldr	r3, [pc, #256]	; (80074d0 <xTaskIncrementTick+0x14c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	4b40      	ldr	r3, [pc, #256]	; (80074d4 <xTaskIncrementTick+0x150>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a3e      	ldr	r2, [pc, #248]	; (80074d0 <xTaskIncrementTick+0x14c>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	4a3e      	ldr	r2, [pc, #248]	; (80074d4 <xTaskIncrementTick+0x150>)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	4b3d      	ldr	r3, [pc, #244]	; (80074d8 <xTaskIncrementTick+0x154>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	4a3c      	ldr	r2, [pc, #240]	; (80074d8 <xTaskIncrementTick+0x154>)
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	f000 faa9 	bl	8007940 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073ee:	4b3b      	ldr	r3, [pc, #236]	; (80074dc <xTaskIncrementTick+0x158>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d348      	bcc.n	800748a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073f8:	4b35      	ldr	r3, [pc, #212]	; (80074d0 <xTaskIncrementTick+0x14c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007402:	4b36      	ldr	r3, [pc, #216]	; (80074dc <xTaskIncrementTick+0x158>)
 8007404:	f04f 32ff 	mov.w	r2, #4294967295
 8007408:	601a      	str	r2, [r3, #0]
					break;
 800740a:	e03e      	b.n	800748a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740c:	4b30      	ldr	r3, [pc, #192]	; (80074d0 <xTaskIncrementTick+0x14c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d203      	bcs.n	800742c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007424:	4a2d      	ldr	r2, [pc, #180]	; (80074dc <xTaskIncrementTick+0x158>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800742a:	e02e      	b.n	800748a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	3304      	adds	r3, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe fc9e 	bl	8005d72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d004      	beq.n	8007448 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	3318      	adds	r3, #24
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fc95 	bl	8005d72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	2201      	movs	r2, #1
 800744e:	409a      	lsls	r2, r3
 8007450:	4b23      	ldr	r3, [pc, #140]	; (80074e0 <xTaskIncrementTick+0x15c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4313      	orrs	r3, r2
 8007456:	4a22      	ldr	r2, [pc, #136]	; (80074e0 <xTaskIncrementTick+0x15c>)
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4a1f      	ldr	r2, [pc, #124]	; (80074e4 <xTaskIncrementTick+0x160>)
 8007468:	441a      	add	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	3304      	adds	r3, #4
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7fe fc21 	bl	8005cb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747a:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <xTaskIncrementTick+0x164>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	429a      	cmp	r2, r3
 8007482:	d3b9      	bcc.n	80073f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007484:	2301      	movs	r3, #1
 8007486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007488:	e7b6      	b.n	80073f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800748a:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <xTaskIncrementTick+0x164>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	4914      	ldr	r1, [pc, #80]	; (80074e4 <xTaskIncrementTick+0x160>)
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d901      	bls.n	80074a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80074a2:	2301      	movs	r3, #1
 80074a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074a6:	4b11      	ldr	r3, [pc, #68]	; (80074ec <xTaskIncrementTick+0x168>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	e004      	b.n	80074be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074b4:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <xTaskIncrementTick+0x16c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	4a0d      	ldr	r2, [pc, #52]	; (80074f0 <xTaskIncrementTick+0x16c>)
 80074bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80074be:	697b      	ldr	r3, [r7, #20]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	200052d4 	.word	0x200052d4
 80074cc:	200052b0 	.word	0x200052b0
 80074d0:	20005264 	.word	0x20005264
 80074d4:	20005268 	.word	0x20005268
 80074d8:	200052c4 	.word	0x200052c4
 80074dc:	200052cc 	.word	0x200052cc
 80074e0:	200052b4 	.word	0x200052b4
 80074e4:	200051b0 	.word	0x200051b0
 80074e8:	200051ac 	.word	0x200051ac
 80074ec:	200052c0 	.word	0x200052c0
 80074f0:	200052bc 	.word	0x200052bc

080074f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074fa:	4b29      	ldr	r3, [pc, #164]	; (80075a0 <vTaskSwitchContext+0xac>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007502:	4b28      	ldr	r3, [pc, #160]	; (80075a4 <vTaskSwitchContext+0xb0>)
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007508:	e044      	b.n	8007594 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800750a:	4b26      	ldr	r3, [pc, #152]	; (80075a4 <vTaskSwitchContext+0xb0>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007510:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <vTaskSwitchContext+0xb4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	fab3 f383 	clz	r3, r3
 800751c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800751e:	7afb      	ldrb	r3, [r7, #11]
 8007520:	f1c3 031f 	rsb	r3, r3, #31
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	4921      	ldr	r1, [pc, #132]	; (80075ac <vTaskSwitchContext+0xb8>)
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10a      	bne.n	8007550 <vTaskSwitchContext+0x5c>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	607b      	str	r3, [r7, #4]
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <vTaskSwitchContext+0x5a>
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4a14      	ldr	r2, [pc, #80]	; (80075ac <vTaskSwitchContext+0xb8>)
 800755c:	4413      	add	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	605a      	str	r2, [r3, #4]
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	3308      	adds	r3, #8
 8007572:	429a      	cmp	r2, r3
 8007574:	d104      	bne.n	8007580 <vTaskSwitchContext+0x8c>
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <vTaskSwitchContext+0xbc>)
 8007588:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800758a:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <vTaskSwitchContext+0xbc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	334c      	adds	r3, #76	; 0x4c
 8007590:	4a08      	ldr	r2, [pc, #32]	; (80075b4 <vTaskSwitchContext+0xc0>)
 8007592:	6013      	str	r3, [r2, #0]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	200052d4 	.word	0x200052d4
 80075a4:	200052c0 	.word	0x200052c0
 80075a8:	200052b4 	.word	0x200052b4
 80075ac:	200051b0 	.word	0x200051b0
 80075b0:	200051ac 	.word	0x200051ac
 80075b4:	2000008c 	.word	0x2000008c

080075b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	60fb      	str	r3, [r7, #12]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075de:	4b07      	ldr	r3, [pc, #28]	; (80075fc <vTaskPlaceOnEventList+0x44>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3318      	adds	r3, #24
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fe fb8a 	bl	8005d00 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075ec:	2101      	movs	r1, #1
 80075ee:	6838      	ldr	r0, [r7, #0]
 80075f0:	f000 fb82 	bl	8007cf8 <prvAddCurrentTaskToDelayedList>
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	200051ac 	.word	0x200051ac

08007600 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10a      	bne.n	800762c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	60fb      	str	r3, [r7, #12]
}
 8007628:	bf00      	nop
 800762a:	e7fe      	b.n	800762a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	3318      	adds	r3, #24
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe fb9e 	bl	8005d72 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007636:	4b1d      	ldr	r3, [pc, #116]	; (80076ac <xTaskRemoveFromEventList+0xac>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11c      	bne.n	8007678 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	3304      	adds	r3, #4
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fb95 	bl	8005d72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	2201      	movs	r2, #1
 800764e:	409a      	lsls	r2, r3
 8007650:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <xTaskRemoveFromEventList+0xb0>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4313      	orrs	r3, r2
 8007656:	4a16      	ldr	r2, [pc, #88]	; (80076b0 <xTaskRemoveFromEventList+0xb0>)
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4a13      	ldr	r2, [pc, #76]	; (80076b4 <xTaskRemoveFromEventList+0xb4>)
 8007668:	441a      	add	r2, r3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	3304      	adds	r3, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f7fe fb21 	bl	8005cb8 <vListInsertEnd>
 8007676:	e005      	b.n	8007684 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3318      	adds	r3, #24
 800767c:	4619      	mov	r1, r3
 800767e:	480e      	ldr	r0, [pc, #56]	; (80076b8 <xTaskRemoveFromEventList+0xb8>)
 8007680:	f7fe fb1a 	bl	8005cb8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <xTaskRemoveFromEventList+0xbc>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	429a      	cmp	r2, r3
 8007690:	d905      	bls.n	800769e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007692:	2301      	movs	r3, #1
 8007694:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007696:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <xTaskRemoveFromEventList+0xc0>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	e001      	b.n	80076a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076a2:	697b      	ldr	r3, [r7, #20]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	200052d4 	.word	0x200052d4
 80076b0:	200052b4 	.word	0x200052b4
 80076b4:	200051b0 	.word	0x200051b0
 80076b8:	2000526c 	.word	0x2000526c
 80076bc:	200051ac 	.word	0x200051ac
 80076c0:	200052c0 	.word	0x200052c0

080076c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <vTaskInternalSetTimeOutState+0x24>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <vTaskInternalSetTimeOutState+0x28>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	605a      	str	r2, [r3, #4]
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	200052c4 	.word	0x200052c4
 80076ec:	200052b0 	.word	0x200052b0

080076f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	613b      	str	r3, [r7, #16]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	60fb      	str	r3, [r7, #12]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007732:	f000 fc77 	bl	8008024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007736:	4b1d      	ldr	r3, [pc, #116]	; (80077ac <xTaskCheckForTimeOut+0xbc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d102      	bne.n	8007756 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007750:	2300      	movs	r3, #0
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	e023      	b.n	800779e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <xTaskCheckForTimeOut+0xc0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d007      	beq.n	8007772 <xTaskCheckForTimeOut+0x82>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	429a      	cmp	r2, r3
 800776a:	d302      	bcc.n	8007772 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	e015      	b.n	800779e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	429a      	cmp	r2, r3
 800777a:	d20b      	bcs.n	8007794 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff ff9b 	bl	80076c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	e004      	b.n	800779e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800779a:	2301      	movs	r3, #1
 800779c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800779e:	f000 fc71 	bl	8008084 <vPortExitCritical>

	return xReturn;
 80077a2:	69fb      	ldr	r3, [r7, #28]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200052b0 	.word	0x200052b0
 80077b0:	200052c4 	.word	0x200052c4

080077b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077b8:	4b03      	ldr	r3, [pc, #12]	; (80077c8 <vTaskMissedYield+0x14>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]
}
 80077be:	bf00      	nop
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	200052c0 	.word	0x200052c0

080077cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077d4:	f000 f852 	bl	800787c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077d8:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <prvIdleTask+0x28>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d9f9      	bls.n	80077d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <prvIdleTask+0x2c>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077f0:	e7f0      	b.n	80077d4 <prvIdleTask+0x8>
 80077f2:	bf00      	nop
 80077f4:	200051b0 	.word	0x200051b0
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]
 8007806:	e00c      	b.n	8007822 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4a12      	ldr	r2, [pc, #72]	; (800785c <prvInitialiseTaskLists+0x60>)
 8007814:	4413      	add	r3, r2
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fa21 	bl	8005c5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3301      	adds	r3, #1
 8007820:	607b      	str	r3, [r7, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b06      	cmp	r3, #6
 8007826:	d9ef      	bls.n	8007808 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007828:	480d      	ldr	r0, [pc, #52]	; (8007860 <prvInitialiseTaskLists+0x64>)
 800782a:	f7fe fa18 	bl	8005c5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800782e:	480d      	ldr	r0, [pc, #52]	; (8007864 <prvInitialiseTaskLists+0x68>)
 8007830:	f7fe fa15 	bl	8005c5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007834:	480c      	ldr	r0, [pc, #48]	; (8007868 <prvInitialiseTaskLists+0x6c>)
 8007836:	f7fe fa12 	bl	8005c5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800783a:	480c      	ldr	r0, [pc, #48]	; (800786c <prvInitialiseTaskLists+0x70>)
 800783c:	f7fe fa0f 	bl	8005c5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007840:	480b      	ldr	r0, [pc, #44]	; (8007870 <prvInitialiseTaskLists+0x74>)
 8007842:	f7fe fa0c 	bl	8005c5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007846:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <prvInitialiseTaskLists+0x78>)
 8007848:	4a05      	ldr	r2, [pc, #20]	; (8007860 <prvInitialiseTaskLists+0x64>)
 800784a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <prvInitialiseTaskLists+0x7c>)
 800784e:	4a05      	ldr	r2, [pc, #20]	; (8007864 <prvInitialiseTaskLists+0x68>)
 8007850:	601a      	str	r2, [r3, #0]
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	200051b0 	.word	0x200051b0
 8007860:	2000523c 	.word	0x2000523c
 8007864:	20005250 	.word	0x20005250
 8007868:	2000526c 	.word	0x2000526c
 800786c:	20005280 	.word	0x20005280
 8007870:	20005298 	.word	0x20005298
 8007874:	20005264 	.word	0x20005264
 8007878:	20005268 	.word	0x20005268

0800787c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007882:	e019      	b.n	80078b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007884:	f000 fbce 	bl	8008024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007888:	4b10      	ldr	r3, [pc, #64]	; (80078cc <prvCheckTasksWaitingTermination+0x50>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe fa6c 	bl	8005d72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800789a:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <prvCheckTasksWaitingTermination+0x54>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3b01      	subs	r3, #1
 80078a0:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <prvCheckTasksWaitingTermination+0x54>)
 80078a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078a4:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <prvCheckTasksWaitingTermination+0x58>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	4a0a      	ldr	r2, [pc, #40]	; (80078d4 <prvCheckTasksWaitingTermination+0x58>)
 80078ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078ae:	f000 fbe9 	bl	8008084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f810 	bl	80078d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <prvCheckTasksWaitingTermination+0x58>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e1      	bne.n	8007884 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20005280 	.word	0x20005280
 80078d0:	200052ac 	.word	0x200052ac
 80078d4:	20005294 	.word	0x20005294

080078d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	334c      	adds	r3, #76	; 0x4c
 80078e4:	4618      	mov	r0, r3
 80078e6:	f011 fe0d 	bl	8019504 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d108      	bne.n	8007906 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fd81 	bl	8008400 <vPortFree>
				vPortFree( pxTCB );
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fd7e 	bl	8008400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007904:	e018      	b.n	8007938 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800790c:	2b01      	cmp	r3, #1
 800790e:	d103      	bne.n	8007918 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fd75 	bl	8008400 <vPortFree>
	}
 8007916:	e00f      	b.n	8007938 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800791e:	2b02      	cmp	r3, #2
 8007920:	d00a      	beq.n	8007938 <prvDeleteTCB+0x60>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60fb      	str	r3, [r7, #12]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <prvDeleteTCB+0x5e>
	}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007946:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <prvResetNextTaskUnblockTime+0x38>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007950:	4b0a      	ldr	r3, [pc, #40]	; (800797c <prvResetNextTaskUnblockTime+0x3c>)
 8007952:	f04f 32ff 	mov.w	r2, #4294967295
 8007956:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007958:	e008      	b.n	800796c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795a:	4b07      	ldr	r3, [pc, #28]	; (8007978 <prvResetNextTaskUnblockTime+0x38>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4a04      	ldr	r2, [pc, #16]	; (800797c <prvResetNextTaskUnblockTime+0x3c>)
 800796a:	6013      	str	r3, [r2, #0]
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	20005264 	.word	0x20005264
 800797c:	200052cc 	.word	0x200052cc

08007980 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <xTaskGetSchedulerState+0x34>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800798e:	2301      	movs	r3, #1
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	e008      	b.n	80079a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007994:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <xTaskGetSchedulerState+0x38>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800799c:	2302      	movs	r3, #2
 800799e:	607b      	str	r3, [r7, #4]
 80079a0:	e001      	b.n	80079a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079a2:	2300      	movs	r3, #0
 80079a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079a6:	687b      	ldr	r3, [r7, #4]
	}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	200052b8 	.word	0x200052b8
 80079b8:	200052d4 	.word	0x200052d4

080079bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d05e      	beq.n	8007a90 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	4b31      	ldr	r3, [pc, #196]	; (8007a9c <xTaskPriorityInherit+0xe0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d24e      	bcs.n	8007a7e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	db06      	blt.n	80079f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e8:	4b2c      	ldr	r3, [pc, #176]	; (8007a9c <xTaskPriorityInherit+0xe0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ee:	f1c3 0207 	rsb	r2, r3, #7
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6959      	ldr	r1, [r3, #20]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4a26      	ldr	r2, [pc, #152]	; (8007aa0 <xTaskPriorityInherit+0xe4>)
 8007a08:	4413      	add	r3, r2
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	d12f      	bne.n	8007a6e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	3304      	adds	r3, #4
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe f9ad 	bl	8005d72 <uxListRemove>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	2201      	movs	r2, #1
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	43da      	mvns	r2, r3
 8007a2a:	4b1e      	ldr	r3, [pc, #120]	; (8007aa4 <xTaskPriorityInherit+0xe8>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	4a1c      	ldr	r2, [pc, #112]	; (8007aa4 <xTaskPriorityInherit+0xe8>)
 8007a32:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a34:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <xTaskPriorityInherit+0xe0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	2201      	movs	r2, #1
 8007a44:	409a      	lsls	r2, r3
 8007a46:	4b17      	ldr	r3, [pc, #92]	; (8007aa4 <xTaskPriorityInherit+0xe8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	4a15      	ldr	r2, [pc, #84]	; (8007aa4 <xTaskPriorityInherit+0xe8>)
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4a10      	ldr	r2, [pc, #64]	; (8007aa0 <xTaskPriorityInherit+0xe4>)
 8007a5e:	441a      	add	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f7fe f926 	bl	8005cb8 <vListInsertEnd>
 8007a6c:	e004      	b.n	8007a78 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <xTaskPriorityInherit+0xe0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	e008      	b.n	8007a90 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a82:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <xTaskPriorityInherit+0xe0>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d201      	bcs.n	8007a90 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a90:	68fb      	ldr	r3, [r7, #12]
	}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200051ac 	.word	0x200051ac
 8007aa0:	200051b0 	.word	0x200051b0
 8007aa4:	200052b4 	.word	0x200052b4

08007aa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d06e      	beq.n	8007b9c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007abe:	4b3a      	ldr	r3, [pc, #232]	; (8007ba8 <xTaskPriorityDisinherit+0x100>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d00a      	beq.n	8007ade <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	60fb      	str	r3, [r7, #12]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10a      	bne.n	8007afc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	60bb      	str	r3, [r7, #8]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b00:	1e5a      	subs	r2, r3, #1
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d044      	beq.n	8007b9c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d140      	bne.n	8007b9c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe f927 	bl	8005d72 <uxListRemove>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d115      	bne.n	8007b56 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	491f      	ldr	r1, [pc, #124]	; (8007bac <xTaskPriorityDisinherit+0x104>)
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	440b      	add	r3, r1
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <xTaskPriorityDisinherit+0xae>
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	2201      	movs	r2, #1
 8007b46:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4a:	43da      	mvns	r2, r3
 8007b4c:	4b18      	ldr	r3, [pc, #96]	; (8007bb0 <xTaskPriorityDisinherit+0x108>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4013      	ands	r3, r2
 8007b52:	4a17      	ldr	r2, [pc, #92]	; (8007bb0 <xTaskPriorityDisinherit+0x108>)
 8007b54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	f1c3 0207 	rsb	r2, r3, #7
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	2201      	movs	r2, #1
 8007b70:	409a      	lsls	r2, r3
 8007b72:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <xTaskPriorityDisinherit+0x108>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	4a0d      	ldr	r2, [pc, #52]	; (8007bb0 <xTaskPriorityDisinherit+0x108>)
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4a08      	ldr	r2, [pc, #32]	; (8007bac <xTaskPriorityDisinherit+0x104>)
 8007b8a:	441a      	add	r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f7fe f890 	bl	8005cb8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b9c:	697b      	ldr	r3, [r7, #20]
	}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200051ac 	.word	0x200051ac
 8007bac:	200051b0 	.word	0x200051b0
 8007bb0:	200052b4 	.word	0x200052b4

08007bb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d077      	beq.n	8007cbc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10a      	bne.n	8007bea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d902      	bls.n	8007bfa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	61fb      	str	r3, [r7, #28]
 8007bf8:	e002      	b.n	8007c00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	69fa      	ldr	r2, [r7, #28]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d058      	beq.n	8007cbc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d153      	bne.n	8007cbc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c14:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d10a      	bne.n	8007c34 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	60bb      	str	r3, [r7, #8]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	db04      	blt.n	8007c52 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	f1c3 0207 	rsb	r2, r3, #7
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6959      	ldr	r1, [r3, #20]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4a19      	ldr	r2, [pc, #100]	; (8007cc8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007c62:	4413      	add	r3, r2
 8007c64:	4299      	cmp	r1, r3
 8007c66:	d129      	bne.n	8007cbc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe f880 	bl	8005d72 <uxListRemove>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43da      	mvns	r2, r3
 8007c84:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	4a10      	ldr	r2, [pc, #64]	; (8007ccc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	2201      	movs	r2, #1
 8007c94:	409a      	lsls	r2, r3
 8007c96:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	4a0b      	ldr	r2, [pc, #44]	; (8007ccc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4a06      	ldr	r2, [pc, #24]	; (8007cc8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007cae:	441a      	add	r2, r3
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f7fd fffe 	bl	8005cb8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cbc:	bf00      	nop
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	200051ac 	.word	0x200051ac
 8007cc8:	200051b0 	.word	0x200051b0
 8007ccc:	200052b4 	.word	0x200052b4

08007cd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007cd4:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d004      	beq.n	8007ce6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ce2:	3201      	adds	r2, #1
 8007ce4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007ce6:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
	}
 8007cea:	4618      	mov	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	200051ac 	.word	0x200051ac

08007cf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d02:	4b29      	ldr	r3, [pc, #164]	; (8007da8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d08:	4b28      	ldr	r3, [pc, #160]	; (8007dac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f82f 	bl	8005d72 <uxListRemove>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d1a:	4b24      	ldr	r3, [pc, #144]	; (8007dac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	2201      	movs	r2, #1
 8007d22:	fa02 f303 	lsl.w	r3, r2, r3
 8007d26:	43da      	mvns	r2, r3
 8007d28:	4b21      	ldr	r3, [pc, #132]	; (8007db0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	4a20      	ldr	r2, [pc, #128]	; (8007db0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d10a      	bne.n	8007d50 <prvAddCurrentTaskToDelayedList+0x58>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d40:	4b1a      	ldr	r3, [pc, #104]	; (8007dac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3304      	adds	r3, #4
 8007d46:	4619      	mov	r1, r3
 8007d48:	481a      	ldr	r0, [pc, #104]	; (8007db4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d4a:	f7fd ffb5 	bl	8005cb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d4e:	e026      	b.n	8007d9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4413      	add	r3, r2
 8007d56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d58:	4b14      	ldr	r3, [pc, #80]	; (8007dac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d209      	bcs.n	8007d7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d68:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4619      	mov	r1, r3
 8007d74:	4610      	mov	r0, r2
 8007d76:	f7fd ffc3 	bl	8005d00 <vListInsert>
}
 8007d7a:	e010      	b.n	8007d9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f7fd ffb9 	bl	8005d00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d202      	bcs.n	8007d9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d98:	4a09      	ldr	r2, [pc, #36]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6013      	str	r3, [r2, #0]
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	200052b0 	.word	0x200052b0
 8007dac:	200051ac 	.word	0x200051ac
 8007db0:	200052b4 	.word	0x200052b4
 8007db4:	20005298 	.word	0x20005298
 8007db8:	20005268 	.word	0x20005268
 8007dbc:	20005264 	.word	0x20005264
 8007dc0:	200052cc 	.word	0x200052cc

08007dc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3b04      	subs	r3, #4
 8007dd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3b04      	subs	r3, #4
 8007de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f023 0201 	bic.w	r2, r3, #1
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3b04      	subs	r3, #4
 8007df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007df4:	4a0c      	ldr	r2, [pc, #48]	; (8007e28 <pxPortInitialiseStack+0x64>)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3b14      	subs	r3, #20
 8007dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3b04      	subs	r3, #4
 8007e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f06f 0202 	mvn.w	r2, #2
 8007e12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3b20      	subs	r3, #32
 8007e18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	08007e2d 	.word	0x08007e2d

08007e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e36:	4b12      	ldr	r3, [pc, #72]	; (8007e80 <prvTaskExitError+0x54>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3e:	d00a      	beq.n	8007e56 <prvTaskExitError+0x2a>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	60fb      	str	r3, [r7, #12]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <prvTaskExitError+0x28>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	60bb      	str	r3, [r7, #8]
}
 8007e68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e6a:	bf00      	nop
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0fc      	beq.n	8007e6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20000020 	.word	0x20000020
	...

08007e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e90:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <pxCurrentTCBConst2>)
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	6808      	ldr	r0, [r1, #0]
 8007e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	f380 8809 	msr	PSP, r0
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f04f 0000 	mov.w	r0, #0
 8007ea6:	f380 8811 	msr	BASEPRI, r0
 8007eaa:	4770      	bx	lr
 8007eac:	f3af 8000 	nop.w

08007eb0 <pxCurrentTCBConst2>:
 8007eb0:	200051ac 	.word	0x200051ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop

08007eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007eb8:	4808      	ldr	r0, [pc, #32]	; (8007edc <prvPortStartFirstTask+0x24>)
 8007eba:	6800      	ldr	r0, [r0, #0]
 8007ebc:	6800      	ldr	r0, [r0, #0]
 8007ebe:	f380 8808 	msr	MSP, r0
 8007ec2:	f04f 0000 	mov.w	r0, #0
 8007ec6:	f380 8814 	msr	CONTROL, r0
 8007eca:	b662      	cpsie	i
 8007ecc:	b661      	cpsie	f
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	df00      	svc	0
 8007ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eda:	bf00      	nop
 8007edc:	e000ed08 	.word	0xe000ed08

08007ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ee6:	4b46      	ldr	r3, [pc, #280]	; (8008000 <xPortStartScheduler+0x120>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a46      	ldr	r2, [pc, #280]	; (8008004 <xPortStartScheduler+0x124>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d10a      	bne.n	8007f06 <xPortStartScheduler+0x26>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	613b      	str	r3, [r7, #16]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f06:	4b3e      	ldr	r3, [pc, #248]	; (8008000 <xPortStartScheduler+0x120>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a3f      	ldr	r2, [pc, #252]	; (8008008 <xPortStartScheduler+0x128>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d10a      	bne.n	8007f26 <xPortStartScheduler+0x46>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f26:	4b39      	ldr	r3, [pc, #228]	; (800800c <xPortStartScheduler+0x12c>)
 8007f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	22ff      	movs	r2, #255	; 0xff
 8007f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	4b31      	ldr	r3, [pc, #196]	; (8008010 <xPortStartScheduler+0x130>)
 8007f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f4e:	4b31      	ldr	r3, [pc, #196]	; (8008014 <xPortStartScheduler+0x134>)
 8007f50:	2207      	movs	r2, #7
 8007f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f54:	e009      	b.n	8007f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f56:	4b2f      	ldr	r3, [pc, #188]	; (8008014 <xPortStartScheduler+0x134>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	4a2d      	ldr	r2, [pc, #180]	; (8008014 <xPortStartScheduler+0x134>)
 8007f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	2b80      	cmp	r3, #128	; 0x80
 8007f74:	d0ef      	beq.n	8007f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f76:	4b27      	ldr	r3, [pc, #156]	; (8008014 <xPortStartScheduler+0x134>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f1c3 0307 	rsb	r3, r3, #7
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d00a      	beq.n	8007f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60bb      	str	r3, [r7, #8]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f98:	4b1e      	ldr	r3, [pc, #120]	; (8008014 <xPortStartScheduler+0x134>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	021b      	lsls	r3, r3, #8
 8007f9e:	4a1d      	ldr	r2, [pc, #116]	; (8008014 <xPortStartScheduler+0x134>)
 8007fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fa2:	4b1c      	ldr	r3, [pc, #112]	; (8008014 <xPortStartScheduler+0x134>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007faa:	4a1a      	ldr	r2, [pc, #104]	; (8008014 <xPortStartScheduler+0x134>)
 8007fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fb6:	4b18      	ldr	r3, [pc, #96]	; (8008018 <xPortStartScheduler+0x138>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a17      	ldr	r2, [pc, #92]	; (8008018 <xPortStartScheduler+0x138>)
 8007fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fc2:	4b15      	ldr	r3, [pc, #84]	; (8008018 <xPortStartScheduler+0x138>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a14      	ldr	r2, [pc, #80]	; (8008018 <xPortStartScheduler+0x138>)
 8007fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fce:	f000 f8dd 	bl	800818c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <xPortStartScheduler+0x13c>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fd8:	f000 f8fc 	bl	80081d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <xPortStartScheduler+0x140>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a0f      	ldr	r2, [pc, #60]	; (8008020 <xPortStartScheduler+0x140>)
 8007fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fe8:	f7ff ff66 	bl	8007eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fec:	f7ff fa82 	bl	80074f4 <vTaskSwitchContext>
	prvTaskExitError();
 8007ff0:	f7ff ff1c 	bl	8007e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	e000ed00 	.word	0xe000ed00
 8008004:	410fc271 	.word	0x410fc271
 8008008:	410fc270 	.word	0x410fc270
 800800c:	e000e400 	.word	0xe000e400
 8008010:	200052d8 	.word	0x200052d8
 8008014:	200052dc 	.word	0x200052dc
 8008018:	e000ed20 	.word	0xe000ed20
 800801c:	20000020 	.word	0x20000020
 8008020:	e000ef34 	.word	0xe000ef34

08008024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	607b      	str	r3, [r7, #4]
}
 800803c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <vPortEnterCritical+0x58>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	4a0d      	ldr	r2, [pc, #52]	; (800807c <vPortEnterCritical+0x58>)
 8008046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008048:	4b0c      	ldr	r3, [pc, #48]	; (800807c <vPortEnterCritical+0x58>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d10f      	bne.n	8008070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <vPortEnterCritical+0x5c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <vPortEnterCritical+0x4c>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	603b      	str	r3, [r7, #0]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <vPortEnterCritical+0x4a>
	}
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000020 	.word	0x20000020
 8008080:	e000ed04 	.word	0xe000ed04

08008084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800808a:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <vPortExitCritical+0x50>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <vPortExitCritical+0x24>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	607b      	str	r3, [r7, #4]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <vPortExitCritical+0x50>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	4a09      	ldr	r2, [pc, #36]	; (80080d4 <vPortExitCritical+0x50>)
 80080b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080b2:	4b08      	ldr	r3, [pc, #32]	; (80080d4 <vPortExitCritical+0x50>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <vPortExitCritical+0x42>
 80080ba:	2300      	movs	r3, #0
 80080bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	f383 8811 	msr	BASEPRI, r3
}
 80080c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000020 	.word	0x20000020
	...

080080e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080e0:	f3ef 8009 	mrs	r0, PSP
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	4b15      	ldr	r3, [pc, #84]	; (8008140 <pxCurrentTCBConst>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	f01e 0f10 	tst.w	lr, #16
 80080f0:	bf08      	it	eq
 80080f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fa:	6010      	str	r0, [r2, #0]
 80080fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008104:	f380 8811 	msr	BASEPRI, r0
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f7ff f9f0 	bl	80074f4 <vTaskSwitchContext>
 8008114:	f04f 0000 	mov.w	r0, #0
 8008118:	f380 8811 	msr	BASEPRI, r0
 800811c:	bc09      	pop	{r0, r3}
 800811e:	6819      	ldr	r1, [r3, #0]
 8008120:	6808      	ldr	r0, [r1, #0]
 8008122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008126:	f01e 0f10 	tst.w	lr, #16
 800812a:	bf08      	it	eq
 800812c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008130:	f380 8809 	msr	PSP, r0
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	f3af 8000 	nop.w

08008140 <pxCurrentTCBConst>:
 8008140:	200051ac 	.word	0x200051ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	607b      	str	r3, [r7, #4]
}
 8008160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008162:	f7ff f90f 	bl	8007384 <xTaskIncrementTick>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800816c:	4b06      	ldr	r3, [pc, #24]	; (8008188 <SysTick_Handler+0x40>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f383 8811 	msr	BASEPRI, r3
}
 800817e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <vPortSetupTimerInterrupt+0x34>)
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008196:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <vPortSetupTimerInterrupt+0x38>)
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800819c:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <vPortSetupTimerInterrupt+0x3c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a0a      	ldr	r2, [pc, #40]	; (80081cc <vPortSetupTimerInterrupt+0x40>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	099b      	lsrs	r3, r3, #6
 80081a8:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <vPortSetupTimerInterrupt+0x44>)
 80081aa:	3b01      	subs	r3, #1
 80081ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ae:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <vPortSetupTimerInterrupt+0x34>)
 80081b0:	2207      	movs	r2, #7
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	e000e010 	.word	0xe000e010
 80081c4:	e000e018 	.word	0xe000e018
 80081c8:	20000000 	.word	0x20000000
 80081cc:	10624dd3 	.word	0x10624dd3
 80081d0:	e000e014 	.word	0xe000e014

080081d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081e4 <vPortEnableVFP+0x10>
 80081d8:	6801      	ldr	r1, [r0, #0]
 80081da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081de:	6001      	str	r1, [r0, #0]
 80081e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081e2:	bf00      	nop
 80081e4:	e000ed88 	.word	0xe000ed88

080081e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081ee:	f3ef 8305 	mrs	r3, IPSR
 80081f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b0f      	cmp	r3, #15
 80081f8:	d914      	bls.n	8008224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081fa:	4a17      	ldr	r2, [pc, #92]	; (8008258 <vPortValidateInterruptPriority+0x70>)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008204:	4b15      	ldr	r3, [pc, #84]	; (800825c <vPortValidateInterruptPriority+0x74>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	7afa      	ldrb	r2, [r7, #11]
 800820a:	429a      	cmp	r2, r3
 800820c:	d20a      	bcs.n	8008224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	607b      	str	r3, [r7, #4]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008224:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <vPortValidateInterruptPriority+0x78>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800822c:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <vPortValidateInterruptPriority+0x7c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	429a      	cmp	r2, r3
 8008232:	d90a      	bls.n	800824a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	603b      	str	r3, [r7, #0]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <vPortValidateInterruptPriority+0x60>
	}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	e000e3f0 	.word	0xe000e3f0
 800825c:	200052d8 	.word	0x200052d8
 8008260:	e000ed0c 	.word	0xe000ed0c
 8008264:	200052dc 	.word	0x200052dc

08008268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08a      	sub	sp, #40	; 0x28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008270:	2300      	movs	r3, #0
 8008272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008274:	f7fe ffba 	bl	80071ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008278:	4b5b      	ldr	r3, [pc, #364]	; (80083e8 <pvPortMalloc+0x180>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008280:	f000 f920 	bl	80084c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008284:	4b59      	ldr	r3, [pc, #356]	; (80083ec <pvPortMalloc+0x184>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 8093 	bne.w	80083b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01d      	beq.n	80082d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008298:	2208      	movs	r2, #8
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d014      	beq.n	80082d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f023 0307 	bic.w	r3, r3, #7
 80082b0:	3308      	adds	r3, #8
 80082b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <pvPortMalloc+0x6c>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	617b      	str	r3, [r7, #20]
}
 80082d0:	bf00      	nop
 80082d2:	e7fe      	b.n	80082d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d06e      	beq.n	80083b8 <pvPortMalloc+0x150>
 80082da:	4b45      	ldr	r3, [pc, #276]	; (80083f0 <pvPortMalloc+0x188>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d869      	bhi.n	80083b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082e4:	4b43      	ldr	r3, [pc, #268]	; (80083f4 <pvPortMalloc+0x18c>)
 80082e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082e8:	4b42      	ldr	r3, [pc, #264]	; (80083f4 <pvPortMalloc+0x18c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ee:	e004      	b.n	80082fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d903      	bls.n	800830c <pvPortMalloc+0xa4>
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f1      	bne.n	80082f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800830c:	4b36      	ldr	r3, [pc, #216]	; (80083e8 <pvPortMalloc+0x180>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008312:	429a      	cmp	r2, r3
 8008314:	d050      	beq.n	80083b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2208      	movs	r2, #8
 800831c:	4413      	add	r3, r2
 800831e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	1ad2      	subs	r2, r2, r3
 8008330:	2308      	movs	r3, #8
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	429a      	cmp	r2, r3
 8008336:	d91f      	bls.n	8008378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <pvPortMalloc+0xf8>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	613b      	str	r3, [r7, #16]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	1ad2      	subs	r2, r2, r3
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008372:	69b8      	ldr	r0, [r7, #24]
 8008374:	f000 f908 	bl	8008588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008378:	4b1d      	ldr	r3, [pc, #116]	; (80083f0 <pvPortMalloc+0x188>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	4a1b      	ldr	r2, [pc, #108]	; (80083f0 <pvPortMalloc+0x188>)
 8008384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008386:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <pvPortMalloc+0x188>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b1b      	ldr	r3, [pc, #108]	; (80083f8 <pvPortMalloc+0x190>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d203      	bcs.n	800839a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008392:	4b17      	ldr	r3, [pc, #92]	; (80083f0 <pvPortMalloc+0x188>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a18      	ldr	r2, [pc, #96]	; (80083f8 <pvPortMalloc+0x190>)
 8008398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <pvPortMalloc+0x184>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <pvPortMalloc+0x194>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	4a11      	ldr	r2, [pc, #68]	; (80083fc <pvPortMalloc+0x194>)
 80083b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083b8:	f7fe ff26 	bl	8007208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <pvPortMalloc+0x174>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	60fb      	str	r3, [r7, #12]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <pvPortMalloc+0x172>
	return pvReturn;
 80083dc:	69fb      	ldr	r3, [r7, #28]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3728      	adds	r7, #40	; 0x28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	2000d2e8 	.word	0x2000d2e8
 80083ec:	2000d2fc 	.word	0x2000d2fc
 80083f0:	2000d2ec 	.word	0x2000d2ec
 80083f4:	2000d2e0 	.word	0x2000d2e0
 80083f8:	2000d2f0 	.word	0x2000d2f0
 80083fc:	2000d2f4 	.word	0x2000d2f4

08008400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04d      	beq.n	80084ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008412:	2308      	movs	r3, #8
 8008414:	425b      	negs	r3, r3
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4413      	add	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <vPortFree+0xb8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4013      	ands	r3, r2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <vPortFree+0x44>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	60fb      	str	r3, [r7, #12]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <vPortFree+0x62>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	60bb      	str	r3, [r7, #8]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <vPortFree+0xb8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01e      	beq.n	80084ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d11a      	bne.n	80084ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	4b0e      	ldr	r3, [pc, #56]	; (80084b8 <vPortFree+0xb8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	43db      	mvns	r3, r3
 8008482:	401a      	ands	r2, r3
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008488:	f7fe feb0 	bl	80071ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <vPortFree+0xbc>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4413      	add	r3, r2
 8008496:	4a09      	ldr	r2, [pc, #36]	; (80084bc <vPortFree+0xbc>)
 8008498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800849a:	6938      	ldr	r0, [r7, #16]
 800849c:	f000 f874 	bl	8008588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084a0:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <vPortFree+0xc0>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3301      	adds	r3, #1
 80084a6:	4a06      	ldr	r2, [pc, #24]	; (80084c0 <vPortFree+0xc0>)
 80084a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084aa:	f7fe fead 	bl	8007208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084ae:	bf00      	nop
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	2000d2fc 	.word	0x2000d2fc
 80084bc:	2000d2ec 	.word	0x2000d2ec
 80084c0:	2000d2f8 	.word	0x2000d2f8

080084c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084d0:	4b27      	ldr	r3, [pc, #156]	; (8008570 <prvHeapInit+0xac>)
 80084d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 0307 	and.w	r3, r3, #7
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00c      	beq.n	80084f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3307      	adds	r3, #7
 80084e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0307 	bic.w	r3, r3, #7
 80084ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	4a1f      	ldr	r2, [pc, #124]	; (8008570 <prvHeapInit+0xac>)
 80084f4:	4413      	add	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084fc:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <prvHeapInit+0xb0>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <prvHeapInit+0xb0>)
 8008504:	2200      	movs	r2, #0
 8008506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	4413      	add	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008510:	2208      	movs	r2, #8
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0307 	bic.w	r3, r3, #7
 800851e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4a15      	ldr	r2, [pc, #84]	; (8008578 <prvHeapInit+0xb4>)
 8008524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008526:	4b14      	ldr	r3, [pc, #80]	; (8008578 <prvHeapInit+0xb4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2200      	movs	r2, #0
 800852c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800852e:	4b12      	ldr	r3, [pc, #72]	; (8008578 <prvHeapInit+0xb4>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008544:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <prvHeapInit+0xb4>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	4a0a      	ldr	r2, [pc, #40]	; (800857c <prvHeapInit+0xb8>)
 8008552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	4a09      	ldr	r2, [pc, #36]	; (8008580 <prvHeapInit+0xbc>)
 800855a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <prvHeapInit+0xc0>)
 800855e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008562:	601a      	str	r2, [r3, #0]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	200052e0 	.word	0x200052e0
 8008574:	2000d2e0 	.word	0x2000d2e0
 8008578:	2000d2e8 	.word	0x2000d2e8
 800857c:	2000d2f0 	.word	0x2000d2f0
 8008580:	2000d2ec 	.word	0x2000d2ec
 8008584:	2000d2fc 	.word	0x2000d2fc

08008588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008590:	4b28      	ldr	r3, [pc, #160]	; (8008634 <prvInsertBlockIntoFreeList+0xac>)
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e002      	b.n	800859c <prvInsertBlockIntoFreeList+0x14>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d8f7      	bhi.n	8008596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4413      	add	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d108      	bne.n	80085ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	441a      	add	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	441a      	add	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d118      	bne.n	8008610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b15      	ldr	r3, [pc, #84]	; (8008638 <prvInsertBlockIntoFreeList+0xb0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d00d      	beq.n	8008606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	441a      	add	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	e008      	b.n	8008618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008606:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <prvInsertBlockIntoFreeList+0xb0>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e003      	b.n	8008618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d002      	beq.n	8008626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	2000d2e0 	.word	0x2000d2e0
 8008638:	2000d2e8 	.word	0x2000d2e8

0800863c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	330c      	adds	r3, #12
 800864c:	461a      	mov	r2, r3
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f002 fc29 	bl	800aea8 <tcpip_send_msg_wait_sem>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800865a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d103      	bne.n	800866a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008668:	e001      	b.n	800866e <netconn_apimsg+0x32>
  }
  return err;
 800866a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08c      	sub	sp, #48	; 0x30
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	603a      	str	r2, [r7, #0]
 8008682:	71fb      	strb	r3, [r7, #7]
 8008684:	460b      	mov	r3, r1
 8008686:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f001 f95b 	bl	8009948 <netconn_alloc>
 8008692:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d054      	beq.n	8008744 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800869a:	79bb      	ldrb	r3, [r7, #6]
 800869c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80086a2:	f107 0308 	add.w	r3, r7, #8
 80086a6:	4619      	mov	r1, r3
 80086a8:	4829      	ldr	r0, [pc, #164]	; (8008750 <netconn_new_with_proto_and_callback+0xd8>)
 80086aa:	f7ff ffc7 	bl	800863c <netconn_apimsg>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80086b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d043      	beq.n	8008744 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <netconn_new_with_proto_and_callback+0x58>
 80086c4:	4b23      	ldr	r3, [pc, #140]	; (8008754 <netconn_new_with_proto_and_callback+0xdc>)
 80086c6:	22a3      	movs	r2, #163	; 0xa3
 80086c8:	4923      	ldr	r1, [pc, #140]	; (8008758 <netconn_new_with_proto_and_callback+0xe0>)
 80086ca:	4824      	ldr	r0, [pc, #144]	; (800875c <netconn_new_with_proto_and_callback+0xe4>)
 80086cc:	f010 fdcc 	bl	8019268 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	3310      	adds	r3, #16
 80086d4:	4618      	mov	r0, r3
 80086d6:	f010 fb72 	bl	8018dbe <sys_mbox_valid>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d105      	bne.n	80086ec <netconn_new_with_proto_and_callback+0x74>
 80086e0:	4b1c      	ldr	r3, [pc, #112]	; (8008754 <netconn_new_with_proto_and_callback+0xdc>)
 80086e2:	22a4      	movs	r2, #164	; 0xa4
 80086e4:	491e      	ldr	r1, [pc, #120]	; (8008760 <netconn_new_with_proto_and_callback+0xe8>)
 80086e6:	481d      	ldr	r0, [pc, #116]	; (800875c <netconn_new_with_proto_and_callback+0xe4>)
 80086e8:	f010 fdbe 	bl	8019268 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	3314      	adds	r3, #20
 80086f0:	4618      	mov	r0, r3
 80086f2:	f010 fb64 	bl	8018dbe <sys_mbox_valid>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <netconn_new_with_proto_and_callback+0x90>
 80086fc:	4b15      	ldr	r3, [pc, #84]	; (8008754 <netconn_new_with_proto_and_callback+0xdc>)
 80086fe:	22a6      	movs	r2, #166	; 0xa6
 8008700:	4918      	ldr	r1, [pc, #96]	; (8008764 <netconn_new_with_proto_and_callback+0xec>)
 8008702:	4816      	ldr	r0, [pc, #88]	; (800875c <netconn_new_with_proto_and_callback+0xe4>)
 8008704:	f010 fdb0 	bl	8019268 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870a:	330c      	adds	r3, #12
 800870c:	4618      	mov	r0, r3
 800870e:	f010 fbe7 	bl	8018ee0 <sys_sem_valid>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d105      	bne.n	8008724 <netconn_new_with_proto_and_callback+0xac>
 8008718:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <netconn_new_with_proto_and_callback+0xdc>)
 800871a:	22a9      	movs	r2, #169	; 0xa9
 800871c:	4912      	ldr	r1, [pc, #72]	; (8008768 <netconn_new_with_proto_and_callback+0xf0>)
 800871e:	480f      	ldr	r0, [pc, #60]	; (800875c <netconn_new_with_proto_and_callback+0xe4>)
 8008720:	f010 fda2 	bl	8019268 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008726:	330c      	adds	r3, #12
 8008728:	4618      	mov	r0, r3
 800872a:	f010 fbcc 	bl	8018ec6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	3310      	adds	r3, #16
 8008732:	4618      	mov	r0, r3
 8008734:	f010 fabc 	bl	8018cb0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800873a:	2007      	movs	r0, #7
 800873c:	f003 ffb2 	bl	800c6a4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008740:	2300      	movs	r3, #0
 8008742:	e000      	b.n	8008746 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008746:	4618      	mov	r0, r3
 8008748:	3730      	adds	r7, #48	; 0x30
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	0800991d 	.word	0x0800991d
 8008754:	0801a804 	.word	0x0801a804
 8008758:	0801a838 	.word	0x0801a838
 800875c:	0801a85c 	.word	0x0801a85c
 8008760:	0801a884 	.word	0x0801a884
 8008764:	0801a89c 	.word	0x0801a89c
 8008768:	0801a8c0 	.word	0x0801a8c0

0800876c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08c      	sub	sp, #48	; 0x30
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	e014      	b.n	80087a8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008782:	2329      	movs	r3, #41	; 0x29
 8008784:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008786:	f107 030c 	add.w	r3, r7, #12
 800878a:	4619      	mov	r1, r3
 800878c:	4808      	ldr	r0, [pc, #32]	; (80087b0 <netconn_prepare_delete+0x44>)
 800878e:	f7ff ff55 	bl	800863c <netconn_apimsg>
 8008792:	4603      	mov	r3, r0
 8008794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008798:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <netconn_prepare_delete+0x3a>
    return err;
 80087a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087a4:	e000      	b.n	80087a8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3730      	adds	r7, #48	; 0x30
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	08009e89 	.word	0x08009e89

080087b4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <netconn_delete+0x12>
    return ERR_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e00d      	b.n	80087e2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff ffd0 	bl	800876c <netconn_prepare_delete>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80087d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <netconn_delete+0x2a>
    netconn_free(conn);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f001 f923 	bl	8009a24 <netconn_free>
  }
  return err;
 80087de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08e      	sub	sp, #56	; 0x38
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d109      	bne.n	8008814 <netconn_bind+0x28>
 8008800:	4b11      	ldr	r3, [pc, #68]	; (8008848 <netconn_bind+0x5c>)
 8008802:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008806:	4911      	ldr	r1, [pc, #68]	; (800884c <netconn_bind+0x60>)
 8008808:	4811      	ldr	r0, [pc, #68]	; (8008850 <netconn_bind+0x64>)
 800880a:	f010 fd2d 	bl	8019268 <iprintf>
 800880e:	f06f 030f 	mvn.w	r3, #15
 8008812:	e015      	b.n	8008840 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800881a:	4b0e      	ldr	r3, [pc, #56]	; (8008854 <netconn_bind+0x68>)
 800881c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008826:	88fb      	ldrh	r3, [r7, #6]
 8008828:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800882a:	f107 0314 	add.w	r3, r7, #20
 800882e:	4619      	mov	r1, r3
 8008830:	4809      	ldr	r0, [pc, #36]	; (8008858 <netconn_bind+0x6c>)
 8008832:	f7ff ff03 	bl	800863c <netconn_apimsg>
 8008836:	4603      	mov	r3, r0
 8008838:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800883c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008840:	4618      	mov	r0, r3
 8008842:	3738      	adds	r7, #56	; 0x38
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	0801a804 	.word	0x0801a804
 800884c:	0801a93c 	.word	0x0801a93c
 8008850:	0801a85c 	.word	0x0801a85c
 8008854:	08028514 	.word	0x08028514
 8008858:	0800a051 	.word	0x0800a051

0800885c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08e      	sub	sp, #56	; 0x38
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d109      	bne.n	8008884 <netconn_connect+0x28>
 8008870:	4b11      	ldr	r3, [pc, #68]	; (80088b8 <netconn_connect+0x5c>)
 8008872:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008876:	4911      	ldr	r1, [pc, #68]	; (80088bc <netconn_connect+0x60>)
 8008878:	4811      	ldr	r0, [pc, #68]	; (80088c0 <netconn_connect+0x64>)
 800887a:	f010 fcf5 	bl	8019268 <iprintf>
 800887e:	f06f 030f 	mvn.w	r3, #15
 8008882:	e015      	b.n	80088b0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800888a:	4b0e      	ldr	r3, [pc, #56]	; (80088c4 <netconn_connect+0x68>)
 800888c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800889a:	f107 0314 	add.w	r3, r7, #20
 800889e:	4619      	mov	r1, r3
 80088a0:	4809      	ldr	r0, [pc, #36]	; (80088c8 <netconn_connect+0x6c>)
 80088a2:	f7ff fecb 	bl	800863c <netconn_apimsg>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80088ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3738      	adds	r7, #56	; 0x38
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	0801a804 	.word	0x0801a804
 80088bc:	0801a978 	.word	0x0801a978
 80088c0:	0801a85c 	.word	0x0801a85c
 80088c4:	08028514 	.word	0x08028514
 80088c8:	0800a1e5 	.word	0x0800a1e5

080088cc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08c      	sub	sp, #48	; 0x30
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <netconn_listen_with_backlog+0x26>
 80088de:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <netconn_listen_with_backlog+0x48>)
 80088e0:	f240 12bb 	movw	r2, #443	; 0x1bb
 80088e4:	490c      	ldr	r1, [pc, #48]	; (8008918 <netconn_listen_with_backlog+0x4c>)
 80088e6:	480d      	ldr	r0, [pc, #52]	; (800891c <netconn_listen_with_backlog+0x50>)
 80088e8:	f010 fcbe 	bl	8019268 <iprintf>
 80088ec:	f06f 030f 	mvn.w	r3, #15
 80088f0:	e00c      	b.n	800890c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80088f6:	f107 030c 	add.w	r3, r7, #12
 80088fa:	4619      	mov	r1, r3
 80088fc:	4808      	ldr	r0, [pc, #32]	; (8008920 <netconn_listen_with_backlog+0x54>)
 80088fe:	f7ff fe9d 	bl	800863c <netconn_apimsg>
 8008902:	4603      	mov	r3, r0
 8008904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008908:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800890c:	4618      	mov	r0, r3
 800890e:	3730      	adds	r7, #48	; 0x30
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	0801a804 	.word	0x0801a804
 8008918:	0801a9bc 	.word	0x0801a9bc
 800891c:	0801a85c 	.word	0x0801a85c
 8008920:	0800a361 	.word	0x0800a361

08008924 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d109      	bne.n	8008948 <netconn_accept+0x24>
 8008934:	4b3d      	ldr	r3, [pc, #244]	; (8008a2c <netconn_accept+0x108>)
 8008936:	f240 12e1 	movw	r2, #481	; 0x1e1
 800893a:	493d      	ldr	r1, [pc, #244]	; (8008a30 <netconn_accept+0x10c>)
 800893c:	483d      	ldr	r0, [pc, #244]	; (8008a34 <netconn_accept+0x110>)
 800893e:	f010 fc93 	bl	8019268 <iprintf>
 8008942:	f06f 030f 	mvn.w	r3, #15
 8008946:	e06c      	b.n	8008a22 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <netconn_accept+0x44>
 8008954:	4b35      	ldr	r3, [pc, #212]	; (8008a2c <netconn_accept+0x108>)
 8008956:	f240 12e3 	movw	r2, #483	; 0x1e3
 800895a:	4937      	ldr	r1, [pc, #220]	; (8008a38 <netconn_accept+0x114>)
 800895c:	4835      	ldr	r0, [pc, #212]	; (8008a34 <netconn_accept+0x110>)
 800895e:	f010 fc83 	bl	8019268 <iprintf>
 8008962:	f06f 030f 	mvn.w	r3, #15
 8008966:	e05c      	b.n	8008a22 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fb6c 	bl	8009046 <netconn_err>
 800896e:	4603      	mov	r3, r0
 8008970:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008972:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800897a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800897e:	e050      	b.n	8008a22 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3314      	adds	r3, #20
 8008984:	4618      	mov	r0, r3
 8008986:	f010 fa1a 	bl	8018dbe <sys_mbox_valid>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <netconn_accept+0x78>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	7f1b      	ldrb	r3, [r3, #28]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800899c:	f06f 030e 	mvn.w	r3, #14
 80089a0:	e03f      	b.n	8008a22 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	7f1b      	ldrb	r3, [r3, #28]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00e      	beq.n	80089cc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3314      	adds	r3, #20
 80089b2:	f107 020c 	add.w	r2, r7, #12
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f010 f9e4 	bl	8018d86 <sys_arch_mbox_tryfetch>
 80089be:	4603      	mov	r3, r0
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d10a      	bne.n	80089dc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80089c6:	f06f 0306 	mvn.w	r3, #6
 80089ca:	e02a      	b.n	8008a22 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3314      	adds	r3, #20
 80089d0:	f107 010c 	add.w	r1, r7, #12
 80089d4:	2200      	movs	r2, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f010 f996 	bl	8018d08 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <netconn_accept+0xcc>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	2200      	movs	r2, #0
 80089ea:	2101      	movs	r1, #1
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f107 0213 	add.w	r2, r7, #19
 80089f6:	4611      	mov	r1, r2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fb75 	bl	80090e8 <lwip_netconn_is_err_msg>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008a04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a08:	e00b      	b.n	8008a22 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d102      	bne.n	8008a16 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008a10:	f06f 030e 	mvn.w	r3, #14
 8008a14:	e005      	b.n	8008a22 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008a20:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0801a804 	.word	0x0801a804
 8008a30:	0801a9dc 	.word	0x0801a9dc
 8008a34:	0801a85c 	.word	0x0801a85c
 8008a38:	0801a9fc 	.word	0x0801a9fc

08008a3c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d109      	bne.n	8008a68 <netconn_recv_data+0x2c>
 8008a54:	4b58      	ldr	r3, [pc, #352]	; (8008bb8 <netconn_recv_data+0x17c>)
 8008a56:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008a5a:	4958      	ldr	r1, [pc, #352]	; (8008bbc <netconn_recv_data+0x180>)
 8008a5c:	4858      	ldr	r0, [pc, #352]	; (8008bc0 <netconn_recv_data+0x184>)
 8008a5e:	f010 fc03 	bl	8019268 <iprintf>
 8008a62:	f06f 030f 	mvn.w	r3, #15
 8008a66:	e0a2      	b.n	8008bae <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <netconn_recv_data+0x4c>
 8008a74:	4b50      	ldr	r3, [pc, #320]	; (8008bb8 <netconn_recv_data+0x17c>)
 8008a76:	f240 224a 	movw	r2, #586	; 0x24a
 8008a7a:	4952      	ldr	r1, [pc, #328]	; (8008bc4 <netconn_recv_data+0x188>)
 8008a7c:	4850      	ldr	r0, [pc, #320]	; (8008bc0 <netconn_recv_data+0x184>)
 8008a7e:	f010 fbf3 	bl	8019268 <iprintf>
 8008a82:	f06f 030f 	mvn.w	r3, #15
 8008a86:	e092      	b.n	8008bae <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3310      	adds	r3, #16
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f010 f996 	bl	8018dbe <sys_mbox_valid>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10e      	bne.n	8008ab6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 fad4 	bl	8009046 <netconn_err>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008aa2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008aaa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008aae:	e07e      	b.n	8008bae <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008ab0:	f06f 030a 	mvn.w	r3, #10
 8008ab4:	e07b      	b.n	8008bae <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	7f1b      	ldrb	r3, [r3, #28]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10f      	bne.n	8008ae2 <netconn_recv_data+0xa6>
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	7f1b      	ldrb	r3, [r3, #28]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d023      	beq.n	8008b2a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3310      	adds	r3, #16
 8008ae6:	f107 0218 	add.w	r2, r7, #24
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f010 f94a 	bl	8018d86 <sys_arch_mbox_tryfetch>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af8:	d11f      	bne.n	8008b3a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 faa3 	bl	8009046 <netconn_err>
 8008b00:	4603      	mov	r3, r0
 8008b02:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008b04:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008b0c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008b10:	e04d      	b.n	8008bae <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	7f1b      	ldrb	r3, [r3, #28]
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8008b1e:	f06f 030a 	mvn.w	r3, #10
 8008b22:	e044      	b.n	8008bae <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008b24:	f06f 0306 	mvn.w	r3, #6
 8008b28:	e041      	b.n	8008bae <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3310      	adds	r3, #16
 8008b2e:	f107 0118 	add.w	r1, r7, #24
 8008b32:	2200      	movs	r2, #0
 8008b34:	4618      	mov	r0, r3
 8008b36:	f010 f8e7 	bl	8018d08 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b42:	2b10      	cmp	r3, #16
 8008b44:	d117      	bne.n	8008b76 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	f107 0217 	add.w	r2, r7, #23
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 faca 	bl	80090e8 <lwip_netconn_is_err_msg>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d009      	beq.n	8008b6e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b5e:	f113 0f0f 	cmn.w	r3, #15
 8008b62:	d101      	bne.n	8008b68 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	e022      	b.n	8008bae <netconn_recv_data+0x172>
      }
      return err;
 8008b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b6c:	e01f      	b.n	8008bae <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	891b      	ldrh	r3, [r3, #8]
 8008b72:	83fb      	strh	r3, [r7, #30]
 8008b74:	e00d      	b.n	8008b92 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <netconn_recv_data+0x14e>
 8008b7c:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <netconn_recv_data+0x17c>)
 8008b7e:	f240 2291 	movw	r2, #657	; 0x291
 8008b82:	4911      	ldr	r1, [pc, #68]	; (8008bc8 <netconn_recv_data+0x18c>)
 8008b84:	480e      	ldr	r0, [pc, #56]	; (8008bc0 <netconn_recv_data+0x184>)
 8008b86:	f010 fb6f 	bl	8019268 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	891b      	ldrh	r3, [r3, #8]
 8008b90:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d005      	beq.n	8008ba6 <netconn_recv_data+0x16a>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	8bfa      	ldrh	r2, [r7, #30]
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	0801a804 	.word	0x0801a804
 8008bbc:	0801aa1c 	.word	0x0801aa1c
 8008bc0:	0801a85c 	.word	0x0801a85c
 8008bc4:	0801aa3c 	.word	0x0801aa3c
 8008bc8:	0801aa58 	.word	0x0801aa58

08008bcc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d005      	beq.n	8008bea <netconn_tcp_recvd_msg+0x1e>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d009      	beq.n	8008bfe <netconn_tcp_recvd_msg+0x32>
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <netconn_tcp_recvd_msg+0x50>)
 8008bec:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008bf0:	490b      	ldr	r1, [pc, #44]	; (8008c20 <netconn_tcp_recvd_msg+0x54>)
 8008bf2:	480c      	ldr	r0, [pc, #48]	; (8008c24 <netconn_tcp_recvd_msg+0x58>)
 8008bf4:	f010 fb38 	bl	8019268 <iprintf>
 8008bf8:	f06f 030f 	mvn.w	r3, #15
 8008bfc:	e00a      	b.n	8008c14 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	4806      	ldr	r0, [pc, #24]	; (8008c28 <netconn_tcp_recvd_msg+0x5c>)
 8008c0e:	f7ff fd15 	bl	800863c <netconn_apimsg>
 8008c12:	4603      	mov	r3, r0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	0801a804 	.word	0x0801a804
 8008c20:	0801aa64 	.word	0x0801aa64
 8008c24:	0801a85c 	.word	0x0801a85c
 8008c28:	0800a491 	.word	0x0800a491

08008c2c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b090      	sub	sp, #64	; 0x40
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	4613      	mov	r3, r2
 8008c38:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3310      	adds	r3, #16
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f010 f8bd 	bl	8018dbe <sys_mbox_valid>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d102      	bne.n	8008c50 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008c4a:	f06f 030a 	mvn.w	r3, #10
 8008c4e:	e06d      	b.n	8008d2c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	7f1b      	ldrb	r3, [r3, #28]
 8008c54:	b25b      	sxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	da07      	bge.n	8008c6a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	7f1b      	ldrb	r3, [r3, #28]
 8008c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008c68:	e039      	b.n	8008cde <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f7ff fee3 	bl	8008a3c <netconn_recv_data>
 8008c76:	4603      	mov	r3, r0
 8008c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8008c7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008c84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c88:	e050      	b.n	8008d2c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10e      	bne.n	8008cb8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <netconn_recv_data_tcp+0x7a>
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	891b      	ldrh	r3, [r3, #8]
 8008ca4:	e000      	b.n	8008ca8 <netconn_recv_data_tcp+0x7c>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008caa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008cac:	f107 0214 	add.w	r2, r7, #20
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff ff8a 	bl	8008bcc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d134      	bne.n	8008d28 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	f003 0310 	and.w	r3, r3, #16
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	7f1b      	ldrb	r3, [r3, #28]
 8008ccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008cd6:	f06f 0306 	mvn.w	r3, #6
 8008cda:	e027      	b.n	8008d2c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008cdc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d005      	beq.n	8008cf2 <netconn_recv_data_tcp+0xc6>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	2200      	movs	r2, #0
 8008cec:	2101      	movs	r1, #1
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10f      	bne.n	8008d1a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 f9a3 	bl	8009046 <netconn_err>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008d06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <netconn_recv_data_tcp+0xe8>
          return err;
 8008d0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d12:	e00b      	b.n	8008d2c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008d14:	f06f 030d 	mvn.w	r3, #13
 8008d18:	e008      	b.n	8008d2c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 f955 	bl	8008fcc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008d22:	f06f 030e 	mvn.w	r3, #14
 8008d26:	e001      	b.n	8008d2c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008d28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3740      	adds	r7, #64	; 0x40
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <netconn_recv+0x28>
 8008d48:	4b32      	ldr	r3, [pc, #200]	; (8008e14 <netconn_recv+0xe0>)
 8008d4a:	f240 3263 	movw	r2, #867	; 0x363
 8008d4e:	4932      	ldr	r1, [pc, #200]	; (8008e18 <netconn_recv+0xe4>)
 8008d50:	4832      	ldr	r0, [pc, #200]	; (8008e1c <netconn_recv+0xe8>)
 8008d52:	f010 fa89 	bl	8019268 <iprintf>
 8008d56:	f06f 030f 	mvn.w	r3, #15
 8008d5a:	e056      	b.n	8008e0a <netconn_recv+0xd6>
  *new_buf = NULL;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d109      	bne.n	8008d7c <netconn_recv+0x48>
 8008d68:	4b2a      	ldr	r3, [pc, #168]	; (8008e14 <netconn_recv+0xe0>)
 8008d6a:	f240 3265 	movw	r2, #869	; 0x365
 8008d6e:	492c      	ldr	r1, [pc, #176]	; (8008e20 <netconn_recv+0xec>)
 8008d70:	482a      	ldr	r0, [pc, #168]	; (8008e1c <netconn_recv+0xe8>)
 8008d72:	f010 fa79 	bl	8019268 <iprintf>
 8008d76:	f06f 030f 	mvn.w	r3, #15
 8008d7a:	e046      	b.n	8008e0a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	d13a      	bne.n	8008dfe <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008d8c:	2006      	movs	r0, #6
 8008d8e:	f003 fc13 	bl	800c5b8 <memp_malloc>
 8008d92:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d102      	bne.n	8008da0 <netconn_recv+0x6c>
      return ERR_MEM;
 8008d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d9e:	e034      	b.n	8008e0a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008da0:	f107 030c 	add.w	r3, r7, #12
 8008da4:	2200      	movs	r2, #0
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff ff3f 	bl	8008c2c <netconn_recv_data_tcp>
 8008dae:	4603      	mov	r3, r0
 8008db0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008db2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d006      	beq.n	8008dc8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8008dba:	6979      	ldr	r1, [r7, #20]
 8008dbc:	2006      	movs	r0, #6
 8008dbe:	f003 fc71 	bl	800c6a4 <memp_free>
      return err;
 8008dc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008dc6:	e020      	b.n	8008e0a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <netconn_recv+0xa8>
 8008dce:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <netconn_recv+0xe0>)
 8008dd0:	f240 3279 	movw	r2, #889	; 0x379
 8008dd4:	4913      	ldr	r1, [pc, #76]	; (8008e24 <netconn_recv+0xf0>)
 8008dd6:	4811      	ldr	r0, [pc, #68]	; (8008e1c <netconn_recv+0xe8>)
 8008dd8:	f010 fa46 	bl	8019268 <iprintf>

    buf->p = p;
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2200      	movs	r2, #0
 8008dec:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2200      	movs	r2, #0
 8008df2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e005      	b.n	8008e0a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008dfe:	2200      	movs	r2, #0
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff fe1a 	bl	8008a3c <netconn_recv_data>
 8008e08:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	0801a804 	.word	0x0801a804
 8008e18:	0801aa1c 	.word	0x0801aa1c
 8008e1c:	0801a85c 	.word	0x0801a85c
 8008e20:	0801aa3c 	.word	0x0801aa3c
 8008e24:	0801aab4 	.word	0x0801aab4

08008e28 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008e3e:	78fa      	ldrb	r2, [r7, #3]
 8008e40:	f107 0110 	add.w	r1, r7, #16
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 f805 	bl	8008e5c <netconn_write_vectors_partly>
 8008e52:	4603      	mov	r3, r0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b092      	sub	sp, #72	; 0x48
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	4611      	mov	r1, r2
 8008e68:	461a      	mov	r2, r3
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	80fb      	strh	r3, [r7, #6]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d109      	bne.n	8008e8c <netconn_write_vectors_partly+0x30>
 8008e78:	4b4e      	ldr	r3, [pc, #312]	; (8008fb4 <netconn_write_vectors_partly+0x158>)
 8008e7a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008e7e:	494e      	ldr	r1, [pc, #312]	; (8008fb8 <netconn_write_vectors_partly+0x15c>)
 8008e80:	484e      	ldr	r0, [pc, #312]	; (8008fbc <netconn_write_vectors_partly+0x160>)
 8008e82:	f010 f9f1 	bl	8019268 <iprintf>
 8008e86:	f06f 030f 	mvn.w	r3, #15
 8008e8a:	e08e      	b.n	8008faa <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d009      	beq.n	8008eac <netconn_write_vectors_partly+0x50>
 8008e98:	4b46      	ldr	r3, [pc, #280]	; (8008fb4 <netconn_write_vectors_partly+0x158>)
 8008e9a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008e9e:	4948      	ldr	r1, [pc, #288]	; (8008fc0 <netconn_write_vectors_partly+0x164>)
 8008ea0:	4846      	ldr	r0, [pc, #280]	; (8008fbc <netconn_write_vectors_partly+0x160>)
 8008ea2:	f010 f9e1 	bl	8019268 <iprintf>
 8008ea6:	f06f 0305 	mvn.w	r3, #5
 8008eaa:	e07e      	b.n	8008faa <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	7f1b      	ldrb	r3, [r3, #28]
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d104      	bne.n	8008ec2 <netconn_write_vectors_partly+0x66>
 8008eb8:	797b      	ldrb	r3, [r7, #5]
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <netconn_write_vectors_partly+0x6a>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <netconn_write_vectors_partly+0x6c>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008ecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d005      	beq.n	8008ee0 <netconn_write_vectors_partly+0x84>
 8008ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d102      	bne.n	8008ee0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008eda:	f06f 0305 	mvn.w	r3, #5
 8008ede:	e064      	b.n	8008faa <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ee8:	e015      	b.n	8008f16 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ef6:	4413      	add	r3, r2
 8008ef8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008efc:	00db      	lsls	r3, r3, #3
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	4413      	add	r3, r2
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d202      	bcs.n	8008f10 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008f0a:	f06f 0305 	mvn.w	r3, #5
 8008f0e:	e04c      	b.n	8008faa <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f12:	3301      	adds	r3, #1
 8008f14:	643b      	str	r3, [r7, #64]	; 0x40
 8008f16:	88fb      	ldrh	r3, [r7, #6]
 8008f18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	dbe5      	blt.n	8008eea <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e040      	b.n	8008faa <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da0a      	bge.n	8008f44 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008f34:	f06f 0305 	mvn.w	r3, #5
 8008f38:	e037      	b.n	8008faa <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008f3a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008f3e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008f4c:	88fb      	ldrh	r3, [r7, #6]
 8008f4e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008f54:	797b      	ldrb	r3, [r7, #5]
 8008f56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008f62:	f107 0314 	add.w	r3, r7, #20
 8008f66:	4619      	mov	r1, r3
 8008f68:	4816      	ldr	r0, [pc, #88]	; (8008fc4 <netconn_write_vectors_partly+0x168>)
 8008f6a:	f7ff fb67 	bl	800863c <netconn_apimsg>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008f74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d114      	bne.n	8008fa6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f86:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008f88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d006      	beq.n	8008fa6 <netconn_write_vectors_partly+0x14a>
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <netconn_write_vectors_partly+0x158>)
 8008f9a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008f9e:	490a      	ldr	r1, [pc, #40]	; (8008fc8 <netconn_write_vectors_partly+0x16c>)
 8008fa0:	4806      	ldr	r0, [pc, #24]	; (8008fbc <netconn_write_vectors_partly+0x160>)
 8008fa2:	f010 f961 	bl	8019268 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008fa6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3748      	adds	r7, #72	; 0x48
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	0801a804 	.word	0x0801a804
 8008fb8:	0801aadc 	.word	0x0801aadc
 8008fbc:	0801a85c 	.word	0x0801a85c
 8008fc0:	0801aaf8 	.word	0x0801aaf8
 8008fc4:	0800a895 	.word	0x0800a895
 8008fc8:	0801ab1c 	.word	0x0801ab1c

08008fcc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08c      	sub	sp, #48	; 0x30
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d109      	bne.n	8008ff2 <netconn_close_shutdown+0x26>
 8008fde:	4b0f      	ldr	r3, [pc, #60]	; (800901c <netconn_close_shutdown+0x50>)
 8008fe0:	f240 4247 	movw	r2, #1095	; 0x447
 8008fe4:	490e      	ldr	r1, [pc, #56]	; (8009020 <netconn_close_shutdown+0x54>)
 8008fe6:	480f      	ldr	r0, [pc, #60]	; (8009024 <netconn_close_shutdown+0x58>)
 8008fe8:	f010 f93e 	bl	8019268 <iprintf>
 8008fec:	f06f 030f 	mvn.w	r3, #15
 8008ff0:	e010      	b.n	8009014 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008ffa:	2329      	movs	r3, #41	; 0x29
 8008ffc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008ffe:	f107 030c 	add.w	r3, r7, #12
 8009002:	4619      	mov	r1, r3
 8009004:	4808      	ldr	r0, [pc, #32]	; (8009028 <netconn_close_shutdown+0x5c>)
 8009006:	f7ff fb19 	bl	800863c <netconn_apimsg>
 800900a:	4603      	mov	r3, r0
 800900c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009010:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009014:	4618      	mov	r0, r3
 8009016:	3730      	adds	r7, #48	; 0x30
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	0801a804 	.word	0x0801a804
 8009020:	0801ab40 	.word	0x0801ab40
 8009024:	0801a85c 	.word	0x0801a85c
 8009028:	0800a9ad 	.word	0x0800a9ad

0800902c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009034:	2103      	movs	r1, #3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7ff ffc8 	bl	8008fcc <netconn_close_shutdown>
 800903c:	4603      	mov	r3, r0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <netconn_err+0x12>
    return ERR_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	e00d      	b.n	8009074 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009058:	f00f ffcc 	bl	8018ff4 <sys_arch_protect>
 800905c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	7a1b      	ldrb	r3, [r3, #8]
 8009062:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f00f ffd0 	bl	8019010 <sys_arch_unprotect>
  return err;
 8009070:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800908a:	f113 0f0d 	cmn.w	r3, #13
 800908e:	d009      	beq.n	80090a4 <lwip_netconn_err_to_msg+0x28>
 8009090:	f113 0f0d 	cmn.w	r3, #13
 8009094:	dc0c      	bgt.n	80090b0 <lwip_netconn_err_to_msg+0x34>
 8009096:	f113 0f0f 	cmn.w	r3, #15
 800909a:	d007      	beq.n	80090ac <lwip_netconn_err_to_msg+0x30>
 800909c:	f113 0f0e 	cmn.w	r3, #14
 80090a0:	d002      	beq.n	80090a8 <lwip_netconn_err_to_msg+0x2c>
 80090a2:	e005      	b.n	80090b0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80090a4:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <lwip_netconn_err_to_msg+0x54>)
 80090a6:	e00e      	b.n	80090c6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <lwip_netconn_err_to_msg+0x58>)
 80090aa:	e00c      	b.n	80090c6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <lwip_netconn_err_to_msg+0x5c>)
 80090ae:	e00a      	b.n	80090c6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80090b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <lwip_netconn_err_to_msg+0x48>
 80090b8:	4b08      	ldr	r3, [pc, #32]	; (80090dc <lwip_netconn_err_to_msg+0x60>)
 80090ba:	227d      	movs	r2, #125	; 0x7d
 80090bc:	4908      	ldr	r1, [pc, #32]	; (80090e0 <lwip_netconn_err_to_msg+0x64>)
 80090be:	4809      	ldr	r0, [pc, #36]	; (80090e4 <lwip_netconn_err_to_msg+0x68>)
 80090c0:	f010 f8d2 	bl	8019268 <iprintf>
      return NULL;
 80090c4:	2300      	movs	r3, #0
  }
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	0801e2b8 	.word	0x0801e2b8
 80090d4:	0801e2b9 	.word	0x0801e2b9
 80090d8:	0801e2ba 	.word	0x0801e2ba
 80090dc:	0801ab5c 	.word	0x0801ab5c
 80090e0:	0801ab90 	.word	0x0801ab90
 80090e4:	0801aba0 	.word	0x0801aba0

080090e8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d105      	bne.n	8009104 <lwip_netconn_is_err_msg+0x1c>
 80090f8:	4b12      	ldr	r3, [pc, #72]	; (8009144 <lwip_netconn_is_err_msg+0x5c>)
 80090fa:	2285      	movs	r2, #133	; 0x85
 80090fc:	4912      	ldr	r1, [pc, #72]	; (8009148 <lwip_netconn_is_err_msg+0x60>)
 80090fe:	4813      	ldr	r0, [pc, #76]	; (800914c <lwip_netconn_is_err_msg+0x64>)
 8009100:	f010 f8b2 	bl	8019268 <iprintf>

  if (msg == &netconn_aborted) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a12      	ldr	r2, [pc, #72]	; (8009150 <lwip_netconn_is_err_msg+0x68>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d104      	bne.n	8009116 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	22f3      	movs	r2, #243	; 0xf3
 8009110:	701a      	strb	r2, [r3, #0]
    return 1;
 8009112:	2301      	movs	r3, #1
 8009114:	e012      	b.n	800913c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a0e      	ldr	r2, [pc, #56]	; (8009154 <lwip_netconn_is_err_msg+0x6c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d104      	bne.n	8009128 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	22f2      	movs	r2, #242	; 0xf2
 8009122:	701a      	strb	r2, [r3, #0]
    return 1;
 8009124:	2301      	movs	r3, #1
 8009126:	e009      	b.n	800913c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a0b      	ldr	r2, [pc, #44]	; (8009158 <lwip_netconn_is_err_msg+0x70>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d104      	bne.n	800913a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	22f1      	movs	r2, #241	; 0xf1
 8009134:	701a      	strb	r2, [r3, #0]
    return 1;
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	0801ab5c 	.word	0x0801ab5c
 8009148:	0801abc8 	.word	0x0801abc8
 800914c:	0801aba0 	.word	0x0801aba0
 8009150:	0801e2b8 	.word	0x0801e2b8
 8009154:	0801e2b9 	.word	0x0801e2b9
 8009158:	0801e2ba 	.word	0x0801e2ba

0800915c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d105      	bne.n	800917c <recv_udp+0x20>
 8009170:	4b34      	ldr	r3, [pc, #208]	; (8009244 <recv_udp+0xe8>)
 8009172:	22e5      	movs	r2, #229	; 0xe5
 8009174:	4934      	ldr	r1, [pc, #208]	; (8009248 <recv_udp+0xec>)
 8009176:	4835      	ldr	r0, [pc, #212]	; (800924c <recv_udp+0xf0>)
 8009178:	f010 f876 	bl	8019268 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d105      	bne.n	800918e <recv_udp+0x32>
 8009182:	4b30      	ldr	r3, [pc, #192]	; (8009244 <recv_udp+0xe8>)
 8009184:	22e6      	movs	r2, #230	; 0xe6
 8009186:	4932      	ldr	r1, [pc, #200]	; (8009250 <recv_udp+0xf4>)
 8009188:	4830      	ldr	r0, [pc, #192]	; (800924c <recv_udp+0xf0>)
 800918a:	f010 f86d 	bl	8019268 <iprintf>
  conn = (struct netconn *)arg;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d103      	bne.n	80091a0 <recv_udp+0x44>
    pbuf_free(p);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f004 f933 	bl	800d404 <pbuf_free>
    return;
 800919e:	e04d      	b.n	800923c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d005      	beq.n	80091b6 <recv_udp+0x5a>
 80091aa:	4b26      	ldr	r3, [pc, #152]	; (8009244 <recv_udp+0xe8>)
 80091ac:	22ee      	movs	r2, #238	; 0xee
 80091ae:	4929      	ldr	r1, [pc, #164]	; (8009254 <recv_udp+0xf8>)
 80091b0:	4826      	ldr	r0, [pc, #152]	; (800924c <recv_udp+0xf0>)
 80091b2:	f010 f859 	bl	8019268 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	3310      	adds	r3, #16
 80091ba:	4618      	mov	r0, r3
 80091bc:	f00f fdff 	bl	8018dbe <sys_mbox_valid>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d103      	bne.n	80091ce <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f004 f91c 	bl	800d404 <pbuf_free>
    return;
 80091cc:	e036      	b.n	800923c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80091ce:	2006      	movs	r0, #6
 80091d0:	f003 f9f2 	bl	800c5b8 <memp_malloc>
 80091d4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d103      	bne.n	80091e4 <recv_udp+0x88>
    pbuf_free(p);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f004 f911 	bl	800d404 <pbuf_free>
    return;
 80091e2:	e02b      	b.n	800923c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <recv_udp+0xa0>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	e000      	b.n	80091fe <recv_udp+0xa2>
 80091fc:	2300      	movs	r3, #0
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009206:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	891b      	ldrh	r3, [r3, #8]
 800920c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	3310      	adds	r3, #16
 8009212:	69b9      	ldr	r1, [r7, #24]
 8009214:	4618      	mov	r0, r3
 8009216:	f00f fd5d 	bl	8018cd4 <sys_mbox_trypost>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009220:	69b8      	ldr	r0, [r7, #24]
 8009222:	f001 fc4f 	bl	800aac4 <netbuf_delete>
    return;
 8009226:	e009      	b.n	800923c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d005      	beq.n	800923c <recv_udp+0xe0>
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	8afa      	ldrh	r2, [r7, #22]
 8009236:	2100      	movs	r1, #0
 8009238:	69f8      	ldr	r0, [r7, #28]
 800923a:	4798      	blx	r3
  }
}
 800923c:	3720      	adds	r7, #32
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	0801ab5c 	.word	0x0801ab5c
 8009248:	0801abd4 	.word	0x0801abd4
 800924c:	0801aba0 	.word	0x0801aba0
 8009250:	0801abf8 	.word	0x0801abf8
 8009254:	0801ac18 	.word	0x0801ac18

08009258 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d106      	bne.n	800927a <recv_tcp+0x22>
 800926c:	4b36      	ldr	r3, [pc, #216]	; (8009348 <recv_tcp+0xf0>)
 800926e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009272:	4936      	ldr	r1, [pc, #216]	; (800934c <recv_tcp+0xf4>)
 8009274:	4836      	ldr	r0, [pc, #216]	; (8009350 <recv_tcp+0xf8>)
 8009276:	f00f fff7 	bl	8019268 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d106      	bne.n	800928e <recv_tcp+0x36>
 8009280:	4b31      	ldr	r3, [pc, #196]	; (8009348 <recv_tcp+0xf0>)
 8009282:	f240 122d 	movw	r2, #301	; 0x12d
 8009286:	4933      	ldr	r1, [pc, #204]	; (8009354 <recv_tcp+0xfc>)
 8009288:	4831      	ldr	r0, [pc, #196]	; (8009350 <recv_tcp+0xf8>)
 800928a:	f00f ffed 	bl	8019268 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800928e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d006      	beq.n	80092a4 <recv_tcp+0x4c>
 8009296:	4b2c      	ldr	r3, [pc, #176]	; (8009348 <recv_tcp+0xf0>)
 8009298:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800929c:	492e      	ldr	r1, [pc, #184]	; (8009358 <recv_tcp+0x100>)
 800929e:	482c      	ldr	r0, [pc, #176]	; (8009350 <recv_tcp+0xf8>)
 80092a0:	f00f ffe2 	bl	8019268 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d102      	bne.n	80092b4 <recv_tcp+0x5c>
    return ERR_VAL;
 80092ae:	f06f 0305 	mvn.w	r3, #5
 80092b2:	e045      	b.n	8009340 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d006      	beq.n	80092cc <recv_tcp+0x74>
 80092be:	4b22      	ldr	r3, [pc, #136]	; (8009348 <recv_tcp+0xf0>)
 80092c0:	f240 1235 	movw	r2, #309	; 0x135
 80092c4:	4925      	ldr	r1, [pc, #148]	; (800935c <recv_tcp+0x104>)
 80092c6:	4822      	ldr	r0, [pc, #136]	; (8009350 <recv_tcp+0xf8>)
 80092c8:	f00f ffce 	bl	8019268 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	3310      	adds	r3, #16
 80092d0:	4618      	mov	r0, r3
 80092d2:	f00f fd74 	bl	8018dbe <sys_mbox_valid>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10d      	bne.n	80092f8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d008      	beq.n	80092f4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	891b      	ldrh	r3, [r3, #8]
 80092e6:	4619      	mov	r1, r3
 80092e8:	68b8      	ldr	r0, [r7, #8]
 80092ea:	f005 f865 	bl	800e3b8 <tcp_recved>
      pbuf_free(p);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f004 f888 	bl	800d404 <pbuf_free>
    }
    return ERR_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	e023      	b.n	8009340 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d005      	beq.n	800930a <recv_tcp+0xb2>
    msg = p;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	891b      	ldrh	r3, [r3, #8]
 8009306:	83fb      	strh	r3, [r7, #30]
 8009308:	e003      	b.n	8009312 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800930a:	4b15      	ldr	r3, [pc, #84]	; (8009360 <recv_tcp+0x108>)
 800930c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	3310      	adds	r3, #16
 8009316:	69b9      	ldr	r1, [r7, #24]
 8009318:	4618      	mov	r0, r3
 800931a:	f00f fcdb 	bl	8018cd4 <sys_mbox_trypost>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009324:	f04f 33ff 	mov.w	r3, #4294967295
 8009328:	e00a      	b.n	8009340 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	2b00      	cmp	r3, #0
 8009330:	d005      	beq.n	800933e <recv_tcp+0xe6>
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009336:	8bfa      	ldrh	r2, [r7, #30]
 8009338:	2100      	movs	r1, #0
 800933a:	6978      	ldr	r0, [r7, #20]
 800933c:	4798      	blx	r3
  }

  return ERR_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	0801ab5c 	.word	0x0801ab5c
 800934c:	0801ac38 	.word	0x0801ac38
 8009350:	0801aba0 	.word	0x0801aba0
 8009354:	0801ac5c 	.word	0x0801ac5c
 8009358:	0801ac7c 	.word	0x0801ac7c
 800935c:	0801ac94 	.word	0x0801ac94
 8009360:	0801e2ba 	.word	0x0801e2ba

08009364 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d106      	bne.n	8009386 <poll_tcp+0x22>
 8009378:	4b29      	ldr	r3, [pc, #164]	; (8009420 <poll_tcp+0xbc>)
 800937a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800937e:	4929      	ldr	r1, [pc, #164]	; (8009424 <poll_tcp+0xc0>)
 8009380:	4829      	ldr	r0, [pc, #164]	; (8009428 <poll_tcp+0xc4>)
 8009382:	f00f ff71 	bl	8019268 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d104      	bne.n	8009398 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800938e:	2101      	movs	r1, #1
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f001 f8b3 	bl	800a4fc <lwip_netconn_do_writemore>
 8009396:	e016      	b.n	80093c6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	2b04      	cmp	r3, #4
 800939e:	d112      	bne.n	80093c6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00a      	beq.n	80093be <poll_tcp+0x5a>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	7a5b      	ldrb	r3, [r3, #9]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d005      	beq.n	80093be <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	7a5a      	ldrb	r2, [r3, #9]
 80093b8:	3a01      	subs	r2, #1
 80093ba:	b2d2      	uxtb	r2, r2
 80093bc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80093be:	2101      	movs	r1, #1
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fbf7 	bl	8009bb4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	7f1b      	ldrb	r3, [r3, #28]
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d021      	beq.n	8009416 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d01d      	beq.n	8009416 <poll_tcp+0xb2>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80093e2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80093e6:	d316      	bcc.n	8009416 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d810      	bhi.n	8009416 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	7f1b      	ldrb	r3, [r3, #28]
 80093f8:	f023 0310 	bic.w	r3, r3, #16
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009406:	2b00      	cmp	r3, #0
 8009408:	d005      	beq.n	8009416 <poll_tcp+0xb2>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	2200      	movs	r2, #0
 8009410:	2102      	movs	r1, #2
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	0801ab5c 	.word	0x0801ab5c
 8009424:	0801acb4 	.word	0x0801acb4
 8009428:	0801aba0 	.word	0x0801aba0

0800942c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d106      	bne.n	8009452 <sent_tcp+0x26>
 8009444:	4b20      	ldr	r3, [pc, #128]	; (80094c8 <sent_tcp+0x9c>)
 8009446:	f240 1293 	movw	r2, #403	; 0x193
 800944a:	4920      	ldr	r1, [pc, #128]	; (80094cc <sent_tcp+0xa0>)
 800944c:	4820      	ldr	r0, [pc, #128]	; (80094d0 <sent_tcp+0xa4>)
 800944e:	f00f ff0b 	bl	8019268 <iprintf>

  if (conn) {
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d032      	beq.n	80094be <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	785b      	ldrb	r3, [r3, #1]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d104      	bne.n	800946a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009460:	2101      	movs	r1, #1
 8009462:	6978      	ldr	r0, [r7, #20]
 8009464:	f001 f84a 	bl	800a4fc <lwip_netconn_do_writemore>
 8009468:	e007      	b.n	800947a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	785b      	ldrb	r3, [r3, #1]
 800946e:	2b04      	cmp	r3, #4
 8009470:	d103      	bne.n	800947a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009472:	2101      	movs	r1, #1
 8009474:	6978      	ldr	r0, [r7, #20]
 8009476:	f000 fb9d 	bl	8009bb4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d01d      	beq.n	80094be <sent_tcp+0x92>
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800948a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800948e:	d316      	bcc.n	80094be <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009498:	2b04      	cmp	r3, #4
 800949a:	d810      	bhi.n	80094be <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	7f1b      	ldrb	r3, [r3, #28]
 80094a0:	f023 0310 	bic.w	r3, r3, #16
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <sent_tcp+0x92>
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	88fa      	ldrh	r2, [r7, #6]
 80094b8:	2102      	movs	r1, #2
 80094ba:	6978      	ldr	r0, [r7, #20]
 80094bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	0801ab5c 	.word	0x0801ab5c
 80094cc:	0801acb4 	.word	0x0801acb4
 80094d0:	0801aba0 	.word	0x0801aba0

080094d4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <err_tcp+0x24>
 80094ea:	4b5f      	ldr	r3, [pc, #380]	; (8009668 <err_tcp+0x194>)
 80094ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80094f0:	495e      	ldr	r1, [pc, #376]	; (800966c <err_tcp+0x198>)
 80094f2:	485f      	ldr	r0, [pc, #380]	; (8009670 <err_tcp+0x19c>)
 80094f4:	f00f feb8 	bl	8019268 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80094f8:	f00f fd7c 	bl	8018ff4 <sys_arch_protect>
 80094fc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	2200      	movs	r2, #0
 8009502:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	7f1b      	ldrb	r3, [r3, #28]
 800950e:	f043 0301 	orr.w	r3, r3, #1
 8009512:	b2da      	uxtb	r2, r3
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	785b      	ldrb	r3, [r3, #1]
 800951c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	2200      	movs	r2, #0
 8009522:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009524:	69b8      	ldr	r0, [r7, #24]
 8009526:	f00f fd73 	bl	8019010 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <err_tcp+0x6a>
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	2200      	movs	r2, #0
 8009538:	2104      	movs	r1, #4
 800953a:	69f8      	ldr	r0, [r7, #28]
 800953c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <err_tcp+0x7e>
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	2200      	movs	r2, #0
 800954c:	2100      	movs	r1, #0
 800954e:	69f8      	ldr	r0, [r7, #28]
 8009550:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	2b00      	cmp	r3, #0
 8009558:	d005      	beq.n	8009566 <err_tcp+0x92>
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	2200      	movs	r2, #0
 8009560:	2102      	movs	r1, #2
 8009562:	69f8      	ldr	r0, [r7, #28]
 8009564:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800956a:	4618      	mov	r0, r3
 800956c:	f7ff fd86 	bl	800907c <lwip_netconn_err_to_msg>
 8009570:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	3310      	adds	r3, #16
 8009576:	4618      	mov	r0, r3
 8009578:	f00f fc21 	bl	8018dbe <sys_mbox_valid>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	3310      	adds	r3, #16
 8009586:	6939      	ldr	r1, [r7, #16]
 8009588:	4618      	mov	r0, r3
 800958a:	f00f fba3 	bl	8018cd4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	3314      	adds	r3, #20
 8009592:	4618      	mov	r0, r3
 8009594:	f00f fc13 	bl	8018dbe <sys_mbox_valid>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d005      	beq.n	80095aa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	3314      	adds	r3, #20
 80095a2:	6939      	ldr	r1, [r7, #16]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f00f fb95 	bl	8018cd4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d005      	beq.n	80095bc <err_tcp+0xe8>
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d002      	beq.n	80095bc <err_tcp+0xe8>
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d143      	bne.n	8009644 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	7f1b      	ldrb	r3, [r3, #28]
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bf14      	ite	ne
 80095c8:	2301      	movne	r3, #1
 80095ca:	2300      	moveq	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	7f1b      	ldrb	r3, [r3, #28]
 80095d4:	f023 0304 	bic.w	r3, r3, #4
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d13b      	bne.n	800965c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	6a1b      	ldr	r3, [r3, #32]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d106      	bne.n	80095fa <err_tcp+0x126>
 80095ec:	4b1e      	ldr	r3, [pc, #120]	; (8009668 <err_tcp+0x194>)
 80095ee:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80095f2:	4920      	ldr	r1, [pc, #128]	; (8009674 <err_tcp+0x1a0>)
 80095f4:	481e      	ldr	r0, [pc, #120]	; (8009670 <err_tcp+0x19c>)
 80095f6:	f00f fe37 	bl	8019268 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	d104      	bne.n	800960a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	2200      	movs	r2, #0
 8009606:	711a      	strb	r2, [r3, #4]
 8009608:	e003      	b.n	8009612 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	78fa      	ldrb	r2, [r7, #3]
 8009610:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	330c      	adds	r3, #12
 800961a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800961c:	68b8      	ldr	r0, [r7, #8]
 800961e:	f00f fc5f 	bl	8018ee0 <sys_sem_valid>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <err_tcp+0x162>
 8009628:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <err_tcp+0x194>)
 800962a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800962e:	4912      	ldr	r1, [pc, #72]	; (8009678 <err_tcp+0x1a4>)
 8009630:	480f      	ldr	r0, [pc, #60]	; (8009670 <err_tcp+0x19c>)
 8009632:	f00f fe19 	bl	8019268 <iprintf>
      conn->current_msg = NULL;
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	2200      	movs	r2, #0
 800963a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800963c:	68b8      	ldr	r0, [r7, #8]
 800963e:	f00f fc35 	bl	8018eac <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009642:	e00b      	b.n	800965c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d008      	beq.n	800965e <err_tcp+0x18a>
 800964c:	4b06      	ldr	r3, [pc, #24]	; (8009668 <err_tcp+0x194>)
 800964e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009652:	490a      	ldr	r1, [pc, #40]	; (800967c <err_tcp+0x1a8>)
 8009654:	4806      	ldr	r0, [pc, #24]	; (8009670 <err_tcp+0x19c>)
 8009656:	f00f fe07 	bl	8019268 <iprintf>
  }
}
 800965a:	e000      	b.n	800965e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800965c:	bf00      	nop
}
 800965e:	bf00      	nop
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	0801ab5c 	.word	0x0801ab5c
 800966c:	0801acb4 	.word	0x0801acb4
 8009670:	0801aba0 	.word	0x0801aba0
 8009674:	0801acc4 	.word	0x0801acc4
 8009678:	0801ace0 	.word	0x0801ace0
 800967c:	0801acfc 	.word	0x0801acfc

08009680 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f005 fe8d 	bl	800f3b0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009696:	490a      	ldr	r1, [pc, #40]	; (80096c0 <setup_tcp+0x40>)
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f005 fe9b 	bl	800f3d4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800969e:	4909      	ldr	r1, [pc, #36]	; (80096c4 <setup_tcp+0x44>)
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f005 feb9 	bl	800f418 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80096a6:	2202      	movs	r2, #2
 80096a8:	4907      	ldr	r1, [pc, #28]	; (80096c8 <setup_tcp+0x48>)
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f005 ff10 	bl	800f4d0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80096b0:	4906      	ldr	r1, [pc, #24]	; (80096cc <setup_tcp+0x4c>)
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f005 fed2 	bl	800f45c <tcp_err>
}
 80096b8:	bf00      	nop
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	08009259 	.word	0x08009259
 80096c4:	0800942d 	.word	0x0800942d
 80096c8:	08009365 	.word	0x08009365
 80096cc:	080094d5 	.word	0x080094d5

080096d0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80096d0:	b590      	push	{r4, r7, lr}
 80096d2:	b089      	sub	sp, #36	; 0x24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <accept_function+0x1e>
    return ERR_VAL;
 80096e8:	f06f 0305 	mvn.w	r3, #5
 80096ec:	e0a1      	b.n	8009832 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	3314      	adds	r3, #20
 80096f2:	4618      	mov	r0, r3
 80096f4:	f00f fb63 	bl	8018dbe <sys_mbox_valid>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d102      	bne.n	8009704 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80096fe:	f06f 0305 	mvn.w	r3, #5
 8009702:	e096      	b.n	8009832 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d11b      	bne.n	8009742 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	f103 0414 	add.w	r4, r3, #20
 8009710:	f06f 000c 	mvn.w	r0, #12
 8009714:	f7ff fcb2 	bl	800907c <lwip_netconn_err_to_msg>
 8009718:	4603      	mov	r3, r0
 800971a:	4619      	mov	r1, r3
 800971c:	4620      	mov	r0, r4
 800971e:	f00f fad9 	bl	8018cd4 <sys_mbox_trypost>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d109      	bne.n	800973c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	d005      	beq.n	800973c <accept_function+0x6c>
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	69f8      	ldr	r0, [r7, #28]
 800973a:	4798      	blx	r3
    }
    return ERR_VAL;
 800973c:	f06f 0305 	mvn.w	r3, #5
 8009740:	e077      	b.n	8009832 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d006      	beq.n	8009758 <accept_function+0x88>
 800974a:	4b3c      	ldr	r3, [pc, #240]	; (800983c <accept_function+0x16c>)
 800974c:	f240 222a 	movw	r2, #554	; 0x22a
 8009750:	493b      	ldr	r1, [pc, #236]	; (8009840 <accept_function+0x170>)
 8009752:	483c      	ldr	r0, [pc, #240]	; (8009844 <accept_function+0x174>)
 8009754:	f00f fd88 	bl	8019268 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	781a      	ldrb	r2, [r3, #0]
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	4619      	mov	r1, r3
 8009762:	4610      	mov	r0, r2
 8009764:	f000 f8f0 	bl	8009948 <netconn_alloc>
 8009768:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d11b      	bne.n	80097a8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	f103 0414 	add.w	r4, r3, #20
 8009776:	f06f 000c 	mvn.w	r0, #12
 800977a:	f7ff fc7f 	bl	800907c <lwip_netconn_err_to_msg>
 800977e:	4603      	mov	r3, r0
 8009780:	4619      	mov	r1, r3
 8009782:	4620      	mov	r0, r4
 8009784:	f00f faa6 	bl	8018cd4 <sys_mbox_trypost>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d109      	bne.n	80097a2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	2b00      	cmp	r3, #0
 8009794:	d005      	beq.n	80097a2 <accept_function+0xd2>
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	2200      	movs	r2, #0
 800979c:	2100      	movs	r1, #0
 800979e:	69f8      	ldr	r0, [r7, #28]
 80097a0:	4798      	blx	r3
    }
    return ERR_MEM;
 80097a2:	f04f 33ff 	mov.w	r3, #4294967295
 80097a6:	e044      	b.n	8009832 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80097ae:	69b8      	ldr	r0, [r7, #24]
 80097b0:	f7ff ff66 	bl	8009680 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	3314      	adds	r3, #20
 80097b8:	69b9      	ldr	r1, [r7, #24]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f00f fa8a 	bl	8018cd4 <sys_mbox_trypost>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d02a      	beq.n	800981c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80097cc:	2100      	movs	r1, #0
 80097ce:	6978      	ldr	r0, [r7, #20]
 80097d0:	f005 fdee 	bl	800f3b0 <tcp_arg>
    tcp_recv(pcb, NULL);
 80097d4:	2100      	movs	r1, #0
 80097d6:	6978      	ldr	r0, [r7, #20]
 80097d8:	f005 fdfc 	bl	800f3d4 <tcp_recv>
    tcp_sent(pcb, NULL);
 80097dc:	2100      	movs	r1, #0
 80097de:	6978      	ldr	r0, [r7, #20]
 80097e0:	f005 fe1a 	bl	800f418 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80097e4:	2200      	movs	r2, #0
 80097e6:	2100      	movs	r1, #0
 80097e8:	6978      	ldr	r0, [r7, #20]
 80097ea:	f005 fe71 	bl	800f4d0 <tcp_poll>
    tcp_err(pcb, NULL);
 80097ee:	2100      	movs	r1, #0
 80097f0:	6978      	ldr	r0, [r7, #20]
 80097f2:	f005 fe33 	bl	800f45c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2200      	movs	r2, #0
 80097fa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	3310      	adds	r3, #16
 8009800:	4618      	mov	r0, r3
 8009802:	f00f fa55 	bl	8018cb0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	3310      	adds	r3, #16
 800980a:	4618      	mov	r0, r3
 800980c:	f00f fae8 	bl	8018de0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009810:	69b8      	ldr	r0, [r7, #24]
 8009812:	f000 f907 	bl	8009a24 <netconn_free>
    return ERR_MEM;
 8009816:	f04f 33ff 	mov.w	r3, #4294967295
 800981a:	e00a      	b.n	8009832 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	d005      	beq.n	8009830 <accept_function+0x160>
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	2200      	movs	r2, #0
 800982a:	2100      	movs	r1, #0
 800982c:	69f8      	ldr	r0, [r7, #28]
 800982e:	4798      	blx	r3
  }

  return ERR_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3724      	adds	r7, #36	; 0x24
 8009836:	46bd      	mov	sp, r7
 8009838:	bd90      	pop	{r4, r7, pc}
 800983a:	bf00      	nop
 800983c:	0801ab5c 	.word	0x0801ab5c
 8009840:	0801ad18 	.word	0x0801ad18
 8009844:	0801aba0 	.word	0x0801aba0

08009848 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009850:	2300      	movs	r3, #0
 8009852:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d006      	beq.n	800986c <pcb_new+0x24>
 800985e:	4b2b      	ldr	r3, [pc, #172]	; (800990c <pcb_new+0xc4>)
 8009860:	f240 2265 	movw	r2, #613	; 0x265
 8009864:	492a      	ldr	r1, [pc, #168]	; (8009910 <pcb_new+0xc8>)
 8009866:	482b      	ldr	r0, [pc, #172]	; (8009914 <pcb_new+0xcc>)
 8009868:	f00f fcfe 	bl	8019268 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009876:	2b10      	cmp	r3, #16
 8009878:	d022      	beq.n	80098c0 <pcb_new+0x78>
 800987a:	2b20      	cmp	r3, #32
 800987c:	d133      	bne.n	80098e6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681c      	ldr	r4, [r3, #0]
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	4618      	mov	r0, r3
 8009886:	f00b f83a 	bl	80148fe <udp_new_ip_type>
 800988a:	4603      	mov	r3, r0
 800988c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d02a      	beq.n	80098ee <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b22      	cmp	r3, #34	; 0x22
 80098a0:	d104      	bne.n	80098ac <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6858      	ldr	r0, [r3, #4]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	4917      	ldr	r1, [pc, #92]	; (8009918 <pcb_new+0xd0>)
 80098ba:	f00a ffa7 	bl	801480c <udp_recv>
      }
      break;
 80098be:	e016      	b.n	80098ee <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681c      	ldr	r4, [r3, #0]
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f005 fd64 	bl	800f394 <tcp_new_ip_type>
 80098cc:	4603      	mov	r3, r0
 80098ce:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00b      	beq.n	80098f2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fece 	bl	8009680 <setup_tcp>
      }
      break;
 80098e4:	e005      	b.n	80098f2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	22fa      	movs	r2, #250	; 0xfa
 80098ea:	711a      	strb	r2, [r3, #4]
      return;
 80098ec:	e00a      	b.n	8009904 <pcb_new+0xbc>
      break;
 80098ee:	bf00      	nop
 80098f0:	e000      	b.n	80098f4 <pcb_new+0xac>
      break;
 80098f2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d102      	bne.n	8009904 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	22ff      	movs	r2, #255	; 0xff
 8009902:	711a      	strb	r2, [r3, #4]
  }
}
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	bd90      	pop	{r4, r7, pc}
 800990a:	bf00      	nop
 800990c:	0801ab5c 	.word	0x0801ab5c
 8009910:	0801ad40 	.word	0x0801ad40
 8009914:	0801aba0 	.word	0x0801aba0
 8009918:	0800915d 	.word	0x0800915d

0800991c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7ff ff85 	bl	8009848 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800993e:	bf00      	nop
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	6039      	str	r1, [r7, #0]
 8009952:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009958:	2007      	movs	r0, #7
 800995a:	f002 fe2d 	bl	800c5b8 <memp_malloc>
 800995e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <netconn_alloc+0x22>
    return NULL;
 8009966:	2300      	movs	r3, #0
 8009968:	e052      	b.n	8009a10 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	79fa      	ldrb	r2, [r7, #7]
 8009974:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009982:	2b10      	cmp	r3, #16
 8009984:	d004      	beq.n	8009990 <netconn_alloc+0x48>
 8009986:	2b20      	cmp	r3, #32
 8009988:	d105      	bne.n	8009996 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800998a:	2306      	movs	r3, #6
 800998c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800998e:	e00a      	b.n	80099a6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009990:	2306      	movs	r3, #6
 8009992:	617b      	str	r3, [r7, #20]
      break;
 8009994:	e007      	b.n	80099a6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009996:	4b20      	ldr	r3, [pc, #128]	; (8009a18 <netconn_alloc+0xd0>)
 8009998:	f240 22e5 	movw	r2, #741	; 0x2e5
 800999c:	491f      	ldr	r1, [pc, #124]	; (8009a1c <netconn_alloc+0xd4>)
 800999e:	4820      	ldr	r0, [pc, #128]	; (8009a20 <netconn_alloc+0xd8>)
 80099a0:	f00f fc62 	bl	8019268 <iprintf>
      goto free_and_return;
 80099a4:	e02f      	b.n	8009a06 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3310      	adds	r3, #16
 80099aa:	6979      	ldr	r1, [r7, #20]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f00f f95d 	bl	8018c6c <sys_mbox_new>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d125      	bne.n	8009a04 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	330c      	adds	r3, #12
 80099bc:	2100      	movs	r1, #0
 80099be:	4618      	mov	r0, r3
 80099c0:	f00f fa1b 	bl	8018dfa <sys_sem_new>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d005      	beq.n	80099d6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3310      	adds	r3, #16
 80099ce:	4618      	mov	r0, r3
 80099d0:	f00f f96e 	bl	8018cb0 <sys_mbox_free>
    goto free_and_return;
 80099d4:	e017      	b.n	8009a06 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3314      	adds	r3, #20
 80099da:	4618      	mov	r0, r3
 80099dc:	f00f fa00 	bl	8018de0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	7cfa      	ldrb	r2, [r7, #19]
 80099fe:	771a      	strb	r2, [r3, #28]
  return conn;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	e005      	b.n	8009a10 <netconn_alloc+0xc8>
    goto free_and_return;
 8009a04:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009a06:	68f9      	ldr	r1, [r7, #12]
 8009a08:	2007      	movs	r0, #7
 8009a0a:	f002 fe4b 	bl	800c6a4 <memp_free>
  return NULL;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	0801ab5c 	.word	0x0801ab5c
 8009a1c:	0801ad60 	.word	0x0801ad60
 8009a20:	0801aba0 	.word	0x0801aba0

08009a24 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d006      	beq.n	8009a42 <netconn_free+0x1e>
 8009a34:	4b1b      	ldr	r3, [pc, #108]	; (8009aa4 <netconn_free+0x80>)
 8009a36:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009a3a:	491b      	ldr	r1, [pc, #108]	; (8009aa8 <netconn_free+0x84>)
 8009a3c:	481b      	ldr	r0, [pc, #108]	; (8009aac <netconn_free+0x88>)
 8009a3e:	f00f fc13 	bl	8019268 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	3310      	adds	r3, #16
 8009a46:	4618      	mov	r0, r3
 8009a48:	f00f f9b9 	bl	8018dbe <sys_mbox_valid>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d006      	beq.n	8009a60 <netconn_free+0x3c>
 8009a52:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <netconn_free+0x80>)
 8009a54:	f240 3223 	movw	r2, #803	; 0x323
 8009a58:	4915      	ldr	r1, [pc, #84]	; (8009ab0 <netconn_free+0x8c>)
 8009a5a:	4814      	ldr	r0, [pc, #80]	; (8009aac <netconn_free+0x88>)
 8009a5c:	f00f fc04 	bl	8019268 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3314      	adds	r3, #20
 8009a64:	4618      	mov	r0, r3
 8009a66:	f00f f9aa 	bl	8018dbe <sys_mbox_valid>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <netconn_free+0x5a>
 8009a70:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <netconn_free+0x80>)
 8009a72:	f240 3226 	movw	r2, #806	; 0x326
 8009a76:	490f      	ldr	r1, [pc, #60]	; (8009ab4 <netconn_free+0x90>)
 8009a78:	480c      	ldr	r0, [pc, #48]	; (8009aac <netconn_free+0x88>)
 8009a7a:	f00f fbf5 	bl	8019268 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	330c      	adds	r3, #12
 8009a82:	4618      	mov	r0, r3
 8009a84:	f00f fa1f 	bl	8018ec6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	330c      	adds	r3, #12
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f00f fa38 	bl	8018f02 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	2007      	movs	r0, #7
 8009a96:	f002 fe05 	bl	800c6a4 <memp_free>
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	0801ab5c 	.word	0x0801ab5c
 8009aa8:	0801ad88 	.word	0x0801ad88
 8009aac:	0801aba0 	.word	0x0801aba0
 8009ab0:	0801adb8 	.word	0x0801adb8
 8009ab4:	0801adf4 	.word	0x0801adf4

08009ab8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3310      	adds	r3, #16
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f00f f97a 	bl	8018dbe <sys_mbox_valid>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d02f      	beq.n	8009b30 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009ad0:	e018      	b.n	8009b04 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ada:	2b10      	cmp	r3, #16
 8009adc:	d10e      	bne.n	8009afc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f107 020f 	add.w	r2, r7, #15
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fafe 	bl	80090e8 <lwip_netconn_is_err_msg>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d108      	bne.n	8009b04 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f003 fc85 	bl	800d404 <pbuf_free>
 8009afa:	e003      	b.n	8009b04 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 ffe0 	bl	800aac4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3310      	adds	r3, #16
 8009b08:	f107 0210 	add.w	r2, r7, #16
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f00f f939 	bl	8018d86 <sys_arch_mbox_tryfetch>
 8009b14:	4603      	mov	r3, r0
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1a:	d1da      	bne.n	8009ad2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3310      	adds	r3, #16
 8009b20:	4618      	mov	r0, r3
 8009b22:	f00f f8c5 	bl	8018cb0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3310      	adds	r3, #16
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f00f f958 	bl	8018de0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3314      	adds	r3, #20
 8009b34:	4618      	mov	r0, r3
 8009b36:	f00f f942 	bl	8018dbe <sys_mbox_valid>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d034      	beq.n	8009baa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009b40:	e01d      	b.n	8009b7e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	f107 020e 	add.w	r2, r7, #14
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7ff facc 	bl	80090e8 <lwip_netconn_is_err_msg>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d113      	bne.n	8009b7e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009b5a:	6978      	ldr	r0, [r7, #20]
 8009b5c:	f7ff ffac 	bl	8009ab8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d007      	beq.n	8009b78 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f004 fa49 	bl	800e004 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2200      	movs	r2, #0
 8009b76:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009b78:	6978      	ldr	r0, [r7, #20]
 8009b7a:	f7ff ff53 	bl	8009a24 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	3314      	adds	r3, #20
 8009b82:	f107 0210 	add.w	r2, r7, #16
 8009b86:	4611      	mov	r1, r2
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f00f f8fc 	bl	8018d86 <sys_arch_mbox_tryfetch>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b94:	d1d5      	bne.n	8009b42 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3314      	adds	r3, #20
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f00f f888 	bl	8018cb0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	3314      	adds	r3, #20
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f00f f91b 	bl	8018de0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009baa:	bf00      	nop
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <lwip_netconn_do_close_internal+0x24>
 8009bca:	4b87      	ldr	r3, [pc, #540]	; (8009de8 <lwip_netconn_do_close_internal+0x234>)
 8009bcc:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009bd0:	4986      	ldr	r1, [pc, #536]	; (8009dec <lwip_netconn_do_close_internal+0x238>)
 8009bd2:	4887      	ldr	r0, [pc, #540]	; (8009df0 <lwip_netconn_do_close_internal+0x23c>)
 8009bd4:	f00f fb48 	bl	8019268 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009be0:	2b10      	cmp	r3, #16
 8009be2:	d006      	beq.n	8009bf2 <lwip_netconn_do_close_internal+0x3e>
 8009be4:	4b80      	ldr	r3, [pc, #512]	; (8009de8 <lwip_netconn_do_close_internal+0x234>)
 8009be6:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009bea:	4982      	ldr	r1, [pc, #520]	; (8009df4 <lwip_netconn_do_close_internal+0x240>)
 8009bec:	4880      	ldr	r0, [pc, #512]	; (8009df0 <lwip_netconn_do_close_internal+0x23c>)
 8009bee:	f00f fb3b 	bl	8019268 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	785b      	ldrb	r3, [r3, #1]
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d006      	beq.n	8009c08 <lwip_netconn_do_close_internal+0x54>
 8009bfa:	4b7b      	ldr	r3, [pc, #492]	; (8009de8 <lwip_netconn_do_close_internal+0x234>)
 8009bfc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009c00:	497d      	ldr	r1, [pc, #500]	; (8009df8 <lwip_netconn_do_close_internal+0x244>)
 8009c02:	487b      	ldr	r0, [pc, #492]	; (8009df0 <lwip_netconn_do_close_internal+0x23c>)
 8009c04:	f00f fb30 	bl	8019268 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d106      	bne.n	8009c1e <lwip_netconn_do_close_internal+0x6a>
 8009c10:	4b75      	ldr	r3, [pc, #468]	; (8009de8 <lwip_netconn_do_close_internal+0x234>)
 8009c12:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009c16:	4979      	ldr	r1, [pc, #484]	; (8009dfc <lwip_netconn_do_close_internal+0x248>)
 8009c18:	4875      	ldr	r0, [pc, #468]	; (8009df0 <lwip_netconn_do_close_internal+0x23c>)
 8009c1a:	f00f fb25 	bl	8019268 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d106      	bne.n	8009c34 <lwip_netconn_do_close_internal+0x80>
 8009c26:	4b70      	ldr	r3, [pc, #448]	; (8009de8 <lwip_netconn_do_close_internal+0x234>)
 8009c28:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009c2c:	4974      	ldr	r1, [pc, #464]	; (8009e00 <lwip_netconn_do_close_internal+0x24c>)
 8009c2e:	4870      	ldr	r0, [pc, #448]	; (8009df0 <lwip_netconn_do_close_internal+0x23c>)
 8009c30:	f00f fb1a 	bl	8019268 <iprintf>

  tpcb = conn->pcb.tcp;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	7a1b      	ldrb	r3, [r3, #8]
 8009c40:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
 8009c4c:	f003 0302 	and.w	r3, r3, #2
 8009c50:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d102      	bne.n	8009c5e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	75bb      	strb	r3, [r7, #22]
 8009c5c:	e01f      	b.n	8009c9e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00e      	beq.n	8009c82 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009c68:	2b05      	cmp	r3, #5
 8009c6a:	d007      	beq.n	8009c7c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009c70:	2b06      	cmp	r3, #6
 8009c72:	d003      	beq.n	8009c7c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d102      	bne.n	8009c82 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	75bb      	strb	r3, [r7, #22]
 8009c80:	e00d      	b.n	8009c9e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009c82:	7b7b      	ldrb	r3, [r7, #13]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d008      	beq.n	8009c9a <lwip_netconn_do_close_internal+0xe6>
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	8b5b      	ldrh	r3, [r3, #26]
 8009c8c:	f003 0310 	and.w	r3, r3, #16
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009c94:	2301      	movs	r3, #1
 8009c96:	75bb      	strb	r3, [r7, #22]
 8009c98:	e001      	b.n	8009c9e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009c9e:	7dbb      	ldrb	r3, [r7, #22]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	6938      	ldr	r0, [r7, #16]
 8009ca8:	f005 fb82 	bl	800f3b0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	7d1b      	ldrb	r3, [r3, #20]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d104      	bne.n	8009cbe <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	6938      	ldr	r0, [r7, #16]
 8009cb8:	f005 fbf2 	bl	800f4a0 <tcp_accept>
 8009cbc:	e01d      	b.n	8009cfa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d007      	beq.n	8009cd4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	6938      	ldr	r0, [r7, #16]
 8009cc8:	f005 fb84 	bl	800f3d4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009ccc:	2100      	movs	r1, #0
 8009cce:	6938      	ldr	r0, [r7, #16]
 8009cd0:	f005 fbe6 	bl	800f4a0 <tcp_accept>
    }
    if (shut_tx) {
 8009cd4:	7b7b      	ldrb	r3, [r7, #13]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009cda:	2100      	movs	r1, #0
 8009cdc:	6938      	ldr	r0, [r7, #16]
 8009cde:	f005 fb9b 	bl	800f418 <tcp_sent>
    }
    if (shut_close) {
 8009ce2:	7dbb      	ldrb	r3, [r7, #22]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d008      	beq.n	8009cfa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2100      	movs	r1, #0
 8009cec:	6938      	ldr	r0, [r7, #16]
 8009cee:	f005 fbef 	bl	800f4d0 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	6938      	ldr	r0, [r7, #16]
 8009cf6:	f005 fbb1 	bl	800f45c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009cfa:	7dbb      	ldrb	r3, [r7, #22]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d005      	beq.n	8009d0c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009d00:	6938      	ldr	r0, [r7, #16]
 8009d02:	f004 f839 	bl	800dd78 <tcp_close>
 8009d06:	4603      	mov	r3, r0
 8009d08:	75fb      	strb	r3, [r7, #23]
 8009d0a:	e007      	b.n	8009d1c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	7b7a      	ldrb	r2, [r7, #13]
 8009d10:	4619      	mov	r1, r3
 8009d12:	6938      	ldr	r0, [r7, #16]
 8009d14:	f004 f85c 	bl	800ddd0 <tcp_shutdown>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d102      	bne.n	8009d2a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009d24:	2301      	movs	r3, #1
 8009d26:	757b      	strb	r3, [r7, #21]
 8009d28:	e016      	b.n	8009d58 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d32:	d10f      	bne.n	8009d54 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a1b      	ldr	r3, [r3, #32]
 8009d38:	7a5b      	ldrb	r3, [r3, #9]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10c      	bne.n	8009d58 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009d42:	7dbb      	ldrb	r3, [r7, #22]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d007      	beq.n	8009d58 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009d48:	6938      	ldr	r0, [r7, #16]
 8009d4a:	f004 f95b 	bl	800e004 <tcp_abort>
          err = ERR_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	75fb      	strb	r3, [r7, #23]
 8009d52:	e001      	b.n	8009d58 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009d54:	2301      	movs	r3, #1
 8009d56:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009d58:	7d7b      	ldrb	r3, [r7, #21]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d052      	beq.n	8009e04 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	330c      	adds	r3, #12
 8009d66:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	7dfa      	ldrb	r2, [r7, #23]
 8009d6e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d129      	bne.n	8009dd8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009d84:	7dbb      	ldrb	r3, [r7, #22]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00c      	beq.n	8009da4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d005      	beq.n	8009da4 <lwip_netconn_do_close_internal+0x1f0>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2104      	movs	r1, #4
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	4798      	blx	r3
      }
      if (shut_rx) {
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d009      	beq.n	8009dbe <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d005      	beq.n	8009dbe <lwip_netconn_do_close_internal+0x20a>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	2200      	movs	r2, #0
 8009db8:	2100      	movs	r1, #0
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	4798      	blx	r3
      }
      if (shut_tx) {
 8009dbe:	7b7b      	ldrb	r3, [r7, #13]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d009      	beq.n	8009dd8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d005      	beq.n	8009dd8 <lwip_netconn_do_close_internal+0x224>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2102      	movs	r1, #2
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009dd8:	78fb      	ldrb	r3, [r7, #3]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009dde:	68b8      	ldr	r0, [r7, #8]
 8009de0:	f00f f864 	bl	8018eac <sys_sem_signal>
    }
    return ERR_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	e03c      	b.n	8009e62 <lwip_netconn_do_close_internal+0x2ae>
 8009de8:	0801ab5c 	.word	0x0801ab5c
 8009dec:	0801ae30 	.word	0x0801ae30
 8009df0:	0801aba0 	.word	0x0801aba0
 8009df4:	0801ae40 	.word	0x0801ae40
 8009df8:	0801ae60 	.word	0x0801ae60
 8009dfc:	0801ae84 	.word	0x0801ae84
 8009e00:	0801acc4 	.word	0x0801acc4
  }
  if (!close_finished) {
 8009e04:	7d7b      	ldrb	r3, [r7, #21]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d11e      	bne.n	8009e48 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	7d1b      	ldrb	r3, [r3, #20]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d106      	bne.n	8009e20 <lwip_netconn_do_close_internal+0x26c>
 8009e12:	4b16      	ldr	r3, [pc, #88]	; (8009e6c <lwip_netconn_do_close_internal+0x2b8>)
 8009e14:	f240 4241 	movw	r2, #1089	; 0x441
 8009e18:	4915      	ldr	r1, [pc, #84]	; (8009e70 <lwip_netconn_do_close_internal+0x2bc>)
 8009e1a:	4816      	ldr	r0, [pc, #88]	; (8009e74 <lwip_netconn_do_close_internal+0x2c0>)
 8009e1c:	f00f fa24 	bl	8019268 <iprintf>
    if (shut_tx) {
 8009e20:	7b7b      	ldrb	r3, [r7, #13]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009e26:	4914      	ldr	r1, [pc, #80]	; (8009e78 <lwip_netconn_do_close_internal+0x2c4>)
 8009e28:	6938      	ldr	r0, [r7, #16]
 8009e2a:	f005 faf5 	bl	800f418 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009e2e:	2201      	movs	r2, #1
 8009e30:	4912      	ldr	r1, [pc, #72]	; (8009e7c <lwip_netconn_do_close_internal+0x2c8>)
 8009e32:	6938      	ldr	r0, [r7, #16]
 8009e34:	f005 fb4c 	bl	800f4d0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009e38:	4911      	ldr	r1, [pc, #68]	; (8009e80 <lwip_netconn_do_close_internal+0x2cc>)
 8009e3a:	6938      	ldr	r0, [r7, #16]
 8009e3c:	f005 fb0e 	bl	800f45c <tcp_err>
    tcp_arg(tpcb, conn);
 8009e40:	6879      	ldr	r1, [r7, #4]
 8009e42:	6938      	ldr	r0, [r7, #16]
 8009e44:	f005 fab4 	bl	800f3b0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d106      	bne.n	8009e5e <lwip_netconn_do_close_internal+0x2aa>
 8009e50:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <lwip_netconn_do_close_internal+0x2b8>)
 8009e52:	f240 424d 	movw	r2, #1101	; 0x44d
 8009e56:	490b      	ldr	r1, [pc, #44]	; (8009e84 <lwip_netconn_do_close_internal+0x2d0>)
 8009e58:	4806      	ldr	r0, [pc, #24]	; (8009e74 <lwip_netconn_do_close_internal+0x2c0>)
 8009e5a:	f00f fa05 	bl	8019268 <iprintf>
  return err;
 8009e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	0801ab5c 	.word	0x0801ab5c
 8009e70:	0801ae98 	.word	0x0801ae98
 8009e74:	0801aba0 	.word	0x0801aba0
 8009e78:	0800942d 	.word	0x0800942d
 8009e7c:	08009365 	.word	0x08009365
 8009e80:	080094d5 	.word	0x080094d5
 8009e84:	0801aebc 	.word	0x0801aebc

08009e88 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00d      	beq.n	8009ebe <lwip_netconn_do_delconn+0x36>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009eac:	2b10      	cmp	r3, #16
 8009eae:	d006      	beq.n	8009ebe <lwip_netconn_do_delconn+0x36>
 8009eb0:	4b60      	ldr	r3, [pc, #384]	; (800a034 <lwip_netconn_do_delconn+0x1ac>)
 8009eb2:	f240 425e 	movw	r2, #1118	; 0x45e
 8009eb6:	4960      	ldr	r1, [pc, #384]	; (800a038 <lwip_netconn_do_delconn+0x1b0>)
 8009eb8:	4860      	ldr	r0, [pc, #384]	; (800a03c <lwip_netconn_do_delconn+0x1b4>)
 8009eba:	f00f f9d5 	bl	8019268 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009ebe:	7afb      	ldrb	r3, [r7, #11]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d005      	beq.n	8009ed0 <lwip_netconn_do_delconn+0x48>
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d002      	beq.n	8009ed0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009eca:	7afb      	ldrb	r3, [r7, #11]
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d109      	bne.n	8009ee4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009ed0:	7afb      	ldrb	r3, [r7, #11]
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d10a      	bne.n	8009eec <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	7f1b      	ldrb	r3, [r3, #28]
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d103      	bne.n	8009eec <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	22fb      	movs	r2, #251	; 0xfb
 8009ee8:	711a      	strb	r2, [r3, #4]
 8009eea:	e097      	b.n	800a01c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d10d      	bne.n	8009f0e <lwip_netconn_do_delconn+0x86>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	7f1b      	ldrb	r3, [r3, #28]
 8009ef8:	f003 0304 	and.w	r3, r3, #4
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d106      	bne.n	8009f0e <lwip_netconn_do_delconn+0x86>
 8009f00:	4b4c      	ldr	r3, [pc, #304]	; (800a034 <lwip_netconn_do_delconn+0x1ac>)
 8009f02:	f240 427a 	movw	r2, #1146	; 0x47a
 8009f06:	494e      	ldr	r1, [pc, #312]	; (800a040 <lwip_netconn_do_delconn+0x1b8>)
 8009f08:	484c      	ldr	r0, [pc, #304]	; (800a03c <lwip_netconn_do_delconn+0x1b4>)
 8009f0a:	f00f f9ad 	bl	8019268 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff fdcd 	bl	8009ab8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d05f      	beq.n	8009fe8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f32:	2b10      	cmp	r3, #16
 8009f34:	d00d      	beq.n	8009f52 <lwip_netconn_do_delconn+0xca>
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d151      	bne.n	8009fde <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f00a fc7e 	bl	801484c <udp_remove>
          break;
 8009f50:	e046      	b.n	8009fe0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d006      	beq.n	8009f6a <lwip_netconn_do_delconn+0xe2>
 8009f5c:	4b35      	ldr	r3, [pc, #212]	; (800a034 <lwip_netconn_do_delconn+0x1ac>)
 8009f5e:	f240 4294 	movw	r2, #1172	; 0x494
 8009f62:	4938      	ldr	r1, [pc, #224]	; (800a044 <lwip_netconn_do_delconn+0x1bc>)
 8009f64:	4835      	ldr	r0, [pc, #212]	; (800a03c <lwip_netconn_do_delconn+0x1b4>)
 8009f66:	f00f f97f 	bl	8019268 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2204      	movs	r2, #4
 8009f70:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2203      	movs	r2, #3
 8009f76:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff fe14 	bl	8009bb4 <lwip_netconn_do_close_internal>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d04b      	beq.n	800a02a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	785b      	ldrb	r3, [r3, #1]
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d006      	beq.n	8009faa <lwip_netconn_do_delconn+0x122>
 8009f9c:	4b25      	ldr	r3, [pc, #148]	; (800a034 <lwip_netconn_do_delconn+0x1ac>)
 8009f9e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009fa2:	4929      	ldr	r1, [pc, #164]	; (800a048 <lwip_netconn_do_delconn+0x1c0>)
 8009fa4:	4825      	ldr	r0, [pc, #148]	; (800a03c <lwip_netconn_do_delconn+0x1b4>)
 8009fa6:	f00f f95f 	bl	8019268 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009faa:	4828      	ldr	r0, [pc, #160]	; (800a04c <lwip_netconn_do_delconn+0x1c4>)
 8009fac:	f00e ffef 	bl	8018f8e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	330c      	adds	r3, #12
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f00e ff46 	bl	8018e4a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009fbe:	4823      	ldr	r0, [pc, #140]	; (800a04c <lwip_netconn_do_delconn+0x1c4>)
 8009fc0:	f00e ffd6 	bl	8018f70 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	785b      	ldrb	r3, [r3, #1]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d02d      	beq.n	800a02a <lwip_netconn_do_delconn+0x1a2>
 8009fce:	4b19      	ldr	r3, [pc, #100]	; (800a034 <lwip_netconn_do_delconn+0x1ac>)
 8009fd0:	f240 429e 	movw	r2, #1182	; 0x49e
 8009fd4:	491c      	ldr	r1, [pc, #112]	; (800a048 <lwip_netconn_do_delconn+0x1c0>)
 8009fd6:	4819      	ldr	r0, [pc, #100]	; (800a03c <lwip_netconn_do_delconn+0x1b4>)
 8009fd8:	f00f f946 	bl	8019268 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009fdc:	e025      	b.n	800a02a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009fde:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d007      	beq.n	800a002 <lwip_netconn_do_delconn+0x17a>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	6810      	ldr	r0, [r2, #0]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2100      	movs	r1, #0
 800a000:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d007      	beq.n	800a01c <lwip_netconn_do_delconn+0x194>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	6810      	ldr	r0, [r2, #0]
 800a016:	2200      	movs	r2, #0
 800a018:	2102      	movs	r1, #2
 800a01a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	330c      	adds	r3, #12
 800a022:	4618      	mov	r0, r3
 800a024:	f00e ff5c 	bl	8018ee0 <sys_sem_valid>
 800a028:	e000      	b.n	800a02c <lwip_netconn_do_delconn+0x1a4>
          return;
 800a02a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	0801ab5c 	.word	0x0801ab5c
 800a038:	0801aecc 	.word	0x0801aecc
 800a03c:	0801aba0 	.word	0x0801aba0
 800a040:	0801aee0 	.word	0x0801aee0
 800a044:	0801af00 	.word	0x0801af00
 800a048:	0801af1c 	.word	0x0801af1c
 800a04c:	2000d30c 	.word	0x2000d30c

0800a050 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d025      	beq.n	800a0b2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a070:	2b10      	cmp	r3, #16
 800a072:	d00e      	beq.n	800a092 <lwip_netconn_do_bind+0x42>
 800a074:	2b20      	cmp	r3, #32
 800a076:	d119      	bne.n	800a0ac <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6858      	ldr	r0, [r3, #4]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	6899      	ldr	r1, [r3, #8]
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	899b      	ldrh	r3, [r3, #12]
 800a086:	461a      	mov	r2, r3
 800a088:	f00a faca 	bl	8014620 <udp_bind>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73fb      	strb	r3, [r7, #15]
        break;
 800a090:	e011      	b.n	800a0b6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6858      	ldr	r0, [r3, #4]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	6899      	ldr	r1, [r3, #8]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	899b      	ldrh	r3, [r3, #12]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f003 ffbb 	bl	800e01c <tcp_bind>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73fb      	strb	r3, [r7, #15]
        break;
 800a0aa:	e004      	b.n	800a0b6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a0ac:	23fa      	movs	r3, #250	; 0xfa
 800a0ae:	73fb      	strb	r3, [r7, #15]
        break;
 800a0b0:	e001      	b.n	800a0b6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a0b2:	23fa      	movs	r3, #250	; 0xfa
 800a0b4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	7bfa      	ldrb	r2, [r7, #15]
 800a0ba:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800a0e0:	f06f 0305 	mvn.w	r3, #5
 800a0e4:	e070      	b.n	800a1c8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d006      	beq.n	800a0fc <lwip_netconn_do_connected+0x38>
 800a0ee:	4b38      	ldr	r3, [pc, #224]	; (800a1d0 <lwip_netconn_do_connected+0x10c>)
 800a0f0:	f240 5223 	movw	r2, #1315	; 0x523
 800a0f4:	4937      	ldr	r1, [pc, #220]	; (800a1d4 <lwip_netconn_do_connected+0x110>)
 800a0f6:	4838      	ldr	r0, [pc, #224]	; (800a1d8 <lwip_netconn_do_connected+0x114>)
 800a0f8:	f00f f8b6 	bl	8019268 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	6a1b      	ldr	r3, [r3, #32]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10c      	bne.n	800a11e <lwip_netconn_do_connected+0x5a>
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	7f1b      	ldrb	r3, [r3, #28]
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d106      	bne.n	800a11e <lwip_netconn_do_connected+0x5a>
 800a110:	4b2f      	ldr	r3, [pc, #188]	; (800a1d0 <lwip_netconn_do_connected+0x10c>)
 800a112:	f240 5224 	movw	r2, #1316	; 0x524
 800a116:	4931      	ldr	r1, [pc, #196]	; (800a1dc <lwip_netconn_do_connected+0x118>)
 800a118:	482f      	ldr	r0, [pc, #188]	; (800a1d8 <lwip_netconn_do_connected+0x114>)
 800a11a:	f00f f8a5 	bl	8019268 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d008      	beq.n	800a138 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	79fa      	ldrb	r2, [r7, #7]
 800a12c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	330c      	adds	r3, #12
 800a136:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a140:	2b10      	cmp	r3, #16
 800a142:	d106      	bne.n	800a152 <lwip_netconn_do_connected+0x8e>
 800a144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d102      	bne.n	800a152 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800a14c:	69b8      	ldr	r0, [r7, #24]
 800a14e:	f7ff fa97 	bl	8009680 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	7f1b      	ldrb	r3, [r3, #28]
 800a156:	f003 0304 	and.w	r3, r3, #4
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bf0c      	ite	eq
 800a15e:	2301      	moveq	r3, #1
 800a160:	2300      	movne	r3, #0
 800a162:	b2db      	uxtb	r3, r3
 800a164:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	7f1b      	ldrb	r3, [r3, #28]
 800a16a:	f023 0304 	bic.w	r3, r3, #4
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d002      	beq.n	800a180 <lwip_netconn_do_connected+0xbc>
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10c      	bne.n	800a19a <lwip_netconn_do_connected+0xd6>
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d102      	bne.n	800a18c <lwip_netconn_do_connected+0xc8>
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d006      	beq.n	800a19a <lwip_netconn_do_connected+0xd6>
 800a18c:	4b10      	ldr	r3, [pc, #64]	; (800a1d0 <lwip_netconn_do_connected+0x10c>)
 800a18e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800a192:	4913      	ldr	r1, [pc, #76]	; (800a1e0 <lwip_netconn_do_connected+0x11c>)
 800a194:	4810      	ldr	r0, [pc, #64]	; (800a1d8 <lwip_netconn_do_connected+0x114>)
 800a196:	f00f f867 	bl	8019268 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	2200      	movs	r2, #0
 800a19e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <lwip_netconn_do_connected+0xf6>
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2102      	movs	r1, #2
 800a1b6:	69b8      	ldr	r0, [r7, #24]
 800a1b8:	4798      	blx	r3

  if (was_blocking) {
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800a1c0:	69f8      	ldr	r0, [r7, #28]
 800a1c2:	f00e fe73 	bl	8018eac <sys_sem_signal>
  }
  return ERR_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3720      	adds	r7, #32
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	0801ab5c 	.word	0x0801ab5c
 800a1d4:	0801af24 	.word	0x0801af24
 800a1d8:	0801aba0 	.word	0x0801aba0
 800a1dc:	0801af44 	.word	0x0801af44
 800a1e0:	0801af84 	.word	0x0801af84

0800a1e4 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d102      	bne.n	800a200 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800a1fa:	23f1      	movs	r3, #241	; 0xf1
 800a1fc:	75fb      	strb	r3, [r7, #23]
 800a1fe:	e09b      	b.n	800a338 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a20a:	2b10      	cmp	r3, #16
 800a20c:	d00f      	beq.n	800a22e <lwip_netconn_do_connect+0x4a>
 800a20e:	2b20      	cmp	r3, #32
 800a210:	f040 8087 	bne.w	800a322 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6858      	ldr	r0, [r3, #4]
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	6899      	ldr	r1, [r3, #8]
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	899b      	ldrh	r3, [r3, #12]
 800a222:	461a      	mov	r2, r3
 800a224:	f00a fa84 	bl	8014730 <udp_connect>
 800a228:	4603      	mov	r3, r0
 800a22a:	75fb      	strb	r3, [r7, #23]
        break;
 800a22c:	e084      	b.n	800a338 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	785b      	ldrb	r3, [r3, #1]
 800a234:	2b03      	cmp	r3, #3
 800a236:	d102      	bne.n	800a23e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800a238:	23f7      	movs	r3, #247	; 0xf7
 800a23a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800a23c:	e07b      	b.n	800a336 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800a248:	23f6      	movs	r3, #246	; 0xf6
 800a24a:	75fb      	strb	r3, [r7, #23]
        break;
 800a24c:	e073      	b.n	800a336 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fa14 	bl	8009680 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6858      	ldr	r0, [r3, #4]
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	6899      	ldr	r1, [r3, #8]
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	899a      	ldrh	r2, [r3, #12]
 800a266:	4b38      	ldr	r3, [pc, #224]	; (800a348 <lwip_netconn_do_connect+0x164>)
 800a268:	f004 f93c 	bl	800e4e4 <tcp_connect>
 800a26c:	4603      	mov	r3, r0
 800a26e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800a270:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d15e      	bne.n	800a336 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	7f1b      	ldrb	r3, [r3, #28]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b00      	cmp	r3, #0
 800a284:	bf14      	ite	ne
 800a286:	2301      	movne	r3, #1
 800a288:	2300      	moveq	r3, #0
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2203      	movs	r2, #3
 800a294:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d009      	beq.n	800a2b0 <lwip_netconn_do_connect+0xcc>
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	7f1a      	ldrb	r2, [r3, #28]
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f042 0204 	orr.w	r2, r2, #4
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	771a      	strb	r2, [r3, #28]
 800a2ae:	e008      	b.n	800a2c2 <lwip_netconn_do_connect+0xde>
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	7f1a      	ldrb	r2, [r3, #28]
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f022 0204 	bic.w	r2, r2, #4
 800a2be:	b2d2      	uxtb	r2, r2
 800a2c0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800a2c8:	23fb      	movs	r3, #251	; 0xfb
 800a2ca:	75fb      	strb	r3, [r7, #23]
        break;
 800a2cc:	e033      	b.n	800a336 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	785b      	ldrb	r3, [r3, #1]
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d006      	beq.n	800a2ee <lwip_netconn_do_connect+0x10a>
 800a2e0:	4b1a      	ldr	r3, [pc, #104]	; (800a34c <lwip_netconn_do_connect+0x168>)
 800a2e2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a2e6:	491a      	ldr	r1, [pc, #104]	; (800a350 <lwip_netconn_do_connect+0x16c>)
 800a2e8:	481a      	ldr	r0, [pc, #104]	; (800a354 <lwip_netconn_do_connect+0x170>)
 800a2ea:	f00e ffbd 	bl	8019268 <iprintf>
              UNLOCK_TCPIP_CORE();
 800a2ee:	481a      	ldr	r0, [pc, #104]	; (800a358 <lwip_netconn_do_connect+0x174>)
 800a2f0:	f00e fe4d 	bl	8018f8e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	330c      	adds	r3, #12
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f00e fda4 	bl	8018e4a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a302:	4815      	ldr	r0, [pc, #84]	; (800a358 <lwip_netconn_do_connect+0x174>)
 800a304:	f00e fe34 	bl	8018f70 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d116      	bne.n	800a340 <lwip_netconn_do_connect+0x15c>
 800a312:	4b0e      	ldr	r3, [pc, #56]	; (800a34c <lwip_netconn_do_connect+0x168>)
 800a314:	f240 5274 	movw	r2, #1396	; 0x574
 800a318:	490d      	ldr	r1, [pc, #52]	; (800a350 <lwip_netconn_do_connect+0x16c>)
 800a31a:	480e      	ldr	r0, [pc, #56]	; (800a354 <lwip_netconn_do_connect+0x170>)
 800a31c:	f00e ffa4 	bl	8019268 <iprintf>
              return;
 800a320:	e00e      	b.n	800a340 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a322:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <lwip_netconn_do_connect+0x168>)
 800a324:	f240 527d 	movw	r2, #1405	; 0x57d
 800a328:	490c      	ldr	r1, [pc, #48]	; (800a35c <lwip_netconn_do_connect+0x178>)
 800a32a:	480a      	ldr	r0, [pc, #40]	; (800a354 <lwip_netconn_do_connect+0x170>)
 800a32c:	f00e ff9c 	bl	8019268 <iprintf>
 800a330:	23fa      	movs	r3, #250	; 0xfa
 800a332:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800a334:	e000      	b.n	800a338 <lwip_netconn_do_connect+0x154>
        break;
 800a336:	bf00      	nop
    }
  }
  msg->err = err;
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	7dfa      	ldrb	r2, [r7, #23]
 800a33c:	711a      	strb	r2, [r3, #4]
 800a33e:	e000      	b.n	800a342 <lwip_netconn_do_connect+0x15e>
              return;
 800a340:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	0800a0c5 	.word	0x0800a0c5
 800a34c:	0801ab5c 	.word	0x0801ab5c
 800a350:	0801af1c 	.word	0x0801af1c
 800a354:	0801aba0 	.word	0x0801aba0
 800a358:	2000d30c 	.word	0x2000d30c
 800a35c:	0801afa4 	.word	0x0801afa4

0800a360 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d07f      	beq.n	800a476 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a380:	2b10      	cmp	r3, #16
 800a382:	d175      	bne.n	800a470 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	785b      	ldrb	r3, [r3, #1]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d165      	bne.n	800a45a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	7d1b      	ldrb	r3, [r3, #20]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a39a:	23fa      	movs	r3, #250	; 0xfa
 800a39c:	72fb      	strb	r3, [r7, #11]
 800a39e:	e06c      	b.n	800a47a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a3a0:	23ff      	movs	r3, #255	; 0xff
 800a3a2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f107 020b 	add.w	r2, r7, #11
 800a3ae:	7cf9      	ldrb	r1, [r7, #19]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f003 fefd 	bl	800e1b0 <tcp_listen_with_backlog_and_err>
 800a3b6:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d05d      	beq.n	800a47a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3310      	adds	r3, #16
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f00e fcfa 	bl	8018dbe <sys_mbox_valid>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00b      	beq.n	800a3e8 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3310      	adds	r3, #16
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f00e fc6a 	bl	8018cb0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3310      	adds	r3, #16
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f00e fcfc 	bl	8018de0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3314      	adds	r3, #20
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f00e fce3 	bl	8018dbe <sys_mbox_valid>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d108      	bne.n	800a410 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3314      	adds	r3, #20
 800a404:	2106      	movs	r1, #6
 800a406:	4618      	mov	r0, r3
 800a408:	f00e fc30 	bl	8018c6c <sys_mbox_new>
 800a40c:	4603      	mov	r3, r0
 800a40e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a410:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d118      	bne.n	800a44a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2202      	movs	r2, #2
 800a41e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4619      	mov	r1, r3
 800a434:	4610      	mov	r0, r2
 800a436:	f004 ffbb 	bl	800f3b0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	4912      	ldr	r1, [pc, #72]	; (800a48c <lwip_netconn_do_listen+0x12c>)
 800a442:	4618      	mov	r0, r3
 800a444:	f005 f82c 	bl	800f4a0 <tcp_accept>
 800a448:	e017      	b.n	800a47a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f003 fc94 	bl	800dd78 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2200      	movs	r2, #0
 800a456:	605a      	str	r2, [r3, #4]
 800a458:	e00f      	b.n	800a47a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	785b      	ldrb	r3, [r3, #1]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d102      	bne.n	800a46a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	72fb      	strb	r3, [r7, #11]
 800a468:	e007      	b.n	800a47a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a46a:	23f5      	movs	r3, #245	; 0xf5
 800a46c:	72fb      	strb	r3, [r7, #11]
 800a46e:	e004      	b.n	800a47a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a470:	23f0      	movs	r3, #240	; 0xf0
 800a472:	72fb      	strb	r3, [r7, #11]
 800a474:	e001      	b.n	800a47a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a476:	23f5      	movs	r3, #245	; 0xf5
 800a478:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a47a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a482:	bf00      	nop
 800a484:	3718      	adds	r7, #24
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	080096d1 	.word	0x080096d1

0800a490 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d022      	beq.n	800a4f2 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4b6:	2b10      	cmp	r3, #16
 800a4b8:	d11b      	bne.n	800a4f2 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c6:	d202      	bcs.n	800a4ce <lwip_netconn_do_recv+0x3e>
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	e001      	b.n	800a4d2 <lwip_netconn_do_recv+0x42>
 800a4ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4d2:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	89fa      	ldrh	r2, [r7, #14]
 800a4dc:	4611      	mov	r1, r2
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f003 ff6a 	bl	800e3b8 <tcp_recved>
        remaining -= recved;
 800a4e4:	89fb      	ldrh	r3, [r7, #14]
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1e6      	bne.n	800a4c0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a4f2:	bf00      	nop
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	460b      	mov	r3, r1
 800a506:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d106      	bne.n	800a520 <lwip_netconn_do_writemore+0x24>
 800a512:	4b96      	ldr	r3, [pc, #600]	; (800a76c <lwip_netconn_do_writemore+0x270>)
 800a514:	f240 6273 	movw	r2, #1651	; 0x673
 800a518:	4995      	ldr	r1, [pc, #596]	; (800a770 <lwip_netconn_do_writemore+0x274>)
 800a51a:	4896      	ldr	r0, [pc, #600]	; (800a774 <lwip_netconn_do_writemore+0x278>)
 800a51c:	f00e fea4 	bl	8019268 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	785b      	ldrb	r3, [r3, #1]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d006      	beq.n	800a536 <lwip_netconn_do_writemore+0x3a>
 800a528:	4b90      	ldr	r3, [pc, #576]	; (800a76c <lwip_netconn_do_writemore+0x270>)
 800a52a:	f240 6274 	movw	r2, #1652	; 0x674
 800a52e:	4992      	ldr	r1, [pc, #584]	; (800a778 <lwip_netconn_do_writemore+0x27c>)
 800a530:	4890      	ldr	r0, [pc, #576]	; (800a774 <lwip_netconn_do_writemore+0x278>)
 800a532:	f00e fe99 	bl	8019268 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d106      	bne.n	800a54c <lwip_netconn_do_writemore+0x50>
 800a53e:	4b8b      	ldr	r3, [pc, #556]	; (800a76c <lwip_netconn_do_writemore+0x270>)
 800a540:	f240 6275 	movw	r2, #1653	; 0x675
 800a544:	498d      	ldr	r1, [pc, #564]	; (800a77c <lwip_netconn_do_writemore+0x280>)
 800a546:	488b      	ldr	r0, [pc, #556]	; (800a774 <lwip_netconn_do_writemore+0x278>)
 800a548:	f00e fe8e 	bl	8019268 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d106      	bne.n	800a562 <lwip_netconn_do_writemore+0x66>
 800a554:	4b85      	ldr	r3, [pc, #532]	; (800a76c <lwip_netconn_do_writemore+0x270>)
 800a556:	f240 6276 	movw	r2, #1654	; 0x676
 800a55a:	4989      	ldr	r1, [pc, #548]	; (800a780 <lwip_netconn_do_writemore+0x284>)
 800a55c:	4885      	ldr	r0, [pc, #532]	; (800a774 <lwip_netconn_do_writemore+0x278>)
 800a55e:	f00e fe83 	bl	8019268 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	699a      	ldr	r2, [r3, #24]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d306      	bcc.n	800a580 <lwip_netconn_do_writemore+0x84>
 800a572:	4b7e      	ldr	r3, [pc, #504]	; (800a76c <lwip_netconn_do_writemore+0x270>)
 800a574:	f240 6277 	movw	r2, #1655	; 0x677
 800a578:	4982      	ldr	r1, [pc, #520]	; (800a784 <lwip_netconn_do_writemore+0x288>)
 800a57a:	487e      	ldr	r0, [pc, #504]	; (800a774 <lwip_netconn_do_writemore+0x278>)
 800a57c:	f00e fe74 	bl	8019268 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	899b      	ldrh	r3, [r3, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d106      	bne.n	800a598 <lwip_netconn_do_writemore+0x9c>
 800a58a:	4b78      	ldr	r3, [pc, #480]	; (800a76c <lwip_netconn_do_writemore+0x270>)
 800a58c:	f240 6279 	movw	r2, #1657	; 0x679
 800a590:	497d      	ldr	r1, [pc, #500]	; (800a788 <lwip_netconn_do_writemore+0x28c>)
 800a592:	4878      	ldr	r0, [pc, #480]	; (800a774 <lwip_netconn_do_writemore+0x278>)
 800a594:	f00e fe68 	bl	8019268 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	7f1b      	ldrb	r3, [r3, #28]
 800a59e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	7f1b      	ldrb	r3, [r3, #28]
 800a5a4:	f003 0302 	and.w	r3, r3, #2
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d104      	bne.n	800a5b6 <lwip_netconn_do_writemore+0xba>
 800a5ac:	7ebb      	ldrb	r3, [r7, #26]
 800a5ae:	f003 0304 	and.w	r3, r3, #4
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <lwip_netconn_do_writemore+0xbe>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e000      	b.n	800a5bc <lwip_netconn_do_writemore+0xc0>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a1b      	ldr	r3, [r3, #32]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5e8:	d307      	bcc.n	800a5fa <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a5ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5ee:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a5f0:	7ebb      	ldrb	r3, [r7, #26]
 800a5f2:	f043 0302 	orr.w	r3, r3, #2
 800a5f6:	76bb      	strb	r3, [r7, #26]
 800a5f8:	e001      	b.n	800a5fe <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a606:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a608:	89fa      	ldrh	r2, [r7, #14]
 800a60a:	8bbb      	ldrh	r3, [r7, #28]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d216      	bcs.n	800a63e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a610:	89fb      	ldrh	r3, [r7, #14]
 800a612:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a614:	7e3b      	ldrb	r3, [r7, #24]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00d      	beq.n	800a636 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a61a:	8bbb      	ldrh	r3, [r7, #28]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10e      	bne.n	800a63e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d102      	bne.n	800a630 <lwip_netconn_do_writemore+0x134>
 800a62a:	f06f 0306 	mvn.w	r3, #6
 800a62e:	e000      	b.n	800a632 <lwip_netconn_do_writemore+0x136>
 800a630:	2300      	movs	r3, #0
 800a632:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a634:	e07d      	b.n	800a732 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a636:	7ebb      	ldrb	r3, [r7, #26]
 800a638:	f043 0302 	orr.w	r3, r3, #2
 800a63c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	691a      	ldr	r2, [r3, #16]
 800a644:	8bbb      	ldrh	r3, [r7, #28]
 800a646:	441a      	add	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	429a      	cmp	r2, r3
 800a652:	d906      	bls.n	800a662 <lwip_netconn_do_writemore+0x166>
 800a654:	4b45      	ldr	r3, [pc, #276]	; (800a76c <lwip_netconn_do_writemore+0x270>)
 800a656:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a65a:	494c      	ldr	r1, [pc, #304]	; (800a78c <lwip_netconn_do_writemore+0x290>)
 800a65c:	4845      	ldr	r0, [pc, #276]	; (800a774 <lwip_netconn_do_writemore+0x278>)
 800a65e:	f00e fe03 	bl	8019268 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a662:	8bbb      	ldrh	r3, [r7, #28]
 800a664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a668:	4293      	cmp	r3, r2
 800a66a:	d103      	bne.n	800a674 <lwip_netconn_do_writemore+0x178>
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a672:	d209      	bcs.n	800a688 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a678:	8bba      	ldrh	r2, [r7, #28]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d10b      	bne.n	800a696 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	899b      	ldrh	r3, [r3, #12]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d906      	bls.n	800a696 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a688:	2301      	movs	r3, #1
 800a68a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a68c:	7ebb      	ldrb	r3, [r7, #26]
 800a68e:	f043 0302 	orr.w	r3, r3, #2
 800a692:	76bb      	strb	r3, [r7, #26]
 800a694:	e001      	b.n	800a69a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6858      	ldr	r0, [r3, #4]
 800a69e:	7ebb      	ldrb	r3, [r7, #26]
 800a6a0:	8bba      	ldrh	r2, [r7, #28]
 800a6a2:	6979      	ldr	r1, [r7, #20]
 800a6a4:	f007 fdc6 	bl	8012234 <tcp_write>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a6ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d12c      	bne.n	800a70e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a1b      	ldr	r3, [r3, #32]
 800a6b8:	6999      	ldr	r1, [r3, #24]
 800a6ba:	8bba      	ldrh	r2, [r7, #28]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	440a      	add	r2, r1
 800a6c2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	6919      	ldr	r1, [r3, #16]
 800a6ca:	8bba      	ldrh	r2, [r7, #28]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	691a      	ldr	r2, [r3, #16]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d113      	bne.n	800a70e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	899a      	ldrh	r2, [r3, #12]
 800a6ec:	3a01      	subs	r2, #1
 800a6ee:	b292      	uxth	r2, r2
 800a6f0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	899b      	ldrh	r3, [r3, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d008      	beq.n	800a70e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a1b      	ldr	r3, [r3, #32]
 800a700:	689a      	ldr	r2, [r3, #8]
 800a702:	3208      	adds	r2, #8
 800a704:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	2200      	movs	r2, #0
 800a70c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a70e:	7e7b      	ldrb	r3, [r7, #25]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d004      	beq.n	800a71e <lwip_netconn_do_writemore+0x222>
 800a714:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f43f af50 	beq.w	800a5be <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a71e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d004      	beq.n	800a730 <lwip_netconn_do_writemore+0x234>
 800a726:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d146      	bne.n	800a7be <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a730:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a732:	7e3b      	ldrb	r3, [r7, #24]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d02b      	beq.n	800a790 <lwip_netconn_do_writemore+0x294>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a1b      	ldr	r3, [r3, #32]
 800a73c:	699a      	ldr	r2, [r3, #24]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	429a      	cmp	r2, r3
 800a746:	d223      	bcs.n	800a790 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <lwip_netconn_do_writemore+0x260>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2200      	movs	r2, #0
 800a756:	2103      	movs	r1, #3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	7f1b      	ldrb	r3, [r3, #28]
 800a760:	f043 0310 	orr.w	r3, r3, #16
 800a764:	b2da      	uxtb	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	771a      	strb	r2, [r3, #28]
 800a76a:	e028      	b.n	800a7be <lwip_netconn_do_writemore+0x2c2>
 800a76c:	0801ab5c 	.word	0x0801ab5c
 800a770:	0801acb4 	.word	0x0801acb4
 800a774:	0801aba0 	.word	0x0801aba0
 800a778:	0801afbc 	.word	0x0801afbc
 800a77c:	0801acc4 	.word	0x0801acc4
 800a780:	0801afdc 	.word	0x0801afdc
 800a784:	0801aff4 	.word	0x0801aff4
 800a788:	0801b034 	.word	0x0801b034
 800a78c:	0801b05c 	.word	0x0801b05c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a798:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a79c:	d305      	bcc.n	800a7aa <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d909      	bls.n	800a7be <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d005      	beq.n	800a7be <lwip_netconn_do_writemore+0x2c2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2103      	movs	r1, #3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a7be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d11d      	bne.n	800a802 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	699a      	ldr	r2, [r3, #24]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d002      	beq.n	800a7dc <lwip_netconn_do_writemore+0x2e0>
 800a7d6:	7e3b      	ldrb	r3, [r7, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f008 fb0f 	bl	8012e08 <tcp_output>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a7ee:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a7f2:	f113 0f04 	cmn.w	r3, #4
 800a7f6:	d12c      	bne.n	800a852 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a7f8:	7b3b      	ldrb	r3, [r7, #12]
 800a7fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	76fb      	strb	r3, [r7, #27]
 800a800:	e027      	b.n	800a852 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a802:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80a:	d120      	bne.n	800a84e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	4618      	mov	r0, r3
 800a812:	f008 faf9 	bl	8012e08 <tcp_output>
 800a816:	4603      	mov	r3, r0
 800a818:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a81a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a81e:	f113 0f04 	cmn.w	r3, #4
 800a822:	d104      	bne.n	800a82e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a824:	7b7b      	ldrb	r3, [r7, #13]
 800a826:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a828:	2301      	movs	r3, #1
 800a82a:	76fb      	strb	r3, [r7, #27]
 800a82c:	e011      	b.n	800a852 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a82e:	7e3b      	ldrb	r3, [r7, #24]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00e      	beq.n	800a852 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d102      	bne.n	800a844 <lwip_netconn_do_writemore+0x348>
 800a83e:	f06f 0306 	mvn.w	r3, #6
 800a842:	e000      	b.n	800a846 <lwip_netconn_do_writemore+0x34a>
 800a844:	2300      	movs	r3, #0
 800a846:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a848:	2301      	movs	r3, #1
 800a84a:	76fb      	strb	r3, [r7, #27]
 800a84c:	e001      	b.n	800a852 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a84e:	2301      	movs	r3, #1
 800a850:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a852:	7efb      	ldrb	r3, [r7, #27]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d015      	beq.n	800a884 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	330c      	adds	r3, #12
 800a860:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	7ffa      	ldrb	r2, [r7, #31]
 800a868:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a876:	78fb      	ldrb	r3, [r7, #3]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d006      	beq.n	800a88a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a87c:	68b8      	ldr	r0, [r7, #8]
 800a87e:	f00e fb15 	bl	8018eac <sys_sem_signal>
 800a882:	e002      	b.n	800a88a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a884:	f04f 33ff 	mov.w	r3, #4294967295
 800a888:	e000      	b.n	800a88c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3720      	adds	r7, #32
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe fbce 	bl	8009046 <netconn_err>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a8ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d166      	bne.n	800a984 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8c0:	2b10      	cmp	r3, #16
 800a8c2:	d15d      	bne.n	800a980 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	785b      	ldrb	r3, [r3, #1]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a8ce:	23fb      	movs	r3, #251	; 0xfb
 800a8d0:	73fb      	strb	r3, [r7, #15]
 800a8d2:	e057      	b.n	800a984 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d04d      	beq.n	800a97a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d006      	beq.n	800a8fe <lwip_netconn_do_write+0x6a>
 800a8f0:	4b28      	ldr	r3, [pc, #160]	; (800a994 <lwip_netconn_do_write+0x100>)
 800a8f2:	f240 7223 	movw	r2, #1827	; 0x723
 800a8f6:	4928      	ldr	r1, [pc, #160]	; (800a998 <lwip_netconn_do_write+0x104>)
 800a8f8:	4828      	ldr	r0, [pc, #160]	; (800a99c <lwip_netconn_do_write+0x108>)
 800a8fa:	f00e fcb5 	bl	8019268 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <lwip_netconn_do_write+0x80>
 800a906:	4b23      	ldr	r3, [pc, #140]	; (800a994 <lwip_netconn_do_write+0x100>)
 800a908:	f240 7224 	movw	r2, #1828	; 0x724
 800a90c:	4924      	ldr	r1, [pc, #144]	; (800a9a0 <lwip_netconn_do_write+0x10c>)
 800a90e:	4823      	ldr	r0, [pc, #140]	; (800a99c <lwip_netconn_do_write+0x108>)
 800a910:	f00e fcaa 	bl	8019268 <iprintf>
        msg->conn->current_msg = msg;
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2100      	movs	r1, #0
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff fdea 	bl	800a4fc <lwip_netconn_do_writemore>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d02e      	beq.n	800a98c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	785b      	ldrb	r3, [r3, #1]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d006      	beq.n	800a946 <lwip_netconn_do_write+0xb2>
 800a938:	4b16      	ldr	r3, [pc, #88]	; (800a994 <lwip_netconn_do_write+0x100>)
 800a93a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a93e:	4919      	ldr	r1, [pc, #100]	; (800a9a4 <lwip_netconn_do_write+0x110>)
 800a940:	4816      	ldr	r0, [pc, #88]	; (800a99c <lwip_netconn_do_write+0x108>)
 800a942:	f00e fc91 	bl	8019268 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a946:	4818      	ldr	r0, [pc, #96]	; (800a9a8 <lwip_netconn_do_write+0x114>)
 800a948:	f00e fb21 	bl	8018f8e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	330c      	adds	r3, #12
 800a952:	2100      	movs	r1, #0
 800a954:	4618      	mov	r0, r3
 800a956:	f00e fa78 	bl	8018e4a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a95a:	4813      	ldr	r0, [pc, #76]	; (800a9a8 <lwip_netconn_do_write+0x114>)
 800a95c:	f00e fb08 	bl	8018f70 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d110      	bne.n	800a98c <lwip_netconn_do_write+0xf8>
 800a96a:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <lwip_netconn_do_write+0x100>)
 800a96c:	f240 722c 	movw	r2, #1836	; 0x72c
 800a970:	490c      	ldr	r1, [pc, #48]	; (800a9a4 <lwip_netconn_do_write+0x110>)
 800a972:	480a      	ldr	r0, [pc, #40]	; (800a99c <lwip_netconn_do_write+0x108>)
 800a974:	f00e fc78 	bl	8019268 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a978:	e008      	b.n	800a98c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a97a:	23f5      	movs	r3, #245	; 0xf5
 800a97c:	73fb      	strb	r3, [r7, #15]
 800a97e:	e001      	b.n	800a984 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a980:	23fa      	movs	r3, #250	; 0xfa
 800a982:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	7bfa      	ldrb	r2, [r7, #15]
 800a988:	711a      	strb	r2, [r3, #4]
 800a98a:	e000      	b.n	800a98e <lwip_netconn_do_write+0xfa>
        return;
 800a98c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	0801ab5c 	.word	0x0801ab5c
 800a998:	0801af00 	.word	0x0801af00
 800a99c:	0801aba0 	.word	0x0801aba0
 800a9a0:	0801b088 	.word	0x0801b088
 800a9a4:	0801af1c 	.word	0x0801af1c
 800a9a8:	2000d30c 	.word	0x2000d30c

0800a9ac <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	785b      	ldrb	r3, [r3, #1]
 800a9be:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d069      	beq.n	800aa9e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a9d4:	2b10      	cmp	r3, #16
 800a9d6:	d162      	bne.n	800aa9e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d002      	beq.n	800a9e6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a9e0:	7afb      	ldrb	r3, [r7, #11]
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d05b      	beq.n	800aa9e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d103      	bne.n	800a9f4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	22f5      	movs	r2, #245	; 0xf5
 800a9f0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a9f2:	e059      	b.n	800aaa8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a9f4:	7afb      	ldrb	r3, [r7, #11]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d103      	bne.n	800aa02 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	22fb      	movs	r2, #251	; 0xfb
 800a9fe:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800aa00:	e052      	b.n	800aaa8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	7a1b      	ldrb	r3, [r3, #8]
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d004      	beq.n	800aa18 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff f850 	bl	8009ab8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d006      	beq.n	800aa30 <lwip_netconn_do_close+0x84>
 800aa22:	4b23      	ldr	r3, [pc, #140]	; (800aab0 <lwip_netconn_do_close+0x104>)
 800aa24:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800aa28:	4922      	ldr	r1, [pc, #136]	; (800aab4 <lwip_netconn_do_close+0x108>)
 800aa2a:	4823      	ldr	r0, [pc, #140]	; (800aab8 <lwip_netconn_do_close+0x10c>)
 800aa2c:	f00e fc1c 	bl	8019268 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2204      	movs	r2, #4
 800aa36:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2100      	movs	r1, #0
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7ff f8b4 	bl	8009bb4 <lwip_netconn_do_close_internal>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d029      	beq.n	800aaa6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	785b      	ldrb	r3, [r3, #1]
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d006      	beq.n	800aa6a <lwip_netconn_do_close+0xbe>
 800aa5c:	4b14      	ldr	r3, [pc, #80]	; (800aab0 <lwip_netconn_do_close+0x104>)
 800aa5e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800aa62:	4916      	ldr	r1, [pc, #88]	; (800aabc <lwip_netconn_do_close+0x110>)
 800aa64:	4814      	ldr	r0, [pc, #80]	; (800aab8 <lwip_netconn_do_close+0x10c>)
 800aa66:	f00e fbff 	bl	8019268 <iprintf>
        UNLOCK_TCPIP_CORE();
 800aa6a:	4815      	ldr	r0, [pc, #84]	; (800aac0 <lwip_netconn_do_close+0x114>)
 800aa6c:	f00e fa8f 	bl	8018f8e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	330c      	adds	r3, #12
 800aa76:	2100      	movs	r1, #0
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f00e f9e6 	bl	8018e4a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800aa7e:	4810      	ldr	r0, [pc, #64]	; (800aac0 <lwip_netconn_do_close+0x114>)
 800aa80:	f00e fa76 	bl	8018f70 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	785b      	ldrb	r3, [r3, #1]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00b      	beq.n	800aaa6 <lwip_netconn_do_close+0xfa>
 800aa8e:	4b08      	ldr	r3, [pc, #32]	; (800aab0 <lwip_netconn_do_close+0x104>)
 800aa90:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800aa94:	4909      	ldr	r1, [pc, #36]	; (800aabc <lwip_netconn_do_close+0x110>)
 800aa96:	4808      	ldr	r0, [pc, #32]	; (800aab8 <lwip_netconn_do_close+0x10c>)
 800aa98:	f00e fbe6 	bl	8019268 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800aa9c:	e003      	b.n	800aaa6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	22f5      	movs	r2, #245	; 0xf5
 800aaa2:	711a      	strb	r2, [r3, #4]
 800aaa4:	e000      	b.n	800aaa8 <lwip_netconn_do_close+0xfc>
      return;
 800aaa6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	0801ab5c 	.word	0x0801ab5c
 800aab4:	0801af00 	.word	0x0801af00
 800aab8:	0801aba0 	.word	0x0801aba0
 800aabc:	0801af1c 	.word	0x0801af1c
 800aac0:	2000d30c 	.word	0x2000d30c

0800aac4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d013      	beq.n	800aafa <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00b      	beq.n	800aaf2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4618      	mov	r0, r3
 800aae0:	f002 fc90 	bl	800d404 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800aaf2:	6879      	ldr	r1, [r7, #4]
 800aaf4:	2006      	movs	r0, #6
 800aaf6:	f001 fdd5 	bl	800c6a4 <memp_free>
  }
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d108      	bne.n	800ab28 <netbuf_data+0x24>
 800ab16:	4b1b      	ldr	r3, [pc, #108]	; (800ab84 <netbuf_data+0x80>)
 800ab18:	22c6      	movs	r2, #198	; 0xc6
 800ab1a:	491b      	ldr	r1, [pc, #108]	; (800ab88 <netbuf_data+0x84>)
 800ab1c:	481b      	ldr	r0, [pc, #108]	; (800ab8c <netbuf_data+0x88>)
 800ab1e:	f00e fba3 	bl	8019268 <iprintf>
 800ab22:	f06f 030f 	mvn.w	r3, #15
 800ab26:	e029      	b.n	800ab7c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d108      	bne.n	800ab40 <netbuf_data+0x3c>
 800ab2e:	4b15      	ldr	r3, [pc, #84]	; (800ab84 <netbuf_data+0x80>)
 800ab30:	22c7      	movs	r2, #199	; 0xc7
 800ab32:	4917      	ldr	r1, [pc, #92]	; (800ab90 <netbuf_data+0x8c>)
 800ab34:	4815      	ldr	r0, [pc, #84]	; (800ab8c <netbuf_data+0x88>)
 800ab36:	f00e fb97 	bl	8019268 <iprintf>
 800ab3a:	f06f 030f 	mvn.w	r3, #15
 800ab3e:	e01d      	b.n	800ab7c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d108      	bne.n	800ab58 <netbuf_data+0x54>
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <netbuf_data+0x80>)
 800ab48:	22c8      	movs	r2, #200	; 0xc8
 800ab4a:	4912      	ldr	r1, [pc, #72]	; (800ab94 <netbuf_data+0x90>)
 800ab4c:	480f      	ldr	r0, [pc, #60]	; (800ab8c <netbuf_data+0x88>)
 800ab4e:	f00e fb8b 	bl	8019268 <iprintf>
 800ab52:	f06f 030f 	mvn.w	r3, #15
 800ab56:	e011      	b.n	800ab7c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <netbuf_data+0x62>
    return ERR_BUF;
 800ab60:	f06f 0301 	mvn.w	r3, #1
 800ab64:	e00a      	b.n	800ab7c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	685a      	ldr	r2, [r3, #4]
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	895a      	ldrh	r2, [r3, #10]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	0801b0b4 	.word	0x0801b0b4
 800ab88:	0801b1bc 	.word	0x0801b1bc
 800ab8c:	0801b104 	.word	0x0801b104
 800ab90:	0801b1d8 	.word	0x0801b1d8
 800ab94:	0801b1f8 	.word	0x0801b1f8

0800ab98 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d108      	bne.n	800abb8 <netbuf_next+0x20>
 800aba6:	4b11      	ldr	r3, [pc, #68]	; (800abec <netbuf_next+0x54>)
 800aba8:	22e0      	movs	r2, #224	; 0xe0
 800abaa:	4911      	ldr	r1, [pc, #68]	; (800abf0 <netbuf_next+0x58>)
 800abac:	4811      	ldr	r0, [pc, #68]	; (800abf4 <netbuf_next+0x5c>)
 800abae:	f00e fb5b 	bl	8019268 <iprintf>
 800abb2:	f04f 33ff 	mov.w	r3, #4294967295
 800abb6:	e014      	b.n	800abe2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d102      	bne.n	800abc8 <netbuf_next+0x30>
    return -1;
 800abc2:	f04f 33ff 	mov.w	r3, #4294967295
 800abc6:	e00c      	b.n	800abe2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <netbuf_next+0x48>
    return 1;
 800abdc:	2301      	movs	r3, #1
 800abde:	e000      	b.n	800abe2 <netbuf_next+0x4a>
  }
  return 0;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	0801b0b4 	.word	0x0801b0b4
 800abf0:	0801b214 	.word	0x0801b214
 800abf4:	0801b104 	.word	0x0801b104

0800abf8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ac02:	f009 f9b9 	bl	8013f78 <sys_timeouts_sleeptime>
 800ac06:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0e:	d10b      	bne.n	800ac28 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ac10:	4813      	ldr	r0, [pc, #76]	; (800ac60 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac12:	f00e f9bc 	bl	8018f8e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ac16:	2200      	movs	r2, #0
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f00e f874 	bl	8018d08 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ac20:	480f      	ldr	r0, [pc, #60]	; (800ac60 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac22:	f00e f9a5 	bl	8018f70 <sys_mutex_lock>
    return;
 800ac26:	e018      	b.n	800ac5a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d102      	bne.n	800ac34 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ac2e:	f009 f969 	bl	8013f04 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ac32:	e7e6      	b.n	800ac02 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ac34:	480a      	ldr	r0, [pc, #40]	; (800ac60 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac36:	f00e f9aa 	bl	8018f8e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f00e f862 	bl	8018d08 <sys_arch_mbox_fetch>
 800ac44:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ac46:	4806      	ldr	r0, [pc, #24]	; (800ac60 <tcpip_timeouts_mbox_fetch+0x68>)
 800ac48:	f00e f992 	bl	8018f70 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac52:	d102      	bne.n	800ac5a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ac54:	f009 f956 	bl	8013f04 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ac58:	e7d3      	b.n	800ac02 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	2000d30c 	.word	0x2000d30c

0800ac64 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ac6c:	4810      	ldr	r0, [pc, #64]	; (800acb0 <tcpip_thread+0x4c>)
 800ac6e:	f00e f97f 	bl	8018f70 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ac72:	4b10      	ldr	r3, [pc, #64]	; (800acb4 <tcpip_thread+0x50>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d005      	beq.n	800ac86 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ac7a:	4b0e      	ldr	r3, [pc, #56]	; (800acb4 <tcpip_thread+0x50>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a0e      	ldr	r2, [pc, #56]	; (800acb8 <tcpip_thread+0x54>)
 800ac80:	6812      	ldr	r2, [r2, #0]
 800ac82:	4610      	mov	r0, r2
 800ac84:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ac86:	f107 030c 	add.w	r3, r7, #12
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	480b      	ldr	r0, [pc, #44]	; (800acbc <tcpip_thread+0x58>)
 800ac8e:	f7ff ffb3 	bl	800abf8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d106      	bne.n	800aca6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ac98:	4b09      	ldr	r3, [pc, #36]	; (800acc0 <tcpip_thread+0x5c>)
 800ac9a:	2291      	movs	r2, #145	; 0x91
 800ac9c:	4909      	ldr	r1, [pc, #36]	; (800acc4 <tcpip_thread+0x60>)
 800ac9e:	480a      	ldr	r0, [pc, #40]	; (800acc8 <tcpip_thread+0x64>)
 800aca0:	f00e fae2 	bl	8019268 <iprintf>
      continue;
 800aca4:	e003      	b.n	800acae <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 f80f 	bl	800accc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800acae:	e7ea      	b.n	800ac86 <tcpip_thread+0x22>
 800acb0:	2000d30c 	.word	0x2000d30c
 800acb4:	2000d300 	.word	0x2000d300
 800acb8:	2000d304 	.word	0x2000d304
 800acbc:	2000d308 	.word	0x2000d308
 800acc0:	0801b24c 	.word	0x0801b24c
 800acc4:	0801b27c 	.word	0x0801b27c
 800acc8:	0801b29c 	.word	0x0801b29c

0800accc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d026      	beq.n	800ad2a <tcpip_thread_handle_msg+0x5e>
 800acdc:	2b02      	cmp	r3, #2
 800acde:	dc2b      	bgt.n	800ad38 <tcpip_thread_handle_msg+0x6c>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <tcpip_thread_handle_msg+0x1e>
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d015      	beq.n	800ad14 <tcpip_thread_handle_msg+0x48>
 800ace8:	e026      	b.n	800ad38 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	6850      	ldr	r0, [r2, #4]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	6892      	ldr	r2, [r2, #8]
 800acf6:	4611      	mov	r1, r2
 800acf8:	4798      	blx	r3
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f002 fb7d 	bl	800d404 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	2009      	movs	r0, #9
 800ad0e:	f001 fcc9 	bl	800c6a4 <memp_free>
      break;
 800ad12:	e018      	b.n	800ad46 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	6892      	ldr	r2, [r2, #8]
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	2008      	movs	r0, #8
 800ad24:	f001 fcbe 	bl	800c6a4 <memp_free>
      break;
 800ad28:	e00d      	b.n	800ad46 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6892      	ldr	r2, [r2, #8]
 800ad32:	4610      	mov	r0, r2
 800ad34:	4798      	blx	r3
      break;
 800ad36:	e006      	b.n	800ad46 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ad38:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <tcpip_thread_handle_msg+0x84>)
 800ad3a:	22cf      	movs	r2, #207	; 0xcf
 800ad3c:	4905      	ldr	r1, [pc, #20]	; (800ad54 <tcpip_thread_handle_msg+0x88>)
 800ad3e:	4806      	ldr	r0, [pc, #24]	; (800ad58 <tcpip_thread_handle_msg+0x8c>)
 800ad40:	f00e fa92 	bl	8019268 <iprintf>
      break;
 800ad44:	bf00      	nop
  }
}
 800ad46:	bf00      	nop
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	0801b24c 	.word	0x0801b24c
 800ad54:	0801b27c 	.word	0x0801b27c
 800ad58:	0801b29c 	.word	0x0801b29c

0800ad5c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ad68:	481a      	ldr	r0, [pc, #104]	; (800add4 <tcpip_inpkt+0x78>)
 800ad6a:	f00e f828 	bl	8018dbe <sys_mbox_valid>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d105      	bne.n	800ad80 <tcpip_inpkt+0x24>
 800ad74:	4b18      	ldr	r3, [pc, #96]	; (800add8 <tcpip_inpkt+0x7c>)
 800ad76:	22fc      	movs	r2, #252	; 0xfc
 800ad78:	4918      	ldr	r1, [pc, #96]	; (800addc <tcpip_inpkt+0x80>)
 800ad7a:	4819      	ldr	r0, [pc, #100]	; (800ade0 <tcpip_inpkt+0x84>)
 800ad7c:	f00e fa74 	bl	8019268 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ad80:	2009      	movs	r0, #9
 800ad82:	f001 fc19 	bl	800c5b8 <memp_malloc>
 800ad86:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d102      	bne.n	800ad94 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ad8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad92:	e01a      	b.n	800adca <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2200      	movs	r2, #0
 800ad98:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800adac:	6979      	ldr	r1, [r7, #20]
 800adae:	4809      	ldr	r0, [pc, #36]	; (800add4 <tcpip_inpkt+0x78>)
 800adb0:	f00d ff90 	bl	8018cd4 <sys_mbox_trypost>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d006      	beq.n	800adc8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800adba:	6979      	ldr	r1, [r7, #20]
 800adbc:	2009      	movs	r0, #9
 800adbe:	f001 fc71 	bl	800c6a4 <memp_free>
    return ERR_MEM;
 800adc2:	f04f 33ff 	mov.w	r3, #4294967295
 800adc6:	e000      	b.n	800adca <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800adc8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	2000d308 	.word	0x2000d308
 800add8:	0801b24c 	.word	0x0801b24c
 800addc:	0801b2c4 	.word	0x0801b2c4
 800ade0:	0801b29c 	.word	0x0801b29c

0800ade4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800adf4:	f003 0318 	and.w	r3, r3, #24
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d006      	beq.n	800ae0a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800adfc:	4a08      	ldr	r2, [pc, #32]	; (800ae20 <tcpip_input+0x3c>)
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff ffab 	bl	800ad5c <tcpip_inpkt>
 800ae06:	4603      	mov	r3, r0
 800ae08:	e005      	b.n	800ae16 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ae0a:	4a06      	ldr	r2, [pc, #24]	; (800ae24 <tcpip_input+0x40>)
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff ffa4 	bl	800ad5c <tcpip_inpkt>
 800ae14:	4603      	mov	r3, r0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	08018ac1 	.word	0x08018ac1
 800ae24:	0801798d 	.word	0x0801798d

0800ae28 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ae32:	4819      	ldr	r0, [pc, #100]	; (800ae98 <tcpip_try_callback+0x70>)
 800ae34:	f00d ffc3 	bl	8018dbe <sys_mbox_valid>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <tcpip_try_callback+0x24>
 800ae3e:	4b17      	ldr	r3, [pc, #92]	; (800ae9c <tcpip_try_callback+0x74>)
 800ae40:	f240 125d 	movw	r2, #349	; 0x15d
 800ae44:	4916      	ldr	r1, [pc, #88]	; (800aea0 <tcpip_try_callback+0x78>)
 800ae46:	4817      	ldr	r0, [pc, #92]	; (800aea4 <tcpip_try_callback+0x7c>)
 800ae48:	f00e fa0e 	bl	8019268 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ae4c:	2008      	movs	r0, #8
 800ae4e:	f001 fbb3 	bl	800c5b8 <memp_malloc>
 800ae52:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d102      	bne.n	800ae60 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ae5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae5e:	e017      	b.n	800ae90 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2201      	movs	r2, #1
 800ae64:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ae72:	68f9      	ldr	r1, [r7, #12]
 800ae74:	4808      	ldr	r0, [pc, #32]	; (800ae98 <tcpip_try_callback+0x70>)
 800ae76:	f00d ff2d 	bl	8018cd4 <sys_mbox_trypost>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d006      	beq.n	800ae8e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ae80:	68f9      	ldr	r1, [r7, #12]
 800ae82:	2008      	movs	r0, #8
 800ae84:	f001 fc0e 	bl	800c6a4 <memp_free>
    return ERR_MEM;
 800ae88:	f04f 33ff 	mov.w	r3, #4294967295
 800ae8c:	e000      	b.n	800ae90 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	2000d308 	.word	0x2000d308
 800ae9c:	0801b24c 	.word	0x0801b24c
 800aea0:	0801b2c4 	.word	0x0801b2c4
 800aea4:	0801b29c 	.word	0x0801b29c

0800aea8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800aeb4:	4806      	ldr	r0, [pc, #24]	; (800aed0 <tcpip_send_msg_wait_sem+0x28>)
 800aeb6:	f00e f85b 	bl	8018f70 <sys_mutex_lock>
  fn(apimsg);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	68b8      	ldr	r0, [r7, #8]
 800aebe:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800aec0:	4803      	ldr	r0, [pc, #12]	; (800aed0 <tcpip_send_msg_wait_sem+0x28>)
 800aec2:	f00e f864 	bl	8018f8e <sys_mutex_unlock>
  return ERR_OK;
 800aec6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	2000d30c 	.word	0x2000d30c

0800aed4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af02      	add	r7, sp, #8
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800aede:	f000 fec1 	bl	800bc64 <lwip_init>

  tcpip_init_done = initfunc;
 800aee2:	4a17      	ldr	r2, [pc, #92]	; (800af40 <tcpip_init+0x6c>)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800aee8:	4a16      	ldr	r2, [pc, #88]	; (800af44 <tcpip_init+0x70>)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800aeee:	2106      	movs	r1, #6
 800aef0:	4815      	ldr	r0, [pc, #84]	; (800af48 <tcpip_init+0x74>)
 800aef2:	f00d febb 	bl	8018c6c <sys_mbox_new>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d006      	beq.n	800af0a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800aefc:	4b13      	ldr	r3, [pc, #76]	; (800af4c <tcpip_init+0x78>)
 800aefe:	f240 2261 	movw	r2, #609	; 0x261
 800af02:	4913      	ldr	r1, [pc, #76]	; (800af50 <tcpip_init+0x7c>)
 800af04:	4813      	ldr	r0, [pc, #76]	; (800af54 <tcpip_init+0x80>)
 800af06:	f00e f9af 	bl	8019268 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800af0a:	4813      	ldr	r0, [pc, #76]	; (800af58 <tcpip_init+0x84>)
 800af0c:	f00e f814 	bl	8018f38 <sys_mutex_new>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d006      	beq.n	800af24 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800af16:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <tcpip_init+0x78>)
 800af18:	f240 2265 	movw	r2, #613	; 0x265
 800af1c:	490f      	ldr	r1, [pc, #60]	; (800af5c <tcpip_init+0x88>)
 800af1e:	480d      	ldr	r0, [pc, #52]	; (800af54 <tcpip_init+0x80>)
 800af20:	f00e f9a2 	bl	8019268 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800af24:	2300      	movs	r3, #0
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af2c:	2200      	movs	r2, #0
 800af2e:	490c      	ldr	r1, [pc, #48]	; (800af60 <tcpip_init+0x8c>)
 800af30:	480c      	ldr	r0, [pc, #48]	; (800af64 <tcpip_init+0x90>)
 800af32:	f00e f839 	bl	8018fa8 <sys_thread_new>
}
 800af36:	bf00      	nop
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	2000d300 	.word	0x2000d300
 800af44:	2000d304 	.word	0x2000d304
 800af48:	2000d308 	.word	0x2000d308
 800af4c:	0801b24c 	.word	0x0801b24c
 800af50:	0801b2d4 	.word	0x0801b2d4
 800af54:	0801b29c 	.word	0x0801b29c
 800af58:	2000d30c 	.word	0x2000d30c
 800af5c:	0801b2f8 	.word	0x0801b2f8
 800af60:	0800ac65 	.word	0x0800ac65
 800af64:	0801b31c 	.word	0x0801b31c

0800af68 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <fs_open+0x16>
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d102      	bne.n	800af84 <fs_open+0x1c>
    return ERR_ARG;
 800af7e:	f06f 030f 	mvn.w	r3, #15
 800af82:	e028      	b.n	800afd6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800af84:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <fs_open+0x78>)
 800af86:	60fb      	str	r3, [r7, #12]
 800af88:	e020      	b.n	800afcc <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	4619      	mov	r1, r3
 800af90:	6838      	ldr	r0, [r7, #0]
 800af92:	f7f5 f92d 	bl	80001f0 <strcmp>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d114      	bne.n	800afc6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	68da      	ldr	r2, [r3, #12]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	7c1a      	ldrb	r2, [r3, #16]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e007      	b.n	800afd6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60fb      	str	r3, [r7, #12]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1db      	bne.n	800af8a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800afd2:	f06f 0305 	mvn.w	r3, #5
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	080283b8 	.word	0x080283b8

0800afe4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	1ad3      	subs	r3, r2, r3
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b082      	sub	sp, #8
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800b01e:	222c      	movs	r2, #44	; 0x2c
 800b020:	2100      	movs	r1, #0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f00e f9bf 	bl	80193a6 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800b028:	bf00      	nop
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800b036:	202c      	movs	r0, #44	; 0x2c
 800b038:	f001 f91a 	bl	800c270 <mem_malloc>
 800b03c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <http_state_alloc+0x1a>
    http_state_init(ret);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff ffe6 	bl	800b016 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800b04a:	687b      	ldr	r3, [r7, #4]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d007      	beq.n	800b074 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7ff ffbb 	bl	800afe4 <fs_close>
    hs->handle = NULL;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d007      	beq.n	800b08c <http_state_eof+0x38>
    pbuf_free(hs->req);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	4618      	mov	r0, r3
 800b082:	f002 f9bf 	bl	800d404 <pbuf_free>
    hs->req = NULL;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b08c:	bf00      	nop
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d005      	beq.n	800b0ae <http_state_free+0x1a>
    http_state_eof(hs);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7ff ffd6 	bl	800b054 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 ff47 	bl	800bf3c <mem_free>
  }
}
 800b0ae:	bf00      	nop
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d106      	bne.n	800b0da <http_write+0x22>
 800b0cc:	4b2c      	ldr	r3, [pc, #176]	; (800b180 <http_write+0xc8>)
 800b0ce:	f240 2219 	movw	r2, #537	; 0x219
 800b0d2:	492c      	ldr	r1, [pc, #176]	; (800b184 <http_write+0xcc>)
 800b0d4:	482c      	ldr	r0, [pc, #176]	; (800b188 <http_write+0xd0>)
 800b0d6:	f00e f8c7 	bl	8019268 <iprintf>
  len = *length;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800b0e0:	8afb      	ldrh	r3, [r7, #22]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <http_write+0x32>
    return ERR_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	e045      	b.n	800b176 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b0f0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800b0f2:	8aba      	ldrh	r2, [r7, #20]
 800b0f4:	8afb      	ldrh	r3, [r7, #22]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d201      	bcs.n	800b0fe <http_write+0x46>
    len = max_len;
 800b0fa:	8abb      	ldrh	r3, [r7, #20]
 800b0fc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800b106:	8afa      	ldrh	r2, [r7, #22]
 800b108:	8abb      	ldrh	r3, [r7, #20]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d901      	bls.n	800b112 <http_write+0x5a>
    len = max_len;
 800b10e:	8abb      	ldrh	r3, [r7, #20]
 800b110:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800b112:	78fb      	ldrb	r3, [r7, #3]
 800b114:	8afa      	ldrh	r2, [r7, #22]
 800b116:	68b9      	ldr	r1, [r7, #8]
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f007 f88b 	bl	8012234 <tcp_write>
 800b11e:	4603      	mov	r3, r0
 800b120:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800b122:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b12a:	d10f      	bne.n	800b14c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b132:	2b00      	cmp	r3, #0
 800b134:	d004      	beq.n	800b140 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800b13c:	2b08      	cmp	r3, #8
 800b13e:	d902      	bls.n	800b146 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800b140:	2301      	movs	r3, #1
 800b142:	82fb      	strh	r3, [r7, #22]
 800b144:	e002      	b.n	800b14c <http_write+0x94>
      } else {
        len /= 2;
 800b146:	8afb      	ldrh	r3, [r7, #22]
 800b148:	085b      	lsrs	r3, r3, #1
 800b14a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800b14c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b154:	d102      	bne.n	800b15c <http_write+0xa4>
 800b156:	8afb      	ldrh	r3, [r7, #22]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d8da      	bhi.n	800b112 <http_write+0x5a>

  if (err == ERR_OK) {
 800b15c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d103      	bne.n	800b16c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	8afa      	ldrh	r2, [r7, #22]
 800b168:	801a      	strh	r2, [r3, #0]
 800b16a:	e002      	b.n	800b172 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800b172:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	0801b36c 	.word	0x0801b36c
 800b184:	0801b3a4 	.word	0x0801b3a4
 800b188:	0801b3b4 	.word	0x0801b3b4

0800b18c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800b19a:	2100      	movs	r1, #0
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f004 f907 	bl	800f3b0 <tcp_arg>
  altcp_recv(pcb, NULL);
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f004 f915 	bl	800f3d4 <tcp_recv>
  altcp_err(pcb, NULL);
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f004 f955 	bl	800f45c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f004 f98a 	bl	800f4d0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800b1bc:	2100      	movs	r1, #0
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f004 f92a 	bl	800f418 <tcp_sent>
  if (hs != NULL) {
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800b1ca:	68b8      	ldr	r0, [r7, #8]
 800b1cc:	f7ff ff62 	bl	800b094 <http_state_free>
  }

  if (abort_conn) {
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d004      	beq.n	800b1e0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f002 ff14 	bl	800e004 <tcp_abort>
    return ERR_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e00f      	b.n	800b200 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f002 fdc9 	bl	800dd78 <tcp_close>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800b1ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	4904      	ldr	r1, [pc, #16]	; (800b208 <http_close_or_abort_conn+0x7c>)
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f004 f96a 	bl	800f4d0 <tcp_poll>
  }
  return err;
 800b1fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3718      	adds	r7, #24
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	0800b8cf 	.word	0x0800b8cf

0800b20c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800b216:	2200      	movs	r2, #0
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff ffb6 	bl	800b18c <http_close_or_abort_conn>
 800b220:	4603      	mov	r3, r0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff ffe8 	bl	800b20c <http_close_conn>
  }
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d105      	bne.n	800b262 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff ffe6 	bl	800b22a <http_eof>
    return 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	e016      	b.n	800b290 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	4618      	mov	r0, r3
 800b268:	f7ff fec6 	bl	800aff8 <fs_bytes_left>
 800b26c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	dc05      	bgt.n	800b280 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff ffd7 	bl	800b22a <http_eof>
    return 0;
 800b27c:	2300      	movs	r3, #0
 800b27e:	e007      	b.n	800b290 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800b280:	4b05      	ldr	r3, [pc, #20]	; (800b298 <http_check_eof+0x54>)
 800b282:	f240 429d 	movw	r2, #1181	; 0x49d
 800b286:	4905      	ldr	r1, [pc, #20]	; (800b29c <http_check_eof+0x58>)
 800b288:	4805      	ldr	r0, [pc, #20]	; (800b2a0 <http_check_eof+0x5c>)
 800b28a:	f00d ffed 	bl	8019268 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800b28e:	2301      	movs	r3, #1
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	0801b36c 	.word	0x0801b36c
 800b29c:	0801b3dc 	.word	0x0801b3dc
 800b2a0:	0801b3b4 	.word	0x0801b3b4

0800b2a4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d803      	bhi.n	800b2c6 <http_send_data_nonssi+0x22>
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	e001      	b.n	800b2ca <http_send_data_nonssi+0x26>
 800b2c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2ca:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	6999      	ldr	r1, [r3, #24]
 800b2d0:	f107 020c 	add.w	r2, r7, #12
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7ff feee 	bl	800b0b8 <http_write>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800b2e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10d      	bne.n	800b304 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	89ba      	ldrh	r2, [r7, #12]
 800b2f2:	441a      	add	r2, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	89ba      	ldrh	r2, [r7, #12]
 800b2fe:	1a9a      	subs	r2, r3, r2
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b318:	2300      	movs	r3, #0
 800b31a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <http_send+0x18>
    return 0;
 800b322:	2300      	movs	r3, #0
 800b324:	e025      	b.n	800b372 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d108      	bne.n	800b340 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f7ff ff87 	bl	800b244 <http_check_eof>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <http_send+0x32>
      return 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	e018      	b.n	800b372 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff ffae 	bl	800b2a4 <http_send_data_nonssi>
 800b348:	4603      	mov	r3, r0
 800b34a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10d      	bne.n	800b370 <http_send+0x62>
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7ff fe4d 	bl	800aff8 <fs_bytes_left>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	dc05      	bgt.n	800b370 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff ff5f 	bl	800b22a <http_eof>
    return 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	e000      	b.n	800b372 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800b370:	7bfb      	ldrb	r3, [r7, #15]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	4a1c      	ldr	r2, [pc, #112]	; (800b3fc <http_get_404_file+0x80>)
 800b38a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4619      	mov	r1, r3
 800b394:	4610      	mov	r0, r2
 800b396:	f7ff fde7 	bl	800af68 <fs_open>
 800b39a:	4603      	mov	r3, r0
 800b39c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d024      	beq.n	800b3f0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	4a15      	ldr	r2, [pc, #84]	; (800b400 <http_get_404_file+0x84>)
 800b3aa:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	f7ff fdd7 	bl	800af68 <fs_open>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d014      	beq.n	800b3f0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	4a0e      	ldr	r2, [pc, #56]	; (800b404 <http_get_404_file+0x88>)
 800b3ca:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	f7ff fdc7 	bl	800af68 <fs_open>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d004      	beq.n	800b3f0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
        return NULL;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	e000      	b.n	800b3f2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b3f0:	687b      	ldr	r3, [r7, #4]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	0801b414 	.word	0x0801b414
 800b400:	0801b420 	.word	0x0801b420
 800b404:	0801b42c 	.word	0x0801b42c

0800b408 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08e      	sub	sp, #56	; 0x38
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d106      	bne.n	800b42c <http_parse_request+0x24>
 800b41e:	4b65      	ldr	r3, [pc, #404]	; (800b5b4 <http_parse_request+0x1ac>)
 800b420:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800b424:	4964      	ldr	r1, [pc, #400]	; (800b5b8 <http_parse_request+0x1b0>)
 800b426:	4865      	ldr	r0, [pc, #404]	; (800b5bc <http_parse_request+0x1b4>)
 800b428:	f00d ff1e 	bl	8019268 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <http_parse_request+0x38>
 800b432:	4b60      	ldr	r3, [pc, #384]	; (800b5b4 <http_parse_request+0x1ac>)
 800b434:	f240 72af 	movw	r2, #1967	; 0x7af
 800b438:	4961      	ldr	r1, [pc, #388]	; (800b5c0 <http_parse_request+0x1b8>)
 800b43a:	4860      	ldr	r0, [pc, #384]	; (800b5bc <http_parse_request+0x1b4>)
 800b43c:	f00d ff14 	bl	8019268 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d103      	bne.n	800b450 <http_parse_request+0x48>
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800b450:	f06f 0307 	mvn.w	r3, #7
 800b454:	e0a9      	b.n	800b5aa <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d103      	bne.n	800b466 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b462:	621a      	str	r2, [r3, #32]
 800b464:	e005      	b.n	800b472 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b46c:	4618      	mov	r0, r3
 800b46e:	f002 f897 	bl	800d5a0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800b472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b474:	f002 f86c 	bl	800d550 <pbuf_ref>

  if (hs->req->next != NULL) {
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	6a1b      	ldr	r3, [r3, #32]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d012      	beq.n	800b4a8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	891b      	ldrh	r3, [r3, #8]
 800b488:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800b48c:	4293      	cmp	r3, r2
 800b48e:	bf28      	it	cs
 800b490:	4613      	movcs	r3, r2
 800b492:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	6a18      	ldr	r0, [r3, #32]
 800b498:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b49a:	2300      	movs	r3, #0
 800b49c:	4949      	ldr	r1, [pc, #292]	; (800b5c4 <http_parse_request+0x1bc>)
 800b49e:	f002 f9b7 	bl	800d810 <pbuf_copy_partial>
    data = httpd_req_buf;
 800b4a2:	4b48      	ldr	r3, [pc, #288]	; (800b5c4 <http_parse_request+0x1bc>)
 800b4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b4a6:	e005      	b.n	800b4b4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	895b      	ldrh	r3, [r3, #10]
 800b4b2:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800b4b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b4b6:	2b06      	cmp	r3, #6
 800b4b8:	d962      	bls.n	800b580 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800b4ba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b4bc:	461a      	mov	r2, r3
 800b4be:	4942      	ldr	r1, [pc, #264]	; (800b5c8 <http_parse_request+0x1c0>)
 800b4c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4c2:	f000 fb99 	bl	800bbf8 <lwip_strnstr>
 800b4c6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d058      	beq.n	800b580 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b4d2:	2204      	movs	r2, #4
 800b4d4:	493d      	ldr	r1, [pc, #244]	; (800b5cc <http_parse_request+0x1c4>)
 800b4d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4d8:	f00d ff95 	bl	8019406 <strncmp>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d116      	bne.n	800b510 <http_parse_request+0x108>
        sp1 = data + 3;
 800b4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e4:	3303      	adds	r3, #3
 800b4e6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	1c5a      	adds	r2, r3, #1
 800b4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	8b7a      	ldrh	r2, [r7, #26]
 800b4fe:	4934      	ldr	r1, [pc, #208]	; (800b5d0 <http_parse_request+0x1c8>)
 800b500:	4618      	mov	r0, r3
 800b502:	f000 fb79 	bl	800bbf8 <lwip_strnstr>
 800b506:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d111      	bne.n	800b532 <http_parse_request+0x12a>
 800b50e:	e006      	b.n	800b51e <http_parse_request+0x116>
        data[4] = 0;
 800b510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b512:	3304      	adds	r3, #4
 800b514:	2200      	movs	r2, #0
 800b516:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800b518:	f06f 030f 	mvn.w	r3, #15
 800b51c:	e045      	b.n	800b5aa <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	3301      	adds	r3, #1
 800b522:	8b7a      	ldrh	r2, [r7, #26]
 800b524:	4928      	ldr	r1, [pc, #160]	; (800b5c8 <http_parse_request+0x1c0>)
 800b526:	4618      	mov	r0, r3
 800b528:	f000 fb66 	bl	800bbf8 <lwip_strnstr>
 800b52c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800b52e:	2301      	movs	r3, #1
 800b530:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	3301      	adds	r3, #1
 800b536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b538:	1ad3      	subs	r3, r2, r3
 800b53a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d01e      	beq.n	800b580 <http_parse_request+0x178>
 800b542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	429a      	cmp	r2, r3
 800b548:	d91a      	bls.n	800b580 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b54a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b54c:	461a      	mov	r2, r3
 800b54e:	4921      	ldr	r1, [pc, #132]	; (800b5d4 <http_parse_request+0x1cc>)
 800b550:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b552:	f000 fb51 	bl	800bbf8 <lwip_strnstr>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d011      	beq.n	800b580 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	3301      	adds	r3, #1
 800b560:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	2200      	movs	r2, #0
 800b566:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b568:	8b3b      	ldrh	r3, [r7, #24]
 800b56a:	697a      	ldr	r2, [r7, #20]
 800b56c:	4413      	add	r3, r2
 800b56e:	2200      	movs	r2, #0
 800b570:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b574:	6979      	ldr	r1, [r7, #20]
 800b576:	68b8      	ldr	r0, [r7, #8]
 800b578:	f000 f82e 	bl	800b5d8 <http_find_file>
 800b57c:	4603      	mov	r3, r0
 800b57e:	e014      	b.n	800b5aa <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	4618      	mov	r0, r3
 800b586:	f001 ffcb 	bl	800d520 <pbuf_clen>
 800b58a:	4603      	mov	r3, r0
 800b58c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	891b      	ldrh	r3, [r3, #8]
 800b594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b598:	d205      	bcs.n	800b5a6 <http_parse_request+0x19e>
 800b59a:	8a7b      	ldrh	r3, [r7, #18]
 800b59c:	2b05      	cmp	r3, #5
 800b59e:	d802      	bhi.n	800b5a6 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b5a0:	f06f 0304 	mvn.w	r3, #4
 800b5a4:	e001      	b.n	800b5aa <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b5a6:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3738      	adds	r7, #56	; 0x38
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	0801b36c 	.word	0x0801b36c
 800b5b8:	0801b438 	.word	0x0801b438
 800b5bc:	0801b3b4 	.word	0x0801b3b4
 800b5c0:	0801b444 	.word	0x0801b444
 800b5c4:	2000d310 	.word	0x2000d310
 800b5c8:	0801b450 	.word	0x0801b450
 800b5cc:	0801b454 	.word	0x0801b454
 800b5d0:	0801b45c 	.word	0x0801b45c
 800b5d4:	0801b460 	.word	0x0801b460

0800b5d8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b092      	sub	sp, #72	; 0x48
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7f4 fe05 	bl	8000204 <strlen>
 800b5fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d06b      	beq.n	800b6da <http_find_file+0x102>
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b606:	3b01      	subs	r3, #1
 800b608:	4413      	add	r3, r2
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b2f      	cmp	r3, #47	; 0x2f
 800b60e:	d164      	bne.n	800b6da <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b610:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b612:	4a53      	ldr	r2, [pc, #332]	; (800b760 <http_find_file+0x188>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d102      	bne.n	800b61e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d15d      	bne.n	800b6da <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b620:	3b01      	subs	r3, #1
 800b622:	2b3f      	cmp	r3, #63	; 0x3f
 800b624:	bf28      	it	cs
 800b626:	233f      	movcs	r3, #63	; 0x3f
 800b628:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800b62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00a      	beq.n	800b646 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b634:	4619      	mov	r1, r3
 800b636:	484a      	ldr	r0, [pc, #296]	; (800b760 <http_find_file+0x188>)
 800b638:	f00e f816 	bl	8019668 <memcpy>
      http_uri_buf[copy_len] = 0;
 800b63c:	4a48      	ldr	r2, [pc, #288]	; (800b760 <http_find_file+0x188>)
 800b63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b640:	4413      	add	r3, r2
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b646:	2300      	movs	r3, #0
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b64a:	e043      	b.n	800b6d4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d028      	beq.n	800b6a4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b658:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d01e      	beq.n	800b69e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b660:	4a40      	ldr	r2, [pc, #256]	; (800b764 <http_find_file+0x18c>)
 800b662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b664:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b668:	4618      	mov	r0, r3
 800b66a:	f7f4 fdcb 	bl	8000204 <strlen>
 800b66e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b670:	69fa      	ldr	r2, [r7, #28]
 800b672:	6a3b      	ldr	r3, [r7, #32]
 800b674:	4293      	cmp	r3, r2
 800b676:	bf28      	it	cs
 800b678:	4613      	movcs	r3, r2
 800b67a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	4a38      	ldr	r2, [pc, #224]	; (800b760 <http_find_file+0x188>)
 800b680:	1898      	adds	r0, r3, r2
 800b682:	4a38      	ldr	r2, [pc, #224]	; (800b764 <http_find_file+0x18c>)
 800b684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b686:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b68a:	69ba      	ldr	r2, [r7, #24]
 800b68c:	4619      	mov	r1, r3
 800b68e:	f00d ffeb 	bl	8019668 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	4413      	add	r3, r2
 800b698:	4a31      	ldr	r2, [pc, #196]	; (800b760 <http_find_file+0x188>)
 800b69a:	2100      	movs	r1, #0
 800b69c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b69e:	4b30      	ldr	r3, [pc, #192]	; (800b760 <http_find_file+0x188>)
 800b6a0:	633b      	str	r3, [r7, #48]	; 0x30
 800b6a2:	e004      	b.n	800b6ae <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b6a4:	4a2f      	ldr	r2, [pc, #188]	; (800b764 <http_find_file+0x18c>)
 800b6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b6ac:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7ff fc58 	bl	800af68 <fs_open>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800b6bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d104      	bne.n	800b6ce <http_find_file+0xf6>
        uri = file_name;
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800b6cc:	e005      	b.n	800b6da <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d9b8      	bls.n	800b64c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d124      	bne.n	800b72a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	213f      	movs	r1, #63	; 0x3f
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f00d fe81 	bl	80193ec <strchr>
 800b6ea:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d005      	beq.n	800b6fe <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	701a      	strb	r2, [r3, #0]
      params++;
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	4611      	mov	r1, r2
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff fc2f 	bl	800af68 <fs_open>
 800b70a:	4603      	mov	r3, r0
 800b70c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b70e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d102      	bne.n	800b71c <http_find_file+0x144>
      file = &hs->file_handle;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	63bb      	str	r3, [r7, #56]	; 0x38
 800b71a:	e006      	b.n	800b72a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b71c:	f107 0308 	add.w	r3, r7, #8
 800b720:	4619      	mov	r1, r3
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f7ff fe2a 	bl	800b37c <http_get_404_file>
 800b728:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b730:	f107 0308 	add.w	r3, r7, #8
 800b734:	4619      	mov	r1, r3
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff fe20 	bl	800b37c <http_get_404_file>
 800b73c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	4613      	mov	r3, r2
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f000 f809 	bl	800b768 <http_init_file>
 800b756:	4603      	mov	r3, r0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3740      	adds	r7, #64	; 0x40
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	2000d710 	.word	0x2000d710
 800b764:	080283cc 	.word	0x080283cc

0800b768 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d05c      	beq.n	800b836 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d106      	bne.n	800b792 <http_init_file+0x2a>
 800b784:	4b35      	ldr	r3, [pc, #212]	; (800b85c <http_init_file+0xf4>)
 800b786:	f640 120b 	movw	r2, #2315	; 0x90b
 800b78a:	4935      	ldr	r1, [pc, #212]	; (800b860 <http_init_file+0xf8>)
 800b78c:	4835      	ldr	r0, [pc, #212]	; (800b864 <http_init_file+0xfc>)
 800b78e:	f00d fd6b 	bl	8019268 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	da06      	bge.n	800b7b6 <http_init_file+0x4e>
 800b7a8:	4b2c      	ldr	r3, [pc, #176]	; (800b85c <http_init_file+0xf4>)
 800b7aa:	f640 1234 	movw	r2, #2356	; 0x934
 800b7ae:	492e      	ldr	r1, [pc, #184]	; (800b868 <http_init_file+0x100>)
 800b7b0:	482c      	ldr	r0, [pc, #176]	; (800b864 <http_init_file+0xfc>)
 800b7b2:	f00d fd59 	bl	8019268 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	7c1b      	ldrb	r3, [r3, #16]
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d106      	bne.n	800b7e4 <http_init_file+0x7c>
 800b7d6:	4b21      	ldr	r3, [pc, #132]	; (800b85c <http_init_file+0xf4>)
 800b7d8:	f640 1243 	movw	r2, #2371	; 0x943
 800b7dc:	4923      	ldr	r1, [pc, #140]	; (800b86c <http_init_file+0x104>)
 800b7de:	4821      	ldr	r0, [pc, #132]	; (800b864 <http_init_file+0xfc>)
 800b7e0:	f00d fd42 	bl	8019268 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d032      	beq.n	800b850 <http_init_file+0xe8>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	7c1b      	ldrb	r3, [r3, #16]
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d02b      	beq.n	800b850 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6998      	ldr	r0, [r3, #24]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b800:	461a      	mov	r2, r3
 800b802:	491b      	ldr	r1, [pc, #108]	; (800b870 <http_init_file+0x108>)
 800b804:	f000 f9f8 	bl	800bbf8 <lwip_strnstr>
 800b808:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d01f      	beq.n	800b850 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	1d1a      	adds	r2, r3, #4
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	699a      	ldr	r2, [r3, #24]
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	441a      	add	r2, r3
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	625a      	str	r2, [r3, #36]	; 0x24
 800b834:	e00c      	b.n	800b850 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	0801b36c 	.word	0x0801b36c
 800b860:	0801b468 	.word	0x0801b468
 800b864:	0801b3b4 	.word	0x0801b3b4
 800b868:	0801b47c 	.word	0x0801b47c
 800b86c:	0801b49c 	.word	0x0801b49c
 800b870:	0801b460 	.word	0x0801b460

0800b874 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	460b      	mov	r3, r1
 800b87e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d002      	beq.n	800b890 <http_err+0x1c>
    http_state_free(hs);
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f7ff fc02 	bl	800b094 <http_state_free>
  }
}
 800b890:	bf00      	nop
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <http_sent+0x1c>
    return ERR_OK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	e008      	b.n	800b8c6 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b8bc:	6979      	ldr	r1, [r7, #20]
 800b8be:	68b8      	ldr	r0, [r7, #8]
 800b8c0:	f7ff fd25 	bl	800b30e <http_send>

  return ERR_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d107      	bne.n	800b8f2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	6838      	ldr	r0, [r7, #0]
 800b8e6:	f7ff fc91 	bl	800b20c <http_close_conn>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	e021      	b.n	800b936 <http_poll+0x68>
  } else {
    hs->retries++;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b908:	2b04      	cmp	r3, #4
 800b90a:	d105      	bne.n	800b918 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b90c:	68f9      	ldr	r1, [r7, #12]
 800b90e:	6838      	ldr	r0, [r7, #0]
 800b910:	f7ff fc7c 	bl	800b20c <http_close_conn>
      return ERR_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	e00e      	b.n	800b936 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	695b      	ldr	r3, [r3, #20]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d009      	beq.n	800b934 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b920:	68f9      	ldr	r1, [r7, #12]
 800b922:	6838      	ldr	r0, [r7, #0]
 800b924:	f7ff fcf3 	bl	800b30e <http_send>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d002      	beq.n	800b934 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b92e:	6838      	ldr	r0, [r7, #0]
 800b930:	f007 fa6a 	bl	8012e08 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
	...

0800b940 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d105      	bne.n	800b966 <http_recv+0x26>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <http_recv+0x26>
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d111      	bne.n	800b98a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d008      	beq.n	800b97e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	891b      	ldrh	r3, [r3, #8]
 800b970:	4619      	mov	r1, r3
 800b972:	68b8      	ldr	r0, [r7, #8]
 800b974:	f002 fd20 	bl	800e3b8 <tcp_recved>
      pbuf_free(p);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f001 fd43 	bl	800d404 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b97e:	6979      	ldr	r1, [r7, #20]
 800b980:	68b8      	ldr	r0, [r7, #8]
 800b982:	f7ff fc43 	bl	800b20c <http_close_conn>
    return ERR_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	e055      	b.n	800ba36 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	891b      	ldrh	r3, [r3, #8]
 800b98e:	4619      	mov	r1, r3
 800b990:	68b8      	ldr	r0, [r7, #8]
 800b992:	f002 fd11 	bl	800e3b8 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d147      	bne.n	800ba2e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	6979      	ldr	r1, [r7, #20]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7ff fd30 	bl	800b408 <http_parse_request>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b9ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d015      	beq.n	800b9e0 <http_recv+0xa0>
 800b9b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9b8:	f113 0f05 	cmn.w	r3, #5
 800b9bc:	d010      	beq.n	800b9e0 <http_recv+0xa0>
 800b9be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9c2:	f113 0f10 	cmn.w	r3, #16
 800b9c6:	d00b      	beq.n	800b9e0 <http_recv+0xa0>
 800b9c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9cc:	f113 0f08 	cmn.w	r3, #8
 800b9d0:	d006      	beq.n	800b9e0 <http_recv+0xa0>
 800b9d2:	4b1b      	ldr	r3, [pc, #108]	; (800ba40 <http_recv+0x100>)
 800b9d4:	f640 2204 	movw	r2, #2564	; 0xa04
 800b9d8:	491a      	ldr	r1, [pc, #104]	; (800ba44 <http_recv+0x104>)
 800b9da:	481b      	ldr	r0, [pc, #108]	; (800ba48 <http_recv+0x108>)
 800b9dc:	f00d fc44 	bl	8019268 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b9e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9e4:	f113 0f05 	cmn.w	r3, #5
 800b9e8:	d00b      	beq.n	800ba02 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d007      	beq.n	800ba02 <http_recv+0xc2>
          pbuf_free(hs->req);
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f001 fd04 	bl	800d404 <pbuf_free>
          hs->req = NULL;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f001 fcfe 	bl	800d404 <pbuf_free>
      if (parsed == ERR_OK) {
 800ba08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d104      	bne.n	800ba1a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800ba10:	6979      	ldr	r1, [r7, #20]
 800ba12:	68b8      	ldr	r0, [r7, #8]
 800ba14:	f7ff fc7b 	bl	800b30e <http_send>
 800ba18:	e00c      	b.n	800ba34 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800ba1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba1e:	f113 0f10 	cmn.w	r3, #16
 800ba22:	d107      	bne.n	800ba34 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800ba24:	6979      	ldr	r1, [r7, #20]
 800ba26:	68b8      	ldr	r0, [r7, #8]
 800ba28:	f7ff fbf0 	bl	800b20c <http_close_conn>
 800ba2c:	e002      	b.n	800ba34 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f001 fce8 	bl	800d404 <pbuf_free>
    }
  }
  return ERR_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	0801b36c 	.word	0x0801b36c
 800ba44:	0801b4c8 	.word	0x0801b4c8
 800ba48:	0801b3b4 	.word	0x0801b3b4

0800ba4c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800ba5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d102      	bne.n	800ba68 <http_accept+0x1c>
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d102      	bne.n	800ba6e <http_accept+0x22>
    return ERR_VAL;
 800ba68:	f06f 0305 	mvn.w	r3, #5
 800ba6c:	e025      	b.n	800baba <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ba6e:	2101      	movs	r1, #1
 800ba70:	68b8      	ldr	r0, [r7, #8]
 800ba72:	f003 fa9d 	bl	800efb0 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800ba76:	f7ff fadb 	bl	800b030 <http_state_alloc>
 800ba7a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d102      	bne.n	800ba88 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800ba82:	f04f 33ff 	mov.w	r3, #4294967295
 800ba86:	e018      	b.n	800baba <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800ba8e:	6979      	ldr	r1, [r7, #20]
 800ba90:	68b8      	ldr	r0, [r7, #8]
 800ba92:	f003 fc8d 	bl	800f3b0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800ba96:	490b      	ldr	r1, [pc, #44]	; (800bac4 <http_accept+0x78>)
 800ba98:	68b8      	ldr	r0, [r7, #8]
 800ba9a:	f003 fc9b 	bl	800f3d4 <tcp_recv>
  altcp_err(pcb, http_err);
 800ba9e:	490a      	ldr	r1, [pc, #40]	; (800bac8 <http_accept+0x7c>)
 800baa0:	68b8      	ldr	r0, [r7, #8]
 800baa2:	f003 fcdb 	bl	800f45c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800baa6:	2204      	movs	r2, #4
 800baa8:	4908      	ldr	r1, [pc, #32]	; (800bacc <http_accept+0x80>)
 800baaa:	68b8      	ldr	r0, [r7, #8]
 800baac:	f003 fd10 	bl	800f4d0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800bab0:	4907      	ldr	r1, [pc, #28]	; (800bad0 <http_accept+0x84>)
 800bab2:	68b8      	ldr	r0, [r7, #8]
 800bab4:	f003 fcb0 	bl	800f418 <tcp_sent>

  return ERR_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3718      	adds	r7, #24
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	0800b941 	.word	0x0800b941
 800bac8:	0800b875 	.word	0x0800b875
 800bacc:	0800b8cf 	.word	0x0800b8cf
 800bad0:	0800b899 	.word	0x0800b899

0800bad4 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d029      	beq.n	800bb3a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800bae6:	2101      	movs	r1, #1
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f003 fa61 	bl	800efb0 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800baee:	887b      	ldrh	r3, [r7, #2]
 800baf0:	461a      	mov	r2, r3
 800baf2:	4914      	ldr	r1, [pc, #80]	; (800bb44 <httpd_init_pcb+0x70>)
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f002 fa91 	bl	800e01c <tcp_bind>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800bafe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d006      	beq.n	800bb14 <httpd_init_pcb+0x40>
 800bb06:	4b10      	ldr	r3, [pc, #64]	; (800bb48 <httpd_init_pcb+0x74>)
 800bb08:	f640 2257 	movw	r2, #2647	; 0xa57
 800bb0c:	490f      	ldr	r1, [pc, #60]	; (800bb4c <httpd_init_pcb+0x78>)
 800bb0e:	4810      	ldr	r0, [pc, #64]	; (800bb50 <httpd_init_pcb+0x7c>)
 800bb10:	f00d fbaa 	bl	8019268 <iprintf>
    pcb = altcp_listen(pcb);
 800bb14:	21ff      	movs	r1, #255	; 0xff
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f002 fb38 	bl	800e18c <tcp_listen_with_backlog>
 800bb1c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d106      	bne.n	800bb32 <httpd_init_pcb+0x5e>
 800bb24:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <httpd_init_pcb+0x74>)
 800bb26:	f640 2259 	movw	r2, #2649	; 0xa59
 800bb2a:	490a      	ldr	r1, [pc, #40]	; (800bb54 <httpd_init_pcb+0x80>)
 800bb2c:	4808      	ldr	r0, [pc, #32]	; (800bb50 <httpd_init_pcb+0x7c>)
 800bb2e:	f00d fb9b 	bl	8019268 <iprintf>
    altcp_accept(pcb, http_accept);
 800bb32:	4909      	ldr	r1, [pc, #36]	; (800bb58 <httpd_init_pcb+0x84>)
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f003 fcb3 	bl	800f4a0 <tcp_accept>
  }
}
 800bb3a:	bf00      	nop
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	08028514 	.word	0x08028514
 800bb48:	0801b36c 	.word	0x0801b36c
 800bb4c:	0801b4f4 	.word	0x0801b4f4
 800bb50:	0801b3b4 	.word	0x0801b3b4
 800bb54:	0801b510 	.word	0x0801b510
 800bb58:	0800ba4d 	.word	0x0800ba4d

0800bb5c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800bb62:	202e      	movs	r0, #46	; 0x2e
 800bb64:	f003 fc16 	bl	800f394 <tcp_new_ip_type>
 800bb68:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d106      	bne.n	800bb7e <httpd_init+0x22>
 800bb70:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <httpd_init+0x34>)
 800bb72:	f640 2272 	movw	r2, #2674	; 0xa72
 800bb76:	4907      	ldr	r1, [pc, #28]	; (800bb94 <httpd_init+0x38>)
 800bb78:	4807      	ldr	r0, [pc, #28]	; (800bb98 <httpd_init+0x3c>)
 800bb7a:	f00d fb75 	bl	8019268 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800bb7e:	2150      	movs	r1, #80	; 0x50
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7ff ffa7 	bl	800bad4 <httpd_init_pcb>
}
 800bb86:	bf00      	nop
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	0801b36c 	.word	0x0801b36c
 800bb94:	0801b530 	.word	0x0801b530
 800bb98:	0801b3b4 	.word	0x0801b3b4

0800bb9c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4603      	mov	r3, r0
 800bba4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bba6:	88fb      	ldrh	r3, [r7, #6]
 800bba8:	021b      	lsls	r3, r3, #8
 800bbaa:	b21a      	sxth	r2, r3
 800bbac:	88fb      	ldrh	r3, [r7, #6]
 800bbae:	0a1b      	lsrs	r3, r3, #8
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	b21b      	sxth	r3, r3
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	b21b      	sxth	r3, r3
 800bbb8:	b29b      	uxth	r3, r3
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	061a      	lsls	r2, r3, #24
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	021b      	lsls	r3, r3, #8
 800bbd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	0a1b      	lsrs	r3, r3, #8
 800bbe0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bbe4:	431a      	orrs	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	0e1b      	lsrs	r3, r3, #24
 800bbea:	4313      	orrs	r3, r2
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800bc04:	68b8      	ldr	r0, [r7, #8]
 800bc06:	f7f4 fafd 	bl	8000204 <strlen>
 800bc0a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	e022      	b.n	800bc5c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	617b      	str	r3, [r7, #20]
 800bc1a:	e012      	b.n	800bc42 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	781a      	ldrb	r2, [r3, #0]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d109      	bne.n	800bc3c <lwip_strnstr+0x44>
 800bc28:	693a      	ldr	r2, [r7, #16]
 800bc2a:	68b9      	ldr	r1, [r7, #8]
 800bc2c:	6978      	ldr	r0, [r7, #20]
 800bc2e:	f00d fbea 	bl	8019406 <strncmp>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	e00f      	b.n	800bc5c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	617b      	str	r3, [r7, #20]
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d007      	beq.n	800bc5a <lwip_strnstr+0x62>
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	441a      	add	r2, r3
 800bc50:	68f9      	ldr	r1, [r7, #12]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	440b      	add	r3, r1
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d9e0      	bls.n	800bc1c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bc6e:	f00d f955 	bl	8018f1c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bc72:	f000 f8d5 	bl	800be20 <mem_init>
  memp_init();
 800bc76:	f000 fc31 	bl	800c4dc <memp_init>
  pbuf_init();
  netif_init();
 800bc7a:	f000 fd3d 	bl	800c6f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bc7e:	f008 f9b3 	bl	8013fe8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bc82:	f001 fe69 	bl	800d958 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bc86:	f008 f8f5 	bl	8013e74 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bc8a:	bf00      	nop
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
	...

0800bc94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bc9e:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <ptr_to_mem+0x20>)
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	4413      	add	r3, r2
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	2000ddbc 	.word	0x2000ddbc

0800bcb8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bcc0:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <mem_to_ptr+0x20>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	b29b      	uxth	r3, r3
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	2000ddbc 	.word	0x2000ddbc

0800bcdc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bcdc:	b590      	push	{r4, r7, lr}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bce4:	4b45      	ldr	r3, [pc, #276]	; (800bdfc <plug_holes+0x120>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d206      	bcs.n	800bcfc <plug_holes+0x20>
 800bcee:	4b44      	ldr	r3, [pc, #272]	; (800be00 <plug_holes+0x124>)
 800bcf0:	f240 12df 	movw	r2, #479	; 0x1df
 800bcf4:	4943      	ldr	r1, [pc, #268]	; (800be04 <plug_holes+0x128>)
 800bcf6:	4844      	ldr	r0, [pc, #272]	; (800be08 <plug_holes+0x12c>)
 800bcf8:	f00d fab6 	bl	8019268 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bcfc:	4b43      	ldr	r3, [pc, #268]	; (800be0c <plug_holes+0x130>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d306      	bcc.n	800bd14 <plug_holes+0x38>
 800bd06:	4b3e      	ldr	r3, [pc, #248]	; (800be00 <plug_holes+0x124>)
 800bd08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bd0c:	4940      	ldr	r1, [pc, #256]	; (800be10 <plug_holes+0x134>)
 800bd0e:	483e      	ldr	r0, [pc, #248]	; (800be08 <plug_holes+0x12c>)
 800bd10:	f00d faaa 	bl	8019268 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	791b      	ldrb	r3, [r3, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d006      	beq.n	800bd2a <plug_holes+0x4e>
 800bd1c:	4b38      	ldr	r3, [pc, #224]	; (800be00 <plug_holes+0x124>)
 800bd1e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bd22:	493c      	ldr	r1, [pc, #240]	; (800be14 <plug_holes+0x138>)
 800bd24:	4838      	ldr	r0, [pc, #224]	; (800be08 <plug_holes+0x12c>)
 800bd26:	f00d fa9f 	bl	8019268 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd32:	d906      	bls.n	800bd42 <plug_holes+0x66>
 800bd34:	4b32      	ldr	r3, [pc, #200]	; (800be00 <plug_holes+0x124>)
 800bd36:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bd3a:	4937      	ldr	r1, [pc, #220]	; (800be18 <plug_holes+0x13c>)
 800bd3c:	4832      	ldr	r0, [pc, #200]	; (800be08 <plug_holes+0x12c>)
 800bd3e:	f00d fa93 	bl	8019268 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7ff ffa4 	bl	800bc94 <ptr_to_mem>
 800bd4c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d024      	beq.n	800bda0 <plug_holes+0xc4>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	791b      	ldrb	r3, [r3, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d120      	bne.n	800bda0 <plug_holes+0xc4>
 800bd5e:	4b2b      	ldr	r3, [pc, #172]	; (800be0c <plug_holes+0x130>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d01b      	beq.n	800bda0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bd68:	4b2c      	ldr	r3, [pc, #176]	; (800be1c <plug_holes+0x140>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d102      	bne.n	800bd78 <plug_holes+0x9c>
      lfree = mem;
 800bd72:	4a2a      	ldr	r2, [pc, #168]	; (800be1c <plug_holes+0x140>)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	881a      	ldrh	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd88:	d00a      	beq.n	800bda0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff ff80 	bl	800bc94 <ptr_to_mem>
 800bd94:	4604      	mov	r4, r0
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff ff8e 	bl	800bcb8 <mem_to_ptr>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	885b      	ldrh	r3, [r3, #2]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7ff ff75 	bl	800bc94 <ptr_to_mem>
 800bdaa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d01f      	beq.n	800bdf4 <plug_holes+0x118>
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	791b      	ldrb	r3, [r3, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d11b      	bne.n	800bdf4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bdbc:	4b17      	ldr	r3, [pc, #92]	; (800be1c <plug_holes+0x140>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d102      	bne.n	800bdcc <plug_holes+0xf0>
      lfree = pmem;
 800bdc6:	4a15      	ldr	r2, [pc, #84]	; (800be1c <plug_holes+0x140>)
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	881a      	ldrh	r2, [r3, #0]
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bddc:	d00a      	beq.n	800bdf4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff ff56 	bl	800bc94 <ptr_to_mem>
 800bde8:	4604      	mov	r4, r0
 800bdea:	68b8      	ldr	r0, [r7, #8]
 800bdec:	f7ff ff64 	bl	800bcb8 <mem_to_ptr>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bdf4:	bf00      	nop
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd90      	pop	{r4, r7, pc}
 800bdfc:	2000ddbc 	.word	0x2000ddbc
 800be00:	0801b54c 	.word	0x0801b54c
 800be04:	0801b57c 	.word	0x0801b57c
 800be08:	0801b594 	.word	0x0801b594
 800be0c:	2000ddc0 	.word	0x2000ddc0
 800be10:	0801b5bc 	.word	0x0801b5bc
 800be14:	0801b5d8 	.word	0x0801b5d8
 800be18:	0801b5f4 	.word	0x0801b5f4
 800be1c:	2000ddc8 	.word	0x2000ddc8

0800be20 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800be26:	4b1f      	ldr	r3, [pc, #124]	; (800bea4 <mem_init+0x84>)
 800be28:	3303      	adds	r3, #3
 800be2a:	f023 0303 	bic.w	r3, r3, #3
 800be2e:	461a      	mov	r2, r3
 800be30:	4b1d      	ldr	r3, [pc, #116]	; (800bea8 <mem_init+0x88>)
 800be32:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800be34:	4b1c      	ldr	r3, [pc, #112]	; (800bea8 <mem_init+0x88>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be40:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800be4e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800be52:	f7ff ff1f 	bl	800bc94 <ptr_to_mem>
 800be56:	4603      	mov	r3, r0
 800be58:	4a14      	ldr	r2, [pc, #80]	; (800beac <mem_init+0x8c>)
 800be5a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800be5c:	4b13      	ldr	r3, [pc, #76]	; (800beac <mem_init+0x8c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2201      	movs	r2, #1
 800be62:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800be64:	4b11      	ldr	r3, [pc, #68]	; (800beac <mem_init+0x8c>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be6c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800be6e:	4b0f      	ldr	r3, [pc, #60]	; (800beac <mem_init+0x8c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be76:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800be78:	4b0b      	ldr	r3, [pc, #44]	; (800bea8 <mem_init+0x88>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a0c      	ldr	r2, [pc, #48]	; (800beb0 <mem_init+0x90>)
 800be7e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800be80:	480c      	ldr	r0, [pc, #48]	; (800beb4 <mem_init+0x94>)
 800be82:	f00d f859 	bl	8018f38 <sys_mutex_new>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d006      	beq.n	800be9a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800be8c:	4b0a      	ldr	r3, [pc, #40]	; (800beb8 <mem_init+0x98>)
 800be8e:	f240 221f 	movw	r2, #543	; 0x21f
 800be92:	490a      	ldr	r1, [pc, #40]	; (800bebc <mem_init+0x9c>)
 800be94:	480a      	ldr	r0, [pc, #40]	; (800bec0 <mem_init+0xa0>)
 800be96:	f00d f9e7 	bl	8019268 <iprintf>
  }
}
 800be9a:	bf00      	nop
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	2000d768 	.word	0x2000d768
 800bea8:	2000ddbc 	.word	0x2000ddbc
 800beac:	2000ddc0 	.word	0x2000ddc0
 800beb0:	2000ddc8 	.word	0x2000ddc8
 800beb4:	2000ddc4 	.word	0x2000ddc4
 800beb8:	0801b54c 	.word	0x0801b54c
 800bebc:	0801b620 	.word	0x0801b620
 800bec0:	0801b594 	.word	0x0801b594

0800bec4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff fef3 	bl	800bcb8 <mem_to_ptr>
 800bed2:	4603      	mov	r3, r0
 800bed4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff feda 	bl	800bc94 <ptr_to_mem>
 800bee0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	885b      	ldrh	r3, [r3, #2]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7ff fed4 	bl	800bc94 <ptr_to_mem>
 800beec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	881b      	ldrh	r3, [r3, #0]
 800bef2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bef6:	d818      	bhi.n	800bf2a <mem_link_valid+0x66>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	885b      	ldrh	r3, [r3, #2]
 800befc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf00:	d813      	bhi.n	800bf2a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bf06:	8afa      	ldrh	r2, [r7, #22]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d004      	beq.n	800bf16 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	8afa      	ldrh	r2, [r7, #22]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d109      	bne.n	800bf2a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bf16:	4b08      	ldr	r3, [pc, #32]	; (800bf38 <mem_link_valid+0x74>)
 800bf18:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d006      	beq.n	800bf2e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	885b      	ldrh	r3, [r3, #2]
 800bf24:	8afa      	ldrh	r2, [r7, #22]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d001      	beq.n	800bf2e <mem_link_valid+0x6a>
    return 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e000      	b.n	800bf30 <mem_link_valid+0x6c>
  }
  return 1;
 800bf2e:	2301      	movs	r3, #1
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3718      	adds	r7, #24
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	2000ddc0 	.word	0x2000ddc0

0800bf3c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d070      	beq.n	800c02c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f003 0303 	and.w	r3, r3, #3
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00d      	beq.n	800bf70 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bf54:	4b37      	ldr	r3, [pc, #220]	; (800c034 <mem_free+0xf8>)
 800bf56:	f240 2273 	movw	r2, #627	; 0x273
 800bf5a:	4937      	ldr	r1, [pc, #220]	; (800c038 <mem_free+0xfc>)
 800bf5c:	4837      	ldr	r0, [pc, #220]	; (800c03c <mem_free+0x100>)
 800bf5e:	f00d f983 	bl	8019268 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf62:	f00d f847 	bl	8018ff4 <sys_arch_protect>
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f00d f851 	bl	8019010 <sys_arch_unprotect>
    return;
 800bf6e:	e05e      	b.n	800c02e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	3b08      	subs	r3, #8
 800bf74:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bf76:	4b32      	ldr	r3, [pc, #200]	; (800c040 <mem_free+0x104>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	69fa      	ldr	r2, [r7, #28]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d306      	bcc.n	800bf8e <mem_free+0x52>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f103 020c 	add.w	r2, r3, #12
 800bf86:	4b2f      	ldr	r3, [pc, #188]	; (800c044 <mem_free+0x108>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d90d      	bls.n	800bfaa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bf8e:	4b29      	ldr	r3, [pc, #164]	; (800c034 <mem_free+0xf8>)
 800bf90:	f240 227f 	movw	r2, #639	; 0x27f
 800bf94:	492c      	ldr	r1, [pc, #176]	; (800c048 <mem_free+0x10c>)
 800bf96:	4829      	ldr	r0, [pc, #164]	; (800c03c <mem_free+0x100>)
 800bf98:	f00d f966 	bl	8019268 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf9c:	f00d f82a 	bl	8018ff4 <sys_arch_protect>
 800bfa0:	6138      	str	r0, [r7, #16]
 800bfa2:	6938      	ldr	r0, [r7, #16]
 800bfa4:	f00d f834 	bl	8019010 <sys_arch_unprotect>
    return;
 800bfa8:	e041      	b.n	800c02e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bfaa:	4828      	ldr	r0, [pc, #160]	; (800c04c <mem_free+0x110>)
 800bfac:	f00c ffe0 	bl	8018f70 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	791b      	ldrb	r3, [r3, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d110      	bne.n	800bfda <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bfb8:	4b1e      	ldr	r3, [pc, #120]	; (800c034 <mem_free+0xf8>)
 800bfba:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bfbe:	4924      	ldr	r1, [pc, #144]	; (800c050 <mem_free+0x114>)
 800bfc0:	481e      	ldr	r0, [pc, #120]	; (800c03c <mem_free+0x100>)
 800bfc2:	f00d f951 	bl	8019268 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bfc6:	4821      	ldr	r0, [pc, #132]	; (800c04c <mem_free+0x110>)
 800bfc8:	f00c ffe1 	bl	8018f8e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bfcc:	f00d f812 	bl	8018ff4 <sys_arch_protect>
 800bfd0:	6178      	str	r0, [r7, #20]
 800bfd2:	6978      	ldr	r0, [r7, #20]
 800bfd4:	f00d f81c 	bl	8019010 <sys_arch_unprotect>
    return;
 800bfd8:	e029      	b.n	800c02e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bfda:	69f8      	ldr	r0, [r7, #28]
 800bfdc:	f7ff ff72 	bl	800bec4 <mem_link_valid>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d110      	bne.n	800c008 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bfe6:	4b13      	ldr	r3, [pc, #76]	; (800c034 <mem_free+0xf8>)
 800bfe8:	f240 2295 	movw	r2, #661	; 0x295
 800bfec:	4919      	ldr	r1, [pc, #100]	; (800c054 <mem_free+0x118>)
 800bfee:	4813      	ldr	r0, [pc, #76]	; (800c03c <mem_free+0x100>)
 800bff0:	f00d f93a 	bl	8019268 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bff4:	4815      	ldr	r0, [pc, #84]	; (800c04c <mem_free+0x110>)
 800bff6:	f00c ffca 	bl	8018f8e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bffa:	f00c fffb 	bl	8018ff4 <sys_arch_protect>
 800bffe:	61b8      	str	r0, [r7, #24]
 800c000:	69b8      	ldr	r0, [r7, #24]
 800c002:	f00d f805 	bl	8019010 <sys_arch_unprotect>
    return;
 800c006:	e012      	b.n	800c02e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	2200      	movs	r2, #0
 800c00c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c00e:	4b12      	ldr	r3, [pc, #72]	; (800c058 <mem_free+0x11c>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69fa      	ldr	r2, [r7, #28]
 800c014:	429a      	cmp	r2, r3
 800c016:	d202      	bcs.n	800c01e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c018:	4a0f      	ldr	r2, [pc, #60]	; (800c058 <mem_free+0x11c>)
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c01e:	69f8      	ldr	r0, [r7, #28]
 800c020:	f7ff fe5c 	bl	800bcdc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c024:	4809      	ldr	r0, [pc, #36]	; (800c04c <mem_free+0x110>)
 800c026:	f00c ffb2 	bl	8018f8e <sys_mutex_unlock>
 800c02a:	e000      	b.n	800c02e <mem_free+0xf2>
    return;
 800c02c:	bf00      	nop
}
 800c02e:	3720      	adds	r7, #32
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	0801b54c 	.word	0x0801b54c
 800c038:	0801b63c 	.word	0x0801b63c
 800c03c:	0801b594 	.word	0x0801b594
 800c040:	2000ddbc 	.word	0x2000ddbc
 800c044:	2000ddc0 	.word	0x2000ddc0
 800c048:	0801b660 	.word	0x0801b660
 800c04c:	2000ddc4 	.word	0x2000ddc4
 800c050:	0801b67c 	.word	0x0801b67c
 800c054:	0801b6a4 	.word	0x0801b6a4
 800c058:	2000ddc8 	.word	0x2000ddc8

0800c05c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	460b      	mov	r3, r1
 800c066:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c068:	887b      	ldrh	r3, [r7, #2]
 800c06a:	3303      	adds	r3, #3
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	f023 0303 	bic.w	r3, r3, #3
 800c072:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c074:	8bfb      	ldrh	r3, [r7, #30]
 800c076:	2b0b      	cmp	r3, #11
 800c078:	d801      	bhi.n	800c07e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c07a:	230c      	movs	r3, #12
 800c07c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c07e:	8bfb      	ldrh	r3, [r7, #30]
 800c080:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c084:	d803      	bhi.n	800c08e <mem_trim+0x32>
 800c086:	8bfa      	ldrh	r2, [r7, #30]
 800c088:	887b      	ldrh	r3, [r7, #2]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d201      	bcs.n	800c092 <mem_trim+0x36>
    return NULL;
 800c08e:	2300      	movs	r3, #0
 800c090:	e0d8      	b.n	800c244 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c092:	4b6e      	ldr	r3, [pc, #440]	; (800c24c <mem_trim+0x1f0>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d304      	bcc.n	800c0a6 <mem_trim+0x4a>
 800c09c:	4b6c      	ldr	r3, [pc, #432]	; (800c250 <mem_trim+0x1f4>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d306      	bcc.n	800c0b4 <mem_trim+0x58>
 800c0a6:	4b6b      	ldr	r3, [pc, #428]	; (800c254 <mem_trim+0x1f8>)
 800c0a8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c0ac:	496a      	ldr	r1, [pc, #424]	; (800c258 <mem_trim+0x1fc>)
 800c0ae:	486b      	ldr	r0, [pc, #428]	; (800c25c <mem_trim+0x200>)
 800c0b0:	f00d f8da 	bl	8019268 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c0b4:	4b65      	ldr	r3, [pc, #404]	; (800c24c <mem_trim+0x1f0>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d304      	bcc.n	800c0c8 <mem_trim+0x6c>
 800c0be:	4b64      	ldr	r3, [pc, #400]	; (800c250 <mem_trim+0x1f4>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d307      	bcc.n	800c0d8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c0c8:	f00c ff94 	bl	8018ff4 <sys_arch_protect>
 800c0cc:	60b8      	str	r0, [r7, #8]
 800c0ce:	68b8      	ldr	r0, [r7, #8]
 800c0d0:	f00c ff9e 	bl	8019010 <sys_arch_unprotect>
    return rmem;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	e0b5      	b.n	800c244 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3b08      	subs	r3, #8
 800c0dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c0de:	69b8      	ldr	r0, [r7, #24]
 800c0e0:	f7ff fdea 	bl	800bcb8 <mem_to_ptr>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	881a      	ldrh	r2, [r3, #0]
 800c0ec:	8afb      	ldrh	r3, [r7, #22]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	3b08      	subs	r3, #8
 800c0f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c0f6:	8bfa      	ldrh	r2, [r7, #30]
 800c0f8:	8abb      	ldrh	r3, [r7, #20]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d906      	bls.n	800c10c <mem_trim+0xb0>
 800c0fe:	4b55      	ldr	r3, [pc, #340]	; (800c254 <mem_trim+0x1f8>)
 800c100:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c104:	4956      	ldr	r1, [pc, #344]	; (800c260 <mem_trim+0x204>)
 800c106:	4855      	ldr	r0, [pc, #340]	; (800c25c <mem_trim+0x200>)
 800c108:	f00d f8ae 	bl	8019268 <iprintf>
  if (newsize > size) {
 800c10c:	8bfa      	ldrh	r2, [r7, #30]
 800c10e:	8abb      	ldrh	r3, [r7, #20]
 800c110:	429a      	cmp	r2, r3
 800c112:	d901      	bls.n	800c118 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c114:	2300      	movs	r3, #0
 800c116:	e095      	b.n	800c244 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c118:	8bfa      	ldrh	r2, [r7, #30]
 800c11a:	8abb      	ldrh	r3, [r7, #20]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d101      	bne.n	800c124 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	e08f      	b.n	800c244 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c124:	484f      	ldr	r0, [pc, #316]	; (800c264 <mem_trim+0x208>)
 800c126:	f00c ff23 	bl	8018f70 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	881b      	ldrh	r3, [r3, #0]
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff fdb0 	bl	800bc94 <ptr_to_mem>
 800c134:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	791b      	ldrb	r3, [r3, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d13f      	bne.n	800c1be <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	881b      	ldrh	r3, [r3, #0]
 800c142:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c146:	d106      	bne.n	800c156 <mem_trim+0xfa>
 800c148:	4b42      	ldr	r3, [pc, #264]	; (800c254 <mem_trim+0x1f8>)
 800c14a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c14e:	4946      	ldr	r1, [pc, #280]	; (800c268 <mem_trim+0x20c>)
 800c150:	4842      	ldr	r0, [pc, #264]	; (800c25c <mem_trim+0x200>)
 800c152:	f00d f889 	bl	8019268 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c15c:	8afa      	ldrh	r2, [r7, #22]
 800c15e:	8bfb      	ldrh	r3, [r7, #30]
 800c160:	4413      	add	r3, r2
 800c162:	b29b      	uxth	r3, r3
 800c164:	3308      	adds	r3, #8
 800c166:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c168:	4b40      	ldr	r3, [pc, #256]	; (800c26c <mem_trim+0x210>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d106      	bne.n	800c180 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c172:	89fb      	ldrh	r3, [r7, #14]
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff fd8d 	bl	800bc94 <ptr_to_mem>
 800c17a:	4603      	mov	r3, r0
 800c17c:	4a3b      	ldr	r2, [pc, #236]	; (800c26c <mem_trim+0x210>)
 800c17e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c180:	89fb      	ldrh	r3, [r7, #14]
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff fd86 	bl	800bc94 <ptr_to_mem>
 800c188:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2200      	movs	r2, #0
 800c18e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	89ba      	ldrh	r2, [r7, #12]
 800c194:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	8afa      	ldrh	r2, [r7, #22]
 800c19a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	89fa      	ldrh	r2, [r7, #14]
 800c1a0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1aa:	d047      	beq.n	800c23c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7ff fd6f 	bl	800bc94 <ptr_to_mem>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	89fb      	ldrh	r3, [r7, #14]
 800c1ba:	8053      	strh	r3, [r2, #2]
 800c1bc:	e03e      	b.n	800c23c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c1be:	8bfb      	ldrh	r3, [r7, #30]
 800c1c0:	f103 0214 	add.w	r2, r3, #20
 800c1c4:	8abb      	ldrh	r3, [r7, #20]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d838      	bhi.n	800c23c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c1ca:	8afa      	ldrh	r2, [r7, #22]
 800c1cc:	8bfb      	ldrh	r3, [r7, #30]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	3308      	adds	r3, #8
 800c1d4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1de:	d106      	bne.n	800c1ee <mem_trim+0x192>
 800c1e0:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <mem_trim+0x1f8>)
 800c1e2:	f240 3216 	movw	r2, #790	; 0x316
 800c1e6:	4920      	ldr	r1, [pc, #128]	; (800c268 <mem_trim+0x20c>)
 800c1e8:	481c      	ldr	r0, [pc, #112]	; (800c25c <mem_trim+0x200>)
 800c1ea:	f00d f83d 	bl	8019268 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c1ee:	89fb      	ldrh	r3, [r7, #14]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7ff fd4f 	bl	800bc94 <ptr_to_mem>
 800c1f6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c1f8:	4b1c      	ldr	r3, [pc, #112]	; (800c26c <mem_trim+0x210>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d202      	bcs.n	800c208 <mem_trim+0x1ac>
      lfree = mem2;
 800c202:	4a1a      	ldr	r2, [pc, #104]	; (800c26c <mem_trim+0x210>)
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	2200      	movs	r2, #0
 800c20c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	881a      	ldrh	r2, [r3, #0]
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	8afa      	ldrh	r2, [r7, #22]
 800c21a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	89fa      	ldrh	r2, [r7, #14]
 800c220:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c22a:	d007      	beq.n	800c23c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	881b      	ldrh	r3, [r3, #0]
 800c230:	4618      	mov	r0, r3
 800c232:	f7ff fd2f 	bl	800bc94 <ptr_to_mem>
 800c236:	4602      	mov	r2, r0
 800c238:	89fb      	ldrh	r3, [r7, #14]
 800c23a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c23c:	4809      	ldr	r0, [pc, #36]	; (800c264 <mem_trim+0x208>)
 800c23e:	f00c fea6 	bl	8018f8e <sys_mutex_unlock>
  return rmem;
 800c242:	687b      	ldr	r3, [r7, #4]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3720      	adds	r7, #32
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	2000ddbc 	.word	0x2000ddbc
 800c250:	2000ddc0 	.word	0x2000ddc0
 800c254:	0801b54c 	.word	0x0801b54c
 800c258:	0801b6d8 	.word	0x0801b6d8
 800c25c:	0801b594 	.word	0x0801b594
 800c260:	0801b6f0 	.word	0x0801b6f0
 800c264:	2000ddc4 	.word	0x2000ddc4
 800c268:	0801b710 	.word	0x0801b710
 800c26c:	2000ddc8 	.word	0x2000ddc8

0800c270 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b088      	sub	sp, #32
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c27a:	88fb      	ldrh	r3, [r7, #6]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <mem_malloc+0x14>
    return NULL;
 800c280:	2300      	movs	r3, #0
 800c282:	e0e2      	b.n	800c44a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c284:	88fb      	ldrh	r3, [r7, #6]
 800c286:	3303      	adds	r3, #3
 800c288:	b29b      	uxth	r3, r3
 800c28a:	f023 0303 	bic.w	r3, r3, #3
 800c28e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c290:	8bbb      	ldrh	r3, [r7, #28]
 800c292:	2b0b      	cmp	r3, #11
 800c294:	d801      	bhi.n	800c29a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c296:	230c      	movs	r3, #12
 800c298:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c29a:	8bbb      	ldrh	r3, [r7, #28]
 800c29c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2a0:	d803      	bhi.n	800c2aa <mem_malloc+0x3a>
 800c2a2:	8bba      	ldrh	r2, [r7, #28]
 800c2a4:	88fb      	ldrh	r3, [r7, #6]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d201      	bcs.n	800c2ae <mem_malloc+0x3e>
    return NULL;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e0cd      	b.n	800c44a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c2ae:	4869      	ldr	r0, [pc, #420]	; (800c454 <mem_malloc+0x1e4>)
 800c2b0:	f00c fe5e 	bl	8018f70 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c2b4:	4b68      	ldr	r3, [pc, #416]	; (800c458 <mem_malloc+0x1e8>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff fcfd 	bl	800bcb8 <mem_to_ptr>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	83fb      	strh	r3, [r7, #30]
 800c2c2:	e0b7      	b.n	800c434 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c2c4:	8bfb      	ldrh	r3, [r7, #30]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7ff fce4 	bl	800bc94 <ptr_to_mem>
 800c2cc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	791b      	ldrb	r3, [r3, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f040 80a7 	bne.w	800c426 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	881b      	ldrh	r3, [r3, #0]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	8bfb      	ldrh	r3, [r7, #30]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	f1a3 0208 	sub.w	r2, r3, #8
 800c2e6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	f0c0 809c 	bcc.w	800c426 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	8bfb      	ldrh	r3, [r7, #30]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	f1a3 0208 	sub.w	r2, r3, #8
 800c2fc:	8bbb      	ldrh	r3, [r7, #28]
 800c2fe:	3314      	adds	r3, #20
 800c300:	429a      	cmp	r2, r3
 800c302:	d333      	bcc.n	800c36c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c304:	8bfa      	ldrh	r2, [r7, #30]
 800c306:	8bbb      	ldrh	r3, [r7, #28]
 800c308:	4413      	add	r3, r2
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	3308      	adds	r3, #8
 800c30e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c310:	8a7b      	ldrh	r3, [r7, #18]
 800c312:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c316:	d106      	bne.n	800c326 <mem_malloc+0xb6>
 800c318:	4b50      	ldr	r3, [pc, #320]	; (800c45c <mem_malloc+0x1ec>)
 800c31a:	f240 3287 	movw	r2, #903	; 0x387
 800c31e:	4950      	ldr	r1, [pc, #320]	; (800c460 <mem_malloc+0x1f0>)
 800c320:	4850      	ldr	r0, [pc, #320]	; (800c464 <mem_malloc+0x1f4>)
 800c322:	f00c ffa1 	bl	8019268 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c326:	8a7b      	ldrh	r3, [r7, #18]
 800c328:	4618      	mov	r0, r3
 800c32a:	f7ff fcb3 	bl	800bc94 <ptr_to_mem>
 800c32e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	881a      	ldrh	r2, [r3, #0]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	8bfa      	ldrh	r2, [r7, #30]
 800c342:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	8a7a      	ldrh	r2, [r7, #18]
 800c348:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2201      	movs	r2, #1
 800c34e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c358:	d00b      	beq.n	800c372 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	881b      	ldrh	r3, [r3, #0]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7ff fc98 	bl	800bc94 <ptr_to_mem>
 800c364:	4602      	mov	r2, r0
 800c366:	8a7b      	ldrh	r3, [r7, #18]
 800c368:	8053      	strh	r3, [r2, #2]
 800c36a:	e002      	b.n	800c372 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	2201      	movs	r2, #1
 800c370:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c372:	4b39      	ldr	r3, [pc, #228]	; (800c458 <mem_malloc+0x1e8>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d127      	bne.n	800c3cc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c37c:	4b36      	ldr	r3, [pc, #216]	; (800c458 <mem_malloc+0x1e8>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c382:	e005      	b.n	800c390 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7ff fc83 	bl	800bc94 <ptr_to_mem>
 800c38e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	791b      	ldrb	r3, [r3, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d004      	beq.n	800c3a2 <mem_malloc+0x132>
 800c398:	4b33      	ldr	r3, [pc, #204]	; (800c468 <mem_malloc+0x1f8>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	69ba      	ldr	r2, [r7, #24]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d1f0      	bne.n	800c384 <mem_malloc+0x114>
          }
          lfree = cur;
 800c3a2:	4a2d      	ldr	r2, [pc, #180]	; (800c458 <mem_malloc+0x1e8>)
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c3a8:	4b2b      	ldr	r3, [pc, #172]	; (800c458 <mem_malloc+0x1e8>)
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	4b2e      	ldr	r3, [pc, #184]	; (800c468 <mem_malloc+0x1f8>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d00b      	beq.n	800c3cc <mem_malloc+0x15c>
 800c3b4:	4b28      	ldr	r3, [pc, #160]	; (800c458 <mem_malloc+0x1e8>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	791b      	ldrb	r3, [r3, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d006      	beq.n	800c3cc <mem_malloc+0x15c>
 800c3be:	4b27      	ldr	r3, [pc, #156]	; (800c45c <mem_malloc+0x1ec>)
 800c3c0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c3c4:	4929      	ldr	r1, [pc, #164]	; (800c46c <mem_malloc+0x1fc>)
 800c3c6:	4827      	ldr	r0, [pc, #156]	; (800c464 <mem_malloc+0x1f4>)
 800c3c8:	f00c ff4e 	bl	8019268 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c3cc:	4821      	ldr	r0, [pc, #132]	; (800c454 <mem_malloc+0x1e4>)
 800c3ce:	f00c fdde 	bl	8018f8e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c3d2:	8bba      	ldrh	r2, [r7, #28]
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	3308      	adds	r3, #8
 800c3da:	4a23      	ldr	r2, [pc, #140]	; (800c468 <mem_malloc+0x1f8>)
 800c3dc:	6812      	ldr	r2, [r2, #0]
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d906      	bls.n	800c3f0 <mem_malloc+0x180>
 800c3e2:	4b1e      	ldr	r3, [pc, #120]	; (800c45c <mem_malloc+0x1ec>)
 800c3e4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c3e8:	4921      	ldr	r1, [pc, #132]	; (800c470 <mem_malloc+0x200>)
 800c3ea:	481e      	ldr	r0, [pc, #120]	; (800c464 <mem_malloc+0x1f4>)
 800c3ec:	f00c ff3c 	bl	8019268 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	f003 0303 	and.w	r3, r3, #3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d006      	beq.n	800c408 <mem_malloc+0x198>
 800c3fa:	4b18      	ldr	r3, [pc, #96]	; (800c45c <mem_malloc+0x1ec>)
 800c3fc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c400:	491c      	ldr	r1, [pc, #112]	; (800c474 <mem_malloc+0x204>)
 800c402:	4818      	ldr	r0, [pc, #96]	; (800c464 <mem_malloc+0x1f4>)
 800c404:	f00c ff30 	bl	8019268 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	f003 0303 	and.w	r3, r3, #3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d006      	beq.n	800c420 <mem_malloc+0x1b0>
 800c412:	4b12      	ldr	r3, [pc, #72]	; (800c45c <mem_malloc+0x1ec>)
 800c414:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c418:	4917      	ldr	r1, [pc, #92]	; (800c478 <mem_malloc+0x208>)
 800c41a:	4812      	ldr	r0, [pc, #72]	; (800c464 <mem_malloc+0x1f4>)
 800c41c:	f00c ff24 	bl	8019268 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	3308      	adds	r3, #8
 800c424:	e011      	b.n	800c44a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c426:	8bfb      	ldrh	r3, [r7, #30]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff fc33 	bl	800bc94 <ptr_to_mem>
 800c42e:	4603      	mov	r3, r0
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c434:	8bfa      	ldrh	r2, [r7, #30]
 800c436:	8bbb      	ldrh	r3, [r7, #28]
 800c438:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c43c:	429a      	cmp	r2, r3
 800c43e:	f4ff af41 	bcc.w	800c2c4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c442:	4804      	ldr	r0, [pc, #16]	; (800c454 <mem_malloc+0x1e4>)
 800c444:	f00c fda3 	bl	8018f8e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3720      	adds	r7, #32
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	2000ddc4 	.word	0x2000ddc4
 800c458:	2000ddc8 	.word	0x2000ddc8
 800c45c:	0801b54c 	.word	0x0801b54c
 800c460:	0801b710 	.word	0x0801b710
 800c464:	0801b594 	.word	0x0801b594
 800c468:	2000ddc0 	.word	0x2000ddc0
 800c46c:	0801b724 	.word	0x0801b724
 800c470:	0801b740 	.word	0x0801b740
 800c474:	0801b770 	.word	0x0801b770
 800c478:	0801b7a0 	.word	0x0801b7a0

0800c47c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	3303      	adds	r3, #3
 800c492:	f023 0303 	bic.w	r3, r3, #3
 800c496:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	e011      	b.n	800c4c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	881b      	ldrh	r3, [r3, #0]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	885b      	ldrh	r3, [r3, #2]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	dbe7      	blt.n	800c49e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c4ce:	bf00      	nop
 800c4d0:	bf00      	nop
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	80fb      	strh	r3, [r7, #6]
 800c4e6:	e009      	b.n	800c4fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c4e8:	88fb      	ldrh	r3, [r7, #6]
 800c4ea:	4a08      	ldr	r2, [pc, #32]	; (800c50c <memp_init+0x30>)
 800c4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff ffc3 	bl	800c47c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c4f6:	88fb      	ldrh	r3, [r7, #6]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	80fb      	strh	r3, [r7, #6]
 800c4fc:	88fb      	ldrh	r3, [r7, #6]
 800c4fe:	2b0c      	cmp	r3, #12
 800c500:	d9f2      	bls.n	800c4e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c502:	bf00      	nop
 800c504:	bf00      	nop
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	08028490 	.word	0x08028490

0800c510 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c518:	f00c fd6c 	bl	8018ff4 <sys_arch_protect>
 800c51c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d015      	beq.n	800c558 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	68ba      	ldr	r2, [r7, #8]
 800c532:	6812      	ldr	r2, [r2, #0]
 800c534:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	f003 0303 	and.w	r3, r3, #3
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d006      	beq.n	800c54e <do_memp_malloc_pool+0x3e>
 800c540:	4b09      	ldr	r3, [pc, #36]	; (800c568 <do_memp_malloc_pool+0x58>)
 800c542:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c546:	4909      	ldr	r1, [pc, #36]	; (800c56c <do_memp_malloc_pool+0x5c>)
 800c548:	4809      	ldr	r0, [pc, #36]	; (800c570 <do_memp_malloc_pool+0x60>)
 800c54a:	f00c fe8d 	bl	8019268 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f00c fd5e 	bl	8019010 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	e003      	b.n	800c560 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f00c fd59 	bl	8019010 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	0801b7c4 	.word	0x0801b7c4
 800c56c:	0801b7f4 	.word	0x0801b7f4
 800c570:	0801b818 	.word	0x0801b818

0800c574 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d106      	bne.n	800c590 <memp_malloc_pool+0x1c>
 800c582:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <memp_malloc_pool+0x38>)
 800c584:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c588:	4909      	ldr	r1, [pc, #36]	; (800c5b0 <memp_malloc_pool+0x3c>)
 800c58a:	480a      	ldr	r0, [pc, #40]	; (800c5b4 <memp_malloc_pool+0x40>)
 800c58c:	f00c fe6c 	bl	8019268 <iprintf>
  if (desc == NULL) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d101      	bne.n	800c59a <memp_malloc_pool+0x26>
    return NULL;
 800c596:	2300      	movs	r3, #0
 800c598:	e003      	b.n	800c5a2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff ffb8 	bl	800c510 <do_memp_malloc_pool>
 800c5a0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	0801b7c4 	.word	0x0801b7c4
 800c5b0:	0801b840 	.word	0x0801b840
 800c5b4:	0801b818 	.word	0x0801b818

0800c5b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	2b0c      	cmp	r3, #12
 800c5c6:	d908      	bls.n	800c5da <memp_malloc+0x22>
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	; (800c5f4 <memp_malloc+0x3c>)
 800c5ca:	f240 1257 	movw	r2, #343	; 0x157
 800c5ce:	490a      	ldr	r1, [pc, #40]	; (800c5f8 <memp_malloc+0x40>)
 800c5d0:	480a      	ldr	r0, [pc, #40]	; (800c5fc <memp_malloc+0x44>)
 800c5d2:	f00c fe49 	bl	8019268 <iprintf>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	e008      	b.n	800c5ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c5da:	79fb      	ldrb	r3, [r7, #7]
 800c5dc:	4a08      	ldr	r2, [pc, #32]	; (800c600 <memp_malloc+0x48>)
 800c5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff ff94 	bl	800c510 <do_memp_malloc_pool>
 800c5e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	0801b7c4 	.word	0x0801b7c4
 800c5f8:	0801b854 	.word	0x0801b854
 800c5fc:	0801b818 	.word	0x0801b818
 800c600:	08028490 	.word	0x08028490

0800c604 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	f003 0303 	and.w	r3, r3, #3
 800c614:	2b00      	cmp	r3, #0
 800c616:	d006      	beq.n	800c626 <do_memp_free_pool+0x22>
 800c618:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <do_memp_free_pool+0x4c>)
 800c61a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c61e:	490d      	ldr	r1, [pc, #52]	; (800c654 <do_memp_free_pool+0x50>)
 800c620:	480d      	ldr	r0, [pc, #52]	; (800c658 <do_memp_free_pool+0x54>)
 800c622:	f00c fe21 	bl	8019268 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c62a:	f00c fce3 	bl	8018ff4 <sys_arch_protect>
 800c62e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c642:	68b8      	ldr	r0, [r7, #8]
 800c644:	f00c fce4 	bl	8019010 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c648:	bf00      	nop
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	0801b7c4 	.word	0x0801b7c4
 800c654:	0801b874 	.word	0x0801b874
 800c658:	0801b818 	.word	0x0801b818

0800c65c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d106      	bne.n	800c67a <memp_free_pool+0x1e>
 800c66c:	4b0a      	ldr	r3, [pc, #40]	; (800c698 <memp_free_pool+0x3c>)
 800c66e:	f240 1295 	movw	r2, #405	; 0x195
 800c672:	490a      	ldr	r1, [pc, #40]	; (800c69c <memp_free_pool+0x40>)
 800c674:	480a      	ldr	r0, [pc, #40]	; (800c6a0 <memp_free_pool+0x44>)
 800c676:	f00c fdf7 	bl	8019268 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d007      	beq.n	800c690 <memp_free_pool+0x34>
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d004      	beq.n	800c690 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c686:	6839      	ldr	r1, [r7, #0]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff ffbb 	bl	800c604 <do_memp_free_pool>
 800c68e:	e000      	b.n	800c692 <memp_free_pool+0x36>
    return;
 800c690:	bf00      	nop
}
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	0801b7c4 	.word	0x0801b7c4
 800c69c:	0801b840 	.word	0x0801b840
 800c6a0:	0801b818 	.word	0x0801b818

0800c6a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	6039      	str	r1, [r7, #0]
 800c6ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c6b0:	79fb      	ldrb	r3, [r7, #7]
 800c6b2:	2b0c      	cmp	r3, #12
 800c6b4:	d907      	bls.n	800c6c6 <memp_free+0x22>
 800c6b6:	4b0c      	ldr	r3, [pc, #48]	; (800c6e8 <memp_free+0x44>)
 800c6b8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c6bc:	490b      	ldr	r1, [pc, #44]	; (800c6ec <memp_free+0x48>)
 800c6be:	480c      	ldr	r0, [pc, #48]	; (800c6f0 <memp_free+0x4c>)
 800c6c0:	f00c fdd2 	bl	8019268 <iprintf>
 800c6c4:	e00c      	b.n	800c6e0 <memp_free+0x3c>

  if (mem == NULL) {
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d008      	beq.n	800c6de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c6cc:	79fb      	ldrb	r3, [r7, #7]
 800c6ce:	4a09      	ldr	r2, [pc, #36]	; (800c6f4 <memp_free+0x50>)
 800c6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7ff ff94 	bl	800c604 <do_memp_free_pool>
 800c6dc:	e000      	b.n	800c6e0 <memp_free+0x3c>
    return;
 800c6de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	0801b7c4 	.word	0x0801b7c4
 800c6ec:	0801b894 	.word	0x0801b894
 800c6f0:	0801b818 	.word	0x0801b818
 800c6f4:	08028490 	.word	0x08028490

0800c6f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c6fc:	bf00      	nop
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
	...

0800c708 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d108      	bne.n	800c72e <netif_add+0x26>
 800c71c:	4b5b      	ldr	r3, [pc, #364]	; (800c88c <netif_add+0x184>)
 800c71e:	f240 1227 	movw	r2, #295	; 0x127
 800c722:	495b      	ldr	r1, [pc, #364]	; (800c890 <netif_add+0x188>)
 800c724:	485b      	ldr	r0, [pc, #364]	; (800c894 <netif_add+0x18c>)
 800c726:	f00c fd9f 	bl	8019268 <iprintf>
 800c72a:	2300      	movs	r3, #0
 800c72c:	e0a9      	b.n	800c882 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	2b00      	cmp	r3, #0
 800c732:	d108      	bne.n	800c746 <netif_add+0x3e>
 800c734:	4b55      	ldr	r3, [pc, #340]	; (800c88c <netif_add+0x184>)
 800c736:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c73a:	4957      	ldr	r1, [pc, #348]	; (800c898 <netif_add+0x190>)
 800c73c:	4855      	ldr	r0, [pc, #340]	; (800c894 <netif_add+0x18c>)
 800c73e:	f00c fd93 	bl	8019268 <iprintf>
 800c742:	2300      	movs	r3, #0
 800c744:	e09d      	b.n	800c882 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d101      	bne.n	800c750 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c74c:	4b53      	ldr	r3, [pc, #332]	; (800c89c <netif_add+0x194>)
 800c74e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d101      	bne.n	800c75a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c756:	4b51      	ldr	r3, [pc, #324]	; (800c89c <netif_add+0x194>)
 800c758:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c760:	4b4e      	ldr	r3, [pc, #312]	; (800c89c <netif_add+0x194>)
 800c762:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2200      	movs	r2, #0
 800c768:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2200      	movs	r2, #0
 800c774:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	4a49      	ldr	r2, [pc, #292]	; (800c8a0 <netif_add+0x198>)
 800c77a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3324      	adds	r3, #36	; 0x24
 800c78e:	2204      	movs	r2, #4
 800c790:	2100      	movs	r1, #0
 800c792:	4618      	mov	r0, r3
 800c794:	f00c fe07 	bl	80193a6 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6a3a      	ldr	r2, [r7, #32]
 800c7a2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c7a4:	4b3f      	ldr	r3, [pc, #252]	; (800c8a4 <netif_add+0x19c>)
 800c7a6:	781a      	ldrb	r2, [r3, #0]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7b2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	68b9      	ldr	r1, [r7, #8]
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f000 f914 	bl	800c9e8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	4798      	blx	r3
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <netif_add+0xc8>
    return NULL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e058      	b.n	800c882 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7d6:	2bff      	cmp	r3, #255	; 0xff
 800c7d8:	d103      	bne.n	800c7e2 <netif_add+0xda>
        netif->num = 0;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c7e6:	4b30      	ldr	r3, [pc, #192]	; (800c8a8 <netif_add+0x1a0>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	617b      	str	r3, [r7, #20]
 800c7ec:	e02b      	b.n	800c846 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d106      	bne.n	800c804 <netif_add+0xfc>
 800c7f6:	4b25      	ldr	r3, [pc, #148]	; (800c88c <netif_add+0x184>)
 800c7f8:	f240 128b 	movw	r2, #395	; 0x18b
 800c7fc:	492b      	ldr	r1, [pc, #172]	; (800c8ac <netif_add+0x1a4>)
 800c7fe:	4825      	ldr	r0, [pc, #148]	; (800c894 <netif_add+0x18c>)
 800c800:	f00c fd32 	bl	8019268 <iprintf>
        num_netifs++;
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	3301      	adds	r3, #1
 800c808:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	2bff      	cmp	r3, #255	; 0xff
 800c80e:	dd06      	ble.n	800c81e <netif_add+0x116>
 800c810:	4b1e      	ldr	r3, [pc, #120]	; (800c88c <netif_add+0x184>)
 800c812:	f240 128d 	movw	r2, #397	; 0x18d
 800c816:	4926      	ldr	r1, [pc, #152]	; (800c8b0 <netif_add+0x1a8>)
 800c818:	481e      	ldr	r0, [pc, #120]	; (800c894 <netif_add+0x18c>)
 800c81a:	f00c fd25 	bl	8019268 <iprintf>
        if (netif2->num == netif->num) {
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d108      	bne.n	800c840 <netif_add+0x138>
          netif->num++;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c834:	3301      	adds	r3, #1
 800c836:	b2da      	uxtb	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c83e:	e005      	b.n	800c84c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	617b      	str	r3, [r7, #20]
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1d0      	bne.n	800c7ee <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1be      	bne.n	800c7d0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c858:	2bfe      	cmp	r3, #254	; 0xfe
 800c85a:	d103      	bne.n	800c864 <netif_add+0x15c>
    netif_num = 0;
 800c85c:	4b11      	ldr	r3, [pc, #68]	; (800c8a4 <netif_add+0x19c>)
 800c85e:	2200      	movs	r2, #0
 800c860:	701a      	strb	r2, [r3, #0]
 800c862:	e006      	b.n	800c872 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c86a:	3301      	adds	r3, #1
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	4b0d      	ldr	r3, [pc, #52]	; (800c8a4 <netif_add+0x19c>)
 800c870:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c872:	4b0d      	ldr	r3, [pc, #52]	; (800c8a8 <netif_add+0x1a0>)
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c87a:	4a0b      	ldr	r2, [pc, #44]	; (800c8a8 <netif_add+0x1a0>)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c880:	68fb      	ldr	r3, [r7, #12]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3718      	adds	r7, #24
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	0801b8b0 	.word	0x0801b8b0
 800c890:	0801b944 	.word	0x0801b944
 800c894:	0801b900 	.word	0x0801b900
 800c898:	0801b960 	.word	0x0801b960
 800c89c:	08028514 	.word	0x08028514
 800c8a0:	0800cccb 	.word	0x0800cccb
 800c8a4:	20010ec0 	.word	0x20010ec0
 800c8a8:	20010eb8 	.word	0x20010eb8
 800c8ac:	0801b984 	.word	0x0801b984
 800c8b0:	0801b998 	.word	0x0801b998

0800c8b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c8be:	6839      	ldr	r1, [r7, #0]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f002 ffab 	bl	800f81c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c8c6:	6839      	ldr	r1, [r7, #0]
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f008 f825 	bl	8014918 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c8ce:	bf00      	nop
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
	...

0800c8d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d106      	bne.n	800c8f8 <netif_do_set_ipaddr+0x20>
 800c8ea:	4b1d      	ldr	r3, [pc, #116]	; (800c960 <netif_do_set_ipaddr+0x88>)
 800c8ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c8f0:	491c      	ldr	r1, [pc, #112]	; (800c964 <netif_do_set_ipaddr+0x8c>)
 800c8f2:	481d      	ldr	r0, [pc, #116]	; (800c968 <netif_do_set_ipaddr+0x90>)
 800c8f4:	f00c fcb8 	bl	8019268 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d106      	bne.n	800c90c <netif_do_set_ipaddr+0x34>
 800c8fe:	4b18      	ldr	r3, [pc, #96]	; (800c960 <netif_do_set_ipaddr+0x88>)
 800c900:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c904:	4917      	ldr	r1, [pc, #92]	; (800c964 <netif_do_set_ipaddr+0x8c>)
 800c906:	4818      	ldr	r0, [pc, #96]	; (800c968 <netif_do_set_ipaddr+0x90>)
 800c908:	f00c fcae 	bl	8019268 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	3304      	adds	r3, #4
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	429a      	cmp	r2, r3
 800c918:	d01c      	beq.n	800c954 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3304      	adds	r3, #4
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c92a:	f107 0314 	add.w	r3, r7, #20
 800c92e:	4619      	mov	r1, r3
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7ff ffbf 	bl	800c8b4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <netif_do_set_ipaddr+0x6a>
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	e000      	b.n	800c944 <netif_do_set_ipaddr+0x6c>
 800c942:	2300      	movs	r3, #0
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c948:	2101      	movs	r1, #1
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f000 f8d2 	bl	800caf4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c950:	2301      	movs	r3, #1
 800c952:	e000      	b.n	800c956 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3718      	adds	r7, #24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	0801b8b0 	.word	0x0801b8b0
 800c964:	0801b9c8 	.word	0x0801b9c8
 800c968:	0801b900 	.word	0x0801b900

0800c96c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3308      	adds	r3, #8
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	429a      	cmp	r2, r3
 800c984:	d00a      	beq.n	800c99c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d002      	beq.n	800c992 <netif_do_set_netmask+0x26>
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	e000      	b.n	800c994 <netif_do_set_netmask+0x28>
 800c992:	2300      	movs	r3, #0
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c998:	2301      	movs	r3, #1
 800c99a:	e000      	b.n	800c99e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b085      	sub	sp, #20
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	60f8      	str	r0, [r7, #12]
 800c9b2:	60b9      	str	r1, [r7, #8]
 800c9b4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	330c      	adds	r3, #12
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d00a      	beq.n	800c9da <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d002      	beq.n	800c9d0 <netif_do_set_gw+0x26>
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	e000      	b.n	800c9d2 <netif_do_set_gw+0x28>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e000      	b.n	800c9dc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b088      	sub	sp, #32
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
 800c9f4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d101      	bne.n	800ca08 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ca04:	4b1c      	ldr	r3, [pc, #112]	; (800ca78 <netif_set_addr+0x90>)
 800ca06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ca0e:	4b1a      	ldr	r3, [pc, #104]	; (800ca78 <netif_set_addr+0x90>)
 800ca10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d101      	bne.n	800ca1c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ca18:	4b17      	ldr	r3, [pc, #92]	; (800ca78 <netif_set_addr+0x90>)
 800ca1a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d003      	beq.n	800ca2a <netif_set_addr+0x42>
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d101      	bne.n	800ca2e <netif_set_addr+0x46>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e000      	b.n	800ca30 <netif_set_addr+0x48>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d006      	beq.n	800ca46 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ca38:	f107 0310 	add.w	r3, r7, #16
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	68b9      	ldr	r1, [r7, #8]
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7ff ff49 	bl	800c8d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ca46:	69fa      	ldr	r2, [r7, #28]
 800ca48:	6879      	ldr	r1, [r7, #4]
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7ff ff8e 	bl	800c96c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ca50:	69ba      	ldr	r2, [r7, #24]
 800ca52:	6839      	ldr	r1, [r7, #0]
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f7ff ffa8 	bl	800c9aa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d106      	bne.n	800ca6e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ca60:	f107 0310 	add.w	r3, r7, #16
 800ca64:	461a      	mov	r2, r3
 800ca66:	68b9      	ldr	r1, [r7, #8]
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f7ff ff35 	bl	800c8d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ca6e:	bf00      	nop
 800ca70:	3720      	adds	r7, #32
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	08028514 	.word	0x08028514

0800ca7c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ca84:	4a04      	ldr	r2, [pc, #16]	; (800ca98 <netif_set_default+0x1c>)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ca8a:	bf00      	nop
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	20010ebc 	.word	0x20010ebc

0800ca9c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d107      	bne.n	800caba <netif_set_up+0x1e>
 800caaa:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <netif_set_up+0x4c>)
 800caac:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cab0:	490e      	ldr	r1, [pc, #56]	; (800caec <netif_set_up+0x50>)
 800cab2:	480f      	ldr	r0, [pc, #60]	; (800caf0 <netif_set_up+0x54>)
 800cab4:	f00c fbd8 	bl	8019268 <iprintf>
 800cab8:	e013      	b.n	800cae2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10c      	bne.n	800cae2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cace:	f043 0301 	orr.w	r3, r3, #1
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cada:	2103      	movs	r1, #3
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f809 	bl	800caf4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	0801b8b0 	.word	0x0801b8b0
 800caec:	0801ba38 	.word	0x0801ba38
 800caf0:	0801b900 	.word	0x0801b900

0800caf4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d106      	bne.n	800cb14 <netif_issue_reports+0x20>
 800cb06:	4b18      	ldr	r3, [pc, #96]	; (800cb68 <netif_issue_reports+0x74>)
 800cb08:	f240 326d 	movw	r2, #877	; 0x36d
 800cb0c:	4917      	ldr	r1, [pc, #92]	; (800cb6c <netif_issue_reports+0x78>)
 800cb0e:	4818      	ldr	r0, [pc, #96]	; (800cb70 <netif_issue_reports+0x7c>)
 800cb10:	f00c fbaa 	bl	8019268 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb1a:	f003 0304 	and.w	r3, r3, #4
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d01e      	beq.n	800cb60 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb28:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d017      	beq.n	800cb60 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	f003 0301 	and.w	r3, r3, #1
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d013      	beq.n	800cb62 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00e      	beq.n	800cb62 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb4a:	f003 0308 	and.w	r3, r3, #8
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d007      	beq.n	800cb62 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	3304      	adds	r3, #4
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f00a fcdd 	bl	8017518 <etharp_request>
 800cb5e:	e000      	b.n	800cb62 <netif_issue_reports+0x6e>
    return;
 800cb60:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	0801b8b0 	.word	0x0801b8b0
 800cb6c:	0801ba54 	.word	0x0801ba54
 800cb70:	0801b900 	.word	0x0801b900

0800cb74 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d107      	bne.n	800cb92 <netif_set_down+0x1e>
 800cb82:	4b12      	ldr	r3, [pc, #72]	; (800cbcc <netif_set_down+0x58>)
 800cb84:	f240 329b 	movw	r2, #923	; 0x39b
 800cb88:	4911      	ldr	r1, [pc, #68]	; (800cbd0 <netif_set_down+0x5c>)
 800cb8a:	4812      	ldr	r0, [pc, #72]	; (800cbd4 <netif_set_down+0x60>)
 800cb8c:	f00c fb6c 	bl	8019268 <iprintf>
 800cb90:	e019      	b.n	800cbc6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb98:	f003 0301 	and.w	r3, r3, #1
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d012      	beq.n	800cbc6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cba6:	f023 0301 	bic.w	r3, r3, #1
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cbb8:	f003 0308 	and.w	r3, r3, #8
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f00a f863 	bl	8016c8c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	0801b8b0 	.word	0x0801b8b0
 800cbd0:	0801ba78 	.word	0x0801ba78
 800cbd4:	0801b900 	.word	0x0801b900

0800cbd8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d107      	bne.n	800cbf6 <netif_set_link_up+0x1e>
 800cbe6:	4b15      	ldr	r3, [pc, #84]	; (800cc3c <netif_set_link_up+0x64>)
 800cbe8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cbec:	4914      	ldr	r1, [pc, #80]	; (800cc40 <netif_set_link_up+0x68>)
 800cbee:	4815      	ldr	r0, [pc, #84]	; (800cc44 <netif_set_link_up+0x6c>)
 800cbf0:	f00c fb3a 	bl	8019268 <iprintf>
 800cbf4:	e01e      	b.n	800cc34 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cbfc:	f003 0304 	and.w	r3, r3, #4
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d117      	bne.n	800cc34 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc0a:	f043 0304 	orr.w	r3, r3, #4
 800cc0e:	b2da      	uxtb	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f008 faa8 	bl	801516c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cc1c:	2103      	movs	r1, #3
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff ff68 	bl	800caf4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	69db      	ldr	r3, [r3, #28]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <netif_set_link_up+0x5c>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	69db      	ldr	r3, [r3, #28]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	0801b8b0 	.word	0x0801b8b0
 800cc40:	0801ba98 	.word	0x0801ba98
 800cc44:	0801b900 	.word	0x0801b900

0800cc48 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d107      	bne.n	800cc66 <netif_set_link_down+0x1e>
 800cc56:	4b11      	ldr	r3, [pc, #68]	; (800cc9c <netif_set_link_down+0x54>)
 800cc58:	f240 4206 	movw	r2, #1030	; 0x406
 800cc5c:	4910      	ldr	r1, [pc, #64]	; (800cca0 <netif_set_link_down+0x58>)
 800cc5e:	4811      	ldr	r0, [pc, #68]	; (800cca4 <netif_set_link_down+0x5c>)
 800cc60:	f00c fb02 	bl	8019268 <iprintf>
 800cc64:	e017      	b.n	800cc96 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc6c:	f003 0304 	and.w	r3, r3, #4
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d010      	beq.n	800cc96 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc7a:	f023 0304 	bic.w	r3, r3, #4
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	69db      	ldr	r3, [r3, #28]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <netif_set_link_down+0x4e>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	0801b8b0 	.word	0x0801b8b0
 800cca0:	0801babc 	.word	0x0801babc
 800cca4:	0801b900 	.word	0x0801b900

0800cca8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d002      	beq.n	800ccbe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	61da      	str	r2, [r3, #28]
  }
}
 800ccbe:	bf00      	nop
 800ccc0:	370c      	adds	r7, #12
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b085      	sub	sp, #20
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ccd6:	f06f 030b 	mvn.w	r3, #11
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
	...

0800cce8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d013      	beq.n	800cd20 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ccf8:	4b0d      	ldr	r3, [pc, #52]	; (800cd30 <netif_get_by_index+0x48>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	60fb      	str	r3, [r7, #12]
 800ccfe:	e00c      	b.n	800cd1a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd06:	3301      	adds	r3, #1
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	79fa      	ldrb	r2, [r7, #7]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d101      	bne.n	800cd14 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	e006      	b.n	800cd22 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	60fb      	str	r3, [r7, #12]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1ef      	bne.n	800cd00 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	20010eb8 	.word	0x20010eb8

0800cd34 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cd3a:	f00c f95b 	bl	8018ff4 <sys_arch_protect>
 800cd3e:	6038      	str	r0, [r7, #0]
 800cd40:	4b0d      	ldr	r3, [pc, #52]	; (800cd78 <pbuf_free_ooseq+0x44>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	701a      	strb	r2, [r3, #0]
 800cd46:	6838      	ldr	r0, [r7, #0]
 800cd48:	f00c f962 	bl	8019010 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cd4c:	4b0b      	ldr	r3, [pc, #44]	; (800cd7c <pbuf_free_ooseq+0x48>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	607b      	str	r3, [r7, #4]
 800cd52:	e00a      	b.n	800cd6a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d003      	beq.n	800cd64 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f002 fd9b 	bl	800f898 <tcp_free_ooseq>
      return;
 800cd62:	e005      	b.n	800cd70 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	607b      	str	r3, [r7, #4]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1f1      	bne.n	800cd54 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20010ec1 	.word	0x20010ec1
 800cd7c:	20010ed0 	.word	0x20010ed0

0800cd80 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cd88:	f7ff ffd4 	bl	800cd34 <pbuf_free_ooseq>
}
 800cd8c:	bf00      	nop
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cd9a:	f00c f92b 	bl	8018ff4 <sys_arch_protect>
 800cd9e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cda0:	4b0f      	ldr	r3, [pc, #60]	; (800cde0 <pbuf_pool_is_empty+0x4c>)
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cda6:	4b0e      	ldr	r3, [pc, #56]	; (800cde0 <pbuf_pool_is_empty+0x4c>)
 800cda8:	2201      	movs	r2, #1
 800cdaa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f00c f92f 	bl	8019010 <sys_arch_unprotect>

  if (!queued) {
 800cdb2:	78fb      	ldrb	r3, [r7, #3]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10f      	bne.n	800cdd8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cdb8:	2100      	movs	r1, #0
 800cdba:	480a      	ldr	r0, [pc, #40]	; (800cde4 <pbuf_pool_is_empty+0x50>)
 800cdbc:	f7fe f834 	bl	800ae28 <tcpip_try_callback>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d008      	beq.n	800cdd8 <pbuf_pool_is_empty+0x44>
 800cdc6:	f00c f915 	bl	8018ff4 <sys_arch_protect>
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	4b04      	ldr	r3, [pc, #16]	; (800cde0 <pbuf_pool_is_empty+0x4c>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f00c f91c 	bl	8019010 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	20010ec1 	.word	0x20010ec1
 800cde4:	0800cd81 	.word	0x0800cd81

0800cde8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	80fb      	strh	r3, [r7, #6]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2200      	movs	r2, #0
 800ce02:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	88fa      	ldrh	r2, [r7, #6]
 800ce0e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	88ba      	ldrh	r2, [r7, #4]
 800ce14:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ce16:	8b3b      	ldrh	r3, [r7, #24]
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	7f3a      	ldrb	r2, [r7, #28]
 800ce22:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2201      	movs	r2, #1
 800ce28:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	73da      	strb	r2, [r3, #15]
}
 800ce30:	bf00      	nop
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08c      	sub	sp, #48	; 0x30
 800ce40:	af02      	add	r7, sp, #8
 800ce42:	4603      	mov	r3, r0
 800ce44:	71fb      	strb	r3, [r7, #7]
 800ce46:	460b      	mov	r3, r1
 800ce48:	80bb      	strh	r3, [r7, #4]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ce52:	887b      	ldrh	r3, [r7, #2]
 800ce54:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ce58:	d07f      	beq.n	800cf5a <pbuf_alloc+0x11e>
 800ce5a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ce5e:	f300 80c8 	bgt.w	800cff2 <pbuf_alloc+0x1b6>
 800ce62:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ce66:	d010      	beq.n	800ce8a <pbuf_alloc+0x4e>
 800ce68:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ce6c:	f300 80c1 	bgt.w	800cff2 <pbuf_alloc+0x1b6>
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d002      	beq.n	800ce7a <pbuf_alloc+0x3e>
 800ce74:	2b41      	cmp	r3, #65	; 0x41
 800ce76:	f040 80bc 	bne.w	800cff2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ce7a:	887a      	ldrh	r2, [r7, #2]
 800ce7c:	88bb      	ldrh	r3, [r7, #4]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	2000      	movs	r0, #0
 800ce82:	f000 f8d1 	bl	800d028 <pbuf_alloc_reference>
 800ce86:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ce88:	e0bd      	b.n	800d006 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ce92:	88bb      	ldrh	r3, [r7, #4]
 800ce94:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ce96:	200c      	movs	r0, #12
 800ce98:	f7ff fb8e 	bl	800c5b8 <memp_malloc>
 800ce9c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d109      	bne.n	800ceb8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cea4:	f7ff ff76 	bl	800cd94 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d002      	beq.n	800ceb4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ceae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ceb0:	f000 faa8 	bl	800d404 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	e0a7      	b.n	800d008 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ceb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ceba:	3303      	adds	r3, #3
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	f023 0303 	bic.w	r3, r3, #3
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	8b7a      	ldrh	r2, [r7, #26]
 800cecc:	4293      	cmp	r3, r2
 800cece:	bf28      	it	cs
 800ced0:	4613      	movcs	r3, r2
 800ced2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ced4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ced6:	3310      	adds	r3, #16
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	4413      	add	r3, r2
 800cedc:	3303      	adds	r3, #3
 800cede:	f023 0303 	bic.w	r3, r3, #3
 800cee2:	4618      	mov	r0, r3
 800cee4:	89f9      	ldrh	r1, [r7, #14]
 800cee6:	8b7a      	ldrh	r2, [r7, #26]
 800cee8:	2300      	movs	r3, #0
 800ceea:	9301      	str	r3, [sp, #4]
 800ceec:	887b      	ldrh	r3, [r7, #2]
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	460b      	mov	r3, r1
 800cef2:	4601      	mov	r1, r0
 800cef4:	6938      	ldr	r0, [r7, #16]
 800cef6:	f7ff ff77 	bl	800cde8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	f003 0303 	and.w	r3, r3, #3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d006      	beq.n	800cf14 <pbuf_alloc+0xd8>
 800cf06:	4b42      	ldr	r3, [pc, #264]	; (800d010 <pbuf_alloc+0x1d4>)
 800cf08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf0c:	4941      	ldr	r1, [pc, #260]	; (800d014 <pbuf_alloc+0x1d8>)
 800cf0e:	4842      	ldr	r0, [pc, #264]	; (800d018 <pbuf_alloc+0x1dc>)
 800cf10:	f00c f9aa 	bl	8019268 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cf14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf16:	3303      	adds	r3, #3
 800cf18:	f023 0303 	bic.w	r3, r3, #3
 800cf1c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cf20:	d106      	bne.n	800cf30 <pbuf_alloc+0xf4>
 800cf22:	4b3b      	ldr	r3, [pc, #236]	; (800d010 <pbuf_alloc+0x1d4>)
 800cf24:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cf28:	493c      	ldr	r1, [pc, #240]	; (800d01c <pbuf_alloc+0x1e0>)
 800cf2a:	483b      	ldr	r0, [pc, #236]	; (800d018 <pbuf_alloc+0x1dc>)
 800cf2c:	f00c f99c 	bl	8019268 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d102      	bne.n	800cf3c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	627b      	str	r3, [r7, #36]	; 0x24
 800cf3a:	e002      	b.n	800cf42 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cf46:	8b7a      	ldrh	r2, [r7, #26]
 800cf48:	89fb      	ldrh	r3, [r7, #14]
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cf52:	8b7b      	ldrh	r3, [r7, #26]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d19e      	bne.n	800ce96 <pbuf_alloc+0x5a>
      break;
 800cf58:	e055      	b.n	800d006 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cf5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf5c:	3303      	adds	r3, #3
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	f023 0303 	bic.w	r3, r3, #3
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	88bb      	ldrh	r3, [r7, #4]
 800cf68:	3303      	adds	r3, #3
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	f023 0303 	bic.w	r3, r3, #3
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	4413      	add	r3, r2
 800cf74:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cf76:	8b3b      	ldrh	r3, [r7, #24]
 800cf78:	3310      	adds	r3, #16
 800cf7a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cf7c:	8b3a      	ldrh	r2, [r7, #24]
 800cf7e:	88bb      	ldrh	r3, [r7, #4]
 800cf80:	3303      	adds	r3, #3
 800cf82:	f023 0303 	bic.w	r3, r3, #3
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d306      	bcc.n	800cf98 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cf8a:	8afa      	ldrh	r2, [r7, #22]
 800cf8c:	88bb      	ldrh	r3, [r7, #4]
 800cf8e:	3303      	adds	r3, #3
 800cf90:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d201      	bcs.n	800cf9c <pbuf_alloc+0x160>
        return NULL;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	e035      	b.n	800d008 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cf9c:	8afb      	ldrh	r3, [r7, #22]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7ff f966 	bl	800c270 <mem_malloc>
 800cfa4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d101      	bne.n	800cfb0 <pbuf_alloc+0x174>
        return NULL;
 800cfac:	2300      	movs	r3, #0
 800cfae:	e02b      	b.n	800d008 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cfb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfb2:	3310      	adds	r3, #16
 800cfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb6:	4413      	add	r3, r2
 800cfb8:	3303      	adds	r3, #3
 800cfba:	f023 0303 	bic.w	r3, r3, #3
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	88b9      	ldrh	r1, [r7, #4]
 800cfc2:	88ba      	ldrh	r2, [r7, #4]
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	9301      	str	r3, [sp, #4]
 800cfc8:	887b      	ldrh	r3, [r7, #2]
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	4601      	mov	r1, r0
 800cfd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfd2:	f7ff ff09 	bl	800cde8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	f003 0303 	and.w	r3, r3, #3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d010      	beq.n	800d004 <pbuf_alloc+0x1c8>
 800cfe2:	4b0b      	ldr	r3, [pc, #44]	; (800d010 <pbuf_alloc+0x1d4>)
 800cfe4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cfe8:	490d      	ldr	r1, [pc, #52]	; (800d020 <pbuf_alloc+0x1e4>)
 800cfea:	480b      	ldr	r0, [pc, #44]	; (800d018 <pbuf_alloc+0x1dc>)
 800cfec:	f00c f93c 	bl	8019268 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cff0:	e008      	b.n	800d004 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cff2:	4b07      	ldr	r3, [pc, #28]	; (800d010 <pbuf_alloc+0x1d4>)
 800cff4:	f240 1227 	movw	r2, #295	; 0x127
 800cff8:	490a      	ldr	r1, [pc, #40]	; (800d024 <pbuf_alloc+0x1e8>)
 800cffa:	4807      	ldr	r0, [pc, #28]	; (800d018 <pbuf_alloc+0x1dc>)
 800cffc:	f00c f934 	bl	8019268 <iprintf>
      return NULL;
 800d000:	2300      	movs	r3, #0
 800d002:	e001      	b.n	800d008 <pbuf_alloc+0x1cc>
      break;
 800d004:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3728      	adds	r7, #40	; 0x28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	0801bae0 	.word	0x0801bae0
 800d014:	0801bb10 	.word	0x0801bb10
 800d018:	0801bb40 	.word	0x0801bb40
 800d01c:	0801bb68 	.word	0x0801bb68
 800d020:	0801bb9c 	.word	0x0801bb9c
 800d024:	0801bbc8 	.word	0x0801bbc8

0800d028 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b086      	sub	sp, #24
 800d02c:	af02      	add	r7, sp, #8
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	460b      	mov	r3, r1
 800d032:	807b      	strh	r3, [r7, #2]
 800d034:	4613      	mov	r3, r2
 800d036:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d038:	883b      	ldrh	r3, [r7, #0]
 800d03a:	2b41      	cmp	r3, #65	; 0x41
 800d03c:	d009      	beq.n	800d052 <pbuf_alloc_reference+0x2a>
 800d03e:	883b      	ldrh	r3, [r7, #0]
 800d040:	2b01      	cmp	r3, #1
 800d042:	d006      	beq.n	800d052 <pbuf_alloc_reference+0x2a>
 800d044:	4b0f      	ldr	r3, [pc, #60]	; (800d084 <pbuf_alloc_reference+0x5c>)
 800d046:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d04a:	490f      	ldr	r1, [pc, #60]	; (800d088 <pbuf_alloc_reference+0x60>)
 800d04c:	480f      	ldr	r0, [pc, #60]	; (800d08c <pbuf_alloc_reference+0x64>)
 800d04e:	f00c f90b 	bl	8019268 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d052:	200b      	movs	r0, #11
 800d054:	f7ff fab0 	bl	800c5b8 <memp_malloc>
 800d058:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d101      	bne.n	800d064 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d060:	2300      	movs	r3, #0
 800d062:	e00b      	b.n	800d07c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d064:	8879      	ldrh	r1, [r7, #2]
 800d066:	887a      	ldrh	r2, [r7, #2]
 800d068:	2300      	movs	r3, #0
 800d06a:	9301      	str	r3, [sp, #4]
 800d06c:	883b      	ldrh	r3, [r7, #0]
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	460b      	mov	r3, r1
 800d072:	6879      	ldr	r1, [r7, #4]
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7ff feb7 	bl	800cde8 <pbuf_init_alloced_pbuf>
  return p;
 800d07a:	68fb      	ldr	r3, [r7, #12]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	0801bae0 	.word	0x0801bae0
 800d088:	0801bbe4 	.word	0x0801bbe4
 800d08c:	0801bb40 	.word	0x0801bb40

0800d090 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b088      	sub	sp, #32
 800d094:	af02      	add	r7, sp, #8
 800d096:	607b      	str	r3, [r7, #4]
 800d098:	4603      	mov	r3, r0
 800d09a:	73fb      	strb	r3, [r7, #15]
 800d09c:	460b      	mov	r3, r1
 800d09e:	81bb      	strh	r3, [r7, #12]
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
 800d0a6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d0a8:	8a7b      	ldrh	r3, [r7, #18]
 800d0aa:	3303      	adds	r3, #3
 800d0ac:	f023 0203 	bic.w	r2, r3, #3
 800d0b0:	89bb      	ldrh	r3, [r7, #12]
 800d0b2:	441a      	add	r2, r3
 800d0b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d901      	bls.n	800d0be <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	e018      	b.n	800d0f0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d0be:	6a3b      	ldr	r3, [r7, #32]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d007      	beq.n	800d0d4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d0c4:	8a7b      	ldrh	r3, [r7, #18]
 800d0c6:	3303      	adds	r3, #3
 800d0c8:	f023 0303 	bic.w	r3, r3, #3
 800d0cc:	6a3a      	ldr	r2, [r7, #32]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	617b      	str	r3, [r7, #20]
 800d0d2:	e001      	b.n	800d0d8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	89b9      	ldrh	r1, [r7, #12]
 800d0dc:	89ba      	ldrh	r2, [r7, #12]
 800d0de:	2302      	movs	r3, #2
 800d0e0:	9301      	str	r3, [sp, #4]
 800d0e2:	897b      	ldrh	r3, [r7, #10]
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	6979      	ldr	r1, [r7, #20]
 800d0ea:	f7ff fe7d 	bl	800cde8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d0ee:	687b      	ldr	r3, [r7, #4]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3718      	adds	r7, #24
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	460b      	mov	r3, r1
 800d102:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <pbuf_realloc+0x20>
 800d10a:	4b3a      	ldr	r3, [pc, #232]	; (800d1f4 <pbuf_realloc+0xfc>)
 800d10c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d110:	4939      	ldr	r1, [pc, #228]	; (800d1f8 <pbuf_realloc+0x100>)
 800d112:	483a      	ldr	r0, [pc, #232]	; (800d1fc <pbuf_realloc+0x104>)
 800d114:	f00c f8a8 	bl	8019268 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	891b      	ldrh	r3, [r3, #8]
 800d11c:	887a      	ldrh	r2, [r7, #2]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d263      	bcs.n	800d1ea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	891a      	ldrh	r2, [r3, #8]
 800d126:	887b      	ldrh	r3, [r7, #2]
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d12c:	887b      	ldrh	r3, [r7, #2]
 800d12e:	817b      	strh	r3, [r7, #10]
  q = p;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d134:	e018      	b.n	800d168 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	895b      	ldrh	r3, [r3, #10]
 800d13a:	897a      	ldrh	r2, [r7, #10]
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	891a      	ldrh	r2, [r3, #8]
 800d144:	893b      	ldrh	r3, [r7, #8]
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	b29a      	uxth	r2, r3
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d106      	bne.n	800d168 <pbuf_realloc+0x70>
 800d15a:	4b26      	ldr	r3, [pc, #152]	; (800d1f4 <pbuf_realloc+0xfc>)
 800d15c:	f240 12af 	movw	r2, #431	; 0x1af
 800d160:	4927      	ldr	r1, [pc, #156]	; (800d200 <pbuf_realloc+0x108>)
 800d162:	4826      	ldr	r0, [pc, #152]	; (800d1fc <pbuf_realloc+0x104>)
 800d164:	f00c f880 	bl	8019268 <iprintf>
  while (rem_len > q->len) {
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	895b      	ldrh	r3, [r3, #10]
 800d16c:	897a      	ldrh	r2, [r7, #10]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d8e1      	bhi.n	800d136 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	7b1b      	ldrb	r3, [r3, #12]
 800d176:	f003 030f 	and.w	r3, r3, #15
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d121      	bne.n	800d1c2 <pbuf_realloc+0xca>
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	895b      	ldrh	r3, [r3, #10]
 800d182:	897a      	ldrh	r2, [r7, #10]
 800d184:	429a      	cmp	r2, r3
 800d186:	d01c      	beq.n	800d1c2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	7b5b      	ldrb	r3, [r3, #13]
 800d18c:	f003 0302 	and.w	r3, r3, #2
 800d190:	2b00      	cmp	r3, #0
 800d192:	d116      	bne.n	800d1c2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	685a      	ldr	r2, [r3, #4]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	897b      	ldrh	r3, [r7, #10]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f7fe ff58 	bl	800c05c <mem_trim>
 800d1ac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d106      	bne.n	800d1c2 <pbuf_realloc+0xca>
 800d1b4:	4b0f      	ldr	r3, [pc, #60]	; (800d1f4 <pbuf_realloc+0xfc>)
 800d1b6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d1ba:	4912      	ldr	r1, [pc, #72]	; (800d204 <pbuf_realloc+0x10c>)
 800d1bc:	480f      	ldr	r0, [pc, #60]	; (800d1fc <pbuf_realloc+0x104>)
 800d1be:	f00c f853 	bl	8019268 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	897a      	ldrh	r2, [r7, #10]
 800d1c6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	895a      	ldrh	r2, [r3, #10]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d004      	beq.n	800d1e2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 f911 	bl	800d404 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	601a      	str	r2, [r3, #0]
 800d1e8:	e000      	b.n	800d1ec <pbuf_realloc+0xf4>
    return;
 800d1ea:	bf00      	nop

}
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	0801bae0 	.word	0x0801bae0
 800d1f8:	0801bbf8 	.word	0x0801bbf8
 800d1fc:	0801bb40 	.word	0x0801bb40
 800d200:	0801bc10 	.word	0x0801bc10
 800d204:	0801bc28 	.word	0x0801bc28

0800d208 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	4613      	mov	r3, r2
 800d214:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d106      	bne.n	800d22a <pbuf_add_header_impl+0x22>
 800d21c:	4b2b      	ldr	r3, [pc, #172]	; (800d2cc <pbuf_add_header_impl+0xc4>)
 800d21e:	f240 12df 	movw	r2, #479	; 0x1df
 800d222:	492b      	ldr	r1, [pc, #172]	; (800d2d0 <pbuf_add_header_impl+0xc8>)
 800d224:	482b      	ldr	r0, [pc, #172]	; (800d2d4 <pbuf_add_header_impl+0xcc>)
 800d226:	f00c f81f 	bl	8019268 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d003      	beq.n	800d238 <pbuf_add_header_impl+0x30>
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d236:	d301      	bcc.n	800d23c <pbuf_add_header_impl+0x34>
    return 1;
 800d238:	2301      	movs	r3, #1
 800d23a:	e043      	b.n	800d2c4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <pbuf_add_header_impl+0x3e>
    return 0;
 800d242:	2300      	movs	r3, #0
 800d244:	e03e      	b.n	800d2c4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	891a      	ldrh	r2, [r3, #8]
 800d24e:	8a7b      	ldrh	r3, [r7, #18]
 800d250:	4413      	add	r3, r2
 800d252:	b29b      	uxth	r3, r3
 800d254:	8a7a      	ldrh	r2, [r7, #18]
 800d256:	429a      	cmp	r2, r3
 800d258:	d901      	bls.n	800d25e <pbuf_add_header_impl+0x56>
    return 1;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e032      	b.n	800d2c4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	7b1b      	ldrb	r3, [r3, #12]
 800d262:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d264:	8a3b      	ldrh	r3, [r7, #16]
 800d266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00c      	beq.n	800d288 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	685a      	ldr	r2, [r3, #4]
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	425b      	negs	r3, r3
 800d276:	4413      	add	r3, r2
 800d278:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	3310      	adds	r3, #16
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	429a      	cmp	r2, r3
 800d282:	d20d      	bcs.n	800d2a0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d284:	2301      	movs	r3, #1
 800d286:	e01d      	b.n	800d2c4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d288:	79fb      	ldrb	r3, [r7, #7]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d006      	beq.n	800d29c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	685a      	ldr	r2, [r3, #4]
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	425b      	negs	r3, r3
 800d296:	4413      	add	r3, r2
 800d298:	617b      	str	r3, [r7, #20]
 800d29a:	e001      	b.n	800d2a0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d29c:	2301      	movs	r3, #1
 800d29e:	e011      	b.n	800d2c4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	697a      	ldr	r2, [r7, #20]
 800d2a4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	895a      	ldrh	r2, [r3, #10]
 800d2aa:	8a7b      	ldrh	r3, [r7, #18]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	891a      	ldrh	r2, [r3, #8]
 800d2b8:	8a7b      	ldrh	r3, [r7, #18]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	811a      	strh	r2, [r3, #8]


  return 0;
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3718      	adds	r7, #24
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	0801bae0 	.word	0x0801bae0
 800d2d0:	0801bc44 	.word	0x0801bc44
 800d2d4:	0801bb40 	.word	0x0801bb40

0800d2d8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7ff ff8e 	bl	800d208 <pbuf_add_header_impl>
 800d2ec:	4603      	mov	r3, r0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3708      	adds	r7, #8
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
	...

0800d2f8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d106      	bne.n	800d316 <pbuf_remove_header+0x1e>
 800d308:	4b20      	ldr	r3, [pc, #128]	; (800d38c <pbuf_remove_header+0x94>)
 800d30a:	f240 224b 	movw	r2, #587	; 0x24b
 800d30e:	4920      	ldr	r1, [pc, #128]	; (800d390 <pbuf_remove_header+0x98>)
 800d310:	4820      	ldr	r0, [pc, #128]	; (800d394 <pbuf_remove_header+0x9c>)
 800d312:	f00b ffa9 	bl	8019268 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d003      	beq.n	800d324 <pbuf_remove_header+0x2c>
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d322:	d301      	bcc.n	800d328 <pbuf_remove_header+0x30>
    return 1;
 800d324:	2301      	movs	r3, #1
 800d326:	e02c      	b.n	800d382 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <pbuf_remove_header+0x3a>
    return 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	e027      	b.n	800d382 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	895b      	ldrh	r3, [r3, #10]
 800d33a:	89fa      	ldrh	r2, [r7, #14]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d908      	bls.n	800d352 <pbuf_remove_header+0x5a>
 800d340:	4b12      	ldr	r3, [pc, #72]	; (800d38c <pbuf_remove_header+0x94>)
 800d342:	f240 2255 	movw	r2, #597	; 0x255
 800d346:	4914      	ldr	r1, [pc, #80]	; (800d398 <pbuf_remove_header+0xa0>)
 800d348:	4812      	ldr	r0, [pc, #72]	; (800d394 <pbuf_remove_header+0x9c>)
 800d34a:	f00b ff8d 	bl	8019268 <iprintf>
 800d34e:	2301      	movs	r3, #1
 800d350:	e017      	b.n	800d382 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	441a      	add	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	895a      	ldrh	r2, [r3, #10]
 800d368:	89fb      	ldrh	r3, [r7, #14]
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	891a      	ldrh	r2, [r3, #8]
 800d376:	89fb      	ldrh	r3, [r7, #14]
 800d378:	1ad3      	subs	r3, r2, r3
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3710      	adds	r7, #16
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	0801bae0 	.word	0x0801bae0
 800d390:	0801bc44 	.word	0x0801bc44
 800d394:	0801bb40 	.word	0x0801bb40
 800d398:	0801bc50 	.word	0x0801bc50

0800d39c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	807b      	strh	r3, [r7, #2]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d3ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	da08      	bge.n	800d3c6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d3b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3b8:	425b      	negs	r3, r3
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7ff ff9b 	bl	800d2f8 <pbuf_remove_header>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	e007      	b.n	800d3d6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d3c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3ca:	787a      	ldrb	r2, [r7, #1]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7ff ff1a 	bl	800d208 <pbuf_add_header_impl>
 800d3d4:	4603      	mov	r3, r0
  }
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b082      	sub	sp, #8
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d3ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7ff ffd2 	bl	800d39c <pbuf_header_impl>
 800d3f8:	4603      	mov	r3, r0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3708      	adds	r7, #8
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
	...

0800d404 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b088      	sub	sp, #32
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10b      	bne.n	800d42a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d106      	bne.n	800d426 <pbuf_free+0x22>
 800d418:	4b3b      	ldr	r3, [pc, #236]	; (800d508 <pbuf_free+0x104>)
 800d41a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d41e:	493b      	ldr	r1, [pc, #236]	; (800d50c <pbuf_free+0x108>)
 800d420:	483b      	ldr	r0, [pc, #236]	; (800d510 <pbuf_free+0x10c>)
 800d422:	f00b ff21 	bl	8019268 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d426:	2300      	movs	r3, #0
 800d428:	e069      	b.n	800d4fe <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d42a:	2300      	movs	r3, #0
 800d42c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d42e:	e062      	b.n	800d4f6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d430:	f00b fde0 	bl	8018ff4 <sys_arch_protect>
 800d434:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	7b9b      	ldrb	r3, [r3, #14]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d106      	bne.n	800d44c <pbuf_free+0x48>
 800d43e:	4b32      	ldr	r3, [pc, #200]	; (800d508 <pbuf_free+0x104>)
 800d440:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d444:	4933      	ldr	r1, [pc, #204]	; (800d514 <pbuf_free+0x110>)
 800d446:	4832      	ldr	r0, [pc, #200]	; (800d510 <pbuf_free+0x10c>)
 800d448:	f00b ff0e 	bl	8019268 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7b9b      	ldrb	r3, [r3, #14]
 800d450:	3b01      	subs	r3, #1
 800d452:	b2da      	uxtb	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	739a      	strb	r2, [r3, #14]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	7b9b      	ldrb	r3, [r3, #14]
 800d45c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d45e:	69b8      	ldr	r0, [r7, #24]
 800d460:	f00b fdd6 	bl	8019010 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d464:	7dfb      	ldrb	r3, [r7, #23]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d143      	bne.n	800d4f2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	7b1b      	ldrb	r3, [r3, #12]
 800d474:	f003 030f 	and.w	r3, r3, #15
 800d478:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	7b5b      	ldrb	r3, [r3, #13]
 800d47e:	f003 0302 	and.w	r3, r3, #2
 800d482:	2b00      	cmp	r3, #0
 800d484:	d011      	beq.n	800d4aa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d106      	bne.n	800d4a0 <pbuf_free+0x9c>
 800d492:	4b1d      	ldr	r3, [pc, #116]	; (800d508 <pbuf_free+0x104>)
 800d494:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d498:	491f      	ldr	r1, [pc, #124]	; (800d518 <pbuf_free+0x114>)
 800d49a:	481d      	ldr	r0, [pc, #116]	; (800d510 <pbuf_free+0x10c>)
 800d49c:	f00b fee4 	bl	8019268 <iprintf>
        pc->custom_free_function(p);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	4798      	blx	r3
 800d4a8:	e01d      	b.n	800d4e6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d4aa:	7bfb      	ldrb	r3, [r7, #15]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d104      	bne.n	800d4ba <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d4b0:	6879      	ldr	r1, [r7, #4]
 800d4b2:	200c      	movs	r0, #12
 800d4b4:	f7ff f8f6 	bl	800c6a4 <memp_free>
 800d4b8:	e015      	b.n	800d4e6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d104      	bne.n	800d4ca <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d4c0:	6879      	ldr	r1, [r7, #4]
 800d4c2:	200b      	movs	r0, #11
 800d4c4:	f7ff f8ee 	bl	800c6a4 <memp_free>
 800d4c8:	e00d      	b.n	800d4e6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d4ca:	7bfb      	ldrb	r3, [r7, #15]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d103      	bne.n	800d4d8 <pbuf_free+0xd4>
          mem_free(p);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7fe fd33 	bl	800bf3c <mem_free>
 800d4d6:	e006      	b.n	800d4e6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d4d8:	4b0b      	ldr	r3, [pc, #44]	; (800d508 <pbuf_free+0x104>)
 800d4da:	f240 320f 	movw	r2, #783	; 0x30f
 800d4de:	490f      	ldr	r1, [pc, #60]	; (800d51c <pbuf_free+0x118>)
 800d4e0:	480b      	ldr	r0, [pc, #44]	; (800d510 <pbuf_free+0x10c>)
 800d4e2:	f00b fec1 	bl	8019268 <iprintf>
        }
      }
      count++;
 800d4e6:	7ffb      	ldrb	r3, [r7, #31]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	607b      	str	r3, [r7, #4]
 800d4f0:	e001      	b.n	800d4f6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d199      	bne.n	800d430 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d4fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3720      	adds	r7, #32
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	0801bae0 	.word	0x0801bae0
 800d50c:	0801bc44 	.word	0x0801bc44
 800d510:	0801bb40 	.word	0x0801bb40
 800d514:	0801bc70 	.word	0x0801bc70
 800d518:	0801bc88 	.word	0x0801bc88
 800d51c:	0801bcac 	.word	0x0801bcac

0800d520 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d528:	2300      	movs	r3, #0
 800d52a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d52c:	e005      	b.n	800d53a <pbuf_clen+0x1a>
    ++len;
 800d52e:	89fb      	ldrh	r3, [r7, #14]
 800d530:	3301      	adds	r3, #1
 800d532:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1f6      	bne.n	800d52e <pbuf_clen+0xe>
  }
  return len;
 800d540:	89fb      	ldrh	r3, [r7, #14]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3714      	adds	r7, #20
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
	...

0800d550 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d016      	beq.n	800d58c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d55e:	f00b fd49 	bl	8018ff4 <sys_arch_protect>
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	7b9b      	ldrb	r3, [r3, #14]
 800d568:	3301      	adds	r3, #1
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	739a      	strb	r2, [r3, #14]
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f00b fd4d 	bl	8019010 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	7b9b      	ldrb	r3, [r3, #14]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d106      	bne.n	800d58c <pbuf_ref+0x3c>
 800d57e:	4b05      	ldr	r3, [pc, #20]	; (800d594 <pbuf_ref+0x44>)
 800d580:	f240 3242 	movw	r2, #834	; 0x342
 800d584:	4904      	ldr	r1, [pc, #16]	; (800d598 <pbuf_ref+0x48>)
 800d586:	4805      	ldr	r0, [pc, #20]	; (800d59c <pbuf_ref+0x4c>)
 800d588:	f00b fe6e 	bl	8019268 <iprintf>
  }
}
 800d58c:	bf00      	nop
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	0801bae0 	.word	0x0801bae0
 800d598:	0801bcc0 	.word	0x0801bcc0
 800d59c:	0801bb40 	.word	0x0801bb40

0800d5a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <pbuf_cat+0x16>
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d107      	bne.n	800d5c6 <pbuf_cat+0x26>
 800d5b6:	4b20      	ldr	r3, [pc, #128]	; (800d638 <pbuf_cat+0x98>)
 800d5b8:	f240 3259 	movw	r2, #857	; 0x359
 800d5bc:	491f      	ldr	r1, [pc, #124]	; (800d63c <pbuf_cat+0x9c>)
 800d5be:	4820      	ldr	r0, [pc, #128]	; (800d640 <pbuf_cat+0xa0>)
 800d5c0:	f00b fe52 	bl	8019268 <iprintf>
 800d5c4:	e034      	b.n	800d630 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	60fb      	str	r3, [r7, #12]
 800d5ca:	e00a      	b.n	800d5e2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	891a      	ldrh	r2, [r3, #8]
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	891b      	ldrh	r3, [r3, #8]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	60fb      	str	r3, [r7, #12]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1f0      	bne.n	800d5cc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	891a      	ldrh	r2, [r3, #8]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	895b      	ldrh	r3, [r3, #10]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d006      	beq.n	800d604 <pbuf_cat+0x64>
 800d5f6:	4b10      	ldr	r3, [pc, #64]	; (800d638 <pbuf_cat+0x98>)
 800d5f8:	f240 3262 	movw	r2, #866	; 0x362
 800d5fc:	4911      	ldr	r1, [pc, #68]	; (800d644 <pbuf_cat+0xa4>)
 800d5fe:	4810      	ldr	r0, [pc, #64]	; (800d640 <pbuf_cat+0xa0>)
 800d600:	f00b fe32 	bl	8019268 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d006      	beq.n	800d61a <pbuf_cat+0x7a>
 800d60c:	4b0a      	ldr	r3, [pc, #40]	; (800d638 <pbuf_cat+0x98>)
 800d60e:	f240 3263 	movw	r2, #867	; 0x363
 800d612:	490d      	ldr	r1, [pc, #52]	; (800d648 <pbuf_cat+0xa8>)
 800d614:	480a      	ldr	r0, [pc, #40]	; (800d640 <pbuf_cat+0xa0>)
 800d616:	f00b fe27 	bl	8019268 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	891a      	ldrh	r2, [r3, #8]
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	891b      	ldrh	r3, [r3, #8]
 800d622:	4413      	add	r3, r2
 800d624:	b29a      	uxth	r2, r3
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	0801bae0 	.word	0x0801bae0
 800d63c:	0801bcd4 	.word	0x0801bcd4
 800d640:	0801bb40 	.word	0x0801bb40
 800d644:	0801bd0c 	.word	0x0801bd0c
 800d648:	0801bd3c 	.word	0x0801bd3c

0800d64c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d656:	6839      	ldr	r1, [r7, #0]
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f7ff ffa1 	bl	800d5a0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d65e:	6838      	ldr	r0, [r7, #0]
 800d660:	f7ff ff76 	bl	800d550 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b086      	sub	sp, #24
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d676:	2300      	movs	r3, #0
 800d678:	617b      	str	r3, [r7, #20]
 800d67a:	2300      	movs	r3, #0
 800d67c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d008      	beq.n	800d696 <pbuf_copy+0x2a>
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d005      	beq.n	800d696 <pbuf_copy+0x2a>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	891a      	ldrh	r2, [r3, #8]
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	891b      	ldrh	r3, [r3, #8]
 800d692:	429a      	cmp	r2, r3
 800d694:	d209      	bcs.n	800d6aa <pbuf_copy+0x3e>
 800d696:	4b57      	ldr	r3, [pc, #348]	; (800d7f4 <pbuf_copy+0x188>)
 800d698:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d69c:	4956      	ldr	r1, [pc, #344]	; (800d7f8 <pbuf_copy+0x18c>)
 800d69e:	4857      	ldr	r0, [pc, #348]	; (800d7fc <pbuf_copy+0x190>)
 800d6a0:	f00b fde2 	bl	8019268 <iprintf>
 800d6a4:	f06f 030f 	mvn.w	r3, #15
 800d6a8:	e09f      	b.n	800d7ea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	895b      	ldrh	r3, [r3, #10]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	1ad2      	subs	r2, r2, r3
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	895b      	ldrh	r3, [r3, #10]
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	1acb      	subs	r3, r1, r3
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d306      	bcc.n	800d6d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	895b      	ldrh	r3, [r3, #10]
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	60fb      	str	r3, [r7, #12]
 800d6ce:	e005      	b.n	800d6dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	895b      	ldrh	r3, [r3, #10]
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685a      	ldr	r2, [r3, #4]
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	18d0      	adds	r0, r2, r3
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	685a      	ldr	r2, [r3, #4]
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	68fa      	ldr	r2, [r7, #12]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	f00b ffba 	bl	8019668 <memcpy>
    offset_to += len;
 800d6f4:	697a      	ldr	r2, [r7, #20]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d6fc:	693a      	ldr	r2, [r7, #16]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	4413      	add	r3, r2
 800d702:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	895b      	ldrh	r3, [r3, #10]
 800d708:	461a      	mov	r2, r3
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d906      	bls.n	800d71e <pbuf_copy+0xb2>
 800d710:	4b38      	ldr	r3, [pc, #224]	; (800d7f4 <pbuf_copy+0x188>)
 800d712:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d716:	493a      	ldr	r1, [pc, #232]	; (800d800 <pbuf_copy+0x194>)
 800d718:	4838      	ldr	r0, [pc, #224]	; (800d7fc <pbuf_copy+0x190>)
 800d71a:	f00b fda5 	bl	8019268 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	895b      	ldrh	r3, [r3, #10]
 800d722:	461a      	mov	r2, r3
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	4293      	cmp	r3, r2
 800d728:	d906      	bls.n	800d738 <pbuf_copy+0xcc>
 800d72a:	4b32      	ldr	r3, [pc, #200]	; (800d7f4 <pbuf_copy+0x188>)
 800d72c:	f240 32da 	movw	r2, #986	; 0x3da
 800d730:	4934      	ldr	r1, [pc, #208]	; (800d804 <pbuf_copy+0x198>)
 800d732:	4832      	ldr	r0, [pc, #200]	; (800d7fc <pbuf_copy+0x190>)
 800d734:	f00b fd98 	bl	8019268 <iprintf>
    if (offset_from >= p_from->len) {
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	895b      	ldrh	r3, [r3, #10]
 800d73c:	461a      	mov	r2, r3
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	4293      	cmp	r3, r2
 800d742:	d304      	bcc.n	800d74e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d744:	2300      	movs	r3, #0
 800d746:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	895b      	ldrh	r3, [r3, #10]
 800d752:	461a      	mov	r2, r3
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	4293      	cmp	r3, r2
 800d758:	d114      	bne.n	800d784 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10c      	bne.n	800d784 <pbuf_copy+0x118>
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d009      	beq.n	800d784 <pbuf_copy+0x118>
 800d770:	4b20      	ldr	r3, [pc, #128]	; (800d7f4 <pbuf_copy+0x188>)
 800d772:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d776:	4924      	ldr	r1, [pc, #144]	; (800d808 <pbuf_copy+0x19c>)
 800d778:	4820      	ldr	r0, [pc, #128]	; (800d7fc <pbuf_copy+0x190>)
 800d77a:	f00b fd75 	bl	8019268 <iprintf>
 800d77e:	f06f 030f 	mvn.w	r3, #15
 800d782:	e032      	b.n	800d7ea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d013      	beq.n	800d7b2 <pbuf_copy+0x146>
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	895a      	ldrh	r2, [r3, #10]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	891b      	ldrh	r3, [r3, #8]
 800d792:	429a      	cmp	r2, r3
 800d794:	d10d      	bne.n	800d7b2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d009      	beq.n	800d7b2 <pbuf_copy+0x146>
 800d79e:	4b15      	ldr	r3, [pc, #84]	; (800d7f4 <pbuf_copy+0x188>)
 800d7a0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d7a4:	4919      	ldr	r1, [pc, #100]	; (800d80c <pbuf_copy+0x1a0>)
 800d7a6:	4815      	ldr	r0, [pc, #84]	; (800d7fc <pbuf_copy+0x190>)
 800d7a8:	f00b fd5e 	bl	8019268 <iprintf>
 800d7ac:	f06f 0305 	mvn.w	r3, #5
 800d7b0:	e01b      	b.n	800d7ea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d013      	beq.n	800d7e0 <pbuf_copy+0x174>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	895a      	ldrh	r2, [r3, #10]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	891b      	ldrh	r3, [r3, #8]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d10d      	bne.n	800d7e0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d009      	beq.n	800d7e0 <pbuf_copy+0x174>
 800d7cc:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <pbuf_copy+0x188>)
 800d7ce:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d7d2:	490e      	ldr	r1, [pc, #56]	; (800d80c <pbuf_copy+0x1a0>)
 800d7d4:	4809      	ldr	r0, [pc, #36]	; (800d7fc <pbuf_copy+0x190>)
 800d7d6:	f00b fd47 	bl	8019268 <iprintf>
 800d7da:	f06f 0305 	mvn.w	r3, #5
 800d7de:	e004      	b.n	800d7ea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f47f af61 	bne.w	800d6aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3718      	adds	r7, #24
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	0801bae0 	.word	0x0801bae0
 800d7f8:	0801bd88 	.word	0x0801bd88
 800d7fc:	0801bb40 	.word	0x0801bb40
 800d800:	0801bdb8 	.word	0x0801bdb8
 800d804:	0801bdd0 	.word	0x0801bdd0
 800d808:	0801bdec 	.word	0x0801bdec
 800d80c:	0801bdfc 	.word	0x0801bdfc

0800d810 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b088      	sub	sp, #32
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4611      	mov	r1, r2
 800d81c:	461a      	mov	r2, r3
 800d81e:	460b      	mov	r3, r1
 800d820:	80fb      	strh	r3, [r7, #6]
 800d822:	4613      	mov	r3, r2
 800d824:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d82a:	2300      	movs	r3, #0
 800d82c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d108      	bne.n	800d846 <pbuf_copy_partial+0x36>
 800d834:	4b2b      	ldr	r3, [pc, #172]	; (800d8e4 <pbuf_copy_partial+0xd4>)
 800d836:	f240 420a 	movw	r2, #1034	; 0x40a
 800d83a:	492b      	ldr	r1, [pc, #172]	; (800d8e8 <pbuf_copy_partial+0xd8>)
 800d83c:	482b      	ldr	r0, [pc, #172]	; (800d8ec <pbuf_copy_partial+0xdc>)
 800d83e:	f00b fd13 	bl	8019268 <iprintf>
 800d842:	2300      	movs	r3, #0
 800d844:	e04a      	b.n	800d8dc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d108      	bne.n	800d85e <pbuf_copy_partial+0x4e>
 800d84c:	4b25      	ldr	r3, [pc, #148]	; (800d8e4 <pbuf_copy_partial+0xd4>)
 800d84e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d852:	4927      	ldr	r1, [pc, #156]	; (800d8f0 <pbuf_copy_partial+0xe0>)
 800d854:	4825      	ldr	r0, [pc, #148]	; (800d8ec <pbuf_copy_partial+0xdc>)
 800d856:	f00b fd07 	bl	8019268 <iprintf>
 800d85a:	2300      	movs	r3, #0
 800d85c:	e03e      	b.n	800d8dc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	61fb      	str	r3, [r7, #28]
 800d862:	e034      	b.n	800d8ce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d864:	88bb      	ldrh	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00a      	beq.n	800d880 <pbuf_copy_partial+0x70>
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	895b      	ldrh	r3, [r3, #10]
 800d86e:	88ba      	ldrh	r2, [r7, #4]
 800d870:	429a      	cmp	r2, r3
 800d872:	d305      	bcc.n	800d880 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	895b      	ldrh	r3, [r3, #10]
 800d878:	88ba      	ldrh	r2, [r7, #4]
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	80bb      	strh	r3, [r7, #4]
 800d87e:	e023      	b.n	800d8c8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	895a      	ldrh	r2, [r3, #10]
 800d884:	88bb      	ldrh	r3, [r7, #4]
 800d886:	1ad3      	subs	r3, r2, r3
 800d888:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d88a:	8b3a      	ldrh	r2, [r7, #24]
 800d88c:	88fb      	ldrh	r3, [r7, #6]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d901      	bls.n	800d896 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d892:	88fb      	ldrh	r3, [r7, #6]
 800d894:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d896:	8b7b      	ldrh	r3, [r7, #26]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	18d0      	adds	r0, r2, r3
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	685a      	ldr	r2, [r3, #4]
 800d8a0:	88bb      	ldrh	r3, [r7, #4]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	8b3a      	ldrh	r2, [r7, #24]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	f00b fede 	bl	8019668 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d8ac:	8afa      	ldrh	r2, [r7, #22]
 800d8ae:	8b3b      	ldrh	r3, [r7, #24]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d8b4:	8b7a      	ldrh	r2, [r7, #26]
 800d8b6:	8b3b      	ldrh	r3, [r7, #24]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d8bc:	88fa      	ldrh	r2, [r7, #6]
 800d8be:	8b3b      	ldrh	r3, [r7, #24]
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	61fb      	str	r3, [r7, #28]
 800d8ce:	88fb      	ldrh	r3, [r7, #6]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d002      	beq.n	800d8da <pbuf_copy_partial+0xca>
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1c4      	bne.n	800d864 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d8da:	8afb      	ldrh	r3, [r7, #22]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3720      	adds	r7, #32
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	0801bae0 	.word	0x0801bae0
 800d8e8:	0801be28 	.word	0x0801be28
 800d8ec:	0801bb40 	.word	0x0801bb40
 800d8f0:	0801be48 	.word	0x0801be48

0800d8f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	603a      	str	r2, [r7, #0]
 800d8fe:	71fb      	strb	r3, [r7, #7]
 800d900:	460b      	mov	r3, r1
 800d902:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	8919      	ldrh	r1, [r3, #8]
 800d908:	88ba      	ldrh	r2, [r7, #4]
 800d90a:	79fb      	ldrb	r3, [r7, #7]
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7ff fa95 	bl	800ce3c <pbuf_alloc>
 800d912:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d101      	bne.n	800d91e <pbuf_clone+0x2a>
    return NULL;
 800d91a:	2300      	movs	r3, #0
 800d91c:	e011      	b.n	800d942 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f7ff fea3 	bl	800d66c <pbuf_copy>
 800d926:	4603      	mov	r3, r0
 800d928:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d92a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d006      	beq.n	800d940 <pbuf_clone+0x4c>
 800d932:	4b06      	ldr	r3, [pc, #24]	; (800d94c <pbuf_clone+0x58>)
 800d934:	f240 5224 	movw	r2, #1316	; 0x524
 800d938:	4905      	ldr	r1, [pc, #20]	; (800d950 <pbuf_clone+0x5c>)
 800d93a:	4806      	ldr	r0, [pc, #24]	; (800d954 <pbuf_clone+0x60>)
 800d93c:	f00b fc94 	bl	8019268 <iprintf>
  return q;
 800d940:	68fb      	ldr	r3, [r7, #12]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	0801bae0 	.word	0x0801bae0
 800d950:	0801bf54 	.word	0x0801bf54
 800d954:	0801bb40 	.word	0x0801bb40

0800d958 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d95c:	f00b fb96 	bl	801908c <rand>
 800d960:	4603      	mov	r3, r0
 800d962:	b29b      	uxth	r3, r3
 800d964:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d968:	b29b      	uxth	r3, r3
 800d96a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d96e:	b29a      	uxth	r2, r3
 800d970:	4b01      	ldr	r3, [pc, #4]	; (800d978 <tcp_init+0x20>)
 800d972:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d974:	bf00      	nop
 800d976:	bd80      	pop	{r7, pc}
 800d978:	20000024 	.word	0x20000024

0800d97c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	7d1b      	ldrb	r3, [r3, #20]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d105      	bne.n	800d998 <tcp_free+0x1c>
 800d98c:	4b06      	ldr	r3, [pc, #24]	; (800d9a8 <tcp_free+0x2c>)
 800d98e:	22d4      	movs	r2, #212	; 0xd4
 800d990:	4906      	ldr	r1, [pc, #24]	; (800d9ac <tcp_free+0x30>)
 800d992:	4807      	ldr	r0, [pc, #28]	; (800d9b0 <tcp_free+0x34>)
 800d994:	f00b fc68 	bl	8019268 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d998:	6879      	ldr	r1, [r7, #4]
 800d99a:	2001      	movs	r0, #1
 800d99c:	f7fe fe82 	bl	800c6a4 <memp_free>
}
 800d9a0:	bf00      	nop
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	0801bfe0 	.word	0x0801bfe0
 800d9ac:	0801c010 	.word	0x0801c010
 800d9b0:	0801c024 	.word	0x0801c024

0800d9b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	7d1b      	ldrb	r3, [r3, #20]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d105      	bne.n	800d9d0 <tcp_free_listen+0x1c>
 800d9c4:	4b06      	ldr	r3, [pc, #24]	; (800d9e0 <tcp_free_listen+0x2c>)
 800d9c6:	22df      	movs	r2, #223	; 0xdf
 800d9c8:	4906      	ldr	r1, [pc, #24]	; (800d9e4 <tcp_free_listen+0x30>)
 800d9ca:	4807      	ldr	r0, [pc, #28]	; (800d9e8 <tcp_free_listen+0x34>)
 800d9cc:	f00b fc4c 	bl	8019268 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d9d0:	6879      	ldr	r1, [r7, #4]
 800d9d2:	2002      	movs	r0, #2
 800d9d4:	f7fe fe66 	bl	800c6a4 <memp_free>
}
 800d9d8:	bf00      	nop
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	0801bfe0 	.word	0x0801bfe0
 800d9e4:	0801c04c 	.word	0x0801c04c
 800d9e8:	0801c024 	.word	0x0801c024

0800d9ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d9f0:	f001 f9d0 	bl	800ed94 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d9f4:	4b07      	ldr	r3, [pc, #28]	; (800da14 <tcp_tmr+0x28>)
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	4b05      	ldr	r3, [pc, #20]	; (800da14 <tcp_tmr+0x28>)
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	4b04      	ldr	r3, [pc, #16]	; (800da14 <tcp_tmr+0x28>)
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	f003 0301 	and.w	r3, r3, #1
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d001      	beq.n	800da10 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800da0c:	f000 fe82 	bl	800e714 <tcp_slowtmr>
  }
}
 800da10:	bf00      	nop
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20010ed9 	.word	0x20010ed9

0800da18 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d105      	bne.n	800da34 <tcp_remove_listener+0x1c>
 800da28:	4b0d      	ldr	r3, [pc, #52]	; (800da60 <tcp_remove_listener+0x48>)
 800da2a:	22ff      	movs	r2, #255	; 0xff
 800da2c:	490d      	ldr	r1, [pc, #52]	; (800da64 <tcp_remove_listener+0x4c>)
 800da2e:	480e      	ldr	r0, [pc, #56]	; (800da68 <tcp_remove_listener+0x50>)
 800da30:	f00b fc1a 	bl	8019268 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	60fb      	str	r3, [r7, #12]
 800da38:	e00a      	b.n	800da50 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	429a      	cmp	r2, r3
 800da42:	d102      	bne.n	800da4a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2200      	movs	r2, #0
 800da48:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	60fb      	str	r3, [r7, #12]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1f1      	bne.n	800da3a <tcp_remove_listener+0x22>
    }
  }
}
 800da56:	bf00      	nop
 800da58:	bf00      	nop
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	0801bfe0 	.word	0x0801bfe0
 800da64:	0801c068 	.word	0x0801c068
 800da68:	0801c024 	.word	0x0801c024

0800da6c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d106      	bne.n	800da88 <tcp_listen_closed+0x1c>
 800da7a:	4b14      	ldr	r3, [pc, #80]	; (800dacc <tcp_listen_closed+0x60>)
 800da7c:	f240 1211 	movw	r2, #273	; 0x111
 800da80:	4913      	ldr	r1, [pc, #76]	; (800dad0 <tcp_listen_closed+0x64>)
 800da82:	4814      	ldr	r0, [pc, #80]	; (800dad4 <tcp_listen_closed+0x68>)
 800da84:	f00b fbf0 	bl	8019268 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	7d1b      	ldrb	r3, [r3, #20]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d006      	beq.n	800da9e <tcp_listen_closed+0x32>
 800da90:	4b0e      	ldr	r3, [pc, #56]	; (800dacc <tcp_listen_closed+0x60>)
 800da92:	f44f 7289 	mov.w	r2, #274	; 0x112
 800da96:	4910      	ldr	r1, [pc, #64]	; (800dad8 <tcp_listen_closed+0x6c>)
 800da98:	480e      	ldr	r0, [pc, #56]	; (800dad4 <tcp_listen_closed+0x68>)
 800da9a:	f00b fbe5 	bl	8019268 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800da9e:	2301      	movs	r3, #1
 800daa0:	60fb      	str	r3, [r7, #12]
 800daa2:	e00b      	b.n	800dabc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800daa4:	4a0d      	ldr	r2, [pc, #52]	; (800dadc <tcp_listen_closed+0x70>)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	6879      	ldr	r1, [r7, #4]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7ff ffb1 	bl	800da18 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	3301      	adds	r3, #1
 800daba:	60fb      	str	r3, [r7, #12]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	d9f0      	bls.n	800daa4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dac2:	bf00      	nop
 800dac4:	bf00      	nop
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	0801bfe0 	.word	0x0801bfe0
 800dad0:	0801c090 	.word	0x0801c090
 800dad4:	0801c024 	.word	0x0801c024
 800dad8:	0801c09c 	.word	0x0801c09c
 800dadc:	080284dc 	.word	0x080284dc

0800dae0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dae0:	b5b0      	push	{r4, r5, r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af04      	add	r7, sp, #16
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d106      	bne.n	800db00 <tcp_close_shutdown+0x20>
 800daf2:	4b63      	ldr	r3, [pc, #396]	; (800dc80 <tcp_close_shutdown+0x1a0>)
 800daf4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800daf8:	4962      	ldr	r1, [pc, #392]	; (800dc84 <tcp_close_shutdown+0x1a4>)
 800dafa:	4863      	ldr	r0, [pc, #396]	; (800dc88 <tcp_close_shutdown+0x1a8>)
 800dafc:	f00b fbb4 	bl	8019268 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800db00:	78fb      	ldrb	r3, [r7, #3]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d066      	beq.n	800dbd4 <tcp_close_shutdown+0xf4>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	7d1b      	ldrb	r3, [r3, #20]
 800db0a:	2b04      	cmp	r3, #4
 800db0c:	d003      	beq.n	800db16 <tcp_close_shutdown+0x36>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	7d1b      	ldrb	r3, [r3, #20]
 800db12:	2b07      	cmp	r3, #7
 800db14:	d15e      	bne.n	800dbd4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d104      	bne.n	800db28 <tcp_close_shutdown+0x48>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db22:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db26:	d055      	beq.n	800dbd4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	8b5b      	ldrh	r3, [r3, #26]
 800db2c:	f003 0310 	and.w	r3, r3, #16
 800db30:	2b00      	cmp	r3, #0
 800db32:	d106      	bne.n	800db42 <tcp_close_shutdown+0x62>
 800db34:	4b52      	ldr	r3, [pc, #328]	; (800dc80 <tcp_close_shutdown+0x1a0>)
 800db36:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800db3a:	4954      	ldr	r1, [pc, #336]	; (800dc8c <tcp_close_shutdown+0x1ac>)
 800db3c:	4852      	ldr	r0, [pc, #328]	; (800dc88 <tcp_close_shutdown+0x1a8>)
 800db3e:	f00b fb93 	bl	8019268 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800db4a:	687d      	ldr	r5, [r7, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	3304      	adds	r3, #4
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	8ad2      	ldrh	r2, [r2, #22]
 800db54:	6879      	ldr	r1, [r7, #4]
 800db56:	8b09      	ldrh	r1, [r1, #24]
 800db58:	9102      	str	r1, [sp, #8]
 800db5a:	9201      	str	r2, [sp, #4]
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	462b      	mov	r3, r5
 800db60:	4622      	mov	r2, r4
 800db62:	4601      	mov	r1, r0
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f005 ff03 	bl	8013970 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f001 fce0 	bl	800f530 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800db70:	4b47      	ldr	r3, [pc, #284]	; (800dc90 <tcp_close_shutdown+0x1b0>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	429a      	cmp	r2, r3
 800db78:	d105      	bne.n	800db86 <tcp_close_shutdown+0xa6>
 800db7a:	4b45      	ldr	r3, [pc, #276]	; (800dc90 <tcp_close_shutdown+0x1b0>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	4a43      	ldr	r2, [pc, #268]	; (800dc90 <tcp_close_shutdown+0x1b0>)
 800db82:	6013      	str	r3, [r2, #0]
 800db84:	e013      	b.n	800dbae <tcp_close_shutdown+0xce>
 800db86:	4b42      	ldr	r3, [pc, #264]	; (800dc90 <tcp_close_shutdown+0x1b0>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	e00c      	b.n	800dba8 <tcp_close_shutdown+0xc8>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	429a      	cmp	r2, r3
 800db96:	d104      	bne.n	800dba2 <tcp_close_shutdown+0xc2>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68da      	ldr	r2, [r3, #12]
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	60da      	str	r2, [r3, #12]
 800dba0:	e005      	b.n	800dbae <tcp_close_shutdown+0xce>
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1ef      	bne.n	800db8e <tcp_close_shutdown+0xae>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	60da      	str	r2, [r3, #12]
 800dbb4:	4b37      	ldr	r3, [pc, #220]	; (800dc94 <tcp_close_shutdown+0x1b4>)
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dbba:	4b37      	ldr	r3, [pc, #220]	; (800dc98 <tcp_close_shutdown+0x1b8>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d102      	bne.n	800dbca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dbc4:	f004 f978 	bl	8011eb8 <tcp_trigger_input_pcb_close>
 800dbc8:	e002      	b.n	800dbd0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff fed6 	bl	800d97c <tcp_free>
      }
      return ERR_OK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e050      	b.n	800dc76 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	7d1b      	ldrb	r3, [r3, #20]
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d03b      	beq.n	800dc54 <tcp_close_shutdown+0x174>
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	dc44      	bgt.n	800dc6a <tcp_close_shutdown+0x18a>
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <tcp_close_shutdown+0x10a>
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d02a      	beq.n	800dc3e <tcp_close_shutdown+0x15e>
 800dbe8:	e03f      	b.n	800dc6a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	8adb      	ldrh	r3, [r3, #22]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d021      	beq.n	800dc36 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dbf2:	4b2a      	ldr	r3, [pc, #168]	; (800dc9c <tcp_close_shutdown+0x1bc>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d105      	bne.n	800dc08 <tcp_close_shutdown+0x128>
 800dbfc:	4b27      	ldr	r3, [pc, #156]	; (800dc9c <tcp_close_shutdown+0x1bc>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	4a26      	ldr	r2, [pc, #152]	; (800dc9c <tcp_close_shutdown+0x1bc>)
 800dc04:	6013      	str	r3, [r2, #0]
 800dc06:	e013      	b.n	800dc30 <tcp_close_shutdown+0x150>
 800dc08:	4b24      	ldr	r3, [pc, #144]	; (800dc9c <tcp_close_shutdown+0x1bc>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	60bb      	str	r3, [r7, #8]
 800dc0e:	e00c      	b.n	800dc2a <tcp_close_shutdown+0x14a>
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d104      	bne.n	800dc24 <tcp_close_shutdown+0x144>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	68da      	ldr	r2, [r3, #12]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	60da      	str	r2, [r3, #12]
 800dc22:	e005      	b.n	800dc30 <tcp_close_shutdown+0x150>
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	60bb      	str	r3, [r7, #8]
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d1ef      	bne.n	800dc10 <tcp_close_shutdown+0x130>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff fea0 	bl	800d97c <tcp_free>
      break;
 800dc3c:	e01a      	b.n	800dc74 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff ff14 	bl	800da6c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	4816      	ldr	r0, [pc, #88]	; (800dca0 <tcp_close_shutdown+0x1c0>)
 800dc48:	f001 fcc2 	bl	800f5d0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7ff feb1 	bl	800d9b4 <tcp_free_listen>
      break;
 800dc52:	e00f      	b.n	800dc74 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc54:	6879      	ldr	r1, [r7, #4]
 800dc56:	480e      	ldr	r0, [pc, #56]	; (800dc90 <tcp_close_shutdown+0x1b0>)
 800dc58:	f001 fcba 	bl	800f5d0 <tcp_pcb_remove>
 800dc5c:	4b0d      	ldr	r3, [pc, #52]	; (800dc94 <tcp_close_shutdown+0x1b4>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff fe8a 	bl	800d97c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dc68:	e004      	b.n	800dc74 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f81a 	bl	800dca4 <tcp_close_shutdown_fin>
 800dc70:	4603      	mov	r3, r0
 800dc72:	e000      	b.n	800dc76 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	0801bfe0 	.word	0x0801bfe0
 800dc84:	0801c0b4 	.word	0x0801c0b4
 800dc88:	0801c024 	.word	0x0801c024
 800dc8c:	0801c0d4 	.word	0x0801c0d4
 800dc90:	20010ed0 	.word	0x20010ed0
 800dc94:	20010ed8 	.word	0x20010ed8
 800dc98:	20010f10 	.word	0x20010f10
 800dc9c:	20010ec8 	.word	0x20010ec8
 800dca0:	20010ecc 	.word	0x20010ecc

0800dca4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d106      	bne.n	800dcc0 <tcp_close_shutdown_fin+0x1c>
 800dcb2:	4b2e      	ldr	r3, [pc, #184]	; (800dd6c <tcp_close_shutdown_fin+0xc8>)
 800dcb4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dcb8:	492d      	ldr	r1, [pc, #180]	; (800dd70 <tcp_close_shutdown_fin+0xcc>)
 800dcba:	482e      	ldr	r0, [pc, #184]	; (800dd74 <tcp_close_shutdown_fin+0xd0>)
 800dcbc:	f00b fad4 	bl	8019268 <iprintf>

  switch (pcb->state) {
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	7d1b      	ldrb	r3, [r3, #20]
 800dcc4:	2b07      	cmp	r3, #7
 800dcc6:	d020      	beq.n	800dd0a <tcp_close_shutdown_fin+0x66>
 800dcc8:	2b07      	cmp	r3, #7
 800dcca:	dc2b      	bgt.n	800dd24 <tcp_close_shutdown_fin+0x80>
 800dccc:	2b03      	cmp	r3, #3
 800dcce:	d002      	beq.n	800dcd6 <tcp_close_shutdown_fin+0x32>
 800dcd0:	2b04      	cmp	r3, #4
 800dcd2:	d00d      	beq.n	800dcf0 <tcp_close_shutdown_fin+0x4c>
 800dcd4:	e026      	b.n	800dd24 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f004 ff58 	bl	8012b8c <tcp_send_fin>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d11f      	bne.n	800dd28 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2205      	movs	r2, #5
 800dcec:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dcee:	e01b      	b.n	800dd28 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f004 ff4b 	bl	8012b8c <tcp_send_fin>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dcfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d114      	bne.n	800dd2c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2205      	movs	r2, #5
 800dd06:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd08:	e010      	b.n	800dd2c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f004 ff3e 	bl	8012b8c <tcp_send_fin>
 800dd10:	4603      	mov	r3, r0
 800dd12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d109      	bne.n	800dd30 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2209      	movs	r2, #9
 800dd20:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd22:	e005      	b.n	800dd30 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	e01c      	b.n	800dd62 <tcp_close_shutdown_fin+0xbe>
      break;
 800dd28:	bf00      	nop
 800dd2a:	e002      	b.n	800dd32 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd2c:	bf00      	nop
 800dd2e:	e000      	b.n	800dd32 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd30:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dd32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d103      	bne.n	800dd42 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f005 f864 	bl	8012e08 <tcp_output>
 800dd40:	e00d      	b.n	800dd5e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dd42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4a:	d108      	bne.n	800dd5e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	8b5b      	ldrh	r3, [r3, #26]
 800dd50:	f043 0308 	orr.w	r3, r3, #8
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	e001      	b.n	800dd62 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dd5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	0801bfe0 	.word	0x0801bfe0
 800dd70:	0801c090 	.word	0x0801c090
 800dd74:	0801c024 	.word	0x0801c024

0800dd78 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d109      	bne.n	800dd9a <tcp_close+0x22>
 800dd86:	4b0f      	ldr	r3, [pc, #60]	; (800ddc4 <tcp_close+0x4c>)
 800dd88:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dd8c:	490e      	ldr	r1, [pc, #56]	; (800ddc8 <tcp_close+0x50>)
 800dd8e:	480f      	ldr	r0, [pc, #60]	; (800ddcc <tcp_close+0x54>)
 800dd90:	f00b fa6a 	bl	8019268 <iprintf>
 800dd94:	f06f 030f 	mvn.w	r3, #15
 800dd98:	e00f      	b.n	800ddba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	7d1b      	ldrb	r3, [r3, #20]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d006      	beq.n	800ddb0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	8b5b      	ldrh	r3, [r3, #26]
 800dda6:	f043 0310 	orr.w	r3, r3, #16
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7ff fe94 	bl	800dae0 <tcp_close_shutdown>
 800ddb8:	4603      	mov	r3, r0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	0801bfe0 	.word	0x0801bfe0
 800ddc8:	0801c0f0 	.word	0x0801c0f0
 800ddcc:	0801c024 	.word	0x0801c024

0800ddd0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d109      	bne.n	800ddf6 <tcp_shutdown+0x26>
 800dde2:	4b26      	ldr	r3, [pc, #152]	; (800de7c <tcp_shutdown+0xac>)
 800dde4:	f240 2207 	movw	r2, #519	; 0x207
 800dde8:	4925      	ldr	r1, [pc, #148]	; (800de80 <tcp_shutdown+0xb0>)
 800ddea:	4826      	ldr	r0, [pc, #152]	; (800de84 <tcp_shutdown+0xb4>)
 800ddec:	f00b fa3c 	bl	8019268 <iprintf>
 800ddf0:	f06f 030f 	mvn.w	r3, #15
 800ddf4:	e03d      	b.n	800de72 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	7d1b      	ldrb	r3, [r3, #20]
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d102      	bne.n	800de04 <tcp_shutdown+0x34>
    return ERR_CONN;
 800ddfe:	f06f 030a 	mvn.w	r3, #10
 800de02:	e036      	b.n	800de72 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d01b      	beq.n	800de42 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	8b5b      	ldrh	r3, [r3, #26]
 800de0e:	f043 0310 	orr.w	r3, r3, #16
 800de12:	b29a      	uxth	r2, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d005      	beq.n	800de2a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800de1e:	2101      	movs	r1, #1
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f7ff fe5d 	bl	800dae0 <tcp_close_shutdown>
 800de26:	4603      	mov	r3, r0
 800de28:	e023      	b.n	800de72 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d007      	beq.n	800de42 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de36:	4618      	mov	r0, r3
 800de38:	f7ff fae4 	bl	800d404 <pbuf_free>
      pcb->refused_data = NULL;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2200      	movs	r2, #0
 800de40:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d013      	beq.n	800de70 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	7d1b      	ldrb	r3, [r3, #20]
 800de4c:	2b04      	cmp	r3, #4
 800de4e:	dc02      	bgt.n	800de56 <tcp_shutdown+0x86>
 800de50:	2b03      	cmp	r3, #3
 800de52:	da02      	bge.n	800de5a <tcp_shutdown+0x8a>
 800de54:	e009      	b.n	800de6a <tcp_shutdown+0x9a>
 800de56:	2b07      	cmp	r3, #7
 800de58:	d107      	bne.n	800de6a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	4619      	mov	r1, r3
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f7ff fe3d 	bl	800dae0 <tcp_close_shutdown>
 800de66:	4603      	mov	r3, r0
 800de68:	e003      	b.n	800de72 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800de6a:	f06f 030a 	mvn.w	r3, #10
 800de6e:	e000      	b.n	800de72 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	0801bfe0 	.word	0x0801bfe0
 800de80:	0801c108 	.word	0x0801c108
 800de84:	0801c024 	.word	0x0801c024

0800de88 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08e      	sub	sp, #56	; 0x38
 800de8c:	af04      	add	r7, sp, #16
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d107      	bne.n	800dea8 <tcp_abandon+0x20>
 800de98:	4b52      	ldr	r3, [pc, #328]	; (800dfe4 <tcp_abandon+0x15c>)
 800de9a:	f240 223d 	movw	r2, #573	; 0x23d
 800de9e:	4952      	ldr	r1, [pc, #328]	; (800dfe8 <tcp_abandon+0x160>)
 800dea0:	4852      	ldr	r0, [pc, #328]	; (800dfec <tcp_abandon+0x164>)
 800dea2:	f00b f9e1 	bl	8019268 <iprintf>
 800dea6:	e099      	b.n	800dfdc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7d1b      	ldrb	r3, [r3, #20]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d106      	bne.n	800debe <tcp_abandon+0x36>
 800deb0:	4b4c      	ldr	r3, [pc, #304]	; (800dfe4 <tcp_abandon+0x15c>)
 800deb2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800deb6:	494e      	ldr	r1, [pc, #312]	; (800dff0 <tcp_abandon+0x168>)
 800deb8:	484c      	ldr	r0, [pc, #304]	; (800dfec <tcp_abandon+0x164>)
 800deba:	f00b f9d5 	bl	8019268 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	2b0a      	cmp	r3, #10
 800dec4:	d107      	bne.n	800ded6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dec6:	6879      	ldr	r1, [r7, #4]
 800dec8:	484a      	ldr	r0, [pc, #296]	; (800dff4 <tcp_abandon+0x16c>)
 800deca:	f001 fb81 	bl	800f5d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7ff fd54 	bl	800d97c <tcp_free>
 800ded4:	e082      	b.n	800dfdc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ded6:	2300      	movs	r3, #0
 800ded8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800deda:	2300      	movs	r3, #0
 800dedc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dee2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	7d1b      	ldrb	r3, [r3, #20]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d126      	bne.n	800df4e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	8adb      	ldrh	r3, [r3, #22]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d02e      	beq.n	800df66 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800df08:	4b3b      	ldr	r3, [pc, #236]	; (800dff8 <tcp_abandon+0x170>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d105      	bne.n	800df1e <tcp_abandon+0x96>
 800df12:	4b39      	ldr	r3, [pc, #228]	; (800dff8 <tcp_abandon+0x170>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	4a37      	ldr	r2, [pc, #220]	; (800dff8 <tcp_abandon+0x170>)
 800df1a:	6013      	str	r3, [r2, #0]
 800df1c:	e013      	b.n	800df46 <tcp_abandon+0xbe>
 800df1e:	4b36      	ldr	r3, [pc, #216]	; (800dff8 <tcp_abandon+0x170>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	61fb      	str	r3, [r7, #28]
 800df24:	e00c      	b.n	800df40 <tcp_abandon+0xb8>
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d104      	bne.n	800df3a <tcp_abandon+0xb2>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	68da      	ldr	r2, [r3, #12]
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	60da      	str	r2, [r3, #12]
 800df38:	e005      	b.n	800df46 <tcp_abandon+0xbe>
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	61fb      	str	r3, [r7, #28]
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1ef      	bne.n	800df26 <tcp_abandon+0x9e>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	60da      	str	r2, [r3, #12]
 800df4c:	e00b      	b.n	800df66 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	8adb      	ldrh	r3, [r3, #22]
 800df56:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800df58:	6879      	ldr	r1, [r7, #4]
 800df5a:	4828      	ldr	r0, [pc, #160]	; (800dffc <tcp_abandon+0x174>)
 800df5c:	f001 fb38 	bl	800f5d0 <tcp_pcb_remove>
 800df60:	4b27      	ldr	r3, [pc, #156]	; (800e000 <tcp_abandon+0x178>)
 800df62:	2201      	movs	r2, #1
 800df64:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d004      	beq.n	800df78 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df72:	4618      	mov	r0, r3
 800df74:	f000 ffee 	bl	800ef54 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d004      	beq.n	800df8a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df84:	4618      	mov	r0, r3
 800df86:	f000 ffe5 	bl	800ef54 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d004      	beq.n	800df9c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df96:	4618      	mov	r0, r3
 800df98:	f000 ffdc 	bl	800ef54 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00e      	beq.n	800dfc0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dfa2:	6879      	ldr	r1, [r7, #4]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	8b12      	ldrh	r2, [r2, #24]
 800dfac:	9202      	str	r2, [sp, #8]
 800dfae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dfb0:	9201      	str	r2, [sp, #4]
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	69b9      	ldr	r1, [r7, #24]
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f005 fcd8 	bl	8013970 <tcp_rst>
    }
    last_state = pcb->state;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	7d1b      	ldrb	r3, [r3, #20]
 800dfc4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff fcd8 	bl	800d97c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d004      	beq.n	800dfdc <tcp_abandon+0x154>
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	f06f 010c 	mvn.w	r1, #12
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	4798      	blx	r3
  }
}
 800dfdc:	3728      	adds	r7, #40	; 0x28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	0801bfe0 	.word	0x0801bfe0
 800dfe8:	0801c124 	.word	0x0801c124
 800dfec:	0801c024 	.word	0x0801c024
 800dff0:	0801c140 	.word	0x0801c140
 800dff4:	20010ed4 	.word	0x20010ed4
 800dff8:	20010ec8 	.word	0x20010ec8
 800dffc:	20010ed0 	.word	0x20010ed0
 800e000:	20010ed8 	.word	0x20010ed8

0800e004 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e00c:	2101      	movs	r1, #1
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff ff3a 	bl	800de88 <tcp_abandon>
}
 800e014:	bf00      	nop
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b088      	sub	sp, #32
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	4613      	mov	r3, r2
 800e028:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e02a:	2304      	movs	r3, #4
 800e02c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d101      	bne.n	800e038 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e034:	4b3e      	ldr	r3, [pc, #248]	; (800e130 <tcp_bind+0x114>)
 800e036:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d109      	bne.n	800e052 <tcp_bind+0x36>
 800e03e:	4b3d      	ldr	r3, [pc, #244]	; (800e134 <tcp_bind+0x118>)
 800e040:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e044:	493c      	ldr	r1, [pc, #240]	; (800e138 <tcp_bind+0x11c>)
 800e046:	483d      	ldr	r0, [pc, #244]	; (800e13c <tcp_bind+0x120>)
 800e048:	f00b f90e 	bl	8019268 <iprintf>
 800e04c:	f06f 030f 	mvn.w	r3, #15
 800e050:	e06a      	b.n	800e128 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	7d1b      	ldrb	r3, [r3, #20]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d009      	beq.n	800e06e <tcp_bind+0x52>
 800e05a:	4b36      	ldr	r3, [pc, #216]	; (800e134 <tcp_bind+0x118>)
 800e05c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e060:	4937      	ldr	r1, [pc, #220]	; (800e140 <tcp_bind+0x124>)
 800e062:	4836      	ldr	r0, [pc, #216]	; (800e13c <tcp_bind+0x120>)
 800e064:	f00b f900 	bl	8019268 <iprintf>
 800e068:	f06f 0305 	mvn.w	r3, #5
 800e06c:	e05c      	b.n	800e128 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e06e:	88fb      	ldrh	r3, [r7, #6]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d109      	bne.n	800e088 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e074:	f000 f9f0 	bl	800e458 <tcp_new_port>
 800e078:	4603      	mov	r3, r0
 800e07a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e07c:	88fb      	ldrh	r3, [r7, #6]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d135      	bne.n	800e0ee <tcp_bind+0xd2>
      return ERR_BUF;
 800e082:	f06f 0301 	mvn.w	r3, #1
 800e086:	e04f      	b.n	800e128 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e088:	2300      	movs	r3, #0
 800e08a:	61fb      	str	r3, [r7, #28]
 800e08c:	e02b      	b.n	800e0e6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e08e:	4a2d      	ldr	r2, [pc, #180]	; (800e144 <tcp_bind+0x128>)
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	61bb      	str	r3, [r7, #24]
 800e09a:	e01e      	b.n	800e0da <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	8adb      	ldrh	r3, [r3, #22]
 800e0a0:	88fa      	ldrh	r2, [r7, #6]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d116      	bne.n	800e0d4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e0a6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d010      	beq.n	800e0ce <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00c      	beq.n	800e0ce <tcp_bind+0xb2>
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d009      	beq.n	800e0ce <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d005      	beq.n	800e0ce <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d102      	bne.n	800e0d4 <tcp_bind+0xb8>
              return ERR_USE;
 800e0ce:	f06f 0307 	mvn.w	r3, #7
 800e0d2:	e029      	b.n	800e128 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	61bb      	str	r3, [r7, #24]
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d1dd      	bne.n	800e09c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	61fb      	str	r3, [r7, #28]
 800e0e6:	69fa      	ldr	r2, [r7, #28]
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	dbcf      	blt.n	800e08e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00c      	beq.n	800e10e <tcp_bind+0xf2>
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d008      	beq.n	800e10e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <tcp_bind+0xec>
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	e000      	b.n	800e10a <tcp_bind+0xee>
 800e108:	2300      	movs	r3, #0
 800e10a:	68fa      	ldr	r2, [r7, #12]
 800e10c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	88fa      	ldrh	r2, [r7, #6]
 800e112:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e114:	4b0c      	ldr	r3, [pc, #48]	; (800e148 <tcp_bind+0x12c>)
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	60da      	str	r2, [r3, #12]
 800e11c:	4a0a      	ldr	r2, [pc, #40]	; (800e148 <tcp_bind+0x12c>)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6013      	str	r3, [r2, #0]
 800e122:	f005 fde7 	bl	8013cf4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3720      	adds	r7, #32
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	08028514 	.word	0x08028514
 800e134:	0801bfe0 	.word	0x0801bfe0
 800e138:	0801c174 	.word	0x0801c174
 800e13c:	0801c024 	.word	0x0801c024
 800e140:	0801c18c 	.word	0x0801c18c
 800e144:	080284dc 	.word	0x080284dc
 800e148:	20010ec8 	.word	0x20010ec8

0800e14c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	4613      	mov	r3, r2
 800e158:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d106      	bne.n	800e16e <tcp_accept_null+0x22>
 800e160:	4b07      	ldr	r3, [pc, #28]	; (800e180 <tcp_accept_null+0x34>)
 800e162:	f240 320f 	movw	r2, #783	; 0x30f
 800e166:	4907      	ldr	r1, [pc, #28]	; (800e184 <tcp_accept_null+0x38>)
 800e168:	4807      	ldr	r0, [pc, #28]	; (800e188 <tcp_accept_null+0x3c>)
 800e16a:	f00b f87d 	bl	8019268 <iprintf>

  tcp_abort(pcb);
 800e16e:	68b8      	ldr	r0, [r7, #8]
 800e170:	f7ff ff48 	bl	800e004 <tcp_abort>

  return ERR_ABRT;
 800e174:	f06f 030c 	mvn.w	r3, #12
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	0801bfe0 	.word	0x0801bfe0
 800e184:	0801c1b4 	.word	0x0801c1b4
 800e188:	0801c024 	.word	0x0801c024

0800e18c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e198:	78fb      	ldrb	r3, [r7, #3]
 800e19a:	2200      	movs	r2, #0
 800e19c:	4619      	mov	r1, r3
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 f806 	bl	800e1b0 <tcp_listen_with_backlog_and_err>
 800e1a4:	4603      	mov	r3, r0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
	...

0800e1b0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b088      	sub	sp, #32
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	607a      	str	r2, [r7, #4]
 800e1bc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d109      	bne.n	800e1dc <tcp_listen_with_backlog_and_err+0x2c>
 800e1c8:	4b47      	ldr	r3, [pc, #284]	; (800e2e8 <tcp_listen_with_backlog_and_err+0x138>)
 800e1ca:	f240 3259 	movw	r2, #857	; 0x359
 800e1ce:	4947      	ldr	r1, [pc, #284]	; (800e2ec <tcp_listen_with_backlog_and_err+0x13c>)
 800e1d0:	4847      	ldr	r0, [pc, #284]	; (800e2f0 <tcp_listen_with_backlog_and_err+0x140>)
 800e1d2:	f00b f849 	bl	8019268 <iprintf>
 800e1d6:	23f0      	movs	r3, #240	; 0xf0
 800e1d8:	76fb      	strb	r3, [r7, #27]
 800e1da:	e079      	b.n	800e2d0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	7d1b      	ldrb	r3, [r3, #20]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d009      	beq.n	800e1f8 <tcp_listen_with_backlog_and_err+0x48>
 800e1e4:	4b40      	ldr	r3, [pc, #256]	; (800e2e8 <tcp_listen_with_backlog_and_err+0x138>)
 800e1e6:	f240 325a 	movw	r2, #858	; 0x35a
 800e1ea:	4942      	ldr	r1, [pc, #264]	; (800e2f4 <tcp_listen_with_backlog_and_err+0x144>)
 800e1ec:	4840      	ldr	r0, [pc, #256]	; (800e2f0 <tcp_listen_with_backlog_and_err+0x140>)
 800e1ee:	f00b f83b 	bl	8019268 <iprintf>
 800e1f2:	23f1      	movs	r3, #241	; 0xf1
 800e1f4:	76fb      	strb	r3, [r7, #27]
 800e1f6:	e06b      	b.n	800e2d0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	7d1b      	ldrb	r3, [r3, #20]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d104      	bne.n	800e20a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e204:	23f7      	movs	r3, #247	; 0xf7
 800e206:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e208:	e062      	b.n	800e2d0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e20a:	2002      	movs	r0, #2
 800e20c:	f7fe f9d4 	bl	800c5b8 <memp_malloc>
 800e210:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d102      	bne.n	800e21e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e218:	23ff      	movs	r3, #255	; 0xff
 800e21a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e21c:	e058      	b.n	800e2d0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	691a      	ldr	r2, [r3, #16]
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	8ada      	ldrh	r2, [r3, #22]
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	2201      	movs	r2, #1
 800e232:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	7d5a      	ldrb	r2, [r3, #21]
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	7a5a      	ldrb	r2, [r3, #9]
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	2200      	movs	r2, #0
 800e248:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	7ada      	ldrb	r2, [r3, #11]
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	7a9a      	ldrb	r2, [r3, #10]
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	8adb      	ldrh	r3, [r3, #22]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d021      	beq.n	800e2ae <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e26a:	4b23      	ldr	r3, [pc, #140]	; (800e2f8 <tcp_listen_with_backlog_and_err+0x148>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	429a      	cmp	r2, r3
 800e272:	d105      	bne.n	800e280 <tcp_listen_with_backlog_and_err+0xd0>
 800e274:	4b20      	ldr	r3, [pc, #128]	; (800e2f8 <tcp_listen_with_backlog_and_err+0x148>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	68db      	ldr	r3, [r3, #12]
 800e27a:	4a1f      	ldr	r2, [pc, #124]	; (800e2f8 <tcp_listen_with_backlog_and_err+0x148>)
 800e27c:	6013      	str	r3, [r2, #0]
 800e27e:	e013      	b.n	800e2a8 <tcp_listen_with_backlog_and_err+0xf8>
 800e280:	4b1d      	ldr	r3, [pc, #116]	; (800e2f8 <tcp_listen_with_backlog_and_err+0x148>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	617b      	str	r3, [r7, #20]
 800e286:	e00c      	b.n	800e2a2 <tcp_listen_with_backlog_and_err+0xf2>
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d104      	bne.n	800e29c <tcp_listen_with_backlog_and_err+0xec>
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	68da      	ldr	r2, [r3, #12]
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	60da      	str	r2, [r3, #12]
 800e29a:	e005      	b.n	800e2a8 <tcp_listen_with_backlog_and_err+0xf8>
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	617b      	str	r3, [r7, #20]
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1ef      	bne.n	800e288 <tcp_listen_with_backlog_and_err+0xd8>
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f7ff fb64 	bl	800d97c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	4a11      	ldr	r2, [pc, #68]	; (800e2fc <tcp_listen_with_backlog_and_err+0x14c>)
 800e2b8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e2ba:	4b11      	ldr	r3, [pc, #68]	; (800e300 <tcp_listen_with_backlog_and_err+0x150>)
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	60da      	str	r2, [r3, #12]
 800e2c2:	4a0f      	ldr	r2, [pc, #60]	; (800e300 <tcp_listen_with_backlog_and_err+0x150>)
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	6013      	str	r3, [r2, #0]
 800e2c8:	f005 fd14 	bl	8013cf4 <tcp_timer_needed>
  res = ERR_OK;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	7efa      	ldrb	r2, [r7, #27]
 800e2da:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e2dc:	69fb      	ldr	r3, [r7, #28]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3720      	adds	r7, #32
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	0801bfe0 	.word	0x0801bfe0
 800e2ec:	0801c1d4 	.word	0x0801c1d4
 800e2f0:	0801c024 	.word	0x0801c024
 800e2f4:	0801c204 	.word	0x0801c204
 800e2f8:	20010ec8 	.word	0x20010ec8
 800e2fc:	0800e14d 	.word	0x0800e14d
 800e300:	20010ecc 	.word	0x20010ecc

0800e304 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d106      	bne.n	800e320 <tcp_update_rcv_ann_wnd+0x1c>
 800e312:	4b25      	ldr	r3, [pc, #148]	; (800e3a8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e314:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e318:	4924      	ldr	r1, [pc, #144]	; (800e3ac <tcp_update_rcv_ann_wnd+0xa8>)
 800e31a:	4825      	ldr	r0, [pc, #148]	; (800e3b0 <tcp_update_rcv_ann_wnd+0xac>)
 800e31c:	f00a ffa4 	bl	8019268 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e328:	4413      	add	r3, r2
 800e32a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e334:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e338:	bf28      	it	cs
 800e33a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e33e:	b292      	uxth	r2, r2
 800e340:	4413      	add	r3, r2
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	2b00      	cmp	r3, #0
 800e348:	db08      	blt.n	800e35c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	e020      	b.n	800e39e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e364:	1ad3      	subs	r3, r2, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	dd03      	ble.n	800e372 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e370:	e014      	b.n	800e39c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37a:	1ad3      	subs	r3, r2, r3
 800e37c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e384:	d306      	bcc.n	800e394 <tcp_update_rcv_ann_wnd+0x90>
 800e386:	4b08      	ldr	r3, [pc, #32]	; (800e3a8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e388:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e38c:	4909      	ldr	r1, [pc, #36]	; (800e3b4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e38e:	4808      	ldr	r0, [pc, #32]	; (800e3b0 <tcp_update_rcv_ann_wnd+0xac>)
 800e390:	f00a ff6a 	bl	8019268 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	b29a      	uxth	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e39c:	2300      	movs	r3, #0
  }
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	0801bfe0 	.word	0x0801bfe0
 800e3ac:	0801c23c 	.word	0x0801c23c
 800e3b0:	0801c024 	.word	0x0801c024
 800e3b4:	0801c260 	.word	0x0801c260

0800e3b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d107      	bne.n	800e3da <tcp_recved+0x22>
 800e3ca:	4b1f      	ldr	r3, [pc, #124]	; (800e448 <tcp_recved+0x90>)
 800e3cc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e3d0:	491e      	ldr	r1, [pc, #120]	; (800e44c <tcp_recved+0x94>)
 800e3d2:	481f      	ldr	r0, [pc, #124]	; (800e450 <tcp_recved+0x98>)
 800e3d4:	f00a ff48 	bl	8019268 <iprintf>
 800e3d8:	e032      	b.n	800e440 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	7d1b      	ldrb	r3, [r3, #20]
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d106      	bne.n	800e3f0 <tcp_recved+0x38>
 800e3e2:	4b19      	ldr	r3, [pc, #100]	; (800e448 <tcp_recved+0x90>)
 800e3e4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e3e8:	491a      	ldr	r1, [pc, #104]	; (800e454 <tcp_recved+0x9c>)
 800e3ea:	4819      	ldr	r0, [pc, #100]	; (800e450 <tcp_recved+0x98>)
 800e3ec:	f00a ff3c 	bl	8019268 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3f4:	887b      	ldrh	r3, [r7, #2]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e3fa:	89fb      	ldrh	r3, [r7, #14]
 800e3fc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e400:	d804      	bhi.n	800e40c <tcp_recved+0x54>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e406:	89fa      	ldrh	r2, [r7, #14]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d204      	bcs.n	800e416 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e412:	851a      	strh	r2, [r3, #40]	; 0x28
 800e414:	e002      	b.n	800e41c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	89fa      	ldrh	r2, [r7, #14]
 800e41a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f7ff ff71 	bl	800e304 <tcp_update_rcv_ann_wnd>
 800e422:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e42a:	d309      	bcc.n	800e440 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	8b5b      	ldrh	r3, [r3, #26]
 800e430:	f043 0302 	orr.w	r3, r3, #2
 800e434:	b29a      	uxth	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f004 fce4 	bl	8012e08 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	0801bfe0 	.word	0x0801bfe0
 800e44c:	0801c27c 	.word	0x0801c27c
 800e450:	0801c024 	.word	0x0801c024
 800e454:	0801c294 	.word	0x0801c294

0800e458 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e462:	4b1e      	ldr	r3, [pc, #120]	; (800e4dc <tcp_new_port+0x84>)
 800e464:	881b      	ldrh	r3, [r3, #0]
 800e466:	3301      	adds	r3, #1
 800e468:	b29a      	uxth	r2, r3
 800e46a:	4b1c      	ldr	r3, [pc, #112]	; (800e4dc <tcp_new_port+0x84>)
 800e46c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e46e:	4b1b      	ldr	r3, [pc, #108]	; (800e4dc <tcp_new_port+0x84>)
 800e470:	881b      	ldrh	r3, [r3, #0]
 800e472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e476:	4293      	cmp	r3, r2
 800e478:	d103      	bne.n	800e482 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e47a:	4b18      	ldr	r3, [pc, #96]	; (800e4dc <tcp_new_port+0x84>)
 800e47c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e480:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e482:	2300      	movs	r3, #0
 800e484:	71fb      	strb	r3, [r7, #7]
 800e486:	e01e      	b.n	800e4c6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e488:	79fb      	ldrb	r3, [r7, #7]
 800e48a:	4a15      	ldr	r2, [pc, #84]	; (800e4e0 <tcp_new_port+0x88>)
 800e48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	603b      	str	r3, [r7, #0]
 800e494:	e011      	b.n	800e4ba <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	8ada      	ldrh	r2, [r3, #22]
 800e49a:	4b10      	ldr	r3, [pc, #64]	; (800e4dc <tcp_new_port+0x84>)
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d108      	bne.n	800e4b4 <tcp_new_port+0x5c>
        n++;
 800e4a2:	88bb      	ldrh	r3, [r7, #4]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e4a8:	88bb      	ldrh	r3, [r7, #4]
 800e4aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4ae:	d3d8      	bcc.n	800e462 <tcp_new_port+0xa>
          return 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	e00d      	b.n	800e4d0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	603b      	str	r3, [r7, #0]
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1ea      	bne.n	800e496 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e4c0:	79fb      	ldrb	r3, [r7, #7]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	71fb      	strb	r3, [r7, #7]
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	2b03      	cmp	r3, #3
 800e4ca:	d9dd      	bls.n	800e488 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e4cc:	4b03      	ldr	r3, [pc, #12]	; (800e4dc <tcp_new_port+0x84>)
 800e4ce:	881b      	ldrh	r3, [r3, #0]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr
 800e4dc:	20000024 	.word	0x20000024
 800e4e0:	080284dc 	.word	0x080284dc

0800e4e4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b08a      	sub	sp, #40	; 0x28
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	603b      	str	r3, [r7, #0]
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d109      	bne.n	800e512 <tcp_connect+0x2e>
 800e4fe:	4b7d      	ldr	r3, [pc, #500]	; (800e6f4 <tcp_connect+0x210>)
 800e500:	f240 4235 	movw	r2, #1077	; 0x435
 800e504:	497c      	ldr	r1, [pc, #496]	; (800e6f8 <tcp_connect+0x214>)
 800e506:	487d      	ldr	r0, [pc, #500]	; (800e6fc <tcp_connect+0x218>)
 800e508:	f00a feae 	bl	8019268 <iprintf>
 800e50c:	f06f 030f 	mvn.w	r3, #15
 800e510:	e0ec      	b.n	800e6ec <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d109      	bne.n	800e52c <tcp_connect+0x48>
 800e518:	4b76      	ldr	r3, [pc, #472]	; (800e6f4 <tcp_connect+0x210>)
 800e51a:	f240 4236 	movw	r2, #1078	; 0x436
 800e51e:	4978      	ldr	r1, [pc, #480]	; (800e700 <tcp_connect+0x21c>)
 800e520:	4876      	ldr	r0, [pc, #472]	; (800e6fc <tcp_connect+0x218>)
 800e522:	f00a fea1 	bl	8019268 <iprintf>
 800e526:	f06f 030f 	mvn.w	r3, #15
 800e52a:	e0df      	b.n	800e6ec <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	7d1b      	ldrb	r3, [r3, #20]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d009      	beq.n	800e548 <tcp_connect+0x64>
 800e534:	4b6f      	ldr	r3, [pc, #444]	; (800e6f4 <tcp_connect+0x210>)
 800e536:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e53a:	4972      	ldr	r1, [pc, #456]	; (800e704 <tcp_connect+0x220>)
 800e53c:	486f      	ldr	r0, [pc, #444]	; (800e6fc <tcp_connect+0x218>)
 800e53e:	f00a fe93 	bl	8019268 <iprintf>
 800e542:	f06f 0309 	mvn.w	r3, #9
 800e546:	e0d1      	b.n	800e6ec <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <tcp_connect+0x70>
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	e000      	b.n	800e556 <tcp_connect+0x72>
 800e554:	2300      	movs	r3, #0
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	88fa      	ldrh	r2, [r7, #6]
 800e55e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	7a1b      	ldrb	r3, [r3, #8]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d006      	beq.n	800e576 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	7a1b      	ldrb	r3, [r3, #8]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fe fbbb 	bl	800cce8 <netif_get_by_index>
 800e572:	6278      	str	r0, [r7, #36]	; 0x24
 800e574:	e005      	b.n	800e582 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	3304      	adds	r3, #4
 800e57a:	4618      	mov	r0, r3
 800e57c:	f009 f96c 	bl	8017858 <ip4_route>
 800e580:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e584:	2b00      	cmp	r3, #0
 800e586:	d102      	bne.n	800e58e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e588:	f06f 0303 	mvn.w	r3, #3
 800e58c:	e0ae      	b.n	800e6ec <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d003      	beq.n	800e59c <tcp_connect+0xb8>
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d111      	bne.n	800e5c0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d002      	beq.n	800e5a8 <tcp_connect+0xc4>
 800e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	e000      	b.n	800e5aa <tcp_connect+0xc6>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d102      	bne.n	800e5b8 <tcp_connect+0xd4>
      return ERR_RTE;
 800e5b2:	f06f 0303 	mvn.w	r3, #3
 800e5b6:	e099      	b.n	800e6ec <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	8adb      	ldrh	r3, [r3, #22]
 800e5c4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	8adb      	ldrh	r3, [r3, #22]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10c      	bne.n	800e5e8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e5ce:	f7ff ff43 	bl	800e458 <tcp_new_port>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	8adb      	ldrh	r3, [r3, #22]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d102      	bne.n	800e5e8 <tcp_connect+0x104>
      return ERR_BUF;
 800e5e2:	f06f 0301 	mvn.w	r3, #1
 800e5e6:	e081      	b.n	800e6ec <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e5e8:	68f8      	ldr	r0, [r7, #12]
 800e5ea:	f001 f885 	bl	800f6f8 <tcp_next_iss>
 800e5ee:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	697a      	ldr	r2, [r7, #20]
 800e5fa:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	1e5a      	subs	r2, r3, #1
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	1e5a      	subs	r2, r3, #1
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	1e5a      	subs	r2, r3, #1
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e61a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e632:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e63c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	3304      	adds	r3, #4
 800e646:	461a      	mov	r2, r3
 800e648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e64a:	f001 f87b 	bl	800f744 <tcp_eff_send_mss_netif>
 800e64e:	4603      	mov	r3, r0
 800e650:	461a      	mov	r2, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2201      	movs	r2, #1
 800e65a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	683a      	ldr	r2, [r7, #0]
 800e662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e666:	2102      	movs	r1, #2
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f004 fadf 	bl	8012c2c <tcp_enqueue_flags>
 800e66e:	4603      	mov	r3, r0
 800e670:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e672:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d136      	bne.n	800e6e8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2202      	movs	r2, #2
 800e67e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e680:	8b7b      	ldrh	r3, [r7, #26]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d021      	beq.n	800e6ca <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e686:	4b20      	ldr	r3, [pc, #128]	; (800e708 <tcp_connect+0x224>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d105      	bne.n	800e69c <tcp_connect+0x1b8>
 800e690:	4b1d      	ldr	r3, [pc, #116]	; (800e708 <tcp_connect+0x224>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	4a1c      	ldr	r2, [pc, #112]	; (800e708 <tcp_connect+0x224>)
 800e698:	6013      	str	r3, [r2, #0]
 800e69a:	e013      	b.n	800e6c4 <tcp_connect+0x1e0>
 800e69c:	4b1a      	ldr	r3, [pc, #104]	; (800e708 <tcp_connect+0x224>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	623b      	str	r3, [r7, #32]
 800e6a2:	e00c      	b.n	800e6be <tcp_connect+0x1da>
 800e6a4:	6a3b      	ldr	r3, [r7, #32]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d104      	bne.n	800e6b8 <tcp_connect+0x1d4>
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	68da      	ldr	r2, [r3, #12]
 800e6b2:	6a3b      	ldr	r3, [r7, #32]
 800e6b4:	60da      	str	r2, [r3, #12]
 800e6b6:	e005      	b.n	800e6c4 <tcp_connect+0x1e0>
 800e6b8:	6a3b      	ldr	r3, [r7, #32]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	623b      	str	r3, [r7, #32]
 800e6be:	6a3b      	ldr	r3, [r7, #32]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1ef      	bne.n	800e6a4 <tcp_connect+0x1c0>
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e6ca:	4b10      	ldr	r3, [pc, #64]	; (800e70c <tcp_connect+0x228>)
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	60da      	str	r2, [r3, #12]
 800e6d2:	4a0e      	ldr	r2, [pc, #56]	; (800e70c <tcp_connect+0x228>)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6013      	str	r3, [r2, #0]
 800e6d8:	f005 fb0c 	bl	8013cf4 <tcp_timer_needed>
 800e6dc:	4b0c      	ldr	r3, [pc, #48]	; (800e710 <tcp_connect+0x22c>)
 800e6de:	2201      	movs	r2, #1
 800e6e0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f004 fb90 	bl	8012e08 <tcp_output>
  }
  return ret;
 800e6e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3728      	adds	r7, #40	; 0x28
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	0801bfe0 	.word	0x0801bfe0
 800e6f8:	0801c2bc 	.word	0x0801c2bc
 800e6fc:	0801c024 	.word	0x0801c024
 800e700:	0801c2d8 	.word	0x0801c2d8
 800e704:	0801c2f4 	.word	0x0801c2f4
 800e708:	20010ec8 	.word	0x20010ec8
 800e70c:	20010ed0 	.word	0x20010ed0
 800e710:	20010ed8 	.word	0x20010ed8

0800e714 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e714:	b5b0      	push	{r4, r5, r7, lr}
 800e716:	b090      	sub	sp, #64	; 0x40
 800e718:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e720:	4b94      	ldr	r3, [pc, #592]	; (800e974 <tcp_slowtmr+0x260>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3301      	adds	r3, #1
 800e726:	4a93      	ldr	r2, [pc, #588]	; (800e974 <tcp_slowtmr+0x260>)
 800e728:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e72a:	4b93      	ldr	r3, [pc, #588]	; (800e978 <tcp_slowtmr+0x264>)
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	3301      	adds	r3, #1
 800e730:	b2da      	uxtb	r2, r3
 800e732:	4b91      	ldr	r3, [pc, #580]	; (800e978 <tcp_slowtmr+0x264>)
 800e734:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e736:	2300      	movs	r3, #0
 800e738:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e73a:	4b90      	ldr	r3, [pc, #576]	; (800e97c <tcp_slowtmr+0x268>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e740:	e29f      	b.n	800ec82 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	7d1b      	ldrb	r3, [r3, #20]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d106      	bne.n	800e758 <tcp_slowtmr+0x44>
 800e74a:	4b8d      	ldr	r3, [pc, #564]	; (800e980 <tcp_slowtmr+0x26c>)
 800e74c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e750:	498c      	ldr	r1, [pc, #560]	; (800e984 <tcp_slowtmr+0x270>)
 800e752:	488d      	ldr	r0, [pc, #564]	; (800e988 <tcp_slowtmr+0x274>)
 800e754:	f00a fd88 	bl	8019268 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75a:	7d1b      	ldrb	r3, [r3, #20]
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d106      	bne.n	800e76e <tcp_slowtmr+0x5a>
 800e760:	4b87      	ldr	r3, [pc, #540]	; (800e980 <tcp_slowtmr+0x26c>)
 800e762:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e766:	4989      	ldr	r1, [pc, #548]	; (800e98c <tcp_slowtmr+0x278>)
 800e768:	4887      	ldr	r0, [pc, #540]	; (800e988 <tcp_slowtmr+0x274>)
 800e76a:	f00a fd7d 	bl	8019268 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	7d1b      	ldrb	r3, [r3, #20]
 800e772:	2b0a      	cmp	r3, #10
 800e774:	d106      	bne.n	800e784 <tcp_slowtmr+0x70>
 800e776:	4b82      	ldr	r3, [pc, #520]	; (800e980 <tcp_slowtmr+0x26c>)
 800e778:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e77c:	4984      	ldr	r1, [pc, #528]	; (800e990 <tcp_slowtmr+0x27c>)
 800e77e:	4882      	ldr	r0, [pc, #520]	; (800e988 <tcp_slowtmr+0x274>)
 800e780:	f00a fd72 	bl	8019268 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e786:	7f9a      	ldrb	r2, [r3, #30]
 800e788:	4b7b      	ldr	r3, [pc, #492]	; (800e978 <tcp_slowtmr+0x264>)
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d105      	bne.n	800e79c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e79a:	e272      	b.n	800ec82 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e79c:	4b76      	ldr	r3, [pc, #472]	; (800e978 <tcp_slowtmr+0x264>)
 800e79e:	781a      	ldrb	r2, [r3, #0]
 800e7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	7d1b      	ldrb	r3, [r3, #20]
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d10a      	bne.n	800e7ce <tcp_slowtmr+0xba>
 800e7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7be:	2b05      	cmp	r3, #5
 800e7c0:	d905      	bls.n	800e7ce <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7cc:	e11e      	b.n	800ea0c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7d4:	2b0b      	cmp	r3, #11
 800e7d6:	d905      	bls.n	800e7e4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7dc:	3301      	adds	r3, #1
 800e7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7e2:	e113      	b.n	800ea0c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d075      	beq.n	800e8da <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d006      	beq.n	800e804 <tcp_slowtmr+0xf0>
 800e7f6:	4b62      	ldr	r3, [pc, #392]	; (800e980 <tcp_slowtmr+0x26c>)
 800e7f8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e7fc:	4965      	ldr	r1, [pc, #404]	; (800e994 <tcp_slowtmr+0x280>)
 800e7fe:	4862      	ldr	r0, [pc, #392]	; (800e988 <tcp_slowtmr+0x274>)
 800e800:	f00a fd32 	bl	8019268 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d106      	bne.n	800e81a <tcp_slowtmr+0x106>
 800e80c:	4b5c      	ldr	r3, [pc, #368]	; (800e980 <tcp_slowtmr+0x26c>)
 800e80e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e812:	4961      	ldr	r1, [pc, #388]	; (800e998 <tcp_slowtmr+0x284>)
 800e814:	485c      	ldr	r0, [pc, #368]	; (800e988 <tcp_slowtmr+0x274>)
 800e816:	f00a fd27 	bl	8019268 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e820:	2b0b      	cmp	r3, #11
 800e822:	d905      	bls.n	800e830 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e828:	3301      	adds	r3, #1
 800e82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e82e:	e0ed      	b.n	800ea0c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e832:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e836:	3b01      	subs	r3, #1
 800e838:	4a58      	ldr	r2, [pc, #352]	; (800e99c <tcp_slowtmr+0x288>)
 800e83a:	5cd3      	ldrb	r3, [r2, r3]
 800e83c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e840:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e844:	7c7a      	ldrb	r2, [r7, #17]
 800e846:	429a      	cmp	r2, r3
 800e848:	d907      	bls.n	800e85a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e850:	3301      	adds	r3, #1
 800e852:	b2da      	uxtb	r2, r3
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e860:	7c7a      	ldrb	r2, [r7, #17]
 800e862:	429a      	cmp	r2, r3
 800e864:	f200 80d2 	bhi.w	800ea0c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e868:	2301      	movs	r3, #1
 800e86a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e872:	2b00      	cmp	r3, #0
 800e874:	d108      	bne.n	800e888 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e878:	f005 f96e 	bl	8013b58 <tcp_zero_window_probe>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d014      	beq.n	800e8ac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e882:	2300      	movs	r3, #0
 800e884:	623b      	str	r3, [r7, #32]
 800e886:	e011      	b.n	800e8ac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e88e:	4619      	mov	r1, r3
 800e890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e892:	f004 f833 	bl	80128fc <tcp_split_unsent_seg>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d107      	bne.n	800e8ac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e89e:	f004 fab3 	bl	8012e08 <tcp_output>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d101      	bne.n	800e8ac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e8ac:	6a3b      	ldr	r3, [r7, #32]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f000 80ac 	beq.w	800ea0c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8c2:	2b06      	cmp	r3, #6
 800e8c4:	f200 80a2 	bhi.w	800ea0c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	b2da      	uxtb	r2, r3
 800e8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e8d8:	e098      	b.n	800ea0c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	db0f      	blt.n	800e904 <tcp_slowtmr+0x1f0>
 800e8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d008      	beq.n	800e904 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	b21a      	sxth	r2, r3
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e906:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e910:	429a      	cmp	r2, r3
 800e912:	db7b      	blt.n	800ea0c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e916:	f004 fd6b 	bl	80133f0 <tcp_rexmit_rto_prepare>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d007      	beq.n	800e930 <tcp_slowtmr+0x21c>
 800e920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e924:	2b00      	cmp	r3, #0
 800e926:	d171      	bne.n	800ea0c <tcp_slowtmr+0x2f8>
 800e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d06d      	beq.n	800ea0c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	7d1b      	ldrb	r3, [r3, #20]
 800e934:	2b02      	cmp	r3, #2
 800e936:	d03a      	beq.n	800e9ae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e93e:	2b0c      	cmp	r3, #12
 800e940:	bf28      	it	cs
 800e942:	230c      	movcs	r3, #12
 800e944:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e94c:	10db      	asrs	r3, r3, #3
 800e94e:	b21b      	sxth	r3, r3
 800e950:	461a      	mov	r2, r3
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e958:	4413      	add	r3, r2
 800e95a:	7efa      	ldrb	r2, [r7, #27]
 800e95c:	4910      	ldr	r1, [pc, #64]	; (800e9a0 <tcp_slowtmr+0x28c>)
 800e95e:	5c8a      	ldrb	r2, [r1, r2]
 800e960:	4093      	lsls	r3, r2
 800e962:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e96a:	4293      	cmp	r3, r2
 800e96c:	dc1a      	bgt.n	800e9a4 <tcp_slowtmr+0x290>
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	b21a      	sxth	r2, r3
 800e972:	e019      	b.n	800e9a8 <tcp_slowtmr+0x294>
 800e974:	20010ec4 	.word	0x20010ec4
 800e978:	20010eda 	.word	0x20010eda
 800e97c:	20010ed0 	.word	0x20010ed0
 800e980:	0801bfe0 	.word	0x0801bfe0
 800e984:	0801c324 	.word	0x0801c324
 800e988:	0801c024 	.word	0x0801c024
 800e98c:	0801c350 	.word	0x0801c350
 800e990:	0801c37c 	.word	0x0801c37c
 800e994:	0801c3ac 	.word	0x0801c3ac
 800e998:	0801c3e0 	.word	0x0801c3e0
 800e99c:	080284d4 	.word	0x080284d4
 800e9a0:	080284c4 	.word	0x080284c4
 800e9a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	bf28      	it	cs
 800e9c4:	4613      	movcs	r3, r2
 800e9c6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e9c8:	8a7b      	ldrh	r3, [r7, #18]
 800e9ca:	085b      	lsrs	r3, r3, #1
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9de:	005b      	lsls	r3, r3, #1
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d206      	bcs.n	800e9f4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea00:	2200      	movs	r2, #0
 800ea02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ea06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea08:	f004 fd62 	bl	80134d0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0e:	7d1b      	ldrb	r3, [r3, #20]
 800ea10:	2b06      	cmp	r3, #6
 800ea12:	d111      	bne.n	800ea38 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ea14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea16:	8b5b      	ldrh	r3, [r3, #26]
 800ea18:	f003 0310 	and.w	r3, r3, #16
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00b      	beq.n	800ea38 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea20:	4b9d      	ldr	r3, [pc, #628]	; (800ec98 <tcp_slowtmr+0x584>)
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea26:	6a1b      	ldr	r3, [r3, #32]
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	2b28      	cmp	r3, #40	; 0x28
 800ea2c:	d904      	bls.n	800ea38 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ea2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea32:	3301      	adds	r3, #1
 800ea34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3a:	7a5b      	ldrb	r3, [r3, #9]
 800ea3c:	f003 0308 	and.w	r3, r3, #8
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d04c      	beq.n	800eade <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea46:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea48:	2b04      	cmp	r3, #4
 800ea4a:	d003      	beq.n	800ea54 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ea4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ea50:	2b07      	cmp	r3, #7
 800ea52:	d144      	bne.n	800eade <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea54:	4b90      	ldr	r3, [pc, #576]	; (800ec98 <tcp_slowtmr+0x584>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5a:	6a1b      	ldr	r3, [r3, #32]
 800ea5c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ea5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea64:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ea68:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ea6c:	498b      	ldr	r1, [pc, #556]	; (800ec9c <tcp_slowtmr+0x588>)
 800ea6e:	fba1 1303 	umull	r1, r3, r1, r3
 800ea72:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d90a      	bls.n	800ea8e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ea78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ea82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea86:	3301      	adds	r3, #1
 800ea88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ea8c:	e027      	b.n	800eade <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea8e:	4b82      	ldr	r3, [pc, #520]	; (800ec98 <tcp_slowtmr+0x584>)
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea94:	6a1b      	ldr	r3, [r3, #32]
 800ea96:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ea98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ea9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	4b7e      	ldr	r3, [pc, #504]	; (800eca0 <tcp_slowtmr+0x58c>)
 800eaa8:	fb00 f303 	mul.w	r3, r0, r3
 800eaac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800eaae:	497b      	ldr	r1, [pc, #492]	; (800ec9c <tcp_slowtmr+0x588>)
 800eab0:	fba1 1303 	umull	r1, r3, r1, r3
 800eab4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d911      	bls.n	800eade <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800eaba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eabc:	f005 f80c 	bl	8013ad8 <tcp_keepalive>
 800eac0:	4603      	mov	r3, r0
 800eac2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800eac6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d107      	bne.n	800eade <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800eace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ead4:	3301      	adds	r3, #1
 800ead6:	b2da      	uxtb	r2, r3
 800ead8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eada:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800eade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d011      	beq.n	800eb0a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800eae6:	4b6c      	ldr	r3, [pc, #432]	; (800ec98 <tcp_slowtmr+0x584>)
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaec:	6a1b      	ldr	r3, [r3, #32]
 800eaee:	1ad2      	subs	r2, r2, r3
 800eaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	460b      	mov	r3, r1
 800eafa:	005b      	lsls	r3, r3, #1
 800eafc:	440b      	add	r3, r1
 800eafe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d302      	bcc.n	800eb0a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800eb04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb06:	f000 fec7 	bl	800f898 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800eb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0c:	7d1b      	ldrb	r3, [r3, #20]
 800eb0e:	2b03      	cmp	r3, #3
 800eb10:	d10b      	bne.n	800eb2a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb12:	4b61      	ldr	r3, [pc, #388]	; (800ec98 <tcp_slowtmr+0x584>)
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb18:	6a1b      	ldr	r3, [r3, #32]
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	2b28      	cmp	r3, #40	; 0x28
 800eb1e:	d904      	bls.n	800eb2a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800eb20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb24:	3301      	adds	r3, #1
 800eb26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800eb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2c:	7d1b      	ldrb	r3, [r3, #20]
 800eb2e:	2b09      	cmp	r3, #9
 800eb30:	d10b      	bne.n	800eb4a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb32:	4b59      	ldr	r3, [pc, #356]	; (800ec98 <tcp_slowtmr+0x584>)
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb38:	6a1b      	ldr	r3, [r3, #32]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	2bf0      	cmp	r3, #240	; 0xf0
 800eb3e:	d904      	bls.n	800eb4a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800eb40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb44:	3301      	adds	r3, #1
 800eb46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d060      	beq.n	800ec14 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800eb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb58:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800eb5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb5c:	f000 fce8 	bl	800f530 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800eb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d010      	beq.n	800eb88 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800eb66:	4b4f      	ldr	r3, [pc, #316]	; (800eca4 <tcp_slowtmr+0x590>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d106      	bne.n	800eb7e <tcp_slowtmr+0x46a>
 800eb70:	4b4d      	ldr	r3, [pc, #308]	; (800eca8 <tcp_slowtmr+0x594>)
 800eb72:	f240 526d 	movw	r2, #1389	; 0x56d
 800eb76:	494d      	ldr	r1, [pc, #308]	; (800ecac <tcp_slowtmr+0x598>)
 800eb78:	484d      	ldr	r0, [pc, #308]	; (800ecb0 <tcp_slowtmr+0x59c>)
 800eb7a:	f00a fb75 	bl	8019268 <iprintf>
        prev->next = pcb->next;
 800eb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb80:	68da      	ldr	r2, [r3, #12]
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	60da      	str	r2, [r3, #12]
 800eb86:	e00f      	b.n	800eba8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800eb88:	4b46      	ldr	r3, [pc, #280]	; (800eca4 <tcp_slowtmr+0x590>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d006      	beq.n	800eba0 <tcp_slowtmr+0x48c>
 800eb92:	4b45      	ldr	r3, [pc, #276]	; (800eca8 <tcp_slowtmr+0x594>)
 800eb94:	f240 5271 	movw	r2, #1393	; 0x571
 800eb98:	4946      	ldr	r1, [pc, #280]	; (800ecb4 <tcp_slowtmr+0x5a0>)
 800eb9a:	4845      	ldr	r0, [pc, #276]	; (800ecb0 <tcp_slowtmr+0x59c>)
 800eb9c:	f00a fb64 	bl	8019268 <iprintf>
        tcp_active_pcbs = pcb->next;
 800eba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	4a3f      	ldr	r2, [pc, #252]	; (800eca4 <tcp_slowtmr+0x590>)
 800eba6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800eba8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d013      	beq.n	800ebd8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ebb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ebb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ebb8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ebba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbc:	3304      	adds	r3, #4
 800ebbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebc0:	8ad2      	ldrh	r2, [r2, #22]
 800ebc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebc4:	8b09      	ldrh	r1, [r1, #24]
 800ebc6:	9102      	str	r1, [sp, #8]
 800ebc8:	9201      	str	r2, [sp, #4]
 800ebca:	9300      	str	r3, [sp, #0]
 800ebcc:	462b      	mov	r3, r5
 800ebce:	4622      	mov	r2, r4
 800ebd0:	4601      	mov	r1, r0
 800ebd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebd4:	f004 fecc 	bl	8013970 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ebd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	7d1b      	ldrb	r3, [r3, #20]
 800ebe2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ebe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ebee:	6838      	ldr	r0, [r7, #0]
 800ebf0:	f7fe fec4 	bl	800d97c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ebf4:	4b30      	ldr	r3, [pc, #192]	; (800ecb8 <tcp_slowtmr+0x5a4>)
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d004      	beq.n	800ec0a <tcp_slowtmr+0x4f6>
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f06f 010c 	mvn.w	r1, #12
 800ec06:	68b8      	ldr	r0, [r7, #8]
 800ec08:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ec0a:	4b2b      	ldr	r3, [pc, #172]	; (800ecb8 <tcp_slowtmr+0x5a4>)
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d037      	beq.n	800ec82 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ec12:	e590      	b.n	800e736 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ec14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ec18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ec1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec20:	7f1b      	ldrb	r3, [r3, #28]
 800ec22:	3301      	adds	r3, #1
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ec2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2c:	7f1a      	ldrb	r2, [r3, #28]
 800ec2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec30:	7f5b      	ldrb	r3, [r3, #29]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d325      	bcc.n	800ec82 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ec36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec38:	2200      	movs	r2, #0
 800ec3a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ec3c:	4b1e      	ldr	r3, [pc, #120]	; (800ecb8 <tcp_slowtmr+0x5a4>)
 800ec3e:	2200      	movs	r2, #0
 800ec40:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ec42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00b      	beq.n	800ec64 <tcp_slowtmr+0x550>
 800ec4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec54:	6912      	ldr	r2, [r2, #16]
 800ec56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec58:	4610      	mov	r0, r2
 800ec5a:	4798      	blx	r3
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ec62:	e002      	b.n	800ec6a <tcp_slowtmr+0x556>
 800ec64:	2300      	movs	r3, #0
 800ec66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ec6a:	4b13      	ldr	r3, [pc, #76]	; (800ecb8 <tcp_slowtmr+0x5a4>)
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d000      	beq.n	800ec74 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ec72:	e560      	b.n	800e736 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ec74:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d102      	bne.n	800ec82 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ec7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec7e:	f004 f8c3 	bl	8012e08 <tcp_output>
  while (pcb != NULL) {
 800ec82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f47f ad5c 	bne.w	800e742 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ec8e:	4b0b      	ldr	r3, [pc, #44]	; (800ecbc <tcp_slowtmr+0x5a8>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ec94:	e067      	b.n	800ed66 <tcp_slowtmr+0x652>
 800ec96:	bf00      	nop
 800ec98:	20010ec4 	.word	0x20010ec4
 800ec9c:	10624dd3 	.word	0x10624dd3
 800eca0:	000124f8 	.word	0x000124f8
 800eca4:	20010ed0 	.word	0x20010ed0
 800eca8:	0801bfe0 	.word	0x0801bfe0
 800ecac:	0801c418 	.word	0x0801c418
 800ecb0:	0801c024 	.word	0x0801c024
 800ecb4:	0801c444 	.word	0x0801c444
 800ecb8:	20010ed8 	.word	0x20010ed8
 800ecbc:	20010ed4 	.word	0x20010ed4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ecc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc2:	7d1b      	ldrb	r3, [r3, #20]
 800ecc4:	2b0a      	cmp	r3, #10
 800ecc6:	d006      	beq.n	800ecd6 <tcp_slowtmr+0x5c2>
 800ecc8:	4b2b      	ldr	r3, [pc, #172]	; (800ed78 <tcp_slowtmr+0x664>)
 800ecca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ecce:	492b      	ldr	r1, [pc, #172]	; (800ed7c <tcp_slowtmr+0x668>)
 800ecd0:	482b      	ldr	r0, [pc, #172]	; (800ed80 <tcp_slowtmr+0x66c>)
 800ecd2:	f00a fac9 	bl	8019268 <iprintf>
    pcb_remove = 0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ecdc:	4b29      	ldr	r3, [pc, #164]	; (800ed84 <tcp_slowtmr+0x670>)
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece2:	6a1b      	ldr	r3, [r3, #32]
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	2bf0      	cmp	r3, #240	; 0xf0
 800ece8:	d904      	bls.n	800ecf4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ecea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecee:	3301      	adds	r3, #1
 800ecf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ecf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d02f      	beq.n	800ed5c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ecfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecfe:	f000 fc17 	bl	800f530 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d010      	beq.n	800ed2a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ed08:	4b1f      	ldr	r3, [pc, #124]	; (800ed88 <tcp_slowtmr+0x674>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d106      	bne.n	800ed20 <tcp_slowtmr+0x60c>
 800ed12:	4b19      	ldr	r3, [pc, #100]	; (800ed78 <tcp_slowtmr+0x664>)
 800ed14:	f240 52af 	movw	r2, #1455	; 0x5af
 800ed18:	491c      	ldr	r1, [pc, #112]	; (800ed8c <tcp_slowtmr+0x678>)
 800ed1a:	4819      	ldr	r0, [pc, #100]	; (800ed80 <tcp_slowtmr+0x66c>)
 800ed1c:	f00a faa4 	bl	8019268 <iprintf>
        prev->next = pcb->next;
 800ed20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed22:	68da      	ldr	r2, [r3, #12]
 800ed24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed26:	60da      	str	r2, [r3, #12]
 800ed28:	e00f      	b.n	800ed4a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ed2a:	4b17      	ldr	r3, [pc, #92]	; (800ed88 <tcp_slowtmr+0x674>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d006      	beq.n	800ed42 <tcp_slowtmr+0x62e>
 800ed34:	4b10      	ldr	r3, [pc, #64]	; (800ed78 <tcp_slowtmr+0x664>)
 800ed36:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ed3a:	4915      	ldr	r1, [pc, #84]	; (800ed90 <tcp_slowtmr+0x67c>)
 800ed3c:	4810      	ldr	r0, [pc, #64]	; (800ed80 <tcp_slowtmr+0x66c>)
 800ed3e:	f00a fa93 	bl	8019268 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	4a10      	ldr	r2, [pc, #64]	; (800ed88 <tcp_slowtmr+0x674>)
 800ed48:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ed4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ed4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ed54:	69f8      	ldr	r0, [r7, #28]
 800ed56:	f7fe fe11 	bl	800d97c <tcp_free>
 800ed5a:	e004      	b.n	800ed66 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ed60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ed66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1a9      	bne.n	800ecc0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ed6c:	bf00      	nop
 800ed6e:	bf00      	nop
 800ed70:	3730      	adds	r7, #48	; 0x30
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bdb0      	pop	{r4, r5, r7, pc}
 800ed76:	bf00      	nop
 800ed78:	0801bfe0 	.word	0x0801bfe0
 800ed7c:	0801c470 	.word	0x0801c470
 800ed80:	0801c024 	.word	0x0801c024
 800ed84:	20010ec4 	.word	0x20010ec4
 800ed88:	20010ed4 	.word	0x20010ed4
 800ed8c:	0801c4a0 	.word	0x0801c4a0
 800ed90:	0801c4c8 	.word	0x0801c4c8

0800ed94 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ed9a:	4b2d      	ldr	r3, [pc, #180]	; (800ee50 <tcp_fasttmr+0xbc>)
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	b2da      	uxtb	r2, r3
 800eda2:	4b2b      	ldr	r3, [pc, #172]	; (800ee50 <tcp_fasttmr+0xbc>)
 800eda4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eda6:	4b2b      	ldr	r3, [pc, #172]	; (800ee54 <tcp_fasttmr+0xc0>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800edac:	e048      	b.n	800ee40 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	7f9a      	ldrb	r2, [r3, #30]
 800edb2:	4b27      	ldr	r3, [pc, #156]	; (800ee50 <tcp_fasttmr+0xbc>)
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d03f      	beq.n	800ee3a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800edba:	4b25      	ldr	r3, [pc, #148]	; (800ee50 <tcp_fasttmr+0xbc>)
 800edbc:	781a      	ldrb	r2, [r3, #0]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	8b5b      	ldrh	r3, [r3, #26]
 800edc6:	f003 0301 	and.w	r3, r3, #1
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d010      	beq.n	800edf0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	8b5b      	ldrh	r3, [r3, #26]
 800edd2:	f043 0302 	orr.w	r3, r3, #2
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f004 f813 	bl	8012e08 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	8b5b      	ldrh	r3, [r3, #26]
 800ede6:	f023 0303 	bic.w	r3, r3, #3
 800edea:	b29a      	uxth	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	8b5b      	ldrh	r3, [r3, #26]
 800edf4:	f003 0308 	and.w	r3, r3, #8
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d009      	beq.n	800ee10 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	8b5b      	ldrh	r3, [r3, #26]
 800ee00:	f023 0308 	bic.w	r3, r3, #8
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7fe ff4a 	bl	800dca4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d00a      	beq.n	800ee34 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ee1e:	4b0e      	ldr	r3, [pc, #56]	; (800ee58 <tcp_fasttmr+0xc4>)
 800ee20:	2200      	movs	r2, #0
 800ee22:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 f819 	bl	800ee5c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ee2a:	4b0b      	ldr	r3, [pc, #44]	; (800ee58 <tcp_fasttmr+0xc4>)
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d000      	beq.n	800ee34 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ee32:	e7b8      	b.n	800eda6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	607b      	str	r3, [r7, #4]
 800ee38:	e002      	b.n	800ee40 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1b3      	bne.n	800edae <tcp_fasttmr+0x1a>
    }
  }
}
 800ee46:	bf00      	nop
 800ee48:	bf00      	nop
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	20010eda 	.word	0x20010eda
 800ee54:	20010ed0 	.word	0x20010ed0
 800ee58:	20010ed8 	.word	0x20010ed8

0800ee5c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ee5c:	b590      	push	{r4, r7, lr}
 800ee5e:	b085      	sub	sp, #20
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d109      	bne.n	800ee7e <tcp_process_refused_data+0x22>
 800ee6a:	4b37      	ldr	r3, [pc, #220]	; (800ef48 <tcp_process_refused_data+0xec>)
 800ee6c:	f240 6209 	movw	r2, #1545	; 0x609
 800ee70:	4936      	ldr	r1, [pc, #216]	; (800ef4c <tcp_process_refused_data+0xf0>)
 800ee72:	4837      	ldr	r0, [pc, #220]	; (800ef50 <tcp_process_refused_data+0xf4>)
 800ee74:	f00a f9f8 	bl	8019268 <iprintf>
 800ee78:	f06f 030f 	mvn.w	r3, #15
 800ee7c:	e060      	b.n	800ef40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee82:	7b5b      	ldrb	r3, [r3, #13]
 800ee84:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee8a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00b      	beq.n	800eeb4 <tcp_process_refused_data+0x58>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6918      	ldr	r0, [r3, #16]
 800eea6:	2300      	movs	r3, #0
 800eea8:	68ba      	ldr	r2, [r7, #8]
 800eeaa:	6879      	ldr	r1, [r7, #4]
 800eeac:	47a0      	blx	r4
 800eeae:	4603      	mov	r3, r0
 800eeb0:	73fb      	strb	r3, [r7, #15]
 800eeb2:	e007      	b.n	800eec4 <tcp_process_refused_data+0x68>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	6879      	ldr	r1, [r7, #4]
 800eeba:	2000      	movs	r0, #0
 800eebc:	f000 f8c2 	bl	800f044 <tcp_recv_null>
 800eec0:	4603      	mov	r3, r0
 800eec2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d12a      	bne.n	800ef22 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eecc:	7bbb      	ldrb	r3, [r7, #14]
 800eece:	f003 0320 	and.w	r3, r3, #32
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d033      	beq.n	800ef3e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eeda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eede:	d005      	beq.n	800eeec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eee4:	3301      	adds	r3, #1
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00b      	beq.n	800ef0e <tcp_process_refused_data+0xb2>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6918      	ldr	r0, [r3, #16]
 800ef00:	2300      	movs	r3, #0
 800ef02:	2200      	movs	r2, #0
 800ef04:	6879      	ldr	r1, [r7, #4]
 800ef06:	47a0      	blx	r4
 800ef08:	4603      	mov	r3, r0
 800ef0a:	73fb      	strb	r3, [r7, #15]
 800ef0c:	e001      	b.n	800ef12 <tcp_process_refused_data+0xb6>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ef12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef16:	f113 0f0d 	cmn.w	r3, #13
 800ef1a:	d110      	bne.n	800ef3e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ef1c:	f06f 030c 	mvn.w	r3, #12
 800ef20:	e00e      	b.n	800ef40 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ef22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef26:	f113 0f0d 	cmn.w	r3, #13
 800ef2a:	d102      	bne.n	800ef32 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ef2c:	f06f 030c 	mvn.w	r3, #12
 800ef30:	e006      	b.n	800ef40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	68ba      	ldr	r2, [r7, #8]
 800ef36:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ef38:	f06f 0304 	mvn.w	r3, #4
 800ef3c:	e000      	b.n	800ef40 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ef3e:	2300      	movs	r3, #0
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3714      	adds	r7, #20
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd90      	pop	{r4, r7, pc}
 800ef48:	0801bfe0 	.word	0x0801bfe0
 800ef4c:	0801c4f0 	.word	0x0801c4f0
 800ef50:	0801c024 	.word	0x0801c024

0800ef54 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ef5c:	e007      	b.n	800ef6e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f80a 	bl	800ef7e <tcp_seg_free>
    seg = next;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d1f4      	bne.n	800ef5e <tcp_segs_free+0xa>
  }
}
 800ef74:	bf00      	nop
 800ef76:	bf00      	nop
 800ef78:	3710      	adds	r7, #16
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b082      	sub	sp, #8
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00c      	beq.n	800efa6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d004      	beq.n	800ef9e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fe fa33 	bl	800d404 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ef9e:	6879      	ldr	r1, [r7, #4]
 800efa0:	2003      	movs	r0, #3
 800efa2:	f7fd fb7f 	bl	800c6a4 <memp_free>
  }
}
 800efa6:	bf00      	nop
 800efa8:	3708      	adds	r7, #8
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
	...

0800efb0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	460b      	mov	r3, r1
 800efba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d107      	bne.n	800efd2 <tcp_setprio+0x22>
 800efc2:	4b07      	ldr	r3, [pc, #28]	; (800efe0 <tcp_setprio+0x30>)
 800efc4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800efc8:	4906      	ldr	r1, [pc, #24]	; (800efe4 <tcp_setprio+0x34>)
 800efca:	4807      	ldr	r0, [pc, #28]	; (800efe8 <tcp_setprio+0x38>)
 800efcc:	f00a f94c 	bl	8019268 <iprintf>
 800efd0:	e002      	b.n	800efd8 <tcp_setprio+0x28>

  pcb->prio = prio;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	78fa      	ldrb	r2, [r7, #3]
 800efd6:	755a      	strb	r2, [r3, #21]
}
 800efd8:	3708      	adds	r7, #8
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	0801bfe0 	.word	0x0801bfe0
 800efe4:	0801c518 	.word	0x0801c518
 800efe8:	0801c024 	.word	0x0801c024

0800efec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d106      	bne.n	800f008 <tcp_seg_copy+0x1c>
 800effa:	4b0f      	ldr	r3, [pc, #60]	; (800f038 <tcp_seg_copy+0x4c>)
 800effc:	f240 6282 	movw	r2, #1666	; 0x682
 800f000:	490e      	ldr	r1, [pc, #56]	; (800f03c <tcp_seg_copy+0x50>)
 800f002:	480f      	ldr	r0, [pc, #60]	; (800f040 <tcp_seg_copy+0x54>)
 800f004:	f00a f930 	bl	8019268 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f008:	2003      	movs	r0, #3
 800f00a:	f7fd fad5 	bl	800c5b8 <memp_malloc>
 800f00e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d101      	bne.n	800f01a <tcp_seg_copy+0x2e>
    return NULL;
 800f016:	2300      	movs	r3, #0
 800f018:	e00a      	b.n	800f030 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f01a:	2210      	movs	r2, #16
 800f01c:	6879      	ldr	r1, [r7, #4]
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f00a fb22 	bl	8019668 <memcpy>
  pbuf_ref(cseg->p);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fe fa91 	bl	800d550 <pbuf_ref>
  return cseg;
 800f02e:	68fb      	ldr	r3, [r7, #12]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	0801bfe0 	.word	0x0801bfe0
 800f03c:	0801c534 	.word	0x0801c534
 800f040:	0801c024 	.word	0x0801c024

0800f044 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d109      	bne.n	800f06c <tcp_recv_null+0x28>
 800f058:	4b12      	ldr	r3, [pc, #72]	; (800f0a4 <tcp_recv_null+0x60>)
 800f05a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f05e:	4912      	ldr	r1, [pc, #72]	; (800f0a8 <tcp_recv_null+0x64>)
 800f060:	4812      	ldr	r0, [pc, #72]	; (800f0ac <tcp_recv_null+0x68>)
 800f062:	f00a f901 	bl	8019268 <iprintf>
 800f066:	f06f 030f 	mvn.w	r3, #15
 800f06a:	e016      	b.n	800f09a <tcp_recv_null+0x56>

  if (p != NULL) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d009      	beq.n	800f086 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	891b      	ldrh	r3, [r3, #8]
 800f076:	4619      	mov	r1, r3
 800f078:	68b8      	ldr	r0, [r7, #8]
 800f07a:	f7ff f99d 	bl	800e3b8 <tcp_recved>
    pbuf_free(p);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7fe f9c0 	bl	800d404 <pbuf_free>
 800f084:	e008      	b.n	800f098 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d104      	bne.n	800f098 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f08e:	68b8      	ldr	r0, [r7, #8]
 800f090:	f7fe fe72 	bl	800dd78 <tcp_close>
 800f094:	4603      	mov	r3, r0
 800f096:	e000      	b.n	800f09a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	0801bfe0 	.word	0x0801bfe0
 800f0a8:	0801c550 	.word	0x0801c550
 800f0ac:	0801c024 	.word	0x0801c024

0800f0b0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f0ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	db01      	blt.n	800f0c6 <tcp_kill_prio+0x16>
 800f0c2:	79fb      	ldrb	r3, [r7, #7]
 800f0c4:	e000      	b.n	800f0c8 <tcp_kill_prio+0x18>
 800f0c6:	237f      	movs	r3, #127	; 0x7f
 800f0c8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f0ca:	7afb      	ldrb	r3, [r7, #11]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d034      	beq.n	800f13a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f0d0:	7afb      	ldrb	r3, [r7, #11]
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0de:	4b19      	ldr	r3, [pc, #100]	; (800f144 <tcp_kill_prio+0x94>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	e01f      	b.n	800f126 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	7d5b      	ldrb	r3, [r3, #21]
 800f0ea:	7afa      	ldrb	r2, [r7, #11]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d80c      	bhi.n	800f10a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f0f4:	7afa      	ldrb	r2, [r7, #11]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d112      	bne.n	800f120 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f0fa:	4b13      	ldr	r3, [pc, #76]	; (800f148 <tcp_kill_prio+0x98>)
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	6a1b      	ldr	r3, [r3, #32]
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	429a      	cmp	r2, r3
 800f108:	d80a      	bhi.n	800f120 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f10a:	4b0f      	ldr	r3, [pc, #60]	; (800f148 <tcp_kill_prio+0x98>)
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	6a1b      	ldr	r3, [r3, #32]
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	7d5b      	ldrb	r3, [r3, #21]
 800f11e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	617b      	str	r3, [r7, #20]
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1dc      	bne.n	800f0e6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d004      	beq.n	800f13c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f132:	6938      	ldr	r0, [r7, #16]
 800f134:	f7fe ff66 	bl	800e004 <tcp_abort>
 800f138:	e000      	b.n	800f13c <tcp_kill_prio+0x8c>
    return;
 800f13a:	bf00      	nop
  }
}
 800f13c:	3718      	adds	r7, #24
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	20010ed0 	.word	0x20010ed0
 800f148:	20010ec4 	.word	0x20010ec4

0800f14c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b086      	sub	sp, #24
 800f150:	af00      	add	r7, sp, #0
 800f152:	4603      	mov	r3, r0
 800f154:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f156:	79fb      	ldrb	r3, [r7, #7]
 800f158:	2b08      	cmp	r3, #8
 800f15a:	d009      	beq.n	800f170 <tcp_kill_state+0x24>
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	2b09      	cmp	r3, #9
 800f160:	d006      	beq.n	800f170 <tcp_kill_state+0x24>
 800f162:	4b1a      	ldr	r3, [pc, #104]	; (800f1cc <tcp_kill_state+0x80>)
 800f164:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f168:	4919      	ldr	r1, [pc, #100]	; (800f1d0 <tcp_kill_state+0x84>)
 800f16a:	481a      	ldr	r0, [pc, #104]	; (800f1d4 <tcp_kill_state+0x88>)
 800f16c:	f00a f87c 	bl	8019268 <iprintf>

  inactivity = 0;
 800f170:	2300      	movs	r3, #0
 800f172:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f174:	2300      	movs	r3, #0
 800f176:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f178:	4b17      	ldr	r3, [pc, #92]	; (800f1d8 <tcp_kill_state+0x8c>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	617b      	str	r3, [r7, #20]
 800f17e:	e017      	b.n	800f1b0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	7d1b      	ldrb	r3, [r3, #20]
 800f184:	79fa      	ldrb	r2, [r7, #7]
 800f186:	429a      	cmp	r2, r3
 800f188:	d10f      	bne.n	800f1aa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f18a:	4b14      	ldr	r3, [pc, #80]	; (800f1dc <tcp_kill_state+0x90>)
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	6a1b      	ldr	r3, [r3, #32]
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	429a      	cmp	r2, r3
 800f198:	d807      	bhi.n	800f1aa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f19a:	4b10      	ldr	r3, [pc, #64]	; (800f1dc <tcp_kill_state+0x90>)
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	617b      	str	r3, [r7, #20]
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1e4      	bne.n	800f180 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d003      	beq.n	800f1c4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f1bc:	2100      	movs	r1, #0
 800f1be:	6938      	ldr	r0, [r7, #16]
 800f1c0:	f7fe fe62 	bl	800de88 <tcp_abandon>
  }
}
 800f1c4:	bf00      	nop
 800f1c6:	3718      	adds	r7, #24
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	0801bfe0 	.word	0x0801bfe0
 800f1d0:	0801c56c 	.word	0x0801c56c
 800f1d4:	0801c024 	.word	0x0801c024
 800f1d8:	20010ed0 	.word	0x20010ed0
 800f1dc:	20010ec4 	.word	0x20010ec4

0800f1e0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1ee:	4b12      	ldr	r3, [pc, #72]	; (800f238 <tcp_kill_timewait+0x58>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	60fb      	str	r3, [r7, #12]
 800f1f4:	e012      	b.n	800f21c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f1f6:	4b11      	ldr	r3, [pc, #68]	; (800f23c <tcp_kill_timewait+0x5c>)
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6a1b      	ldr	r3, [r3, #32]
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	429a      	cmp	r2, r3
 800f204:	d807      	bhi.n	800f216 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f206:	4b0d      	ldr	r3, [pc, #52]	; (800f23c <tcp_kill_timewait+0x5c>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	68db      	ldr	r3, [r3, #12]
 800f21a:	60fb      	str	r3, [r7, #12]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1e9      	bne.n	800f1f6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f228:	68b8      	ldr	r0, [r7, #8]
 800f22a:	f7fe feeb 	bl	800e004 <tcp_abort>
  }
}
 800f22e:	bf00      	nop
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	20010ed4 	.word	0x20010ed4
 800f23c:	20010ec4 	.word	0x20010ec4

0800f240 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f246:	4b10      	ldr	r3, [pc, #64]	; (800f288 <tcp_handle_closepend+0x48>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f24c:	e014      	b.n	800f278 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	8b5b      	ldrh	r3, [r3, #26]
 800f258:	f003 0308 	and.w	r3, r3, #8
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d009      	beq.n	800f274 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	8b5b      	ldrh	r3, [r3, #26]
 800f264:	f023 0308 	bic.w	r3, r3, #8
 800f268:	b29a      	uxth	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7fe fd18 	bl	800dca4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1e7      	bne.n	800f24e <tcp_handle_closepend+0xe>
  }
}
 800f27e:	bf00      	nop
 800f280:	bf00      	nop
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	20010ed0 	.word	0x20010ed0

0800f28c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	4603      	mov	r3, r0
 800f294:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f296:	2001      	movs	r0, #1
 800f298:	f7fd f98e 	bl	800c5b8 <memp_malloc>
 800f29c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d126      	bne.n	800f2f2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f2a4:	f7ff ffcc 	bl	800f240 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f2a8:	f7ff ff9a 	bl	800f1e0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2ac:	2001      	movs	r0, #1
 800f2ae:	f7fd f983 	bl	800c5b8 <memp_malloc>
 800f2b2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d11b      	bne.n	800f2f2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f2ba:	2009      	movs	r0, #9
 800f2bc:	f7ff ff46 	bl	800f14c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2c0:	2001      	movs	r0, #1
 800f2c2:	f7fd f979 	bl	800c5b8 <memp_malloc>
 800f2c6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d111      	bne.n	800f2f2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f2ce:	2008      	movs	r0, #8
 800f2d0:	f7ff ff3c 	bl	800f14c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2d4:	2001      	movs	r0, #1
 800f2d6:	f7fd f96f 	bl	800c5b8 <memp_malloc>
 800f2da:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d107      	bne.n	800f2f2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff fee3 	bl	800f0b0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2ea:	2001      	movs	r0, #1
 800f2ec:	f7fd f964 	bl	800c5b8 <memp_malloc>
 800f2f0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d03f      	beq.n	800f378 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f2f8:	229c      	movs	r2, #156	; 0x9c
 800f2fa:	2100      	movs	r1, #0
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	f00a f852 	bl	80193a6 <memset>
    pcb->prio = prio;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	79fa      	ldrb	r2, [r7, #7]
 800f306:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f30e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	22ff      	movs	r2, #255	; 0xff
 800f326:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f32e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2206      	movs	r2, #6
 800f334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2206      	movs	r2, #6
 800f33c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f344:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2201      	movs	r2, #1
 800f34a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f34e:	4b0d      	ldr	r3, [pc, #52]	; (800f384 <tcp_alloc+0xf8>)
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f356:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <tcp_alloc+0xfc>)
 800f358:	781a      	ldrb	r2, [r3, #0]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f364:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	4a08      	ldr	r2, [pc, #32]	; (800f38c <tcp_alloc+0x100>)
 800f36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	4a07      	ldr	r2, [pc, #28]	; (800f390 <tcp_alloc+0x104>)
 800f374:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f378:	68fb      	ldr	r3, [r7, #12]
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	20010ec4 	.word	0x20010ec4
 800f388:	20010eda 	.word	0x20010eda
 800f38c:	0800f045 	.word	0x0800f045
 800f390:	006ddd00 	.word	0x006ddd00

0800f394 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	4603      	mov	r3, r0
 800f39c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f39e:	2040      	movs	r0, #64	; 0x40
 800f3a0:	f7ff ff74 	bl	800f28c <tcp_alloc>
 800f3a4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d002      	beq.n	800f3c6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	683a      	ldr	r2, [r7, #0]
 800f3c4:	611a      	str	r2, [r3, #16]
  }
}
 800f3c6:	bf00      	nop
 800f3c8:	370c      	adds	r7, #12
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
	...

0800f3d4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00e      	beq.n	800f402 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	7d1b      	ldrb	r3, [r3, #20]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d106      	bne.n	800f3fa <tcp_recv+0x26>
 800f3ec:	4b07      	ldr	r3, [pc, #28]	; (800f40c <tcp_recv+0x38>)
 800f3ee:	f240 72df 	movw	r2, #2015	; 0x7df
 800f3f2:	4907      	ldr	r1, [pc, #28]	; (800f410 <tcp_recv+0x3c>)
 800f3f4:	4807      	ldr	r0, [pc, #28]	; (800f414 <tcp_recv+0x40>)
 800f3f6:	f009 ff37 	bl	8019268 <iprintf>
    pcb->recv = recv;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	683a      	ldr	r2, [r7, #0]
 800f3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f402:	bf00      	nop
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	0801bfe0 	.word	0x0801bfe0
 800f410:	0801c57c 	.word	0x0801c57c
 800f414:	0801c024 	.word	0x0801c024

0800f418 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d00e      	beq.n	800f446 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	7d1b      	ldrb	r3, [r3, #20]
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d106      	bne.n	800f43e <tcp_sent+0x26>
 800f430:	4b07      	ldr	r3, [pc, #28]	; (800f450 <tcp_sent+0x38>)
 800f432:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f436:	4907      	ldr	r1, [pc, #28]	; (800f454 <tcp_sent+0x3c>)
 800f438:	4807      	ldr	r0, [pc, #28]	; (800f458 <tcp_sent+0x40>)
 800f43a:	f009 ff15 	bl	8019268 <iprintf>
    pcb->sent = sent;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f446:	bf00      	nop
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	0801bfe0 	.word	0x0801bfe0
 800f454:	0801c5a4 	.word	0x0801c5a4
 800f458:	0801c024 	.word	0x0801c024

0800f45c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d00e      	beq.n	800f48a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	7d1b      	ldrb	r3, [r3, #20]
 800f470:	2b01      	cmp	r3, #1
 800f472:	d106      	bne.n	800f482 <tcp_err+0x26>
 800f474:	4b07      	ldr	r3, [pc, #28]	; (800f494 <tcp_err+0x38>)
 800f476:	f640 020d 	movw	r2, #2061	; 0x80d
 800f47a:	4907      	ldr	r1, [pc, #28]	; (800f498 <tcp_err+0x3c>)
 800f47c:	4807      	ldr	r0, [pc, #28]	; (800f49c <tcp_err+0x40>)
 800f47e:	f009 fef3 	bl	8019268 <iprintf>
    pcb->errf = err;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	683a      	ldr	r2, [r7, #0]
 800f486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	0801bfe0 	.word	0x0801bfe0
 800f498:	0801c5cc 	.word	0x0801c5cc
 800f49c:	0801c024 	.word	0x0801c024

0800f4a0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b085      	sub	sp, #20
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d008      	beq.n	800f4c2 <tcp_accept+0x22>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d104      	bne.n	800f4c2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	619a      	str	r2, [r3, #24]
  }
}
 800f4c2:	bf00      	nop
 800f4c4:	3714      	adds	r7, #20
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr
	...

0800f4d0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	4613      	mov	r3, r2
 800f4dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d107      	bne.n	800f4f4 <tcp_poll+0x24>
 800f4e4:	4b0e      	ldr	r3, [pc, #56]	; (800f520 <tcp_poll+0x50>)
 800f4e6:	f640 023d 	movw	r2, #2109	; 0x83d
 800f4ea:	490e      	ldr	r1, [pc, #56]	; (800f524 <tcp_poll+0x54>)
 800f4ec:	480e      	ldr	r0, [pc, #56]	; (800f528 <tcp_poll+0x58>)
 800f4ee:	f009 febb 	bl	8019268 <iprintf>
 800f4f2:	e011      	b.n	800f518 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	7d1b      	ldrb	r3, [r3, #20]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d106      	bne.n	800f50a <tcp_poll+0x3a>
 800f4fc:	4b08      	ldr	r3, [pc, #32]	; (800f520 <tcp_poll+0x50>)
 800f4fe:	f640 023e 	movw	r2, #2110	; 0x83e
 800f502:	490a      	ldr	r1, [pc, #40]	; (800f52c <tcp_poll+0x5c>)
 800f504:	4808      	ldr	r0, [pc, #32]	; (800f528 <tcp_poll+0x58>)
 800f506:	f009 feaf 	bl	8019268 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	79fa      	ldrb	r2, [r7, #7]
 800f516:	775a      	strb	r2, [r3, #29]
}
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	0801bfe0 	.word	0x0801bfe0
 800f524:	0801c5f4 	.word	0x0801c5f4
 800f528:	0801c024 	.word	0x0801c024
 800f52c:	0801c60c 	.word	0x0801c60c

0800f530 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d107      	bne.n	800f54e <tcp_pcb_purge+0x1e>
 800f53e:	4b21      	ldr	r3, [pc, #132]	; (800f5c4 <tcp_pcb_purge+0x94>)
 800f540:	f640 0251 	movw	r2, #2129	; 0x851
 800f544:	4920      	ldr	r1, [pc, #128]	; (800f5c8 <tcp_pcb_purge+0x98>)
 800f546:	4821      	ldr	r0, [pc, #132]	; (800f5cc <tcp_pcb_purge+0x9c>)
 800f548:	f009 fe8e 	bl	8019268 <iprintf>
 800f54c:	e037      	b.n	800f5be <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	7d1b      	ldrb	r3, [r3, #20]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d033      	beq.n	800f5be <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f55a:	2b0a      	cmp	r3, #10
 800f55c:	d02f      	beq.n	800f5be <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f562:	2b01      	cmp	r3, #1
 800f564:	d02b      	beq.n	800f5be <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d007      	beq.n	800f57e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f572:	4618      	mov	r0, r3
 800f574:	f7fd ff46 	bl	800d404 <pbuf_free>
      pcb->refused_data = NULL;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f582:	2b00      	cmp	r3, #0
 800f584:	d002      	beq.n	800f58c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f986 	bl	800f898 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f592:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f598:	4618      	mov	r0, r3
 800f59a:	f7ff fcdb 	bl	800ef54 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7ff fcd6 	bl	800ef54 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	66da      	str	r2, [r3, #108]	; 0x6c
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	0801bfe0 	.word	0x0801bfe0
 800f5c8:	0801c62c 	.word	0x0801c62c
 800f5cc:	0801c024 	.word	0x0801c024

0800f5d0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d106      	bne.n	800f5ee <tcp_pcb_remove+0x1e>
 800f5e0:	4b3e      	ldr	r3, [pc, #248]	; (800f6dc <tcp_pcb_remove+0x10c>)
 800f5e2:	f640 0283 	movw	r2, #2179	; 0x883
 800f5e6:	493e      	ldr	r1, [pc, #248]	; (800f6e0 <tcp_pcb_remove+0x110>)
 800f5e8:	483e      	ldr	r0, [pc, #248]	; (800f6e4 <tcp_pcb_remove+0x114>)
 800f5ea:	f009 fe3d 	bl	8019268 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d106      	bne.n	800f602 <tcp_pcb_remove+0x32>
 800f5f4:	4b39      	ldr	r3, [pc, #228]	; (800f6dc <tcp_pcb_remove+0x10c>)
 800f5f6:	f640 0284 	movw	r2, #2180	; 0x884
 800f5fa:	493b      	ldr	r1, [pc, #236]	; (800f6e8 <tcp_pcb_remove+0x118>)
 800f5fc:	4839      	ldr	r0, [pc, #228]	; (800f6e4 <tcp_pcb_remove+0x114>)
 800f5fe:	f009 fe33 	bl	8019268 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	683a      	ldr	r2, [r7, #0]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d105      	bne.n	800f618 <tcp_pcb_remove+0x48>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68da      	ldr	r2, [r3, #12]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	601a      	str	r2, [r3, #0]
 800f616:	e013      	b.n	800f640 <tcp_pcb_remove+0x70>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	60fb      	str	r3, [r7, #12]
 800f61e:	e00c      	b.n	800f63a <tcp_pcb_remove+0x6a>
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	683a      	ldr	r2, [r7, #0]
 800f626:	429a      	cmp	r2, r3
 800f628:	d104      	bne.n	800f634 <tcp_pcb_remove+0x64>
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	68da      	ldr	r2, [r3, #12]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	60da      	str	r2, [r3, #12]
 800f632:	e005      	b.n	800f640 <tcp_pcb_remove+0x70>
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	60fb      	str	r3, [r7, #12]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1ef      	bne.n	800f620 <tcp_pcb_remove+0x50>
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	2200      	movs	r2, #0
 800f644:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f646:	6838      	ldr	r0, [r7, #0]
 800f648:	f7ff ff72 	bl	800f530 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	7d1b      	ldrb	r3, [r3, #20]
 800f650:	2b0a      	cmp	r3, #10
 800f652:	d013      	beq.n	800f67c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d00f      	beq.n	800f67c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	8b5b      	ldrh	r3, [r3, #26]
 800f660:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f664:	2b00      	cmp	r3, #0
 800f666:	d009      	beq.n	800f67c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	8b5b      	ldrh	r3, [r3, #26]
 800f66c:	f043 0302 	orr.w	r3, r3, #2
 800f670:	b29a      	uxth	r2, r3
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f676:	6838      	ldr	r0, [r7, #0]
 800f678:	f003 fbc6 	bl	8012e08 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	7d1b      	ldrb	r3, [r3, #20]
 800f680:	2b01      	cmp	r3, #1
 800f682:	d020      	beq.n	800f6c6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d006      	beq.n	800f69a <tcp_pcb_remove+0xca>
 800f68c:	4b13      	ldr	r3, [pc, #76]	; (800f6dc <tcp_pcb_remove+0x10c>)
 800f68e:	f640 0293 	movw	r2, #2195	; 0x893
 800f692:	4916      	ldr	r1, [pc, #88]	; (800f6ec <tcp_pcb_remove+0x11c>)
 800f694:	4813      	ldr	r0, [pc, #76]	; (800f6e4 <tcp_pcb_remove+0x114>)
 800f696:	f009 fde7 	bl	8019268 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d006      	beq.n	800f6b0 <tcp_pcb_remove+0xe0>
 800f6a2:	4b0e      	ldr	r3, [pc, #56]	; (800f6dc <tcp_pcb_remove+0x10c>)
 800f6a4:	f640 0294 	movw	r2, #2196	; 0x894
 800f6a8:	4911      	ldr	r1, [pc, #68]	; (800f6f0 <tcp_pcb_remove+0x120>)
 800f6aa:	480e      	ldr	r0, [pc, #56]	; (800f6e4 <tcp_pcb_remove+0x114>)
 800f6ac:	f009 fddc 	bl	8019268 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d006      	beq.n	800f6c6 <tcp_pcb_remove+0xf6>
 800f6b8:	4b08      	ldr	r3, [pc, #32]	; (800f6dc <tcp_pcb_remove+0x10c>)
 800f6ba:	f640 0296 	movw	r2, #2198	; 0x896
 800f6be:	490d      	ldr	r1, [pc, #52]	; (800f6f4 <tcp_pcb_remove+0x124>)
 800f6c0:	4808      	ldr	r0, [pc, #32]	; (800f6e4 <tcp_pcb_remove+0x114>)
 800f6c2:	f009 fdd1 	bl	8019268 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f6d2:	bf00      	nop
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	0801bfe0 	.word	0x0801bfe0
 800f6e0:	0801c648 	.word	0x0801c648
 800f6e4:	0801c024 	.word	0x0801c024
 800f6e8:	0801c664 	.word	0x0801c664
 800f6ec:	0801c684 	.word	0x0801c684
 800f6f0:	0801c69c 	.word	0x0801c69c
 800f6f4:	0801c6b8 	.word	0x0801c6b8

0800f6f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d106      	bne.n	800f714 <tcp_next_iss+0x1c>
 800f706:	4b0a      	ldr	r3, [pc, #40]	; (800f730 <tcp_next_iss+0x38>)
 800f708:	f640 02af 	movw	r2, #2223	; 0x8af
 800f70c:	4909      	ldr	r1, [pc, #36]	; (800f734 <tcp_next_iss+0x3c>)
 800f70e:	480a      	ldr	r0, [pc, #40]	; (800f738 <tcp_next_iss+0x40>)
 800f710:	f009 fdaa 	bl	8019268 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f714:	4b09      	ldr	r3, [pc, #36]	; (800f73c <tcp_next_iss+0x44>)
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	4b09      	ldr	r3, [pc, #36]	; (800f740 <tcp_next_iss+0x48>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	4413      	add	r3, r2
 800f71e:	4a07      	ldr	r2, [pc, #28]	; (800f73c <tcp_next_iss+0x44>)
 800f720:	6013      	str	r3, [r2, #0]
  return iss;
 800f722:	4b06      	ldr	r3, [pc, #24]	; (800f73c <tcp_next_iss+0x44>)
 800f724:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f726:	4618      	mov	r0, r3
 800f728:	3708      	adds	r7, #8
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	0801bfe0 	.word	0x0801bfe0
 800f734:	0801c6d0 	.word	0x0801c6d0
 800f738:	0801c024 	.word	0x0801c024
 800f73c:	20000028 	.word	0x20000028
 800f740:	20010ec4 	.word	0x20010ec4

0800f744 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
 800f750:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <tcp_eff_send_mss_netif+0x22>
 800f758:	4b14      	ldr	r3, [pc, #80]	; (800f7ac <tcp_eff_send_mss_netif+0x68>)
 800f75a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f75e:	4914      	ldr	r1, [pc, #80]	; (800f7b0 <tcp_eff_send_mss_netif+0x6c>)
 800f760:	4814      	ldr	r0, [pc, #80]	; (800f7b4 <tcp_eff_send_mss_netif+0x70>)
 800f762:	f009 fd81 	bl	8019268 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d101      	bne.n	800f770 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f76c:	89fb      	ldrh	r3, [r7, #14]
 800f76e:	e019      	b.n	800f7a4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f774:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f776:	8afb      	ldrh	r3, [r7, #22]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d012      	beq.n	800f7a2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f77c:	2328      	movs	r3, #40	; 0x28
 800f77e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f780:	8afa      	ldrh	r2, [r7, #22]
 800f782:	8abb      	ldrh	r3, [r7, #20]
 800f784:	429a      	cmp	r2, r3
 800f786:	d904      	bls.n	800f792 <tcp_eff_send_mss_netif+0x4e>
 800f788:	8afa      	ldrh	r2, [r7, #22]
 800f78a:	8abb      	ldrh	r3, [r7, #20]
 800f78c:	1ad3      	subs	r3, r2, r3
 800f78e:	b29b      	uxth	r3, r3
 800f790:	e000      	b.n	800f794 <tcp_eff_send_mss_netif+0x50>
 800f792:	2300      	movs	r3, #0
 800f794:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f796:	8a7a      	ldrh	r2, [r7, #18]
 800f798:	89fb      	ldrh	r3, [r7, #14]
 800f79a:	4293      	cmp	r3, r2
 800f79c:	bf28      	it	cs
 800f79e:	4613      	movcs	r3, r2
 800f7a0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f7a2:	89fb      	ldrh	r3, [r7, #14]
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3718      	adds	r7, #24
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}
 800f7ac:	0801bfe0 	.word	0x0801bfe0
 800f7b0:	0801c6ec 	.word	0x0801c6ec
 800f7b4:	0801c024 	.word	0x0801c024

0800f7b8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d119      	bne.n	800f800 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f7cc:	4b10      	ldr	r3, [pc, #64]	; (800f810 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f7ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f7d2:	4910      	ldr	r1, [pc, #64]	; (800f814 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f7d4:	4810      	ldr	r0, [pc, #64]	; (800f818 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f7d6:	f009 fd47 	bl	8019268 <iprintf>

  while (pcb != NULL) {
 800f7da:	e011      	b.n	800f800 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d108      	bne.n	800f7fa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	68db      	ldr	r3, [r3, #12]
 800f7ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f7fe fc08 	bl	800e004 <tcp_abort>
      pcb = next;
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	60fb      	str	r3, [r7, #12]
 800f7f8:	e002      	b.n	800f800 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	68db      	ldr	r3, [r3, #12]
 800f7fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d1ea      	bne.n	800f7dc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f806:	bf00      	nop
 800f808:	bf00      	nop
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	0801bfe0 	.word	0x0801bfe0
 800f814:	0801c714 	.word	0x0801c714
 800f818:	0801c024 	.word	0x0801c024

0800f81c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d02a      	beq.n	800f882 <tcp_netif_ip_addr_changed+0x66>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d026      	beq.n	800f882 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f834:	4b15      	ldr	r3, [pc, #84]	; (800f88c <tcp_netif_ip_addr_changed+0x70>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4619      	mov	r1, r3
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f7ff ffbc 	bl	800f7b8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f840:	4b13      	ldr	r3, [pc, #76]	; (800f890 <tcp_netif_ip_addr_changed+0x74>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4619      	mov	r1, r3
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7ff ffb6 	bl	800f7b8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d017      	beq.n	800f882 <tcp_netif_ip_addr_changed+0x66>
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d013      	beq.n	800f882 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f85a:	4b0e      	ldr	r3, [pc, #56]	; (800f894 <tcp_netif_ip_addr_changed+0x78>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	60fb      	str	r3, [r7, #12]
 800f860:	e00c      	b.n	800f87c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d103      	bne.n	800f876 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	60fb      	str	r3, [r7, #12]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1ef      	bne.n	800f862 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f882:	bf00      	nop
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20010ed0 	.word	0x20010ed0
 800f890:	20010ec8 	.word	0x20010ec8
 800f894:	20010ecc 	.word	0x20010ecc

0800f898 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d007      	beq.n	800f8b8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7ff fb51 	bl	800ef54 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f8b8:	bf00      	nop
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f8c0:	b590      	push	{r4, r7, lr}
 800f8c2:	b08d      	sub	sp, #52	; 0x34
 800f8c4:	af04      	add	r7, sp, #16
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d105      	bne.n	800f8dc <tcp_input+0x1c>
 800f8d0:	4b9b      	ldr	r3, [pc, #620]	; (800fb40 <tcp_input+0x280>)
 800f8d2:	2283      	movs	r2, #131	; 0x83
 800f8d4:	499b      	ldr	r1, [pc, #620]	; (800fb44 <tcp_input+0x284>)
 800f8d6:	489c      	ldr	r0, [pc, #624]	; (800fb48 <tcp_input+0x288>)
 800f8d8:	f009 fcc6 	bl	8019268 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	4a9a      	ldr	r2, [pc, #616]	; (800fb4c <tcp_input+0x28c>)
 800f8e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	895b      	ldrh	r3, [r3, #10]
 800f8e8:	2b13      	cmp	r3, #19
 800f8ea:	f240 83d1 	bls.w	8010090 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f8ee:	4b98      	ldr	r3, [pc, #608]	; (800fb50 <tcp_input+0x290>)
 800f8f0:	695b      	ldr	r3, [r3, #20]
 800f8f2:	4a97      	ldr	r2, [pc, #604]	; (800fb50 <tcp_input+0x290>)
 800f8f4:	6812      	ldr	r2, [r2, #0]
 800f8f6:	4611      	mov	r1, r2
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f008 fa61 	bl	8017dc0 <ip4_addr_isbroadcast_u32>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	f040 83c7 	bne.w	8010094 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f906:	4b92      	ldr	r3, [pc, #584]	; (800fb50 <tcp_input+0x290>)
 800f908:	695b      	ldr	r3, [r3, #20]
 800f90a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f90e:	2be0      	cmp	r3, #224	; 0xe0
 800f910:	f000 83c0 	beq.w	8010094 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f914:	4b8d      	ldr	r3, [pc, #564]	; (800fb4c <tcp_input+0x28c>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	899b      	ldrh	r3, [r3, #12]
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fc f93d 	bl	800bb9c <lwip_htons>
 800f922:	4603      	mov	r3, r0
 800f924:	0b1b      	lsrs	r3, r3, #12
 800f926:	b29b      	uxth	r3, r3
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f92e:	7cbb      	ldrb	r3, [r7, #18]
 800f930:	2b13      	cmp	r3, #19
 800f932:	f240 83b1 	bls.w	8010098 <tcp_input+0x7d8>
 800f936:	7cbb      	ldrb	r3, [r7, #18]
 800f938:	b29a      	uxth	r2, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	891b      	ldrh	r3, [r3, #8]
 800f93e:	429a      	cmp	r2, r3
 800f940:	f200 83aa 	bhi.w	8010098 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f944:	7cbb      	ldrb	r3, [r7, #18]
 800f946:	b29b      	uxth	r3, r3
 800f948:	3b14      	subs	r3, #20
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	4b81      	ldr	r3, [pc, #516]	; (800fb54 <tcp_input+0x294>)
 800f94e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f950:	4b81      	ldr	r3, [pc, #516]	; (800fb58 <tcp_input+0x298>)
 800f952:	2200      	movs	r2, #0
 800f954:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	895a      	ldrh	r2, [r3, #10]
 800f95a:	7cbb      	ldrb	r3, [r7, #18]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	429a      	cmp	r2, r3
 800f960:	d309      	bcc.n	800f976 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f962:	4b7c      	ldr	r3, [pc, #496]	; (800fb54 <tcp_input+0x294>)
 800f964:	881a      	ldrh	r2, [r3, #0]
 800f966:	4b7d      	ldr	r3, [pc, #500]	; (800fb5c <tcp_input+0x29c>)
 800f968:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f96a:	7cbb      	ldrb	r3, [r7, #18]
 800f96c:	4619      	mov	r1, r3
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7fd fcc2 	bl	800d2f8 <pbuf_remove_header>
 800f974:	e04e      	b.n	800fa14 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d105      	bne.n	800f98a <tcp_input+0xca>
 800f97e:	4b70      	ldr	r3, [pc, #448]	; (800fb40 <tcp_input+0x280>)
 800f980:	22c2      	movs	r2, #194	; 0xc2
 800f982:	4977      	ldr	r1, [pc, #476]	; (800fb60 <tcp_input+0x2a0>)
 800f984:	4870      	ldr	r0, [pc, #448]	; (800fb48 <tcp_input+0x288>)
 800f986:	f009 fc6f 	bl	8019268 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f98a:	2114      	movs	r1, #20
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7fd fcb3 	bl	800d2f8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	895a      	ldrh	r2, [r3, #10]
 800f996:	4b71      	ldr	r3, [pc, #452]	; (800fb5c <tcp_input+0x29c>)
 800f998:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f99a:	4b6e      	ldr	r3, [pc, #440]	; (800fb54 <tcp_input+0x294>)
 800f99c:	881a      	ldrh	r2, [r3, #0]
 800f99e:	4b6f      	ldr	r3, [pc, #444]	; (800fb5c <tcp_input+0x29c>)
 800f9a0:	881b      	ldrh	r3, [r3, #0]
 800f9a2:	1ad3      	subs	r3, r2, r3
 800f9a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f9a6:	4b6d      	ldr	r3, [pc, #436]	; (800fb5c <tcp_input+0x29c>)
 800f9a8:	881b      	ldrh	r3, [r3, #0]
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f7fd fca3 	bl	800d2f8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	895b      	ldrh	r3, [r3, #10]
 800f9b8:	8a3a      	ldrh	r2, [r7, #16]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	f200 836e 	bhi.w	801009c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	4a64      	ldr	r2, [pc, #400]	; (800fb58 <tcp_input+0x298>)
 800f9c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	8a3a      	ldrh	r2, [r7, #16]
 800f9d0:	4611      	mov	r1, r2
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fd fc90 	bl	800d2f8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	891a      	ldrh	r2, [r3, #8]
 800f9dc:	8a3b      	ldrh	r3, [r7, #16]
 800f9de:	1ad3      	subs	r3, r2, r3
 800f9e0:	b29a      	uxth	r2, r3
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	895b      	ldrh	r3, [r3, #10]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <tcp_input+0x13a>
 800f9ee:	4b54      	ldr	r3, [pc, #336]	; (800fb40 <tcp_input+0x280>)
 800f9f0:	22df      	movs	r2, #223	; 0xdf
 800f9f2:	495c      	ldr	r1, [pc, #368]	; (800fb64 <tcp_input+0x2a4>)
 800f9f4:	4854      	ldr	r0, [pc, #336]	; (800fb48 <tcp_input+0x288>)
 800f9f6:	f009 fc37 	bl	8019268 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	891a      	ldrh	r2, [r3, #8]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	891b      	ldrh	r3, [r3, #8]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d005      	beq.n	800fa14 <tcp_input+0x154>
 800fa08:	4b4d      	ldr	r3, [pc, #308]	; (800fb40 <tcp_input+0x280>)
 800fa0a:	22e0      	movs	r2, #224	; 0xe0
 800fa0c:	4956      	ldr	r1, [pc, #344]	; (800fb68 <tcp_input+0x2a8>)
 800fa0e:	484e      	ldr	r0, [pc, #312]	; (800fb48 <tcp_input+0x288>)
 800fa10:	f009 fc2a 	bl	8019268 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fa14:	4b4d      	ldr	r3, [pc, #308]	; (800fb4c <tcp_input+0x28c>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	881b      	ldrh	r3, [r3, #0]
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	4a4b      	ldr	r2, [pc, #300]	; (800fb4c <tcp_input+0x28c>)
 800fa1e:	6814      	ldr	r4, [r2, #0]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fc f8bb 	bl	800bb9c <lwip_htons>
 800fa26:	4603      	mov	r3, r0
 800fa28:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fa2a:	4b48      	ldr	r3, [pc, #288]	; (800fb4c <tcp_input+0x28c>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	885b      	ldrh	r3, [r3, #2]
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	4a46      	ldr	r2, [pc, #280]	; (800fb4c <tcp_input+0x28c>)
 800fa34:	6814      	ldr	r4, [r2, #0]
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fc f8b0 	bl	800bb9c <lwip_htons>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fa40:	4b42      	ldr	r3, [pc, #264]	; (800fb4c <tcp_input+0x28c>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	4a41      	ldr	r2, [pc, #260]	; (800fb4c <tcp_input+0x28c>)
 800fa48:	6814      	ldr	r4, [r2, #0]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fc f8bb 	bl	800bbc6 <lwip_htonl>
 800fa50:	4603      	mov	r3, r0
 800fa52:	6063      	str	r3, [r4, #4]
 800fa54:	6863      	ldr	r3, [r4, #4]
 800fa56:	4a45      	ldr	r2, [pc, #276]	; (800fb6c <tcp_input+0x2ac>)
 800fa58:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fa5a:	4b3c      	ldr	r3, [pc, #240]	; (800fb4c <tcp_input+0x28c>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	689b      	ldr	r3, [r3, #8]
 800fa60:	4a3a      	ldr	r2, [pc, #232]	; (800fb4c <tcp_input+0x28c>)
 800fa62:	6814      	ldr	r4, [r2, #0]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fc f8ae 	bl	800bbc6 <lwip_htonl>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	60a3      	str	r3, [r4, #8]
 800fa6e:	68a3      	ldr	r3, [r4, #8]
 800fa70:	4a3f      	ldr	r2, [pc, #252]	; (800fb70 <tcp_input+0x2b0>)
 800fa72:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fa74:	4b35      	ldr	r3, [pc, #212]	; (800fb4c <tcp_input+0x28c>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	89db      	ldrh	r3, [r3, #14]
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	4a33      	ldr	r2, [pc, #204]	; (800fb4c <tcp_input+0x28c>)
 800fa7e:	6814      	ldr	r4, [r2, #0]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fc f88b 	bl	800bb9c <lwip_htons>
 800fa86:	4603      	mov	r3, r0
 800fa88:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fa8a:	4b30      	ldr	r3, [pc, #192]	; (800fb4c <tcp_input+0x28c>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	899b      	ldrh	r3, [r3, #12]
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fc f882 	bl	800bb9c <lwip_htons>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800faa0:	b2da      	uxtb	r2, r3
 800faa2:	4b34      	ldr	r3, [pc, #208]	; (800fb74 <tcp_input+0x2b4>)
 800faa4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	891a      	ldrh	r2, [r3, #8]
 800faaa:	4b33      	ldr	r3, [pc, #204]	; (800fb78 <tcp_input+0x2b8>)
 800faac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800faae:	4b31      	ldr	r3, [pc, #196]	; (800fb74 <tcp_input+0x2b4>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	f003 0303 	and.w	r3, r3, #3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00c      	beq.n	800fad4 <tcp_input+0x214>
    tcplen++;
 800faba:	4b2f      	ldr	r3, [pc, #188]	; (800fb78 <tcp_input+0x2b8>)
 800fabc:	881b      	ldrh	r3, [r3, #0]
 800fabe:	3301      	adds	r3, #1
 800fac0:	b29a      	uxth	r2, r3
 800fac2:	4b2d      	ldr	r3, [pc, #180]	; (800fb78 <tcp_input+0x2b8>)
 800fac4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	891a      	ldrh	r2, [r3, #8]
 800faca:	4b2b      	ldr	r3, [pc, #172]	; (800fb78 <tcp_input+0x2b8>)
 800facc:	881b      	ldrh	r3, [r3, #0]
 800face:	429a      	cmp	r2, r3
 800fad0:	f200 82e6 	bhi.w	80100a0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fad4:	2300      	movs	r3, #0
 800fad6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fad8:	4b28      	ldr	r3, [pc, #160]	; (800fb7c <tcp_input+0x2bc>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	61fb      	str	r3, [r7, #28]
 800fade:	e09d      	b.n	800fc1c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	7d1b      	ldrb	r3, [r3, #20]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d105      	bne.n	800faf4 <tcp_input+0x234>
 800fae8:	4b15      	ldr	r3, [pc, #84]	; (800fb40 <tcp_input+0x280>)
 800faea:	22fb      	movs	r2, #251	; 0xfb
 800faec:	4924      	ldr	r1, [pc, #144]	; (800fb80 <tcp_input+0x2c0>)
 800faee:	4816      	ldr	r0, [pc, #88]	; (800fb48 <tcp_input+0x288>)
 800faf0:	f009 fbba 	bl	8019268 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	7d1b      	ldrb	r3, [r3, #20]
 800faf8:	2b0a      	cmp	r3, #10
 800fafa:	d105      	bne.n	800fb08 <tcp_input+0x248>
 800fafc:	4b10      	ldr	r3, [pc, #64]	; (800fb40 <tcp_input+0x280>)
 800fafe:	22fc      	movs	r2, #252	; 0xfc
 800fb00:	4920      	ldr	r1, [pc, #128]	; (800fb84 <tcp_input+0x2c4>)
 800fb02:	4811      	ldr	r0, [pc, #68]	; (800fb48 <tcp_input+0x288>)
 800fb04:	f009 fbb0 	bl	8019268 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	7d1b      	ldrb	r3, [r3, #20]
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d105      	bne.n	800fb1c <tcp_input+0x25c>
 800fb10:	4b0b      	ldr	r3, [pc, #44]	; (800fb40 <tcp_input+0x280>)
 800fb12:	22fd      	movs	r2, #253	; 0xfd
 800fb14:	491c      	ldr	r1, [pc, #112]	; (800fb88 <tcp_input+0x2c8>)
 800fb16:	480c      	ldr	r0, [pc, #48]	; (800fb48 <tcp_input+0x288>)
 800fb18:	f009 fba6 	bl	8019268 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	7a1b      	ldrb	r3, [r3, #8]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d033      	beq.n	800fb8c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	7a1a      	ldrb	r2, [r3, #8]
 800fb28:	4b09      	ldr	r3, [pc, #36]	; (800fb50 <tcp_input+0x290>)
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb30:	3301      	adds	r3, #1
 800fb32:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d029      	beq.n	800fb8c <tcp_input+0x2cc>
      prev = pcb;
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	61bb      	str	r3, [r7, #24]
      continue;
 800fb3c:	e06b      	b.n	800fc16 <tcp_input+0x356>
 800fb3e:	bf00      	nop
 800fb40:	0801c748 	.word	0x0801c748
 800fb44:	0801c77c 	.word	0x0801c77c
 800fb48:	0801c794 	.word	0x0801c794
 800fb4c:	20010eec 	.word	0x20010eec
 800fb50:	2000d750 	.word	0x2000d750
 800fb54:	20010ef0 	.word	0x20010ef0
 800fb58:	20010ef4 	.word	0x20010ef4
 800fb5c:	20010ef2 	.word	0x20010ef2
 800fb60:	0801c7bc 	.word	0x0801c7bc
 800fb64:	0801c7cc 	.word	0x0801c7cc
 800fb68:	0801c7d8 	.word	0x0801c7d8
 800fb6c:	20010efc 	.word	0x20010efc
 800fb70:	20010f00 	.word	0x20010f00
 800fb74:	20010f08 	.word	0x20010f08
 800fb78:	20010f06 	.word	0x20010f06
 800fb7c:	20010ed0 	.word	0x20010ed0
 800fb80:	0801c7f8 	.word	0x0801c7f8
 800fb84:	0801c820 	.word	0x0801c820
 800fb88:	0801c84c 	.word	0x0801c84c
    }

    if (pcb->remote_port == tcphdr->src &&
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	8b1a      	ldrh	r2, [r3, #24]
 800fb90:	4b72      	ldr	r3, [pc, #456]	; (800fd5c <tcp_input+0x49c>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	881b      	ldrh	r3, [r3, #0]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d13a      	bne.n	800fc12 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	8ada      	ldrh	r2, [r3, #22]
 800fba0:	4b6e      	ldr	r3, [pc, #440]	; (800fd5c <tcp_input+0x49c>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	885b      	ldrh	r3, [r3, #2]
 800fba6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d132      	bne.n	800fc12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	685a      	ldr	r2, [r3, #4]
 800fbb0:	4b6b      	ldr	r3, [pc, #428]	; (800fd60 <tcp_input+0x4a0>)
 800fbb2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d12c      	bne.n	800fc12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	4b68      	ldr	r3, [pc, #416]	; (800fd60 <tcp_input+0x4a0>)
 800fbbe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d126      	bne.n	800fc12 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fbc4:	69fb      	ldr	r3, [r7, #28]
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	69fa      	ldr	r2, [r7, #28]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d106      	bne.n	800fbdc <tcp_input+0x31c>
 800fbce:	4b65      	ldr	r3, [pc, #404]	; (800fd64 <tcp_input+0x4a4>)
 800fbd0:	f240 120d 	movw	r2, #269	; 0x10d
 800fbd4:	4964      	ldr	r1, [pc, #400]	; (800fd68 <tcp_input+0x4a8>)
 800fbd6:	4865      	ldr	r0, [pc, #404]	; (800fd6c <tcp_input+0x4ac>)
 800fbd8:	f009 fb46 	bl	8019268 <iprintf>
      if (prev != NULL) {
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00a      	beq.n	800fbf8 <tcp_input+0x338>
        prev->next = pcb->next;
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	68da      	ldr	r2, [r3, #12]
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fbea:	4b61      	ldr	r3, [pc, #388]	; (800fd70 <tcp_input+0x4b0>)
 800fbec:	681a      	ldr	r2, [r3, #0]
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fbf2:	4a5f      	ldr	r2, [pc, #380]	; (800fd70 <tcp_input+0x4b0>)
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	69fa      	ldr	r2, [r7, #28]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d111      	bne.n	800fc26 <tcp_input+0x366>
 800fc02:	4b58      	ldr	r3, [pc, #352]	; (800fd64 <tcp_input+0x4a4>)
 800fc04:	f240 1215 	movw	r2, #277	; 0x115
 800fc08:	495a      	ldr	r1, [pc, #360]	; (800fd74 <tcp_input+0x4b4>)
 800fc0a:	4858      	ldr	r0, [pc, #352]	; (800fd6c <tcp_input+0x4ac>)
 800fc0c:	f009 fb2c 	bl	8019268 <iprintf>
      break;
 800fc10:	e009      	b.n	800fc26 <tcp_input+0x366>
    }
    prev = pcb;
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	61fb      	str	r3, [r7, #28]
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f47f af5e 	bne.w	800fae0 <tcp_input+0x220>
 800fc24:	e000      	b.n	800fc28 <tcp_input+0x368>
      break;
 800fc26:	bf00      	nop
  }

  if (pcb == NULL) {
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f040 80aa 	bne.w	800fd84 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc30:	4b51      	ldr	r3, [pc, #324]	; (800fd78 <tcp_input+0x4b8>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	61fb      	str	r3, [r7, #28]
 800fc36:	e03f      	b.n	800fcb8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	7d1b      	ldrb	r3, [r3, #20]
 800fc3c:	2b0a      	cmp	r3, #10
 800fc3e:	d006      	beq.n	800fc4e <tcp_input+0x38e>
 800fc40:	4b48      	ldr	r3, [pc, #288]	; (800fd64 <tcp_input+0x4a4>)
 800fc42:	f240 121f 	movw	r2, #287	; 0x11f
 800fc46:	494d      	ldr	r1, [pc, #308]	; (800fd7c <tcp_input+0x4bc>)
 800fc48:	4848      	ldr	r0, [pc, #288]	; (800fd6c <tcp_input+0x4ac>)
 800fc4a:	f009 fb0d 	bl	8019268 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	7a1b      	ldrb	r3, [r3, #8]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d009      	beq.n	800fc6a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	7a1a      	ldrb	r2, [r3, #8]
 800fc5a:	4b41      	ldr	r3, [pc, #260]	; (800fd60 <tcp_input+0x4a0>)
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc62:	3301      	adds	r3, #1
 800fc64:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d122      	bne.n	800fcb0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	8b1a      	ldrh	r2, [r3, #24]
 800fc6e:	4b3b      	ldr	r3, [pc, #236]	; (800fd5c <tcp_input+0x49c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	881b      	ldrh	r3, [r3, #0]
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d11b      	bne.n	800fcb2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	8ada      	ldrh	r2, [r3, #22]
 800fc7e:	4b37      	ldr	r3, [pc, #220]	; (800fd5c <tcp_input+0x49c>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	885b      	ldrh	r3, [r3, #2]
 800fc84:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d113      	bne.n	800fcb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	685a      	ldr	r2, [r3, #4]
 800fc8e:	4b34      	ldr	r3, [pc, #208]	; (800fd60 <tcp_input+0x4a0>)
 800fc90:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d10d      	bne.n	800fcb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	4b31      	ldr	r3, [pc, #196]	; (800fd60 <tcp_input+0x4a0>)
 800fc9c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d107      	bne.n	800fcb2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fca2:	69f8      	ldr	r0, [r7, #28]
 800fca4:	f000 fb56 	bl	8010354 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7fd fbab 	bl	800d404 <pbuf_free>
        return;
 800fcae:	e1fd      	b.n	80100ac <tcp_input+0x7ec>
        continue;
 800fcb0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	61fb      	str	r3, [r7, #28]
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1bc      	bne.n	800fc38 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fcc2:	4b2f      	ldr	r3, [pc, #188]	; (800fd80 <tcp_input+0x4c0>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	617b      	str	r3, [r7, #20]
 800fcc8:	e02a      	b.n	800fd20 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	7a1b      	ldrb	r3, [r3, #8]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d00c      	beq.n	800fcec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	7a1a      	ldrb	r2, [r3, #8]
 800fcd6:	4b22      	ldr	r3, [pc, #136]	; (800fd60 <tcp_input+0x4a0>)
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fcde:	3301      	adds	r3, #1
 800fce0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d002      	beq.n	800fcec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	61bb      	str	r3, [r7, #24]
        continue;
 800fcea:	e016      	b.n	800fd1a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	8ada      	ldrh	r2, [r3, #22]
 800fcf0:	4b1a      	ldr	r3, [pc, #104]	; (800fd5c <tcp_input+0x49c>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	885b      	ldrh	r3, [r3, #2]
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d10c      	bne.n	800fd16 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	4b17      	ldr	r3, [pc, #92]	; (800fd60 <tcp_input+0x4a0>)
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d00f      	beq.n	800fd28 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00d      	beq.n	800fd2a <tcp_input+0x46a>
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d009      	beq.n	800fd2a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	617b      	str	r3, [r7, #20]
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d1d1      	bne.n	800fcca <tcp_input+0x40a>
 800fd26:	e000      	b.n	800fd2a <tcp_input+0x46a>
            break;
 800fd28:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d029      	beq.n	800fd84 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00a      	beq.n	800fd4c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	68da      	ldr	r2, [r3, #12]
 800fd3a:	69bb      	ldr	r3, [r7, #24]
 800fd3c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fd3e:	4b10      	ldr	r3, [pc, #64]	; (800fd80 <tcp_input+0x4c0>)
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fd46:	4a0e      	ldr	r2, [pc, #56]	; (800fd80 <tcp_input+0x4c0>)
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fd4c:	6978      	ldr	r0, [r7, #20]
 800fd4e:	f000 fa03 	bl	8010158 <tcp_listen_input>
      }
      pbuf_free(p);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7fd fb56 	bl	800d404 <pbuf_free>
      return;
 800fd58:	e1a8      	b.n	80100ac <tcp_input+0x7ec>
 800fd5a:	bf00      	nop
 800fd5c:	20010eec 	.word	0x20010eec
 800fd60:	2000d750 	.word	0x2000d750
 800fd64:	0801c748 	.word	0x0801c748
 800fd68:	0801c874 	.word	0x0801c874
 800fd6c:	0801c794 	.word	0x0801c794
 800fd70:	20010ed0 	.word	0x20010ed0
 800fd74:	0801c8a0 	.word	0x0801c8a0
 800fd78:	20010ed4 	.word	0x20010ed4
 800fd7c:	0801c8cc 	.word	0x0801c8cc
 800fd80:	20010ecc 	.word	0x20010ecc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f000 8158 	beq.w	801003c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fd8c:	4b95      	ldr	r3, [pc, #596]	; (800ffe4 <tcp_input+0x724>)
 800fd8e:	2200      	movs	r2, #0
 800fd90:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	891a      	ldrh	r2, [r3, #8]
 800fd96:	4b93      	ldr	r3, [pc, #588]	; (800ffe4 <tcp_input+0x724>)
 800fd98:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fd9a:	4a92      	ldr	r2, [pc, #584]	; (800ffe4 <tcp_input+0x724>)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fda0:	4b91      	ldr	r3, [pc, #580]	; (800ffe8 <tcp_input+0x728>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4a8f      	ldr	r2, [pc, #572]	; (800ffe4 <tcp_input+0x724>)
 800fda6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fda8:	4b90      	ldr	r3, [pc, #576]	; (800ffec <tcp_input+0x72c>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fdae:	4b90      	ldr	r3, [pc, #576]	; (800fff0 <tcp_input+0x730>)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fdb4:	4b8f      	ldr	r3, [pc, #572]	; (800fff4 <tcp_input+0x734>)
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fdba:	4b8f      	ldr	r3, [pc, #572]	; (800fff8 <tcp_input+0x738>)
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	f003 0308 	and.w	r3, r3, #8
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d006      	beq.n	800fdd4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	7b5b      	ldrb	r3, [r3, #13]
 800fdca:	f043 0301 	orr.w	r3, r3, #1
 800fdce:	b2da      	uxtb	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d017      	beq.n	800fe0c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fddc:	69f8      	ldr	r0, [r7, #28]
 800fdde:	f7ff f83d 	bl	800ee5c <tcp_process_refused_data>
 800fde2:	4603      	mov	r3, r0
 800fde4:	f113 0f0d 	cmn.w	r3, #13
 800fde8:	d007      	beq.n	800fdfa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00c      	beq.n	800fe0c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fdf2:	4b82      	ldr	r3, [pc, #520]	; (800fffc <tcp_input+0x73c>)
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d008      	beq.n	800fe0c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f040 80e3 	bne.w	800ffca <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fe04:	69f8      	ldr	r0, [r7, #28]
 800fe06:	f003 fe05 	bl	8013a14 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fe0a:	e0de      	b.n	800ffca <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fe0c:	4a7c      	ldr	r2, [pc, #496]	; (8010000 <tcp_input+0x740>)
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fe12:	69f8      	ldr	r0, [r7, #28]
 800fe14:	f000 fb18 	bl	8010448 <tcp_process>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fe1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe20:	f113 0f0d 	cmn.w	r3, #13
 800fe24:	f000 80d3 	beq.w	800ffce <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fe28:	4b71      	ldr	r3, [pc, #452]	; (800fff0 <tcp_input+0x730>)
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	f003 0308 	and.w	r3, r3, #8
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d015      	beq.n	800fe60 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d008      	beq.n	800fe50 <tcp_input+0x590>
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe44:	69fa      	ldr	r2, [r7, #28]
 800fe46:	6912      	ldr	r2, [r2, #16]
 800fe48:	f06f 010d 	mvn.w	r1, #13
 800fe4c:	4610      	mov	r0, r2
 800fe4e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fe50:	69f9      	ldr	r1, [r7, #28]
 800fe52:	486c      	ldr	r0, [pc, #432]	; (8010004 <tcp_input+0x744>)
 800fe54:	f7ff fbbc 	bl	800f5d0 <tcp_pcb_remove>
        tcp_free(pcb);
 800fe58:	69f8      	ldr	r0, [r7, #28]
 800fe5a:	f7fd fd8f 	bl	800d97c <tcp_free>
 800fe5e:	e0da      	b.n	8010016 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fe64:	4b63      	ldr	r3, [pc, #396]	; (800fff4 <tcp_input+0x734>)
 800fe66:	881b      	ldrh	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d01d      	beq.n	800fea8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fe6c:	4b61      	ldr	r3, [pc, #388]	; (800fff4 <tcp_input+0x734>)
 800fe6e:	881b      	ldrh	r3, [r3, #0]
 800fe70:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d00a      	beq.n	800fe92 <tcp_input+0x5d2>
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe82:	69fa      	ldr	r2, [r7, #28]
 800fe84:	6910      	ldr	r0, [r2, #16]
 800fe86:	89fa      	ldrh	r2, [r7, #14]
 800fe88:	69f9      	ldr	r1, [r7, #28]
 800fe8a:	4798      	blx	r3
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	74fb      	strb	r3, [r7, #19]
 800fe90:	e001      	b.n	800fe96 <tcp_input+0x5d6>
 800fe92:	2300      	movs	r3, #0
 800fe94:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fe96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe9a:	f113 0f0d 	cmn.w	r3, #13
 800fe9e:	f000 8098 	beq.w	800ffd2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fea2:	4b54      	ldr	r3, [pc, #336]	; (800fff4 <tcp_input+0x734>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fea8:	69f8      	ldr	r0, [r7, #28]
 800feaa:	f000 f915 	bl	80100d8 <tcp_input_delayed_close>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	f040 8090 	bne.w	800ffd6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800feb6:	4b4d      	ldr	r3, [pc, #308]	; (800ffec <tcp_input+0x72c>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d041      	beq.n	800ff42 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d006      	beq.n	800fed4 <tcp_input+0x614>
 800fec6:	4b50      	ldr	r3, [pc, #320]	; (8010008 <tcp_input+0x748>)
 800fec8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fecc:	494f      	ldr	r1, [pc, #316]	; (801000c <tcp_input+0x74c>)
 800fece:	4850      	ldr	r0, [pc, #320]	; (8010010 <tcp_input+0x750>)
 800fed0:	f009 f9ca 	bl	8019268 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	8b5b      	ldrh	r3, [r3, #26]
 800fed8:	f003 0310 	and.w	r3, r3, #16
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d008      	beq.n	800fef2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fee0:	4b42      	ldr	r3, [pc, #264]	; (800ffec <tcp_input+0x72c>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fd fa8d 	bl	800d404 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800feea:	69f8      	ldr	r0, [r7, #28]
 800feec:	f7fe f88a 	bl	800e004 <tcp_abort>
            goto aborted;
 800fef0:	e091      	b.n	8010016 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00c      	beq.n	800ff16 <tcp_input+0x656>
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ff02:	69fb      	ldr	r3, [r7, #28]
 800ff04:	6918      	ldr	r0, [r3, #16]
 800ff06:	4b39      	ldr	r3, [pc, #228]	; (800ffec <tcp_input+0x72c>)
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	69f9      	ldr	r1, [r7, #28]
 800ff0e:	47a0      	blx	r4
 800ff10:	4603      	mov	r3, r0
 800ff12:	74fb      	strb	r3, [r7, #19]
 800ff14:	e008      	b.n	800ff28 <tcp_input+0x668>
 800ff16:	4b35      	ldr	r3, [pc, #212]	; (800ffec <tcp_input+0x72c>)
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	69f9      	ldr	r1, [r7, #28]
 800ff1e:	2000      	movs	r0, #0
 800ff20:	f7ff f890 	bl	800f044 <tcp_recv_null>
 800ff24:	4603      	mov	r3, r0
 800ff26:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ff28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff2c:	f113 0f0d 	cmn.w	r3, #13
 800ff30:	d053      	beq.n	800ffda <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ff32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d003      	beq.n	800ff42 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ff3a:	4b2c      	ldr	r3, [pc, #176]	; (800ffec <tcp_input+0x72c>)
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ff42:	4b2b      	ldr	r3, [pc, #172]	; (800fff0 <tcp_input+0x730>)
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	f003 0320 	and.w	r3, r3, #32
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d030      	beq.n	800ffb0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d009      	beq.n	800ff6a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff5a:	7b5a      	ldrb	r2, [r3, #13]
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff60:	f042 0220 	orr.w	r2, r2, #32
 800ff64:	b2d2      	uxtb	r2, r2
 800ff66:	735a      	strb	r2, [r3, #13]
 800ff68:	e022      	b.n	800ffb0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff6e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ff72:	d005      	beq.n	800ff80 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff78:	3301      	adds	r3, #1
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00b      	beq.n	800ffa2 <tcp_input+0x6e2>
 800ff8a:	69fb      	ldr	r3, [r7, #28]
 800ff8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	6918      	ldr	r0, [r3, #16]
 800ff94:	2300      	movs	r3, #0
 800ff96:	2200      	movs	r2, #0
 800ff98:	69f9      	ldr	r1, [r7, #28]
 800ff9a:	47a0      	blx	r4
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	74fb      	strb	r3, [r7, #19]
 800ffa0:	e001      	b.n	800ffa6 <tcp_input+0x6e6>
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ffa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffaa:	f113 0f0d 	cmn.w	r3, #13
 800ffae:	d016      	beq.n	800ffde <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ffb0:	4b13      	ldr	r3, [pc, #76]	; (8010000 <tcp_input+0x740>)
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ffb6:	69f8      	ldr	r0, [r7, #28]
 800ffb8:	f000 f88e 	bl	80100d8 <tcp_input_delayed_close>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d128      	bne.n	8010014 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ffc2:	69f8      	ldr	r0, [r7, #28]
 800ffc4:	f002 ff20 	bl	8012e08 <tcp_output>
 800ffc8:	e025      	b.n	8010016 <tcp_input+0x756>
        goto aborted;
 800ffca:	bf00      	nop
 800ffcc:	e023      	b.n	8010016 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ffce:	bf00      	nop
 800ffd0:	e021      	b.n	8010016 <tcp_input+0x756>
              goto aborted;
 800ffd2:	bf00      	nop
 800ffd4:	e01f      	b.n	8010016 <tcp_input+0x756>
          goto aborted;
 800ffd6:	bf00      	nop
 800ffd8:	e01d      	b.n	8010016 <tcp_input+0x756>
            goto aborted;
 800ffda:	bf00      	nop
 800ffdc:	e01b      	b.n	8010016 <tcp_input+0x756>
              goto aborted;
 800ffde:	bf00      	nop
 800ffe0:	e019      	b.n	8010016 <tcp_input+0x756>
 800ffe2:	bf00      	nop
 800ffe4:	20010edc 	.word	0x20010edc
 800ffe8:	20010eec 	.word	0x20010eec
 800ffec:	20010f0c 	.word	0x20010f0c
 800fff0:	20010f09 	.word	0x20010f09
 800fff4:	20010f04 	.word	0x20010f04
 800fff8:	20010f08 	.word	0x20010f08
 800fffc:	20010f06 	.word	0x20010f06
 8010000:	20010f10 	.word	0x20010f10
 8010004:	20010ed0 	.word	0x20010ed0
 8010008:	0801c748 	.word	0x0801c748
 801000c:	0801c8fc 	.word	0x0801c8fc
 8010010:	0801c794 	.word	0x0801c794
          goto aborted;
 8010014:	bf00      	nop
    tcp_input_pcb = NULL;
 8010016:	4b27      	ldr	r3, [pc, #156]	; (80100b4 <tcp_input+0x7f4>)
 8010018:	2200      	movs	r2, #0
 801001a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801001c:	4b26      	ldr	r3, [pc, #152]	; (80100b8 <tcp_input+0x7f8>)
 801001e:	2200      	movs	r2, #0
 8010020:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010022:	4b26      	ldr	r3, [pc, #152]	; (80100bc <tcp_input+0x7fc>)
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d03f      	beq.n	80100aa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801002a:	4b24      	ldr	r3, [pc, #144]	; (80100bc <tcp_input+0x7fc>)
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	4618      	mov	r0, r3
 8010030:	f7fd f9e8 	bl	800d404 <pbuf_free>
      inseg.p = NULL;
 8010034:	4b21      	ldr	r3, [pc, #132]	; (80100bc <tcp_input+0x7fc>)
 8010036:	2200      	movs	r2, #0
 8010038:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801003a:	e036      	b.n	80100aa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801003c:	4b20      	ldr	r3, [pc, #128]	; (80100c0 <tcp_input+0x800>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	899b      	ldrh	r3, [r3, #12]
 8010042:	b29b      	uxth	r3, r3
 8010044:	4618      	mov	r0, r3
 8010046:	f7fb fda9 	bl	800bb9c <lwip_htons>
 801004a:	4603      	mov	r3, r0
 801004c:	b2db      	uxtb	r3, r3
 801004e:	f003 0304 	and.w	r3, r3, #4
 8010052:	2b00      	cmp	r3, #0
 8010054:	d118      	bne.n	8010088 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010056:	4b1b      	ldr	r3, [pc, #108]	; (80100c4 <tcp_input+0x804>)
 8010058:	6819      	ldr	r1, [r3, #0]
 801005a:	4b1b      	ldr	r3, [pc, #108]	; (80100c8 <tcp_input+0x808>)
 801005c:	881b      	ldrh	r3, [r3, #0]
 801005e:	461a      	mov	r2, r3
 8010060:	4b1a      	ldr	r3, [pc, #104]	; (80100cc <tcp_input+0x80c>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010066:	4b16      	ldr	r3, [pc, #88]	; (80100c0 <tcp_input+0x800>)
 8010068:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801006a:	885b      	ldrh	r3, [r3, #2]
 801006c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801006e:	4a14      	ldr	r2, [pc, #80]	; (80100c0 <tcp_input+0x800>)
 8010070:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010072:	8812      	ldrh	r2, [r2, #0]
 8010074:	b292      	uxth	r2, r2
 8010076:	9202      	str	r2, [sp, #8]
 8010078:	9301      	str	r3, [sp, #4]
 801007a:	4b15      	ldr	r3, [pc, #84]	; (80100d0 <tcp_input+0x810>)
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	4b15      	ldr	r3, [pc, #84]	; (80100d4 <tcp_input+0x814>)
 8010080:	4602      	mov	r2, r0
 8010082:	2000      	movs	r0, #0
 8010084:	f003 fc74 	bl	8013970 <tcp_rst>
    pbuf_free(p);
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7fd f9bb 	bl	800d404 <pbuf_free>
  return;
 801008e:	e00c      	b.n	80100aa <tcp_input+0x7ea>
    goto dropped;
 8010090:	bf00      	nop
 8010092:	e006      	b.n	80100a2 <tcp_input+0x7e2>
    goto dropped;
 8010094:	bf00      	nop
 8010096:	e004      	b.n	80100a2 <tcp_input+0x7e2>
    goto dropped;
 8010098:	bf00      	nop
 801009a:	e002      	b.n	80100a2 <tcp_input+0x7e2>
      goto dropped;
 801009c:	bf00      	nop
 801009e:	e000      	b.n	80100a2 <tcp_input+0x7e2>
      goto dropped;
 80100a0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f7fd f9ae 	bl	800d404 <pbuf_free>
 80100a8:	e000      	b.n	80100ac <tcp_input+0x7ec>
  return;
 80100aa:	bf00      	nop
}
 80100ac:	3724      	adds	r7, #36	; 0x24
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd90      	pop	{r4, r7, pc}
 80100b2:	bf00      	nop
 80100b4:	20010f10 	.word	0x20010f10
 80100b8:	20010f0c 	.word	0x20010f0c
 80100bc:	20010edc 	.word	0x20010edc
 80100c0:	20010eec 	.word	0x20010eec
 80100c4:	20010f00 	.word	0x20010f00
 80100c8:	20010f06 	.word	0x20010f06
 80100cc:	20010efc 	.word	0x20010efc
 80100d0:	2000d760 	.word	0x2000d760
 80100d4:	2000d764 	.word	0x2000d764

080100d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d106      	bne.n	80100f4 <tcp_input_delayed_close+0x1c>
 80100e6:	4b17      	ldr	r3, [pc, #92]	; (8010144 <tcp_input_delayed_close+0x6c>)
 80100e8:	f240 225a 	movw	r2, #602	; 0x25a
 80100ec:	4916      	ldr	r1, [pc, #88]	; (8010148 <tcp_input_delayed_close+0x70>)
 80100ee:	4817      	ldr	r0, [pc, #92]	; (801014c <tcp_input_delayed_close+0x74>)
 80100f0:	f009 f8ba 	bl	8019268 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80100f4:	4b16      	ldr	r3, [pc, #88]	; (8010150 <tcp_input_delayed_close+0x78>)
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	f003 0310 	and.w	r3, r3, #16
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d01c      	beq.n	801013a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	8b5b      	ldrh	r3, [r3, #26]
 8010104:	f003 0310 	and.w	r3, r3, #16
 8010108:	2b00      	cmp	r3, #0
 801010a:	d10d      	bne.n	8010128 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010112:	2b00      	cmp	r3, #0
 8010114:	d008      	beq.n	8010128 <tcp_input_delayed_close+0x50>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	6912      	ldr	r2, [r2, #16]
 8010120:	f06f 010e 	mvn.w	r1, #14
 8010124:	4610      	mov	r0, r2
 8010126:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010128:	6879      	ldr	r1, [r7, #4]
 801012a:	480a      	ldr	r0, [pc, #40]	; (8010154 <tcp_input_delayed_close+0x7c>)
 801012c:	f7ff fa50 	bl	800f5d0 <tcp_pcb_remove>
    tcp_free(pcb);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7fd fc23 	bl	800d97c <tcp_free>
    return 1;
 8010136:	2301      	movs	r3, #1
 8010138:	e000      	b.n	801013c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801013a:	2300      	movs	r3, #0
}
 801013c:	4618      	mov	r0, r3
 801013e:	3708      	adds	r7, #8
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}
 8010144:	0801c748 	.word	0x0801c748
 8010148:	0801c918 	.word	0x0801c918
 801014c:	0801c794 	.word	0x0801c794
 8010150:	20010f09 	.word	0x20010f09
 8010154:	20010ed0 	.word	0x20010ed0

08010158 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010158:	b590      	push	{r4, r7, lr}
 801015a:	b08b      	sub	sp, #44	; 0x2c
 801015c:	af04      	add	r7, sp, #16
 801015e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010160:	4b6f      	ldr	r3, [pc, #444]	; (8010320 <tcp_listen_input+0x1c8>)
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	f003 0304 	and.w	r3, r3, #4
 8010168:	2b00      	cmp	r3, #0
 801016a:	f040 80d2 	bne.w	8010312 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d106      	bne.n	8010182 <tcp_listen_input+0x2a>
 8010174:	4b6b      	ldr	r3, [pc, #428]	; (8010324 <tcp_listen_input+0x1cc>)
 8010176:	f240 2281 	movw	r2, #641	; 0x281
 801017a:	496b      	ldr	r1, [pc, #428]	; (8010328 <tcp_listen_input+0x1d0>)
 801017c:	486b      	ldr	r0, [pc, #428]	; (801032c <tcp_listen_input+0x1d4>)
 801017e:	f009 f873 	bl	8019268 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010182:	4b67      	ldr	r3, [pc, #412]	; (8010320 <tcp_listen_input+0x1c8>)
 8010184:	781b      	ldrb	r3, [r3, #0]
 8010186:	f003 0310 	and.w	r3, r3, #16
 801018a:	2b00      	cmp	r3, #0
 801018c:	d019      	beq.n	80101c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801018e:	4b68      	ldr	r3, [pc, #416]	; (8010330 <tcp_listen_input+0x1d8>)
 8010190:	6819      	ldr	r1, [r3, #0]
 8010192:	4b68      	ldr	r3, [pc, #416]	; (8010334 <tcp_listen_input+0x1dc>)
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	461a      	mov	r2, r3
 8010198:	4b67      	ldr	r3, [pc, #412]	; (8010338 <tcp_listen_input+0x1e0>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801019e:	4b67      	ldr	r3, [pc, #412]	; (801033c <tcp_listen_input+0x1e4>)
 80101a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101a2:	885b      	ldrh	r3, [r3, #2]
 80101a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101a6:	4a65      	ldr	r2, [pc, #404]	; (801033c <tcp_listen_input+0x1e4>)
 80101a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101aa:	8812      	ldrh	r2, [r2, #0]
 80101ac:	b292      	uxth	r2, r2
 80101ae:	9202      	str	r2, [sp, #8]
 80101b0:	9301      	str	r3, [sp, #4]
 80101b2:	4b63      	ldr	r3, [pc, #396]	; (8010340 <tcp_listen_input+0x1e8>)
 80101b4:	9300      	str	r3, [sp, #0]
 80101b6:	4b63      	ldr	r3, [pc, #396]	; (8010344 <tcp_listen_input+0x1ec>)
 80101b8:	4602      	mov	r2, r0
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f003 fbd8 	bl	8013970 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80101c0:	e0a9      	b.n	8010316 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80101c2:	4b57      	ldr	r3, [pc, #348]	; (8010320 <tcp_listen_input+0x1c8>)
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	f003 0302 	and.w	r3, r3, #2
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f000 80a3 	beq.w	8010316 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	7d5b      	ldrb	r3, [r3, #21]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7ff f859 	bl	800f28c <tcp_alloc>
 80101da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d111      	bne.n	8010206 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	699b      	ldr	r3, [r3, #24]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d00a      	beq.n	8010200 <tcp_listen_input+0xa8>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	699b      	ldr	r3, [r3, #24]
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	6910      	ldr	r0, [r2, #16]
 80101f2:	f04f 32ff 	mov.w	r2, #4294967295
 80101f6:	2100      	movs	r1, #0
 80101f8:	4798      	blx	r3
 80101fa:	4603      	mov	r3, r0
 80101fc:	73bb      	strb	r3, [r7, #14]
      return;
 80101fe:	e08b      	b.n	8010318 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010200:	23f0      	movs	r3, #240	; 0xf0
 8010202:	73bb      	strb	r3, [r7, #14]
      return;
 8010204:	e088      	b.n	8010318 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010206:	4b50      	ldr	r3, [pc, #320]	; (8010348 <tcp_listen_input+0x1f0>)
 8010208:	695a      	ldr	r2, [r3, #20]
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801020e:	4b4e      	ldr	r3, [pc, #312]	; (8010348 <tcp_listen_input+0x1f0>)
 8010210:	691a      	ldr	r2, [r3, #16]
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	8ada      	ldrh	r2, [r3, #22]
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801021e:	4b47      	ldr	r3, [pc, #284]	; (801033c <tcp_listen_input+0x1e4>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	b29a      	uxth	r2, r3
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	2203      	movs	r2, #3
 801022e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010230:	4b41      	ldr	r3, [pc, #260]	; (8010338 <tcp_listen_input+0x1e0>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010242:	6978      	ldr	r0, [r7, #20]
 8010244:	f7ff fa58 	bl	800f6f8 <tcp_next_iss>
 8010248:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	693a      	ldr	r2, [r7, #16]
 801024e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	693a      	ldr	r2, [r7, #16]
 8010254:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	693a      	ldr	r2, [r7, #16]
 801025a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	693a      	ldr	r2, [r7, #16]
 8010260:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010262:	4b35      	ldr	r3, [pc, #212]	; (8010338 <tcp_listen_input+0x1e0>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	1e5a      	subs	r2, r3, #1
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	691a      	ldr	r2, [r3, #16]
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	7a5b      	ldrb	r3, [r3, #9]
 801027e:	f003 030c 	and.w	r3, r3, #12
 8010282:	b2da      	uxtb	r2, r3
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	7a1a      	ldrb	r2, [r3, #8]
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010290:	4b2e      	ldr	r3, [pc, #184]	; (801034c <tcp_listen_input+0x1f4>)
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	60da      	str	r2, [r3, #12]
 8010298:	4a2c      	ldr	r2, [pc, #176]	; (801034c <tcp_listen_input+0x1f4>)
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	6013      	str	r3, [r2, #0]
 801029e:	f003 fd29 	bl	8013cf4 <tcp_timer_needed>
 80102a2:	4b2b      	ldr	r3, [pc, #172]	; (8010350 <tcp_listen_input+0x1f8>)
 80102a4:	2201      	movs	r2, #1
 80102a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80102a8:	6978      	ldr	r0, [r7, #20]
 80102aa:	f001 fd8f 	bl	8011dcc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80102ae:	4b23      	ldr	r3, [pc, #140]	; (801033c <tcp_listen_input+0x1e4>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	89db      	ldrh	r3, [r3, #14]
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	3304      	adds	r3, #4
 80102d0:	4618      	mov	r0, r3
 80102d2:	f007 fac1 	bl	8017858 <ip4_route>
 80102d6:	4601      	mov	r1, r0
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	3304      	adds	r3, #4
 80102dc:	461a      	mov	r2, r3
 80102de:	4620      	mov	r0, r4
 80102e0:	f7ff fa30 	bl	800f744 <tcp_eff_send_mss_netif>
 80102e4:	4603      	mov	r3, r0
 80102e6:	461a      	mov	r2, r3
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80102ec:	2112      	movs	r1, #18
 80102ee:	6978      	ldr	r0, [r7, #20]
 80102f0:	f002 fc9c 	bl	8012c2c <tcp_enqueue_flags>
 80102f4:	4603      	mov	r3, r0
 80102f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80102f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d004      	beq.n	801030a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010300:	2100      	movs	r1, #0
 8010302:	6978      	ldr	r0, [r7, #20]
 8010304:	f7fd fdc0 	bl	800de88 <tcp_abandon>
      return;
 8010308:	e006      	b.n	8010318 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801030a:	6978      	ldr	r0, [r7, #20]
 801030c:	f002 fd7c 	bl	8012e08 <tcp_output>
  return;
 8010310:	e001      	b.n	8010316 <tcp_listen_input+0x1be>
    return;
 8010312:	bf00      	nop
 8010314:	e000      	b.n	8010318 <tcp_listen_input+0x1c0>
  return;
 8010316:	bf00      	nop
}
 8010318:	371c      	adds	r7, #28
 801031a:	46bd      	mov	sp, r7
 801031c:	bd90      	pop	{r4, r7, pc}
 801031e:	bf00      	nop
 8010320:	20010f08 	.word	0x20010f08
 8010324:	0801c748 	.word	0x0801c748
 8010328:	0801c940 	.word	0x0801c940
 801032c:	0801c794 	.word	0x0801c794
 8010330:	20010f00 	.word	0x20010f00
 8010334:	20010f06 	.word	0x20010f06
 8010338:	20010efc 	.word	0x20010efc
 801033c:	20010eec 	.word	0x20010eec
 8010340:	2000d760 	.word	0x2000d760
 8010344:	2000d764 	.word	0x2000d764
 8010348:	2000d750 	.word	0x2000d750
 801034c:	20010ed0 	.word	0x20010ed0
 8010350:	20010ed8 	.word	0x20010ed8

08010354 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b086      	sub	sp, #24
 8010358:	af04      	add	r7, sp, #16
 801035a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801035c:	4b2f      	ldr	r3, [pc, #188]	; (801041c <tcp_timewait_input+0xc8>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	f003 0304 	and.w	r3, r3, #4
 8010364:	2b00      	cmp	r3, #0
 8010366:	d153      	bne.n	8010410 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d106      	bne.n	801037c <tcp_timewait_input+0x28>
 801036e:	4b2c      	ldr	r3, [pc, #176]	; (8010420 <tcp_timewait_input+0xcc>)
 8010370:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010374:	492b      	ldr	r1, [pc, #172]	; (8010424 <tcp_timewait_input+0xd0>)
 8010376:	482c      	ldr	r0, [pc, #176]	; (8010428 <tcp_timewait_input+0xd4>)
 8010378:	f008 ff76 	bl	8019268 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801037c:	4b27      	ldr	r3, [pc, #156]	; (801041c <tcp_timewait_input+0xc8>)
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	f003 0302 	and.w	r3, r3, #2
 8010384:	2b00      	cmp	r3, #0
 8010386:	d02a      	beq.n	80103de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010388:	4b28      	ldr	r3, [pc, #160]	; (801042c <tcp_timewait_input+0xd8>)
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	2b00      	cmp	r3, #0
 8010394:	db2d      	blt.n	80103f2 <tcp_timewait_input+0x9e>
 8010396:	4b25      	ldr	r3, [pc, #148]	; (801042c <tcp_timewait_input+0xd8>)
 8010398:	681a      	ldr	r2, [r3, #0]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039e:	6879      	ldr	r1, [r7, #4]
 80103a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80103a2:	440b      	add	r3, r1
 80103a4:	1ad3      	subs	r3, r2, r3
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	dc23      	bgt.n	80103f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103aa:	4b21      	ldr	r3, [pc, #132]	; (8010430 <tcp_timewait_input+0xdc>)
 80103ac:	6819      	ldr	r1, [r3, #0]
 80103ae:	4b21      	ldr	r3, [pc, #132]	; (8010434 <tcp_timewait_input+0xe0>)
 80103b0:	881b      	ldrh	r3, [r3, #0]
 80103b2:	461a      	mov	r2, r3
 80103b4:	4b1d      	ldr	r3, [pc, #116]	; (801042c <tcp_timewait_input+0xd8>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103ba:	4b1f      	ldr	r3, [pc, #124]	; (8010438 <tcp_timewait_input+0xe4>)
 80103bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103be:	885b      	ldrh	r3, [r3, #2]
 80103c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103c2:	4a1d      	ldr	r2, [pc, #116]	; (8010438 <tcp_timewait_input+0xe4>)
 80103c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103c6:	8812      	ldrh	r2, [r2, #0]
 80103c8:	b292      	uxth	r2, r2
 80103ca:	9202      	str	r2, [sp, #8]
 80103cc:	9301      	str	r3, [sp, #4]
 80103ce:	4b1b      	ldr	r3, [pc, #108]	; (801043c <tcp_timewait_input+0xe8>)
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	4b1b      	ldr	r3, [pc, #108]	; (8010440 <tcp_timewait_input+0xec>)
 80103d4:	4602      	mov	r2, r0
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f003 faca 	bl	8013970 <tcp_rst>
      return;
 80103dc:	e01b      	b.n	8010416 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80103de:	4b0f      	ldr	r3, [pc, #60]	; (801041c <tcp_timewait_input+0xc8>)
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	f003 0301 	and.w	r3, r3, #1
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d003      	beq.n	80103f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80103ea:	4b16      	ldr	r3, [pc, #88]	; (8010444 <tcp_timewait_input+0xf0>)
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80103f2:	4b10      	ldr	r3, [pc, #64]	; (8010434 <tcp_timewait_input+0xe0>)
 80103f4:	881b      	ldrh	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00c      	beq.n	8010414 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	8b5b      	ldrh	r3, [r3, #26]
 80103fe:	f043 0302 	orr.w	r3, r3, #2
 8010402:	b29a      	uxth	r2, r3
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f002 fcfd 	bl	8012e08 <tcp_output>
  }
  return;
 801040e:	e001      	b.n	8010414 <tcp_timewait_input+0xc0>
    return;
 8010410:	bf00      	nop
 8010412:	e000      	b.n	8010416 <tcp_timewait_input+0xc2>
  return;
 8010414:	bf00      	nop
}
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	20010f08 	.word	0x20010f08
 8010420:	0801c748 	.word	0x0801c748
 8010424:	0801c960 	.word	0x0801c960
 8010428:	0801c794 	.word	0x0801c794
 801042c:	20010efc 	.word	0x20010efc
 8010430:	20010f00 	.word	0x20010f00
 8010434:	20010f06 	.word	0x20010f06
 8010438:	20010eec 	.word	0x20010eec
 801043c:	2000d760 	.word	0x2000d760
 8010440:	2000d764 	.word	0x2000d764
 8010444:	20010ec4 	.word	0x20010ec4

08010448 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010448:	b590      	push	{r4, r7, lr}
 801044a:	b08d      	sub	sp, #52	; 0x34
 801044c:	af04      	add	r7, sp, #16
 801044e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010450:	2300      	movs	r3, #0
 8010452:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010454:	2300      	movs	r3, #0
 8010456:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d106      	bne.n	801046c <tcp_process+0x24>
 801045e:	4b9d      	ldr	r3, [pc, #628]	; (80106d4 <tcp_process+0x28c>)
 8010460:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010464:	499c      	ldr	r1, [pc, #624]	; (80106d8 <tcp_process+0x290>)
 8010466:	489d      	ldr	r0, [pc, #628]	; (80106dc <tcp_process+0x294>)
 8010468:	f008 fefe 	bl	8019268 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801046c:	4b9c      	ldr	r3, [pc, #624]	; (80106e0 <tcp_process+0x298>)
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	f003 0304 	and.w	r3, r3, #4
 8010474:	2b00      	cmp	r3, #0
 8010476:	d04e      	beq.n	8010516 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	7d1b      	ldrb	r3, [r3, #20]
 801047c:	2b02      	cmp	r3, #2
 801047e:	d108      	bne.n	8010492 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010484:	4b97      	ldr	r3, [pc, #604]	; (80106e4 <tcp_process+0x29c>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	429a      	cmp	r2, r3
 801048a:	d123      	bne.n	80104d4 <tcp_process+0x8c>
        acceptable = 1;
 801048c:	2301      	movs	r3, #1
 801048e:	76fb      	strb	r3, [r7, #27]
 8010490:	e020      	b.n	80104d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010496:	4b94      	ldr	r3, [pc, #592]	; (80106e8 <tcp_process+0x2a0>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	429a      	cmp	r2, r3
 801049c:	d102      	bne.n	80104a4 <tcp_process+0x5c>
        acceptable = 1;
 801049e:	2301      	movs	r3, #1
 80104a0:	76fb      	strb	r3, [r7, #27]
 80104a2:	e017      	b.n	80104d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80104a4:	4b90      	ldr	r3, [pc, #576]	; (80106e8 <tcp_process+0x2a0>)
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ac:	1ad3      	subs	r3, r2, r3
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	db10      	blt.n	80104d4 <tcp_process+0x8c>
 80104b2:	4b8d      	ldr	r3, [pc, #564]	; (80106e8 <tcp_process+0x2a0>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104be:	440b      	add	r3, r1
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	dc06      	bgt.n	80104d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	8b5b      	ldrh	r3, [r3, #26]
 80104ca:	f043 0302 	orr.w	r3, r3, #2
 80104ce:	b29a      	uxth	r2, r3
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80104d4:	7efb      	ldrb	r3, [r7, #27]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d01b      	beq.n	8010512 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	7d1b      	ldrb	r3, [r3, #20]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d106      	bne.n	80104f0 <tcp_process+0xa8>
 80104e2:	4b7c      	ldr	r3, [pc, #496]	; (80106d4 <tcp_process+0x28c>)
 80104e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80104e8:	4980      	ldr	r1, [pc, #512]	; (80106ec <tcp_process+0x2a4>)
 80104ea:	487c      	ldr	r0, [pc, #496]	; (80106dc <tcp_process+0x294>)
 80104ec:	f008 febc 	bl	8019268 <iprintf>
      recv_flags |= TF_RESET;
 80104f0:	4b7f      	ldr	r3, [pc, #508]	; (80106f0 <tcp_process+0x2a8>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	f043 0308 	orr.w	r3, r3, #8
 80104f8:	b2da      	uxtb	r2, r3
 80104fa:	4b7d      	ldr	r3, [pc, #500]	; (80106f0 <tcp_process+0x2a8>)
 80104fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	8b5b      	ldrh	r3, [r3, #26]
 8010502:	f023 0301 	bic.w	r3, r3, #1
 8010506:	b29a      	uxth	r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801050c:	f06f 030d 	mvn.w	r3, #13
 8010510:	e37a      	b.n	8010c08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010512:	2300      	movs	r3, #0
 8010514:	e378      	b.n	8010c08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010516:	4b72      	ldr	r3, [pc, #456]	; (80106e0 <tcp_process+0x298>)
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	f003 0302 	and.w	r3, r3, #2
 801051e:	2b00      	cmp	r3, #0
 8010520:	d010      	beq.n	8010544 <tcp_process+0xfc>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	7d1b      	ldrb	r3, [r3, #20]
 8010526:	2b02      	cmp	r3, #2
 8010528:	d00c      	beq.n	8010544 <tcp_process+0xfc>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	7d1b      	ldrb	r3, [r3, #20]
 801052e:	2b03      	cmp	r3, #3
 8010530:	d008      	beq.n	8010544 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	8b5b      	ldrh	r3, [r3, #26]
 8010536:	f043 0302 	orr.w	r3, r3, #2
 801053a:	b29a      	uxth	r2, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010540:	2300      	movs	r3, #0
 8010542:	e361      	b.n	8010c08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	8b5b      	ldrh	r3, [r3, #26]
 8010548:	f003 0310 	and.w	r3, r3, #16
 801054c:	2b00      	cmp	r3, #0
 801054e:	d103      	bne.n	8010558 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010550:	4b68      	ldr	r3, [pc, #416]	; (80106f4 <tcp_process+0x2ac>)
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f001 fc2f 	bl	8011dcc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	7d1b      	ldrb	r3, [r3, #20]
 8010572:	3b02      	subs	r3, #2
 8010574:	2b07      	cmp	r3, #7
 8010576:	f200 8337 	bhi.w	8010be8 <tcp_process+0x7a0>
 801057a:	a201      	add	r2, pc, #4	; (adr r2, 8010580 <tcp_process+0x138>)
 801057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010580:	080105a1 	.word	0x080105a1
 8010584:	080107d1 	.word	0x080107d1
 8010588:	08010949 	.word	0x08010949
 801058c:	08010973 	.word	0x08010973
 8010590:	08010a97 	.word	0x08010a97
 8010594:	08010949 	.word	0x08010949
 8010598:	08010b23 	.word	0x08010b23
 801059c:	08010bb3 	.word	0x08010bb3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80105a0:	4b4f      	ldr	r3, [pc, #316]	; (80106e0 <tcp_process+0x298>)
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	f003 0310 	and.w	r3, r3, #16
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f000 80e4 	beq.w	8010776 <tcp_process+0x32e>
 80105ae:	4b4c      	ldr	r3, [pc, #304]	; (80106e0 <tcp_process+0x298>)
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f003 0302 	and.w	r3, r3, #2
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	f000 80dd 	beq.w	8010776 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105c0:	1c5a      	adds	r2, r3, #1
 80105c2:	4b48      	ldr	r3, [pc, #288]	; (80106e4 <tcp_process+0x29c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	f040 80d5 	bne.w	8010776 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80105cc:	4b46      	ldr	r3, [pc, #280]	; (80106e8 <tcp_process+0x2a0>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	1c5a      	adds	r2, r3, #1
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80105de:	4b41      	ldr	r3, [pc, #260]	; (80106e4 <tcp_process+0x29c>)
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80105e6:	4b44      	ldr	r3, [pc, #272]	; (80106f8 <tcp_process+0x2b0>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	89db      	ldrh	r3, [r3, #14]
 80105ec:	b29a      	uxth	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010600:	4b39      	ldr	r3, [pc, #228]	; (80106e8 <tcp_process+0x2a0>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	1e5a      	subs	r2, r3, #1
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2204      	movs	r2, #4
 801060e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	3304      	adds	r3, #4
 8010618:	4618      	mov	r0, r3
 801061a:	f007 f91d 	bl	8017858 <ip4_route>
 801061e:	4601      	mov	r1, r0
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	3304      	adds	r3, #4
 8010624:	461a      	mov	r2, r3
 8010626:	4620      	mov	r0, r4
 8010628:	f7ff f88c 	bl	800f744 <tcp_eff_send_mss_netif>
 801062c:	4603      	mov	r3, r0
 801062e:	461a      	mov	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010638:	009a      	lsls	r2, r3, #2
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801063e:	005b      	lsls	r3, r3, #1
 8010640:	f241 111c 	movw	r1, #4380	; 0x111c
 8010644:	428b      	cmp	r3, r1
 8010646:	bf38      	it	cc
 8010648:	460b      	movcc	r3, r1
 801064a:	429a      	cmp	r2, r3
 801064c:	d204      	bcs.n	8010658 <tcp_process+0x210>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010652:	009b      	lsls	r3, r3, #2
 8010654:	b29b      	uxth	r3, r3
 8010656:	e00d      	b.n	8010674 <tcp_process+0x22c>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801065c:	005b      	lsls	r3, r3, #1
 801065e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010662:	4293      	cmp	r3, r2
 8010664:	d904      	bls.n	8010670 <tcp_process+0x228>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801066a:	005b      	lsls	r3, r3, #1
 801066c:	b29b      	uxth	r3, r3
 801066e:	e001      	b.n	8010674 <tcp_process+0x22c>
 8010670:	f241 131c 	movw	r3, #4380	; 0x111c
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010680:	2b00      	cmp	r3, #0
 8010682:	d106      	bne.n	8010692 <tcp_process+0x24a>
 8010684:	4b13      	ldr	r3, [pc, #76]	; (80106d4 <tcp_process+0x28c>)
 8010686:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801068a:	491c      	ldr	r1, [pc, #112]	; (80106fc <tcp_process+0x2b4>)
 801068c:	4813      	ldr	r0, [pc, #76]	; (80106dc <tcp_process+0x294>)
 801068e:	f008 fdeb 	bl	8019268 <iprintf>
        --pcb->snd_queuelen;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010698:	3b01      	subs	r3, #1
 801069a:	b29a      	uxth	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d12a      	bne.n	8010704 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d106      	bne.n	80106c8 <tcp_process+0x280>
 80106ba:	4b06      	ldr	r3, [pc, #24]	; (80106d4 <tcp_process+0x28c>)
 80106bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80106c0:	490f      	ldr	r1, [pc, #60]	; (8010700 <tcp_process+0x2b8>)
 80106c2:	4806      	ldr	r0, [pc, #24]	; (80106dc <tcp_process+0x294>)
 80106c4:	f008 fdd0 	bl	8019268 <iprintf>
          pcb->unsent = rseg->next;
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80106d0:	e01c      	b.n	801070c <tcp_process+0x2c4>
 80106d2:	bf00      	nop
 80106d4:	0801c748 	.word	0x0801c748
 80106d8:	0801c980 	.word	0x0801c980
 80106dc:	0801c794 	.word	0x0801c794
 80106e0:	20010f08 	.word	0x20010f08
 80106e4:	20010f00 	.word	0x20010f00
 80106e8:	20010efc 	.word	0x20010efc
 80106ec:	0801c99c 	.word	0x0801c99c
 80106f0:	20010f09 	.word	0x20010f09
 80106f4:	20010ec4 	.word	0x20010ec4
 80106f8:	20010eec 	.word	0x20010eec
 80106fc:	0801c9bc 	.word	0x0801c9bc
 8010700:	0801c9d4 	.word	0x0801c9d4
        } else {
          pcb->unacked = rseg->next;
 8010704:	69fb      	ldr	r3, [r7, #28]
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801070c:	69f8      	ldr	r0, [r7, #28]
 801070e:	f7fe fc36 	bl	800ef7e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010716:	2b00      	cmp	r3, #0
 8010718:	d104      	bne.n	8010724 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010720:	861a      	strh	r2, [r3, #48]	; 0x30
 8010722:	e006      	b.n	8010732 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010738:	2b00      	cmp	r3, #0
 801073a:	d00a      	beq.n	8010752 <tcp_process+0x30a>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	6910      	ldr	r0, [r2, #16]
 8010746:	2200      	movs	r2, #0
 8010748:	6879      	ldr	r1, [r7, #4]
 801074a:	4798      	blx	r3
 801074c:	4603      	mov	r3, r0
 801074e:	76bb      	strb	r3, [r7, #26]
 8010750:	e001      	b.n	8010756 <tcp_process+0x30e>
 8010752:	2300      	movs	r3, #0
 8010754:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010756:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801075a:	f113 0f0d 	cmn.w	r3, #13
 801075e:	d102      	bne.n	8010766 <tcp_process+0x31e>
          return ERR_ABRT;
 8010760:	f06f 030c 	mvn.w	r3, #12
 8010764:	e250      	b.n	8010c08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	8b5b      	ldrh	r3, [r3, #26]
 801076a:	f043 0302 	orr.w	r3, r3, #2
 801076e:	b29a      	uxth	r2, r3
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010774:	e23a      	b.n	8010bec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010776:	4b98      	ldr	r3, [pc, #608]	; (80109d8 <tcp_process+0x590>)
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	f003 0310 	and.w	r3, r3, #16
 801077e:	2b00      	cmp	r3, #0
 8010780:	f000 8234 	beq.w	8010bec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010784:	4b95      	ldr	r3, [pc, #596]	; (80109dc <tcp_process+0x594>)
 8010786:	6819      	ldr	r1, [r3, #0]
 8010788:	4b95      	ldr	r3, [pc, #596]	; (80109e0 <tcp_process+0x598>)
 801078a:	881b      	ldrh	r3, [r3, #0]
 801078c:	461a      	mov	r2, r3
 801078e:	4b95      	ldr	r3, [pc, #596]	; (80109e4 <tcp_process+0x59c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010794:	4b94      	ldr	r3, [pc, #592]	; (80109e8 <tcp_process+0x5a0>)
 8010796:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010798:	885b      	ldrh	r3, [r3, #2]
 801079a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801079c:	4a92      	ldr	r2, [pc, #584]	; (80109e8 <tcp_process+0x5a0>)
 801079e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107a0:	8812      	ldrh	r2, [r2, #0]
 80107a2:	b292      	uxth	r2, r2
 80107a4:	9202      	str	r2, [sp, #8]
 80107a6:	9301      	str	r3, [sp, #4]
 80107a8:	4b90      	ldr	r3, [pc, #576]	; (80109ec <tcp_process+0x5a4>)
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	4b90      	ldr	r3, [pc, #576]	; (80109f0 <tcp_process+0x5a8>)
 80107ae:	4602      	mov	r2, r0
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f003 f8dd 	bl	8013970 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80107bc:	2b05      	cmp	r3, #5
 80107be:	f200 8215 	bhi.w	8010bec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2200      	movs	r2, #0
 80107c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f002 fea9 	bl	8013520 <tcp_rexmit_rto>
      break;
 80107ce:	e20d      	b.n	8010bec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80107d0:	4b81      	ldr	r3, [pc, #516]	; (80109d8 <tcp_process+0x590>)
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	f003 0310 	and.w	r3, r3, #16
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f000 80a1 	beq.w	8010920 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80107de:	4b7f      	ldr	r3, [pc, #508]	; (80109dc <tcp_process+0x594>)
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107e6:	1ad3      	subs	r3, r2, r3
 80107e8:	3b01      	subs	r3, #1
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	db7e      	blt.n	80108ec <tcp_process+0x4a4>
 80107ee:	4b7b      	ldr	r3, [pc, #492]	; (80109dc <tcp_process+0x594>)
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	dc77      	bgt.n	80108ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2204      	movs	r2, #4
 8010800:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010806:	2b00      	cmp	r3, #0
 8010808:	d102      	bne.n	8010810 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801080a:	23fa      	movs	r3, #250	; 0xfa
 801080c:	76bb      	strb	r3, [r7, #26]
 801080e:	e01d      	b.n	801084c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010814:	699b      	ldr	r3, [r3, #24]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d106      	bne.n	8010828 <tcp_process+0x3e0>
 801081a:	4b76      	ldr	r3, [pc, #472]	; (80109f4 <tcp_process+0x5ac>)
 801081c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010820:	4975      	ldr	r1, [pc, #468]	; (80109f8 <tcp_process+0x5b0>)
 8010822:	4876      	ldr	r0, [pc, #472]	; (80109fc <tcp_process+0x5b4>)
 8010824:	f008 fd20 	bl	8019268 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801082c:	699b      	ldr	r3, [r3, #24]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d00a      	beq.n	8010848 <tcp_process+0x400>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010836:	699b      	ldr	r3, [r3, #24]
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	6910      	ldr	r0, [r2, #16]
 801083c:	2200      	movs	r2, #0
 801083e:	6879      	ldr	r1, [r7, #4]
 8010840:	4798      	blx	r3
 8010842:	4603      	mov	r3, r0
 8010844:	76bb      	strb	r3, [r7, #26]
 8010846:	e001      	b.n	801084c <tcp_process+0x404>
 8010848:	23f0      	movs	r3, #240	; 0xf0
 801084a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801084c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00a      	beq.n	801086a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010854:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010858:	f113 0f0d 	cmn.w	r3, #13
 801085c:	d002      	beq.n	8010864 <tcp_process+0x41c>
              tcp_abort(pcb);
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7fd fbd0 	bl	800e004 <tcp_abort>
            }
            return ERR_ABRT;
 8010864:	f06f 030c 	mvn.w	r3, #12
 8010868:	e1ce      	b.n	8010c08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f000 fae0 	bl	8010e30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010870:	4b63      	ldr	r3, [pc, #396]	; (8010a00 <tcp_process+0x5b8>)
 8010872:	881b      	ldrh	r3, [r3, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d005      	beq.n	8010884 <tcp_process+0x43c>
            recv_acked--;
 8010878:	4b61      	ldr	r3, [pc, #388]	; (8010a00 <tcp_process+0x5b8>)
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	3b01      	subs	r3, #1
 801087e:	b29a      	uxth	r2, r3
 8010880:	4b5f      	ldr	r3, [pc, #380]	; (8010a00 <tcp_process+0x5b8>)
 8010882:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010888:	009a      	lsls	r2, r3, #2
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801088e:	005b      	lsls	r3, r3, #1
 8010890:	f241 111c 	movw	r1, #4380	; 0x111c
 8010894:	428b      	cmp	r3, r1
 8010896:	bf38      	it	cc
 8010898:	460b      	movcc	r3, r1
 801089a:	429a      	cmp	r2, r3
 801089c:	d204      	bcs.n	80108a8 <tcp_process+0x460>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108a2:	009b      	lsls	r3, r3, #2
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	e00d      	b.n	80108c4 <tcp_process+0x47c>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108ac:	005b      	lsls	r3, r3, #1
 80108ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d904      	bls.n	80108c0 <tcp_process+0x478>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108ba:	005b      	lsls	r3, r3, #1
 80108bc:	b29b      	uxth	r3, r3
 80108be:	e001      	b.n	80108c4 <tcp_process+0x47c>
 80108c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80108ca:	4b4e      	ldr	r3, [pc, #312]	; (8010a04 <tcp_process+0x5bc>)
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	f003 0320 	and.w	r3, r3, #32
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d037      	beq.n	8010946 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	8b5b      	ldrh	r3, [r3, #26]
 80108da:	f043 0302 	orr.w	r3, r3, #2
 80108de:	b29a      	uxth	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2207      	movs	r2, #7
 80108e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80108ea:	e02c      	b.n	8010946 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108ec:	4b3b      	ldr	r3, [pc, #236]	; (80109dc <tcp_process+0x594>)
 80108ee:	6819      	ldr	r1, [r3, #0]
 80108f0:	4b3b      	ldr	r3, [pc, #236]	; (80109e0 <tcp_process+0x598>)
 80108f2:	881b      	ldrh	r3, [r3, #0]
 80108f4:	461a      	mov	r2, r3
 80108f6:	4b3b      	ldr	r3, [pc, #236]	; (80109e4 <tcp_process+0x59c>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108fc:	4b3a      	ldr	r3, [pc, #232]	; (80109e8 <tcp_process+0x5a0>)
 80108fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010900:	885b      	ldrh	r3, [r3, #2]
 8010902:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010904:	4a38      	ldr	r2, [pc, #224]	; (80109e8 <tcp_process+0x5a0>)
 8010906:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010908:	8812      	ldrh	r2, [r2, #0]
 801090a:	b292      	uxth	r2, r2
 801090c:	9202      	str	r2, [sp, #8]
 801090e:	9301      	str	r3, [sp, #4]
 8010910:	4b36      	ldr	r3, [pc, #216]	; (80109ec <tcp_process+0x5a4>)
 8010912:	9300      	str	r3, [sp, #0]
 8010914:	4b36      	ldr	r3, [pc, #216]	; (80109f0 <tcp_process+0x5a8>)
 8010916:	4602      	mov	r2, r0
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f003 f829 	bl	8013970 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801091e:	e167      	b.n	8010bf0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010920:	4b2d      	ldr	r3, [pc, #180]	; (80109d8 <tcp_process+0x590>)
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	f003 0302 	and.w	r3, r3, #2
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 8161 	beq.w	8010bf0 <tcp_process+0x7a8>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010932:	1e5a      	subs	r2, r3, #1
 8010934:	4b2b      	ldr	r3, [pc, #172]	; (80109e4 <tcp_process+0x59c>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	429a      	cmp	r2, r3
 801093a:	f040 8159 	bne.w	8010bf0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f002 fe10 	bl	8013564 <tcp_rexmit>
      break;
 8010944:	e154      	b.n	8010bf0 <tcp_process+0x7a8>
 8010946:	e153      	b.n	8010bf0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f000 fa71 	bl	8010e30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801094e:	4b2d      	ldr	r3, [pc, #180]	; (8010a04 <tcp_process+0x5bc>)
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	f003 0320 	and.w	r3, r3, #32
 8010956:	2b00      	cmp	r3, #0
 8010958:	f000 814c 	beq.w	8010bf4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	8b5b      	ldrh	r3, [r3, #26]
 8010960:	f043 0302 	orr.w	r3, r3, #2
 8010964:	b29a      	uxth	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2207      	movs	r2, #7
 801096e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010970:	e140      	b.n	8010bf4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f000 fa5c 	bl	8010e30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010978:	4b22      	ldr	r3, [pc, #136]	; (8010a04 <tcp_process+0x5bc>)
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	f003 0320 	and.w	r3, r3, #32
 8010980:	2b00      	cmp	r3, #0
 8010982:	d071      	beq.n	8010a68 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010984:	4b14      	ldr	r3, [pc, #80]	; (80109d8 <tcp_process+0x590>)
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	f003 0310 	and.w	r3, r3, #16
 801098c:	2b00      	cmp	r3, #0
 801098e:	d060      	beq.n	8010a52 <tcp_process+0x60a>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010994:	4b11      	ldr	r3, [pc, #68]	; (80109dc <tcp_process+0x594>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	429a      	cmp	r2, r3
 801099a:	d15a      	bne.n	8010a52 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d156      	bne.n	8010a52 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	8b5b      	ldrh	r3, [r3, #26]
 80109a8:	f043 0302 	orr.w	r3, r3, #2
 80109ac:	b29a      	uxth	r2, r3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7fe fdbc 	bl	800f530 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80109b8:	4b13      	ldr	r3, [pc, #76]	; (8010a08 <tcp_process+0x5c0>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	429a      	cmp	r2, r3
 80109c0:	d105      	bne.n	80109ce <tcp_process+0x586>
 80109c2:	4b11      	ldr	r3, [pc, #68]	; (8010a08 <tcp_process+0x5c0>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	68db      	ldr	r3, [r3, #12]
 80109c8:	4a0f      	ldr	r2, [pc, #60]	; (8010a08 <tcp_process+0x5c0>)
 80109ca:	6013      	str	r3, [r2, #0]
 80109cc:	e02e      	b.n	8010a2c <tcp_process+0x5e4>
 80109ce:	4b0e      	ldr	r3, [pc, #56]	; (8010a08 <tcp_process+0x5c0>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	617b      	str	r3, [r7, #20]
 80109d4:	e027      	b.n	8010a26 <tcp_process+0x5de>
 80109d6:	bf00      	nop
 80109d8:	20010f08 	.word	0x20010f08
 80109dc:	20010f00 	.word	0x20010f00
 80109e0:	20010f06 	.word	0x20010f06
 80109e4:	20010efc 	.word	0x20010efc
 80109e8:	20010eec 	.word	0x20010eec
 80109ec:	2000d760 	.word	0x2000d760
 80109f0:	2000d764 	.word	0x2000d764
 80109f4:	0801c748 	.word	0x0801c748
 80109f8:	0801c9e8 	.word	0x0801c9e8
 80109fc:	0801c794 	.word	0x0801c794
 8010a00:	20010f04 	.word	0x20010f04
 8010a04:	20010f09 	.word	0x20010f09
 8010a08:	20010ed0 	.word	0x20010ed0
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d104      	bne.n	8010a20 <tcp_process+0x5d8>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	68da      	ldr	r2, [r3, #12]
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	60da      	str	r2, [r3, #12]
 8010a1e:	e005      	b.n	8010a2c <tcp_process+0x5e4>
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	617b      	str	r3, [r7, #20]
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1ef      	bne.n	8010a0c <tcp_process+0x5c4>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	60da      	str	r2, [r3, #12]
 8010a32:	4b77      	ldr	r3, [pc, #476]	; (8010c10 <tcp_process+0x7c8>)
 8010a34:	2201      	movs	r2, #1
 8010a36:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	220a      	movs	r2, #10
 8010a3c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010a3e:	4b75      	ldr	r3, [pc, #468]	; (8010c14 <tcp_process+0x7cc>)
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	60da      	str	r2, [r3, #12]
 8010a46:	4a73      	ldr	r2, [pc, #460]	; (8010c14 <tcp_process+0x7cc>)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6013      	str	r3, [r2, #0]
 8010a4c:	f003 f952 	bl	8013cf4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010a50:	e0d2      	b.n	8010bf8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	8b5b      	ldrh	r3, [r3, #26]
 8010a56:	f043 0302 	orr.w	r3, r3, #2
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2208      	movs	r2, #8
 8010a64:	751a      	strb	r2, [r3, #20]
      break;
 8010a66:	e0c7      	b.n	8010bf8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a68:	4b6b      	ldr	r3, [pc, #428]	; (8010c18 <tcp_process+0x7d0>)
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	f003 0310 	and.w	r3, r3, #16
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f000 80c1 	beq.w	8010bf8 <tcp_process+0x7b0>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a7a:	4b68      	ldr	r3, [pc, #416]	; (8010c1c <tcp_process+0x7d4>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	f040 80ba 	bne.w	8010bf8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f040 80b5 	bne.w	8010bf8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2206      	movs	r2, #6
 8010a92:	751a      	strb	r2, [r3, #20]
      break;
 8010a94:	e0b0      	b.n	8010bf8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f000 f9ca 	bl	8010e30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010a9c:	4b60      	ldr	r3, [pc, #384]	; (8010c20 <tcp_process+0x7d8>)
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	f003 0320 	and.w	r3, r3, #32
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f000 80a9 	beq.w	8010bfc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	8b5b      	ldrh	r3, [r3, #26]
 8010aae:	f043 0302 	orr.w	r3, r3, #2
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7fe fd39 	bl	800f530 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010abe:	4b59      	ldr	r3, [pc, #356]	; (8010c24 <tcp_process+0x7dc>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d105      	bne.n	8010ad4 <tcp_process+0x68c>
 8010ac8:	4b56      	ldr	r3, [pc, #344]	; (8010c24 <tcp_process+0x7dc>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	4a55      	ldr	r2, [pc, #340]	; (8010c24 <tcp_process+0x7dc>)
 8010ad0:	6013      	str	r3, [r2, #0]
 8010ad2:	e013      	b.n	8010afc <tcp_process+0x6b4>
 8010ad4:	4b53      	ldr	r3, [pc, #332]	; (8010c24 <tcp_process+0x7dc>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	613b      	str	r3, [r7, #16]
 8010ada:	e00c      	b.n	8010af6 <tcp_process+0x6ae>
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d104      	bne.n	8010af0 <tcp_process+0x6a8>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	68da      	ldr	r2, [r3, #12]
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	60da      	str	r2, [r3, #12]
 8010aee:	e005      	b.n	8010afc <tcp_process+0x6b4>
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	613b      	str	r3, [r7, #16]
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d1ef      	bne.n	8010adc <tcp_process+0x694>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2200      	movs	r2, #0
 8010b00:	60da      	str	r2, [r3, #12]
 8010b02:	4b43      	ldr	r3, [pc, #268]	; (8010c10 <tcp_process+0x7c8>)
 8010b04:	2201      	movs	r2, #1
 8010b06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	220a      	movs	r2, #10
 8010b0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010b0e:	4b41      	ldr	r3, [pc, #260]	; (8010c14 <tcp_process+0x7cc>)
 8010b10:	681a      	ldr	r2, [r3, #0]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	60da      	str	r2, [r3, #12]
 8010b16:	4a3f      	ldr	r2, [pc, #252]	; (8010c14 <tcp_process+0x7cc>)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6013      	str	r3, [r2, #0]
 8010b1c:	f003 f8ea 	bl	8013cf4 <tcp_timer_needed>
      }
      break;
 8010b20:	e06c      	b.n	8010bfc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 f984 	bl	8010e30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010b28:	4b3b      	ldr	r3, [pc, #236]	; (8010c18 <tcp_process+0x7d0>)
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	f003 0310 	and.w	r3, r3, #16
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d065      	beq.n	8010c00 <tcp_process+0x7b8>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b38:	4b38      	ldr	r3, [pc, #224]	; (8010c1c <tcp_process+0x7d4>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d15f      	bne.n	8010c00 <tcp_process+0x7b8>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d15b      	bne.n	8010c00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7fe fcf1 	bl	800f530 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010b4e:	4b35      	ldr	r3, [pc, #212]	; (8010c24 <tcp_process+0x7dc>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d105      	bne.n	8010b64 <tcp_process+0x71c>
 8010b58:	4b32      	ldr	r3, [pc, #200]	; (8010c24 <tcp_process+0x7dc>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	4a31      	ldr	r2, [pc, #196]	; (8010c24 <tcp_process+0x7dc>)
 8010b60:	6013      	str	r3, [r2, #0]
 8010b62:	e013      	b.n	8010b8c <tcp_process+0x744>
 8010b64:	4b2f      	ldr	r3, [pc, #188]	; (8010c24 <tcp_process+0x7dc>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	60fb      	str	r3, [r7, #12]
 8010b6a:	e00c      	b.n	8010b86 <tcp_process+0x73e>
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d104      	bne.n	8010b80 <tcp_process+0x738>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	68da      	ldr	r2, [r3, #12]
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	60da      	str	r2, [r3, #12]
 8010b7e:	e005      	b.n	8010b8c <tcp_process+0x744>
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	60fb      	str	r3, [r7, #12]
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d1ef      	bne.n	8010b6c <tcp_process+0x724>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	60da      	str	r2, [r3, #12]
 8010b92:	4b1f      	ldr	r3, [pc, #124]	; (8010c10 <tcp_process+0x7c8>)
 8010b94:	2201      	movs	r2, #1
 8010b96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	220a      	movs	r2, #10
 8010b9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010b9e:	4b1d      	ldr	r3, [pc, #116]	; (8010c14 <tcp_process+0x7cc>)
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	60da      	str	r2, [r3, #12]
 8010ba6:	4a1b      	ldr	r2, [pc, #108]	; (8010c14 <tcp_process+0x7cc>)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6013      	str	r3, [r2, #0]
 8010bac:	f003 f8a2 	bl	8013cf4 <tcp_timer_needed>
      }
      break;
 8010bb0:	e026      	b.n	8010c00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f000 f93c 	bl	8010e30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010bb8:	4b17      	ldr	r3, [pc, #92]	; (8010c18 <tcp_process+0x7d0>)
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	f003 0310 	and.w	r3, r3, #16
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d01f      	beq.n	8010c04 <tcp_process+0x7bc>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010bc8:	4b14      	ldr	r3, [pc, #80]	; (8010c1c <tcp_process+0x7d4>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d119      	bne.n	8010c04 <tcp_process+0x7bc>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d115      	bne.n	8010c04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010bd8:	4b11      	ldr	r3, [pc, #68]	; (8010c20 <tcp_process+0x7d8>)
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	f043 0310 	orr.w	r3, r3, #16
 8010be0:	b2da      	uxtb	r2, r3
 8010be2:	4b0f      	ldr	r3, [pc, #60]	; (8010c20 <tcp_process+0x7d8>)
 8010be4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010be6:	e00d      	b.n	8010c04 <tcp_process+0x7bc>
    default:
      break;
 8010be8:	bf00      	nop
 8010bea:	e00c      	b.n	8010c06 <tcp_process+0x7be>
      break;
 8010bec:	bf00      	nop
 8010bee:	e00a      	b.n	8010c06 <tcp_process+0x7be>
      break;
 8010bf0:	bf00      	nop
 8010bf2:	e008      	b.n	8010c06 <tcp_process+0x7be>
      break;
 8010bf4:	bf00      	nop
 8010bf6:	e006      	b.n	8010c06 <tcp_process+0x7be>
      break;
 8010bf8:	bf00      	nop
 8010bfa:	e004      	b.n	8010c06 <tcp_process+0x7be>
      break;
 8010bfc:	bf00      	nop
 8010bfe:	e002      	b.n	8010c06 <tcp_process+0x7be>
      break;
 8010c00:	bf00      	nop
 8010c02:	e000      	b.n	8010c06 <tcp_process+0x7be>
      break;
 8010c04:	bf00      	nop
  }
  return ERR_OK;
 8010c06:	2300      	movs	r3, #0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3724      	adds	r7, #36	; 0x24
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd90      	pop	{r4, r7, pc}
 8010c10:	20010ed8 	.word	0x20010ed8
 8010c14:	20010ed4 	.word	0x20010ed4
 8010c18:	20010f08 	.word	0x20010f08
 8010c1c:	20010f00 	.word	0x20010f00
 8010c20:	20010f09 	.word	0x20010f09
 8010c24:	20010ed0 	.word	0x20010ed0

08010c28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010c28:	b590      	push	{r4, r7, lr}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d106      	bne.n	8010c46 <tcp_oos_insert_segment+0x1e>
 8010c38:	4b3b      	ldr	r3, [pc, #236]	; (8010d28 <tcp_oos_insert_segment+0x100>)
 8010c3a:	f240 421f 	movw	r2, #1055	; 0x41f
 8010c3e:	493b      	ldr	r1, [pc, #236]	; (8010d2c <tcp_oos_insert_segment+0x104>)
 8010c40:	483b      	ldr	r0, [pc, #236]	; (8010d30 <tcp_oos_insert_segment+0x108>)
 8010c42:	f008 fb11 	bl	8019268 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	68db      	ldr	r3, [r3, #12]
 8010c4a:	899b      	ldrh	r3, [r3, #12]
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fa ffa4 	bl	800bb9c <lwip_htons>
 8010c54:	4603      	mov	r3, r0
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	f003 0301 	and.w	r3, r3, #1
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d028      	beq.n	8010cb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010c60:	6838      	ldr	r0, [r7, #0]
 8010c62:	f7fe f977 	bl	800ef54 <tcp_segs_free>
    next = NULL;
 8010c66:	2300      	movs	r3, #0
 8010c68:	603b      	str	r3, [r7, #0]
 8010c6a:	e056      	b.n	8010d1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	899b      	ldrh	r3, [r3, #12]
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fa ff91 	bl	800bb9c <lwip_htons>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	b2db      	uxtb	r3, r3
 8010c7e:	f003 0301 	and.w	r3, r3, #1
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d00d      	beq.n	8010ca2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	899b      	ldrh	r3, [r3, #12]
 8010c8c:	b29c      	uxth	r4, r3
 8010c8e:	2001      	movs	r0, #1
 8010c90:	f7fa ff84 	bl	800bb9c <lwip_htons>
 8010c94:	4603      	mov	r3, r0
 8010c96:	461a      	mov	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	4322      	orrs	r2, r4
 8010c9e:	b292      	uxth	r2, r2
 8010ca0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010cac:	68f8      	ldr	r0, [r7, #12]
 8010cae:	f7fe f966 	bl	800ef7e <tcp_seg_free>
    while (next &&
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d00e      	beq.n	8010cd6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	891b      	ldrh	r3, [r3, #8]
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	4b1d      	ldr	r3, [pc, #116]	; (8010d34 <tcp_oos_insert_segment+0x10c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	441a      	add	r2, r3
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	6839      	ldr	r1, [r7, #0]
 8010ccc:	8909      	ldrh	r1, [r1, #8]
 8010cce:	440b      	add	r3, r1
 8010cd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	daca      	bge.n	8010c6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d01e      	beq.n	8010d1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	891b      	ldrh	r3, [r3, #8]
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	4b14      	ldr	r3, [pc, #80]	; (8010d34 <tcp_oos_insert_segment+0x10c>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	441a      	add	r2, r3
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	dd12      	ble.n	8010d1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	4b0d      	ldr	r3, [pc, #52]	; (8010d34 <tcp_oos_insert_segment+0x10c>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	1ad3      	subs	r3, r2, r3
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	685a      	ldr	r2, [r3, #4]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	891b      	ldrh	r3, [r3, #8]
 8010d12:	4619      	mov	r1, r3
 8010d14:	4610      	mov	r0, r2
 8010d16:	f7fc f9ef 	bl	800d0f8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	683a      	ldr	r2, [r7, #0]
 8010d1e:	601a      	str	r2, [r3, #0]
}
 8010d20:	bf00      	nop
 8010d22:	3714      	adds	r7, #20
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd90      	pop	{r4, r7, pc}
 8010d28:	0801c748 	.word	0x0801c748
 8010d2c:	0801ca08 	.word	0x0801ca08
 8010d30:	0801c794 	.word	0x0801c794
 8010d34:	20010efc 	.word	0x20010efc

08010d38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010d38:	b5b0      	push	{r4, r5, r7, lr}
 8010d3a:	b086      	sub	sp, #24
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	60b9      	str	r1, [r7, #8]
 8010d42:	607a      	str	r2, [r7, #4]
 8010d44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010d46:	e03e      	b.n	8010dc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fc fbe2 	bl	800d520 <pbuf_clen>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d66:	8a7a      	ldrh	r2, [r7, #18]
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d906      	bls.n	8010d7a <tcp_free_acked_segments+0x42>
 8010d6c:	4b2a      	ldr	r3, [pc, #168]	; (8010e18 <tcp_free_acked_segments+0xe0>)
 8010d6e:	f240 4257 	movw	r2, #1111	; 0x457
 8010d72:	492a      	ldr	r1, [pc, #168]	; (8010e1c <tcp_free_acked_segments+0xe4>)
 8010d74:	482a      	ldr	r0, [pc, #168]	; (8010e20 <tcp_free_acked_segments+0xe8>)
 8010d76:	f008 fa77 	bl	8019268 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010d80:	8a7b      	ldrh	r3, [r7, #18]
 8010d82:	1ad3      	subs	r3, r2, r3
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	891a      	ldrh	r2, [r3, #8]
 8010d90:	4b24      	ldr	r3, [pc, #144]	; (8010e24 <tcp_free_acked_segments+0xec>)
 8010d92:	881b      	ldrh	r3, [r3, #0]
 8010d94:	4413      	add	r3, r2
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	4b22      	ldr	r3, [pc, #136]	; (8010e24 <tcp_free_acked_segments+0xec>)
 8010d9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010d9c:	6978      	ldr	r0, [r7, #20]
 8010d9e:	f7fe f8ee 	bl	800ef7e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d00c      	beq.n	8010dc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d109      	bne.n	8010dc6 <tcp_free_acked_segments+0x8e>
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d106      	bne.n	8010dc6 <tcp_free_acked_segments+0x8e>
 8010db8:	4b17      	ldr	r3, [pc, #92]	; (8010e18 <tcp_free_acked_segments+0xe0>)
 8010dba:	f240 4261 	movw	r2, #1121	; 0x461
 8010dbe:	491a      	ldr	r1, [pc, #104]	; (8010e28 <tcp_free_acked_segments+0xf0>)
 8010dc0:	4817      	ldr	r0, [pc, #92]	; (8010e20 <tcp_free_acked_segments+0xe8>)
 8010dc2:	f008 fa51 	bl	8019268 <iprintf>
  while (seg_list != NULL &&
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d020      	beq.n	8010e0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fa fef7 	bl	800bbc6 <lwip_htonl>
 8010dd8:	4604      	mov	r4, r0
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	891b      	ldrh	r3, [r3, #8]
 8010dde:	461d      	mov	r5, r3
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	899b      	ldrh	r3, [r3, #12]
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7fa fed7 	bl	800bb9c <lwip_htons>
 8010dee:	4603      	mov	r3, r0
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	f003 0303 	and.w	r3, r3, #3
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d001      	beq.n	8010dfe <tcp_free_acked_segments+0xc6>
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	e000      	b.n	8010e00 <tcp_free_acked_segments+0xc8>
 8010dfe:	2300      	movs	r3, #0
 8010e00:	442b      	add	r3, r5
 8010e02:	18e2      	adds	r2, r4, r3
 8010e04:	4b09      	ldr	r3, [pc, #36]	; (8010e2c <tcp_free_acked_segments+0xf4>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	dd9c      	ble.n	8010d48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010e0e:	68bb      	ldr	r3, [r7, #8]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3718      	adds	r7, #24
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bdb0      	pop	{r4, r5, r7, pc}
 8010e18:	0801c748 	.word	0x0801c748
 8010e1c:	0801ca30 	.word	0x0801ca30
 8010e20:	0801c794 	.word	0x0801c794
 8010e24:	20010f04 	.word	0x20010f04
 8010e28:	0801ca58 	.word	0x0801ca58
 8010e2c:	20010f00 	.word	0x20010f00

08010e30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010e30:	b5b0      	push	{r4, r5, r7, lr}
 8010e32:	b094      	sub	sp, #80	; 0x50
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d106      	bne.n	8010e50 <tcp_receive+0x20>
 8010e42:	4b91      	ldr	r3, [pc, #580]	; (8011088 <tcp_receive+0x258>)
 8010e44:	f240 427b 	movw	r2, #1147	; 0x47b
 8010e48:	4990      	ldr	r1, [pc, #576]	; (801108c <tcp_receive+0x25c>)
 8010e4a:	4891      	ldr	r0, [pc, #580]	; (8011090 <tcp_receive+0x260>)
 8010e4c:	f008 fa0c 	bl	8019268 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	7d1b      	ldrb	r3, [r3, #20]
 8010e54:	2b03      	cmp	r3, #3
 8010e56:	d806      	bhi.n	8010e66 <tcp_receive+0x36>
 8010e58:	4b8b      	ldr	r3, [pc, #556]	; (8011088 <tcp_receive+0x258>)
 8010e5a:	f240 427c 	movw	r2, #1148	; 0x47c
 8010e5e:	498d      	ldr	r1, [pc, #564]	; (8011094 <tcp_receive+0x264>)
 8010e60:	488b      	ldr	r0, [pc, #556]	; (8011090 <tcp_receive+0x260>)
 8010e62:	f008 fa01 	bl	8019268 <iprintf>

  if (flags & TCP_ACK) {
 8010e66:	4b8c      	ldr	r3, [pc, #560]	; (8011098 <tcp_receive+0x268>)
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	f003 0310 	and.w	r3, r3, #16
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f000 8264 	beq.w	801133c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e80:	4413      	add	r3, r2
 8010e82:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e88:	4b84      	ldr	r3, [pc, #528]	; (801109c <tcp_receive+0x26c>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	1ad3      	subs	r3, r2, r3
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	db1b      	blt.n	8010eca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e96:	4b81      	ldr	r3, [pc, #516]	; (801109c <tcp_receive+0x26c>)
 8010e98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d106      	bne.n	8010eac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010ea2:	4b7f      	ldr	r3, [pc, #508]	; (80110a0 <tcp_receive+0x270>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	1ad3      	subs	r3, r2, r3
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	db0e      	blt.n	8010eca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010eb0:	4b7b      	ldr	r3, [pc, #492]	; (80110a0 <tcp_receive+0x270>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d125      	bne.n	8010f04 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010eb8:	4b7a      	ldr	r3, [pc, #488]	; (80110a4 <tcp_receive+0x274>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	89db      	ldrh	r3, [r3, #14]
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d91c      	bls.n	8010f04 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010eca:	4b76      	ldr	r3, [pc, #472]	; (80110a4 <tcp_receive+0x274>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	89db      	ldrh	r3, [r3, #14]
 8010ed0:	b29a      	uxth	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d205      	bcs.n	8010ef4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010ef4:	4b69      	ldr	r3, [pc, #420]	; (801109c <tcp_receive+0x26c>)
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010efc:	4b68      	ldr	r3, [pc, #416]	; (80110a0 <tcp_receive+0x270>)
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010f04:	4b66      	ldr	r3, [pc, #408]	; (80110a0 <tcp_receive+0x270>)
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f0c:	1ad3      	subs	r3, r2, r3
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	dc58      	bgt.n	8010fc4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010f12:	4b65      	ldr	r3, [pc, #404]	; (80110a8 <tcp_receive+0x278>)
 8010f14:	881b      	ldrh	r3, [r3, #0]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d14b      	bne.n	8010fb2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f1e:	687a      	ldr	r2, [r7, #4]
 8010f20:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010f24:	4413      	add	r3, r2
 8010f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d142      	bne.n	8010fb2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	db3d      	blt.n	8010fb2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f3a:	4b59      	ldr	r3, [pc, #356]	; (80110a0 <tcp_receive+0x270>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d137      	bne.n	8010fb2 <tcp_receive+0x182>
              found_dupack = 1;
 8010f42:	2301      	movs	r3, #1
 8010f44:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010f4c:	2bff      	cmp	r3, #255	; 0xff
 8010f4e:	d007      	beq.n	8010f60 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010f56:	3301      	adds	r3, #1
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010f66:	2b03      	cmp	r3, #3
 8010f68:	d91b      	bls.n	8010fa2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f74:	4413      	add	r3, r2
 8010f76:	b29a      	uxth	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d30a      	bcc.n	8010f98 <tcp_receive+0x168>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f8c:	4413      	add	r3, r2
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f96:	e004      	b.n	8010fa2 <tcp_receive+0x172>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010fa8:	2b02      	cmp	r3, #2
 8010faa:	d902      	bls.n	8010fb2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f002 fb45 	bl	801363c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f040 8161 	bne.w	801127c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010fc2:	e15b      	b.n	801127c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010fc4:	4b36      	ldr	r3, [pc, #216]	; (80110a0 <tcp_receive+0x270>)
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fcc:	1ad3      	subs	r3, r2, r3
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	f2c0 814e 	blt.w	8011272 <tcp_receive+0x442>
 8010fd6:	4b32      	ldr	r3, [pc, #200]	; (80110a0 <tcp_receive+0x270>)
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fde:	1ad3      	subs	r3, r2, r3
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	f300 8146 	bgt.w	8011272 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	8b5b      	ldrh	r3, [r3, #26]
 8010fea:	f003 0304 	and.w	r3, r3, #4
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d010      	beq.n	8011014 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	8b5b      	ldrh	r3, [r3, #26]
 8010ff6:	f023 0304 	bic.w	r3, r3, #4
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2200      	movs	r2, #0
 8011010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011022:	10db      	asrs	r3, r3, #3
 8011024:	b21b      	sxth	r3, r3
 8011026:	b29a      	uxth	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801102e:	b29b      	uxth	r3, r3
 8011030:	4413      	add	r3, r2
 8011032:	b29b      	uxth	r3, r3
 8011034:	b21a      	sxth	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801103c:	4b18      	ldr	r3, [pc, #96]	; (80110a0 <tcp_receive+0x270>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	b29a      	uxth	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011046:	b29b      	uxth	r3, r3
 8011048:	1ad3      	subs	r3, r2, r3
 801104a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011054:	4b12      	ldr	r3, [pc, #72]	; (80110a0 <tcp_receive+0x270>)
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	7d1b      	ldrb	r3, [r3, #20]
 8011060:	2b03      	cmp	r3, #3
 8011062:	f240 8097 	bls.w	8011194 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011072:	429a      	cmp	r2, r3
 8011074:	d245      	bcs.n	8011102 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	8b5b      	ldrh	r3, [r3, #26]
 801107a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801107e:	2b00      	cmp	r3, #0
 8011080:	d014      	beq.n	80110ac <tcp_receive+0x27c>
 8011082:	2301      	movs	r3, #1
 8011084:	e013      	b.n	80110ae <tcp_receive+0x27e>
 8011086:	bf00      	nop
 8011088:	0801c748 	.word	0x0801c748
 801108c:	0801ca78 	.word	0x0801ca78
 8011090:	0801c794 	.word	0x0801c794
 8011094:	0801ca94 	.word	0x0801ca94
 8011098:	20010f08 	.word	0x20010f08
 801109c:	20010efc 	.word	0x20010efc
 80110a0:	20010f00 	.word	0x20010f00
 80110a4:	20010eec 	.word	0x20010eec
 80110a8:	20010f06 	.word	0x20010f06
 80110ac:	2302      	movs	r3, #2
 80110ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80110b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110bc:	fb12 f303 	smulbb	r3, r2, r3
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80110c4:	4293      	cmp	r3, r2
 80110c6:	bf28      	it	cs
 80110c8:	4613      	movcs	r3, r2
 80110ca:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80110d4:	4413      	add	r3, r2
 80110d6:	b29a      	uxth	r2, r3
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80110de:	429a      	cmp	r2, r3
 80110e0:	d309      	bcc.n	80110f6 <tcp_receive+0x2c6>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80110ea:	4413      	add	r3, r2
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80110f4:	e04e      	b.n	8011194 <tcp_receive+0x364>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011100:	e048      	b.n	8011194 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011108:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801110a:	4413      	add	r3, r2
 801110c:	b29a      	uxth	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011114:	429a      	cmp	r2, r3
 8011116:	d309      	bcc.n	801112c <tcp_receive+0x2fc>
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801111e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011120:	4413      	add	r3, r2
 8011122:	b29a      	uxth	r2, r3
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801112a:	e004      	b.n	8011136 <tcp_receive+0x306>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011142:	429a      	cmp	r2, r3
 8011144:	d326      	bcc.n	8011194 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011152:	1ad3      	subs	r3, r2, r3
 8011154:	b29a      	uxth	r2, r3
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011166:	4413      	add	r3, r2
 8011168:	b29a      	uxth	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011170:	429a      	cmp	r2, r3
 8011172:	d30a      	bcc.n	801118a <tcp_receive+0x35a>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801117e:	4413      	add	r3, r2
 8011180:	b29a      	uxth	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011188:	e004      	b.n	8011194 <tcp_receive+0x364>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011190:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801119c:	4a98      	ldr	r2, [pc, #608]	; (8011400 <tcp_receive+0x5d0>)
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7ff fdca 	bl	8010d38 <tcp_free_acked_segments>
 80111a4:	4602      	mov	r2, r0
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b2:	4a94      	ldr	r2, [pc, #592]	; (8011404 <tcp_receive+0x5d4>)
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f7ff fdbf 	bl	8010d38 <tcp_free_acked_segments>
 80111ba:	4602      	mov	r2, r0
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d104      	bne.n	80111d2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111ce:	861a      	strh	r2, [r3, #48]	; 0x30
 80111d0:	e002      	b.n	80111d8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2200      	movs	r2, #0
 80111d6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2200      	movs	r2, #0
 80111dc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d103      	bne.n	80111ee <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2200      	movs	r2, #0
 80111ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80111f4:	4b84      	ldr	r3, [pc, #528]	; (8011408 <tcp_receive+0x5d8>)
 80111f6:	881b      	ldrh	r3, [r3, #0]
 80111f8:	4413      	add	r3, r2
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	8b5b      	ldrh	r3, [r3, #26]
 8011206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801120a:	2b00      	cmp	r3, #0
 801120c:	d035      	beq.n	801127a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011212:	2b00      	cmp	r3, #0
 8011214:	d118      	bne.n	8011248 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00c      	beq.n	8011238 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	4618      	mov	r0, r3
 801122c:	f7fa fccb 	bl	800bbc6 <lwip_htonl>
 8011230:	4603      	mov	r3, r0
 8011232:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011234:	2b00      	cmp	r3, #0
 8011236:	dc20      	bgt.n	801127a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	8b5b      	ldrh	r3, [r3, #26]
 801123c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011240:	b29a      	uxth	r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011246:	e018      	b.n	801127a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	4618      	mov	r0, r3
 8011256:	f7fa fcb6 	bl	800bbc6 <lwip_htonl>
 801125a:	4603      	mov	r3, r0
 801125c:	1ae3      	subs	r3, r4, r3
 801125e:	2b00      	cmp	r3, #0
 8011260:	dc0b      	bgt.n	801127a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	8b5b      	ldrh	r3, [r3, #26]
 8011266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801126a:	b29a      	uxth	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011270:	e003      	b.n	801127a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f002 fbce 	bl	8013a14 <tcp_send_empty_ack>
 8011278:	e000      	b.n	801127c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801127a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011280:	2b00      	cmp	r3, #0
 8011282:	d05b      	beq.n	801133c <tcp_receive+0x50c>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011288:	4b60      	ldr	r3, [pc, #384]	; (801140c <tcp_receive+0x5dc>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	1ad3      	subs	r3, r2, r3
 801128e:	2b00      	cmp	r3, #0
 8011290:	da54      	bge.n	801133c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011292:	4b5f      	ldr	r3, [pc, #380]	; (8011410 <tcp_receive+0x5e0>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	b29a      	uxth	r2, r3
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801129c:	b29b      	uxth	r3, r3
 801129e:	1ad3      	subs	r3, r2, r3
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80112a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80112b0:	10db      	asrs	r3, r3, #3
 80112b2:	b21b      	sxth	r3, r3
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	1ad3      	subs	r3, r2, r3
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80112c4:	b29a      	uxth	r2, r3
 80112c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80112ca:	4413      	add	r3, r2
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	b21a      	sxth	r2, r3
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80112d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80112d8:	2b00      	cmp	r3, #0
 80112da:	da05      	bge.n	80112e8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80112dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80112e0:	425b      	negs	r3, r3
 80112e2:	b29b      	uxth	r3, r3
 80112e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80112e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80112f2:	109b      	asrs	r3, r3, #2
 80112f4:	b21b      	sxth	r3, r3
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011306:	b29a      	uxth	r2, r3
 8011308:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801130c:	4413      	add	r3, r2
 801130e:	b29b      	uxth	r3, r3
 8011310:	b21a      	sxth	r2, r3
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801131c:	10db      	asrs	r3, r3, #3
 801131e:	b21b      	sxth	r3, r3
 8011320:	b29a      	uxth	r2, r3
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011328:	b29b      	uxth	r3, r3
 801132a:	4413      	add	r3, r2
 801132c:	b29b      	uxth	r3, r3
 801132e:	b21a      	sxth	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801133c:	4b35      	ldr	r3, [pc, #212]	; (8011414 <tcp_receive+0x5e4>)
 801133e:	881b      	ldrh	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	f000 84e2 	beq.w	8011d0a <tcp_receive+0xeda>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	7d1b      	ldrb	r3, [r3, #20]
 801134a:	2b06      	cmp	r3, #6
 801134c:	f200 84dd 	bhi.w	8011d0a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011354:	4b30      	ldr	r3, [pc, #192]	; (8011418 <tcp_receive+0x5e8>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	3b01      	subs	r3, #1
 801135c:	2b00      	cmp	r3, #0
 801135e:	f2c0 808f 	blt.w	8011480 <tcp_receive+0x650>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011366:	4b2b      	ldr	r3, [pc, #172]	; (8011414 <tcp_receive+0x5e4>)
 8011368:	881b      	ldrh	r3, [r3, #0]
 801136a:	4619      	mov	r1, r3
 801136c:	4b2a      	ldr	r3, [pc, #168]	; (8011418 <tcp_receive+0x5e8>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	440b      	add	r3, r1
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	3301      	adds	r3, #1
 8011376:	2b00      	cmp	r3, #0
 8011378:	f300 8082 	bgt.w	8011480 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801137c:	4b27      	ldr	r3, [pc, #156]	; (801141c <tcp_receive+0x5ec>)
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011386:	4b24      	ldr	r3, [pc, #144]	; (8011418 <tcp_receive+0x5e8>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801138e:	4b23      	ldr	r3, [pc, #140]	; (801141c <tcp_receive+0x5ec>)
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d106      	bne.n	80113a4 <tcp_receive+0x574>
 8011396:	4b22      	ldr	r3, [pc, #136]	; (8011420 <tcp_receive+0x5f0>)
 8011398:	f240 5294 	movw	r2, #1428	; 0x594
 801139c:	4921      	ldr	r1, [pc, #132]	; (8011424 <tcp_receive+0x5f4>)
 801139e:	4822      	ldr	r0, [pc, #136]	; (8011428 <tcp_receive+0x5f8>)
 80113a0:	f007 ff62 	bl	8019268 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80113a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d906      	bls.n	80113bc <tcp_receive+0x58c>
 80113ae:	4b1c      	ldr	r3, [pc, #112]	; (8011420 <tcp_receive+0x5f0>)
 80113b0:	f240 5295 	movw	r2, #1429	; 0x595
 80113b4:	491d      	ldr	r1, [pc, #116]	; (801142c <tcp_receive+0x5fc>)
 80113b6:	481c      	ldr	r0, [pc, #112]	; (8011428 <tcp_receive+0x5f8>)
 80113b8:	f007 ff56 	bl	8019268 <iprintf>
      off = (u16_t)off32;
 80113bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80113c2:	4b16      	ldr	r3, [pc, #88]	; (801141c <tcp_receive+0x5ec>)
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	891b      	ldrh	r3, [r3, #8]
 80113c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d906      	bls.n	80113de <tcp_receive+0x5ae>
 80113d0:	4b13      	ldr	r3, [pc, #76]	; (8011420 <tcp_receive+0x5f0>)
 80113d2:	f240 5297 	movw	r2, #1431	; 0x597
 80113d6:	4916      	ldr	r1, [pc, #88]	; (8011430 <tcp_receive+0x600>)
 80113d8:	4813      	ldr	r0, [pc, #76]	; (8011428 <tcp_receive+0x5f8>)
 80113da:	f007 ff45 	bl	8019268 <iprintf>
      inseg.len -= off;
 80113de:	4b0f      	ldr	r3, [pc, #60]	; (801141c <tcp_receive+0x5ec>)
 80113e0:	891a      	ldrh	r2, [r3, #8]
 80113e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113e6:	1ad3      	subs	r3, r2, r3
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	4b0c      	ldr	r3, [pc, #48]	; (801141c <tcp_receive+0x5ec>)
 80113ec:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80113ee:	4b0b      	ldr	r3, [pc, #44]	; (801141c <tcp_receive+0x5ec>)
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	891a      	ldrh	r2, [r3, #8]
 80113f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113f8:	1ad3      	subs	r3, r2, r3
 80113fa:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80113fc:	e02a      	b.n	8011454 <tcp_receive+0x624>
 80113fe:	bf00      	nop
 8011400:	0801cab0 	.word	0x0801cab0
 8011404:	0801cab8 	.word	0x0801cab8
 8011408:	20010f04 	.word	0x20010f04
 801140c:	20010f00 	.word	0x20010f00
 8011410:	20010ec4 	.word	0x20010ec4
 8011414:	20010f06 	.word	0x20010f06
 8011418:	20010efc 	.word	0x20010efc
 801141c:	20010edc 	.word	0x20010edc
 8011420:	0801c748 	.word	0x0801c748
 8011424:	0801cac0 	.word	0x0801cac0
 8011428:	0801c794 	.word	0x0801c794
 801142c:	0801cad0 	.word	0x0801cad0
 8011430:	0801cae0 	.word	0x0801cae0
        off -= p->len;
 8011434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011436:	895b      	ldrh	r3, [r3, #10]
 8011438:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011444:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011446:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801144a:	2200      	movs	r2, #0
 801144c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801144e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011456:	895b      	ldrh	r3, [r3, #10]
 8011458:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801145c:	429a      	cmp	r2, r3
 801145e:	d8e9      	bhi.n	8011434 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011460:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011464:	4619      	mov	r1, r3
 8011466:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011468:	f7fb ff46 	bl	800d2f8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011470:	4a91      	ldr	r2, [pc, #580]	; (80116b8 <tcp_receive+0x888>)
 8011472:	6013      	str	r3, [r2, #0]
 8011474:	4b91      	ldr	r3, [pc, #580]	; (80116bc <tcp_receive+0x88c>)
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	4a8f      	ldr	r2, [pc, #572]	; (80116b8 <tcp_receive+0x888>)
 801147a:	6812      	ldr	r2, [r2, #0]
 801147c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801147e:	e00d      	b.n	801149c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011480:	4b8d      	ldr	r3, [pc, #564]	; (80116b8 <tcp_receive+0x888>)
 8011482:	681a      	ldr	r2, [r3, #0]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011488:	1ad3      	subs	r3, r2, r3
 801148a:	2b00      	cmp	r3, #0
 801148c:	da06      	bge.n	801149c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	8b5b      	ldrh	r3, [r3, #26]
 8011492:	f043 0302 	orr.w	r3, r3, #2
 8011496:	b29a      	uxth	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801149c:	4b86      	ldr	r3, [pc, #536]	; (80116b8 <tcp_receive+0x888>)
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a4:	1ad3      	subs	r3, r2, r3
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f2c0 842a 	blt.w	8011d00 <tcp_receive+0xed0>
 80114ac:	4b82      	ldr	r3, [pc, #520]	; (80116b8 <tcp_receive+0x888>)
 80114ae:	681a      	ldr	r2, [r3, #0]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114b4:	6879      	ldr	r1, [r7, #4]
 80114b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114b8:	440b      	add	r3, r1
 80114ba:	1ad3      	subs	r3, r2, r3
 80114bc:	3301      	adds	r3, #1
 80114be:	2b00      	cmp	r3, #0
 80114c0:	f300 841e 	bgt.w	8011d00 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114c8:	4b7b      	ldr	r3, [pc, #492]	; (80116b8 <tcp_receive+0x888>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	f040 829a 	bne.w	8011a06 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80114d2:	4b7a      	ldr	r3, [pc, #488]	; (80116bc <tcp_receive+0x88c>)
 80114d4:	891c      	ldrh	r4, [r3, #8]
 80114d6:	4b79      	ldr	r3, [pc, #484]	; (80116bc <tcp_receive+0x88c>)
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	899b      	ldrh	r3, [r3, #12]
 80114dc:	b29b      	uxth	r3, r3
 80114de:	4618      	mov	r0, r3
 80114e0:	f7fa fb5c 	bl	800bb9c <lwip_htons>
 80114e4:	4603      	mov	r3, r0
 80114e6:	b2db      	uxtb	r3, r3
 80114e8:	f003 0303 	and.w	r3, r3, #3
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d001      	beq.n	80114f4 <tcp_receive+0x6c4>
 80114f0:	2301      	movs	r3, #1
 80114f2:	e000      	b.n	80114f6 <tcp_receive+0x6c6>
 80114f4:	2300      	movs	r3, #0
 80114f6:	4423      	add	r3, r4
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	4b71      	ldr	r3, [pc, #452]	; (80116c0 <tcp_receive+0x890>)
 80114fc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011502:	4b6f      	ldr	r3, [pc, #444]	; (80116c0 <tcp_receive+0x890>)
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	429a      	cmp	r2, r3
 8011508:	d275      	bcs.n	80115f6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801150a:	4b6c      	ldr	r3, [pc, #432]	; (80116bc <tcp_receive+0x88c>)
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	899b      	ldrh	r3, [r3, #12]
 8011510:	b29b      	uxth	r3, r3
 8011512:	4618      	mov	r0, r3
 8011514:	f7fa fb42 	bl	800bb9c <lwip_htons>
 8011518:	4603      	mov	r3, r0
 801151a:	b2db      	uxtb	r3, r3
 801151c:	f003 0301 	and.w	r3, r3, #1
 8011520:	2b00      	cmp	r3, #0
 8011522:	d01f      	beq.n	8011564 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011524:	4b65      	ldr	r3, [pc, #404]	; (80116bc <tcp_receive+0x88c>)
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	899b      	ldrh	r3, [r3, #12]
 801152a:	b29b      	uxth	r3, r3
 801152c:	b21b      	sxth	r3, r3
 801152e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011532:	b21c      	sxth	r4, r3
 8011534:	4b61      	ldr	r3, [pc, #388]	; (80116bc <tcp_receive+0x88c>)
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	899b      	ldrh	r3, [r3, #12]
 801153a:	b29b      	uxth	r3, r3
 801153c:	4618      	mov	r0, r3
 801153e:	f7fa fb2d 	bl	800bb9c <lwip_htons>
 8011542:	4603      	mov	r3, r0
 8011544:	b2db      	uxtb	r3, r3
 8011546:	b29b      	uxth	r3, r3
 8011548:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801154c:	b29b      	uxth	r3, r3
 801154e:	4618      	mov	r0, r3
 8011550:	f7fa fb24 	bl	800bb9c <lwip_htons>
 8011554:	4603      	mov	r3, r0
 8011556:	b21b      	sxth	r3, r3
 8011558:	4323      	orrs	r3, r4
 801155a:	b21a      	sxth	r2, r3
 801155c:	4b57      	ldr	r3, [pc, #348]	; (80116bc <tcp_receive+0x88c>)
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	b292      	uxth	r2, r2
 8011562:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011568:	4b54      	ldr	r3, [pc, #336]	; (80116bc <tcp_receive+0x88c>)
 801156a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801156c:	4b53      	ldr	r3, [pc, #332]	; (80116bc <tcp_receive+0x88c>)
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	899b      	ldrh	r3, [r3, #12]
 8011572:	b29b      	uxth	r3, r3
 8011574:	4618      	mov	r0, r3
 8011576:	f7fa fb11 	bl	800bb9c <lwip_htons>
 801157a:	4603      	mov	r3, r0
 801157c:	b2db      	uxtb	r3, r3
 801157e:	f003 0302 	and.w	r3, r3, #2
 8011582:	2b00      	cmp	r3, #0
 8011584:	d005      	beq.n	8011592 <tcp_receive+0x762>
            inseg.len -= 1;
 8011586:	4b4d      	ldr	r3, [pc, #308]	; (80116bc <tcp_receive+0x88c>)
 8011588:	891b      	ldrh	r3, [r3, #8]
 801158a:	3b01      	subs	r3, #1
 801158c:	b29a      	uxth	r2, r3
 801158e:	4b4b      	ldr	r3, [pc, #300]	; (80116bc <tcp_receive+0x88c>)
 8011590:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011592:	4b4a      	ldr	r3, [pc, #296]	; (80116bc <tcp_receive+0x88c>)
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	4a49      	ldr	r2, [pc, #292]	; (80116bc <tcp_receive+0x88c>)
 8011598:	8912      	ldrh	r2, [r2, #8]
 801159a:	4611      	mov	r1, r2
 801159c:	4618      	mov	r0, r3
 801159e:	f7fb fdab 	bl	800d0f8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80115a2:	4b46      	ldr	r3, [pc, #280]	; (80116bc <tcp_receive+0x88c>)
 80115a4:	891c      	ldrh	r4, [r3, #8]
 80115a6:	4b45      	ldr	r3, [pc, #276]	; (80116bc <tcp_receive+0x88c>)
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	899b      	ldrh	r3, [r3, #12]
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7fa faf4 	bl	800bb9c <lwip_htons>
 80115b4:	4603      	mov	r3, r0
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	f003 0303 	and.w	r3, r3, #3
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d001      	beq.n	80115c4 <tcp_receive+0x794>
 80115c0:	2301      	movs	r3, #1
 80115c2:	e000      	b.n	80115c6 <tcp_receive+0x796>
 80115c4:	2300      	movs	r3, #0
 80115c6:	4423      	add	r3, r4
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	4b3d      	ldr	r3, [pc, #244]	; (80116c0 <tcp_receive+0x890>)
 80115cc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80115ce:	4b3c      	ldr	r3, [pc, #240]	; (80116c0 <tcp_receive+0x890>)
 80115d0:	881b      	ldrh	r3, [r3, #0]
 80115d2:	461a      	mov	r2, r3
 80115d4:	4b38      	ldr	r3, [pc, #224]	; (80116b8 <tcp_receive+0x888>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	441a      	add	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115de:	6879      	ldr	r1, [r7, #4]
 80115e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115e2:	440b      	add	r3, r1
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d006      	beq.n	80115f6 <tcp_receive+0x7c6>
 80115e8:	4b36      	ldr	r3, [pc, #216]	; (80116c4 <tcp_receive+0x894>)
 80115ea:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80115ee:	4936      	ldr	r1, [pc, #216]	; (80116c8 <tcp_receive+0x898>)
 80115f0:	4836      	ldr	r0, [pc, #216]	; (80116cc <tcp_receive+0x89c>)
 80115f2:	f007 fe39 	bl	8019268 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	f000 80e7 	beq.w	80117ce <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011600:	4b2e      	ldr	r3, [pc, #184]	; (80116bc <tcp_receive+0x88c>)
 8011602:	68db      	ldr	r3, [r3, #12]
 8011604:	899b      	ldrh	r3, [r3, #12]
 8011606:	b29b      	uxth	r3, r3
 8011608:	4618      	mov	r0, r3
 801160a:	f7fa fac7 	bl	800bb9c <lwip_htons>
 801160e:	4603      	mov	r3, r0
 8011610:	b2db      	uxtb	r3, r3
 8011612:	f003 0301 	and.w	r3, r3, #1
 8011616:	2b00      	cmp	r3, #0
 8011618:	d010      	beq.n	801163c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801161a:	e00a      	b.n	8011632 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011620:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011626:	681a      	ldr	r2, [r3, #0]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f7fd fca6 	bl	800ef7e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011636:	2b00      	cmp	r3, #0
 8011638:	d1f0      	bne.n	801161c <tcp_receive+0x7ec>
 801163a:	e0c8      	b.n	80117ce <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011640:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011642:	e052      	b.n	80116ea <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	899b      	ldrh	r3, [r3, #12]
 801164a:	b29b      	uxth	r3, r3
 801164c:	4618      	mov	r0, r3
 801164e:	f7fa faa5 	bl	800bb9c <lwip_htons>
 8011652:	4603      	mov	r3, r0
 8011654:	b2db      	uxtb	r3, r3
 8011656:	f003 0301 	and.w	r3, r3, #1
 801165a:	2b00      	cmp	r3, #0
 801165c:	d03d      	beq.n	80116da <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801165e:	4b17      	ldr	r3, [pc, #92]	; (80116bc <tcp_receive+0x88c>)
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	899b      	ldrh	r3, [r3, #12]
 8011664:	b29b      	uxth	r3, r3
 8011666:	4618      	mov	r0, r3
 8011668:	f7fa fa98 	bl	800bb9c <lwip_htons>
 801166c:	4603      	mov	r3, r0
 801166e:	b2db      	uxtb	r3, r3
 8011670:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011674:	2b00      	cmp	r3, #0
 8011676:	d130      	bne.n	80116da <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011678:	4b10      	ldr	r3, [pc, #64]	; (80116bc <tcp_receive+0x88c>)
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	899b      	ldrh	r3, [r3, #12]
 801167e:	b29c      	uxth	r4, r3
 8011680:	2001      	movs	r0, #1
 8011682:	f7fa fa8b 	bl	800bb9c <lwip_htons>
 8011686:	4603      	mov	r3, r0
 8011688:	461a      	mov	r2, r3
 801168a:	4b0c      	ldr	r3, [pc, #48]	; (80116bc <tcp_receive+0x88c>)
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	4322      	orrs	r2, r4
 8011690:	b292      	uxth	r2, r2
 8011692:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011694:	4b09      	ldr	r3, [pc, #36]	; (80116bc <tcp_receive+0x88c>)
 8011696:	891c      	ldrh	r4, [r3, #8]
 8011698:	4b08      	ldr	r3, [pc, #32]	; (80116bc <tcp_receive+0x88c>)
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	899b      	ldrh	r3, [r3, #12]
 801169e:	b29b      	uxth	r3, r3
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fa fa7b 	bl	800bb9c <lwip_htons>
 80116a6:	4603      	mov	r3, r0
 80116a8:	b2db      	uxtb	r3, r3
 80116aa:	f003 0303 	and.w	r3, r3, #3
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00e      	beq.n	80116d0 <tcp_receive+0x8a0>
 80116b2:	2301      	movs	r3, #1
 80116b4:	e00d      	b.n	80116d2 <tcp_receive+0x8a2>
 80116b6:	bf00      	nop
 80116b8:	20010efc 	.word	0x20010efc
 80116bc:	20010edc 	.word	0x20010edc
 80116c0:	20010f06 	.word	0x20010f06
 80116c4:	0801c748 	.word	0x0801c748
 80116c8:	0801caf0 	.word	0x0801caf0
 80116cc:	0801c794 	.word	0x0801c794
 80116d0:	2300      	movs	r3, #0
 80116d2:	4423      	add	r3, r4
 80116d4:	b29a      	uxth	r2, r3
 80116d6:	4b98      	ldr	r3, [pc, #608]	; (8011938 <tcp_receive+0xb08>)
 80116d8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80116da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116dc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80116de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80116e4:	6938      	ldr	r0, [r7, #16]
 80116e6:	f7fd fc4a 	bl	800ef7e <tcp_seg_free>
            while (next &&
 80116ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d00e      	beq.n	801170e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80116f0:	4b91      	ldr	r3, [pc, #580]	; (8011938 <tcp_receive+0xb08>)
 80116f2:	881b      	ldrh	r3, [r3, #0]
 80116f4:	461a      	mov	r2, r3
 80116f6:	4b91      	ldr	r3, [pc, #580]	; (801193c <tcp_receive+0xb0c>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	441a      	add	r2, r3
 80116fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116fe:	68db      	ldr	r3, [r3, #12]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011704:	8909      	ldrh	r1, [r1, #8]
 8011706:	440b      	add	r3, r1
 8011708:	1ad3      	subs	r3, r2, r3
            while (next &&
 801170a:	2b00      	cmp	r3, #0
 801170c:	da9a      	bge.n	8011644 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801170e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011710:	2b00      	cmp	r3, #0
 8011712:	d059      	beq.n	80117c8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011714:	4b88      	ldr	r3, [pc, #544]	; (8011938 <tcp_receive+0xb08>)
 8011716:	881b      	ldrh	r3, [r3, #0]
 8011718:	461a      	mov	r2, r3
 801171a:	4b88      	ldr	r3, [pc, #544]	; (801193c <tcp_receive+0xb0c>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	441a      	add	r2, r3
 8011720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011728:	2b00      	cmp	r3, #0
 801172a:	dd4d      	ble.n	80117c8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801172c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801172e:	68db      	ldr	r3, [r3, #12]
 8011730:	685b      	ldr	r3, [r3, #4]
 8011732:	b29a      	uxth	r2, r3
 8011734:	4b81      	ldr	r3, [pc, #516]	; (801193c <tcp_receive+0xb0c>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	b29b      	uxth	r3, r3
 801173a:	1ad3      	subs	r3, r2, r3
 801173c:	b29a      	uxth	r2, r3
 801173e:	4b80      	ldr	r3, [pc, #512]	; (8011940 <tcp_receive+0xb10>)
 8011740:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011742:	4b7f      	ldr	r3, [pc, #508]	; (8011940 <tcp_receive+0xb10>)
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	899b      	ldrh	r3, [r3, #12]
 8011748:	b29b      	uxth	r3, r3
 801174a:	4618      	mov	r0, r3
 801174c:	f7fa fa26 	bl	800bb9c <lwip_htons>
 8011750:	4603      	mov	r3, r0
 8011752:	b2db      	uxtb	r3, r3
 8011754:	f003 0302 	and.w	r3, r3, #2
 8011758:	2b00      	cmp	r3, #0
 801175a:	d005      	beq.n	8011768 <tcp_receive+0x938>
                inseg.len -= 1;
 801175c:	4b78      	ldr	r3, [pc, #480]	; (8011940 <tcp_receive+0xb10>)
 801175e:	891b      	ldrh	r3, [r3, #8]
 8011760:	3b01      	subs	r3, #1
 8011762:	b29a      	uxth	r2, r3
 8011764:	4b76      	ldr	r3, [pc, #472]	; (8011940 <tcp_receive+0xb10>)
 8011766:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011768:	4b75      	ldr	r3, [pc, #468]	; (8011940 <tcp_receive+0xb10>)
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	4a74      	ldr	r2, [pc, #464]	; (8011940 <tcp_receive+0xb10>)
 801176e:	8912      	ldrh	r2, [r2, #8]
 8011770:	4611      	mov	r1, r2
 8011772:	4618      	mov	r0, r3
 8011774:	f7fb fcc0 	bl	800d0f8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011778:	4b71      	ldr	r3, [pc, #452]	; (8011940 <tcp_receive+0xb10>)
 801177a:	891c      	ldrh	r4, [r3, #8]
 801177c:	4b70      	ldr	r3, [pc, #448]	; (8011940 <tcp_receive+0xb10>)
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	899b      	ldrh	r3, [r3, #12]
 8011782:	b29b      	uxth	r3, r3
 8011784:	4618      	mov	r0, r3
 8011786:	f7fa fa09 	bl	800bb9c <lwip_htons>
 801178a:	4603      	mov	r3, r0
 801178c:	b2db      	uxtb	r3, r3
 801178e:	f003 0303 	and.w	r3, r3, #3
 8011792:	2b00      	cmp	r3, #0
 8011794:	d001      	beq.n	801179a <tcp_receive+0x96a>
 8011796:	2301      	movs	r3, #1
 8011798:	e000      	b.n	801179c <tcp_receive+0x96c>
 801179a:	2300      	movs	r3, #0
 801179c:	4423      	add	r3, r4
 801179e:	b29a      	uxth	r2, r3
 80117a0:	4b65      	ldr	r3, [pc, #404]	; (8011938 <tcp_receive+0xb08>)
 80117a2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80117a4:	4b64      	ldr	r3, [pc, #400]	; (8011938 <tcp_receive+0xb08>)
 80117a6:	881b      	ldrh	r3, [r3, #0]
 80117a8:	461a      	mov	r2, r3
 80117aa:	4b64      	ldr	r3, [pc, #400]	; (801193c <tcp_receive+0xb0c>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	441a      	add	r2, r3
 80117b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d006      	beq.n	80117c8 <tcp_receive+0x998>
 80117ba:	4b62      	ldr	r3, [pc, #392]	; (8011944 <tcp_receive+0xb14>)
 80117bc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80117c0:	4961      	ldr	r1, [pc, #388]	; (8011948 <tcp_receive+0xb18>)
 80117c2:	4862      	ldr	r0, [pc, #392]	; (801194c <tcp_receive+0xb1c>)
 80117c4:	f007 fd50 	bl	8019268 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80117cc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80117ce:	4b5a      	ldr	r3, [pc, #360]	; (8011938 <tcp_receive+0xb08>)
 80117d0:	881b      	ldrh	r3, [r3, #0]
 80117d2:	461a      	mov	r2, r3
 80117d4:	4b59      	ldr	r3, [pc, #356]	; (801193c <tcp_receive+0xb0c>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	441a      	add	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80117e2:	4b55      	ldr	r3, [pc, #340]	; (8011938 <tcp_receive+0xb08>)
 80117e4:	881b      	ldrh	r3, [r3, #0]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d206      	bcs.n	80117f8 <tcp_receive+0x9c8>
 80117ea:	4b56      	ldr	r3, [pc, #344]	; (8011944 <tcp_receive+0xb14>)
 80117ec:	f240 6207 	movw	r2, #1543	; 0x607
 80117f0:	4957      	ldr	r1, [pc, #348]	; (8011950 <tcp_receive+0xb20>)
 80117f2:	4856      	ldr	r0, [pc, #344]	; (801194c <tcp_receive+0xb1c>)
 80117f4:	f007 fd38 	bl	8019268 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80117fc:	4b4e      	ldr	r3, [pc, #312]	; (8011938 <tcp_receive+0xb08>)
 80117fe:	881b      	ldrh	r3, [r3, #0]
 8011800:	1ad3      	subs	r3, r2, r3
 8011802:	b29a      	uxth	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f7fc fd7b 	bl	800e304 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801180e:	4b4c      	ldr	r3, [pc, #304]	; (8011940 <tcp_receive+0xb10>)
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	891b      	ldrh	r3, [r3, #8]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d006      	beq.n	8011826 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011818:	4b49      	ldr	r3, [pc, #292]	; (8011940 <tcp_receive+0xb10>)
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	4a4d      	ldr	r2, [pc, #308]	; (8011954 <tcp_receive+0xb24>)
 801181e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011820:	4b47      	ldr	r3, [pc, #284]	; (8011940 <tcp_receive+0xb10>)
 8011822:	2200      	movs	r2, #0
 8011824:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011826:	4b46      	ldr	r3, [pc, #280]	; (8011940 <tcp_receive+0xb10>)
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	899b      	ldrh	r3, [r3, #12]
 801182c:	b29b      	uxth	r3, r3
 801182e:	4618      	mov	r0, r3
 8011830:	f7fa f9b4 	bl	800bb9c <lwip_htons>
 8011834:	4603      	mov	r3, r0
 8011836:	b2db      	uxtb	r3, r3
 8011838:	f003 0301 	and.w	r3, r3, #1
 801183c:	2b00      	cmp	r3, #0
 801183e:	f000 80b8 	beq.w	80119b2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011842:	4b45      	ldr	r3, [pc, #276]	; (8011958 <tcp_receive+0xb28>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	f043 0320 	orr.w	r3, r3, #32
 801184a:	b2da      	uxtb	r2, r3
 801184c:	4b42      	ldr	r3, [pc, #264]	; (8011958 <tcp_receive+0xb28>)
 801184e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011850:	e0af      	b.n	80119b2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011856:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	4a36      	ldr	r2, [pc, #216]	; (801193c <tcp_receive+0xb0c>)
 8011862:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	891b      	ldrh	r3, [r3, #8]
 8011868:	461c      	mov	r4, r3
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	899b      	ldrh	r3, [r3, #12]
 8011870:	b29b      	uxth	r3, r3
 8011872:	4618      	mov	r0, r3
 8011874:	f7fa f992 	bl	800bb9c <lwip_htons>
 8011878:	4603      	mov	r3, r0
 801187a:	b2db      	uxtb	r3, r3
 801187c:	f003 0303 	and.w	r3, r3, #3
 8011880:	2b00      	cmp	r3, #0
 8011882:	d001      	beq.n	8011888 <tcp_receive+0xa58>
 8011884:	2301      	movs	r3, #1
 8011886:	e000      	b.n	801188a <tcp_receive+0xa5a>
 8011888:	2300      	movs	r3, #0
 801188a:	191a      	adds	r2, r3, r4
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011890:	441a      	add	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801189a:	461c      	mov	r4, r3
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	891b      	ldrh	r3, [r3, #8]
 80118a0:	461d      	mov	r5, r3
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	899b      	ldrh	r3, [r3, #12]
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fa f976 	bl	800bb9c <lwip_htons>
 80118b0:	4603      	mov	r3, r0
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	f003 0303 	and.w	r3, r3, #3
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <tcp_receive+0xa90>
 80118bc:	2301      	movs	r3, #1
 80118be:	e000      	b.n	80118c2 <tcp_receive+0xa92>
 80118c0:	2300      	movs	r3, #0
 80118c2:	442b      	add	r3, r5
 80118c4:	429c      	cmp	r4, r3
 80118c6:	d206      	bcs.n	80118d6 <tcp_receive+0xaa6>
 80118c8:	4b1e      	ldr	r3, [pc, #120]	; (8011944 <tcp_receive+0xb14>)
 80118ca:	f240 622b 	movw	r2, #1579	; 0x62b
 80118ce:	4923      	ldr	r1, [pc, #140]	; (801195c <tcp_receive+0xb2c>)
 80118d0:	481e      	ldr	r0, [pc, #120]	; (801194c <tcp_receive+0xb1c>)
 80118d2:	f007 fcc9 	bl	8019268 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	891b      	ldrh	r3, [r3, #8]
 80118da:	461c      	mov	r4, r3
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	899b      	ldrh	r3, [r3, #12]
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fa f959 	bl	800bb9c <lwip_htons>
 80118ea:	4603      	mov	r3, r0
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	f003 0303 	and.w	r3, r3, #3
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d001      	beq.n	80118fa <tcp_receive+0xaca>
 80118f6:	2301      	movs	r3, #1
 80118f8:	e000      	b.n	80118fc <tcp_receive+0xacc>
 80118fa:	2300      	movs	r3, #0
 80118fc:	1919      	adds	r1, r3, r4
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011902:	b28b      	uxth	r3, r1
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	b29a      	uxth	r2, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f7fc fcf9 	bl	800e304 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	891b      	ldrh	r3, [r3, #8]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d028      	beq.n	801196e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801191c:	4b0d      	ldr	r3, [pc, #52]	; (8011954 <tcp_receive+0xb24>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d01d      	beq.n	8011960 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011924:	4b0b      	ldr	r3, [pc, #44]	; (8011954 <tcp_receive+0xb24>)
 8011926:	681a      	ldr	r2, [r3, #0]
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	4619      	mov	r1, r3
 801192e:	4610      	mov	r0, r2
 8011930:	f7fb fe36 	bl	800d5a0 <pbuf_cat>
 8011934:	e018      	b.n	8011968 <tcp_receive+0xb38>
 8011936:	bf00      	nop
 8011938:	20010f06 	.word	0x20010f06
 801193c:	20010efc 	.word	0x20010efc
 8011940:	20010edc 	.word	0x20010edc
 8011944:	0801c748 	.word	0x0801c748
 8011948:	0801cb28 	.word	0x0801cb28
 801194c:	0801c794 	.word	0x0801c794
 8011950:	0801cb64 	.word	0x0801cb64
 8011954:	20010f0c 	.word	0x20010f0c
 8011958:	20010f09 	.word	0x20010f09
 801195c:	0801cb84 	.word	0x0801cb84
            } else {
              recv_data = cseg->p;
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	4a70      	ldr	r2, [pc, #448]	; (8011b28 <tcp_receive+0xcf8>)
 8011966:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	2200      	movs	r2, #0
 801196c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	68db      	ldr	r3, [r3, #12]
 8011972:	899b      	ldrh	r3, [r3, #12]
 8011974:	b29b      	uxth	r3, r3
 8011976:	4618      	mov	r0, r3
 8011978:	f7fa f910 	bl	800bb9c <lwip_htons>
 801197c:	4603      	mov	r3, r0
 801197e:	b2db      	uxtb	r3, r3
 8011980:	f003 0301 	and.w	r3, r3, #1
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00d      	beq.n	80119a4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011988:	4b68      	ldr	r3, [pc, #416]	; (8011b2c <tcp_receive+0xcfc>)
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	f043 0320 	orr.w	r3, r3, #32
 8011990:	b2da      	uxtb	r2, r3
 8011992:	4b66      	ldr	r3, [pc, #408]	; (8011b2c <tcp_receive+0xcfc>)
 8011994:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	7d1b      	ldrb	r3, [r3, #20]
 801199a:	2b04      	cmp	r3, #4
 801199c:	d102      	bne.n	80119a4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2207      	movs	r2, #7
 80119a2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80119ac:	68b8      	ldr	r0, [r7, #8]
 80119ae:	f7fd fae6 	bl	800ef7e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d008      	beq.n	80119cc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119be:	68db      	ldr	r3, [r3, #12]
 80119c0:	685a      	ldr	r2, [r3, #4]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80119c6:	429a      	cmp	r2, r3
 80119c8:	f43f af43 	beq.w	8011852 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	8b5b      	ldrh	r3, [r3, #26]
 80119d0:	f003 0301 	and.w	r3, r3, #1
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d00e      	beq.n	80119f6 <tcp_receive+0xbc6>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	8b5b      	ldrh	r3, [r3, #26]
 80119dc:	f023 0301 	bic.w	r3, r3, #1
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	835a      	strh	r2, [r3, #26]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	8b5b      	ldrh	r3, [r3, #26]
 80119ea:	f043 0302 	orr.w	r3, r3, #2
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80119f4:	e188      	b.n	8011d08 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	8b5b      	ldrh	r3, [r3, #26]
 80119fa:	f043 0301 	orr.w	r3, r3, #1
 80119fe:	b29a      	uxth	r2, r3
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011a04:	e180      	b.n	8011d08 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d106      	bne.n	8011a1c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011a0e:	4848      	ldr	r0, [pc, #288]	; (8011b30 <tcp_receive+0xd00>)
 8011a10:	f7fd faec 	bl	800efec <tcp_seg_copy>
 8011a14:	4602      	mov	r2, r0
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	675a      	str	r2, [r3, #116]	; 0x74
 8011a1a:	e16d      	b.n	8011cf8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a24:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a26:	e157      	b.n	8011cd8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	685a      	ldr	r2, [r3, #4]
 8011a2e:	4b41      	ldr	r3, [pc, #260]	; (8011b34 <tcp_receive+0xd04>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d11d      	bne.n	8011a72 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011a36:	4b3e      	ldr	r3, [pc, #248]	; (8011b30 <tcp_receive+0xd00>)
 8011a38:	891a      	ldrh	r2, [r3, #8]
 8011a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3c:	891b      	ldrh	r3, [r3, #8]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	f240 814f 	bls.w	8011ce2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011a44:	483a      	ldr	r0, [pc, #232]	; (8011b30 <tcp_receive+0xd00>)
 8011a46:	f7fd fad1 	bl	800efec <tcp_seg_copy>
 8011a4a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f000 8149 	beq.w	8011ce6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d003      	beq.n	8011a62 <tcp_receive+0xc32>
                    prev->next = cseg;
 8011a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a5c:	697a      	ldr	r2, [r7, #20]
 8011a5e:	601a      	str	r2, [r3, #0]
 8011a60:	e002      	b.n	8011a68 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	697a      	ldr	r2, [r7, #20]
 8011a66:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a6a:	6978      	ldr	r0, [r7, #20]
 8011a6c:	f7ff f8dc 	bl	8010c28 <tcp_oos_insert_segment>
                }
                break;
 8011a70:	e139      	b.n	8011ce6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d117      	bne.n	8011aa8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011a78:	4b2e      	ldr	r3, [pc, #184]	; (8011b34 <tcp_receive+0xd04>)
 8011a7a:	681a      	ldr	r2, [r3, #0]
 8011a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	1ad3      	subs	r3, r2, r3
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	da57      	bge.n	8011b38 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011a88:	4829      	ldr	r0, [pc, #164]	; (8011b30 <tcp_receive+0xd00>)
 8011a8a:	f7fd faaf 	bl	800efec <tcp_seg_copy>
 8011a8e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f000 8129 	beq.w	8011cea <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	69ba      	ldr	r2, [r7, #24]
 8011a9c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011a9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011aa0:	69b8      	ldr	r0, [r7, #24]
 8011aa2:	f7ff f8c1 	bl	8010c28 <tcp_oos_insert_segment>
                  }
                  break;
 8011aa6:	e120      	b.n	8011cea <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011aa8:	4b22      	ldr	r3, [pc, #136]	; (8011b34 <tcp_receive+0xd04>)
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	1ad3      	subs	r3, r2, r3
 8011ab4:	3b01      	subs	r3, #1
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	db3e      	blt.n	8011b38 <tcp_receive+0xd08>
 8011aba:	4b1e      	ldr	r3, [pc, #120]	; (8011b34 <tcp_receive+0xd04>)
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac0:	68db      	ldr	r3, [r3, #12]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	1ad3      	subs	r3, r2, r3
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	dc35      	bgt.n	8011b38 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011acc:	4818      	ldr	r0, [pc, #96]	; (8011b30 <tcp_receive+0xd00>)
 8011ace:	f7fd fa8d 	bl	800efec <tcp_seg_copy>
 8011ad2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011ad4:	69fb      	ldr	r3, [r7, #28]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f000 8109 	beq.w	8011cee <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ae4:	8912      	ldrh	r2, [r2, #8]
 8011ae6:	441a      	add	r2, r3
 8011ae8:	4b12      	ldr	r3, [pc, #72]	; (8011b34 <tcp_receive+0xd04>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	1ad3      	subs	r3, r2, r3
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	dd12      	ble.n	8011b18 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011af2:	4b10      	ldr	r3, [pc, #64]	; (8011b34 <tcp_receive+0xd04>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011afa:	68db      	ldr	r3, [r3, #12]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	b29b      	uxth	r3, r3
 8011b00:	1ad3      	subs	r3, r2, r3
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b06:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b0a:	685a      	ldr	r2, [r3, #4]
 8011b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b0e:	891b      	ldrh	r3, [r3, #8]
 8011b10:	4619      	mov	r1, r3
 8011b12:	4610      	mov	r0, r2
 8011b14:	f7fb faf0 	bl	800d0f8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b1a:	69fa      	ldr	r2, [r7, #28]
 8011b1c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b20:	69f8      	ldr	r0, [r7, #28]
 8011b22:	f7ff f881 	bl	8010c28 <tcp_oos_insert_segment>
                  }
                  break;
 8011b26:	e0e2      	b.n	8011cee <tcp_receive+0xebe>
 8011b28:	20010f0c 	.word	0x20010f0c
 8011b2c:	20010f09 	.word	0x20010f09
 8011b30:	20010edc 	.word	0x20010edc
 8011b34:	20010efc 	.word	0x20010efc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	f040 80c6 	bne.w	8011cd2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011b46:	4b80      	ldr	r3, [pc, #512]	; (8011d48 <tcp_receive+0xf18>)
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b4c:	68db      	ldr	r3, [r3, #12]
 8011b4e:	685b      	ldr	r3, [r3, #4]
 8011b50:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f340 80bd 	ble.w	8011cd2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	899b      	ldrh	r3, [r3, #12]
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7fa f81b 	bl	800bb9c <lwip_htons>
 8011b66:	4603      	mov	r3, r0
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	f003 0301 	and.w	r3, r3, #1
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	f040 80bf 	bne.w	8011cf2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011b74:	4875      	ldr	r0, [pc, #468]	; (8011d4c <tcp_receive+0xf1c>)
 8011b76:	f7fd fa39 	bl	800efec <tcp_seg_copy>
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b7e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	f000 80b6 	beq.w	8011cf6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b92:	8912      	ldrh	r2, [r2, #8]
 8011b94:	441a      	add	r2, r3
 8011b96:	4b6c      	ldr	r3, [pc, #432]	; (8011d48 <tcp_receive+0xf18>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	1ad3      	subs	r3, r2, r3
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	dd12      	ble.n	8011bc6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011ba0:	4b69      	ldr	r3, [pc, #420]	; (8011d48 <tcp_receive+0xf18>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	b29a      	uxth	r2, r3
 8011ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba8:	68db      	ldr	r3, [r3, #12]
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	1ad3      	subs	r3, r2, r3
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb8:	685a      	ldr	r2, [r3, #4]
 8011bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bbc:	891b      	ldrh	r3, [r3, #8]
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	4610      	mov	r0, r2
 8011bc2:	f7fb fa99 	bl	800d0f8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011bc6:	4b62      	ldr	r3, [pc, #392]	; (8011d50 <tcp_receive+0xf20>)
 8011bc8:	881b      	ldrh	r3, [r3, #0]
 8011bca:	461a      	mov	r2, r3
 8011bcc:	4b5e      	ldr	r3, [pc, #376]	; (8011d48 <tcp_receive+0xf18>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	441a      	add	r2, r3
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bd6:	6879      	ldr	r1, [r7, #4]
 8011bd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011bda:	440b      	add	r3, r1
 8011bdc:	1ad3      	subs	r3, r2, r3
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f340 8089 	ble.w	8011cf6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	899b      	ldrh	r3, [r3, #12]
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7f9 ffd4 	bl	800bb9c <lwip_htons>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	f003 0301 	and.w	r3, r3, #1
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d022      	beq.n	8011c46 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	899b      	ldrh	r3, [r3, #12]
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	b21b      	sxth	r3, r3
 8011c0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c10:	b21c      	sxth	r4, r3
 8011c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	899b      	ldrh	r3, [r3, #12]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7f9 ffbd 	bl	800bb9c <lwip_htons>
 8011c22:	4603      	mov	r3, r0
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7f9 ffb4 	bl	800bb9c <lwip_htons>
 8011c34:	4603      	mov	r3, r0
 8011c36:	b21b      	sxth	r3, r3
 8011c38:	4323      	orrs	r3, r4
 8011c3a:	b21a      	sxth	r2, r3
 8011c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	68db      	ldr	r3, [r3, #12]
 8011c42:	b292      	uxth	r2, r2
 8011c44:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c4a:	b29a      	uxth	r2, r3
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c50:	4413      	add	r3, r2
 8011c52:	b299      	uxth	r1, r3
 8011c54:	4b3c      	ldr	r3, [pc, #240]	; (8011d48 <tcp_receive+0xf18>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	1a8a      	subs	r2, r1, r2
 8011c60:	b292      	uxth	r2, r2
 8011c62:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	685a      	ldr	r2, [r3, #4]
 8011c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	891b      	ldrh	r3, [r3, #8]
 8011c70:	4619      	mov	r1, r3
 8011c72:	4610      	mov	r0, r2
 8011c74:	f7fb fa40 	bl	800d0f8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	891c      	ldrh	r4, [r3, #8]
 8011c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	899b      	ldrh	r3, [r3, #12]
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7f9 ff87 	bl	800bb9c <lwip_htons>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	f003 0303 	and.w	r3, r3, #3
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d001      	beq.n	8011c9e <tcp_receive+0xe6e>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e000      	b.n	8011ca0 <tcp_receive+0xe70>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	4423      	add	r3, r4
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	4b2a      	ldr	r3, [pc, #168]	; (8011d50 <tcp_receive+0xf20>)
 8011ca6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011ca8:	4b29      	ldr	r3, [pc, #164]	; (8011d50 <tcp_receive+0xf20>)
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	461a      	mov	r2, r3
 8011cae:	4b26      	ldr	r3, [pc, #152]	; (8011d48 <tcp_receive+0xf18>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	441a      	add	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cb8:	6879      	ldr	r1, [r7, #4]
 8011cba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011cbc:	440b      	add	r3, r1
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d019      	beq.n	8011cf6 <tcp_receive+0xec6>
 8011cc2:	4b24      	ldr	r3, [pc, #144]	; (8011d54 <tcp_receive+0xf24>)
 8011cc4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011cc8:	4923      	ldr	r1, [pc, #140]	; (8011d58 <tcp_receive+0xf28>)
 8011cca:	4824      	ldr	r0, [pc, #144]	; (8011d5c <tcp_receive+0xf2c>)
 8011ccc:	f007 facc 	bl	8019268 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011cd0:	e011      	b.n	8011cf6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	f47f aea4 	bne.w	8011a28 <tcp_receive+0xbf8>
 8011ce0:	e00a      	b.n	8011cf8 <tcp_receive+0xec8>
                break;
 8011ce2:	bf00      	nop
 8011ce4:	e008      	b.n	8011cf8 <tcp_receive+0xec8>
                break;
 8011ce6:	bf00      	nop
 8011ce8:	e006      	b.n	8011cf8 <tcp_receive+0xec8>
                  break;
 8011cea:	bf00      	nop
 8011cec:	e004      	b.n	8011cf8 <tcp_receive+0xec8>
                  break;
 8011cee:	bf00      	nop
 8011cf0:	e002      	b.n	8011cf8 <tcp_receive+0xec8>
                  break;
 8011cf2:	bf00      	nop
 8011cf4:	e000      	b.n	8011cf8 <tcp_receive+0xec8>
                break;
 8011cf6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f001 fe8b 	bl	8013a14 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011cfe:	e003      	b.n	8011d08 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f001 fe87 	bl	8013a14 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011d06:	e01a      	b.n	8011d3e <tcp_receive+0xf0e>
 8011d08:	e019      	b.n	8011d3e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011d0a:	4b0f      	ldr	r3, [pc, #60]	; (8011d48 <tcp_receive+0xf18>)
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d12:	1ad3      	subs	r3, r2, r3
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	db0a      	blt.n	8011d2e <tcp_receive+0xefe>
 8011d18:	4b0b      	ldr	r3, [pc, #44]	; (8011d48 <tcp_receive+0xf18>)
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d20:	6879      	ldr	r1, [r7, #4]
 8011d22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d24:	440b      	add	r3, r1
 8011d26:	1ad3      	subs	r3, r2, r3
 8011d28:	3301      	adds	r3, #1
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	dd07      	ble.n	8011d3e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	8b5b      	ldrh	r3, [r3, #26]
 8011d32:	f043 0302 	orr.w	r3, r3, #2
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011d3c:	e7ff      	b.n	8011d3e <tcp_receive+0xf0e>
 8011d3e:	bf00      	nop
 8011d40:	3750      	adds	r7, #80	; 0x50
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bdb0      	pop	{r4, r5, r7, pc}
 8011d46:	bf00      	nop
 8011d48:	20010efc 	.word	0x20010efc
 8011d4c:	20010edc 	.word	0x20010edc
 8011d50:	20010f06 	.word	0x20010f06
 8011d54:	0801c748 	.word	0x0801c748
 8011d58:	0801caf0 	.word	0x0801caf0
 8011d5c:	0801c794 	.word	0x0801c794

08011d60 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011d66:	4b15      	ldr	r3, [pc, #84]	; (8011dbc <tcp_get_next_optbyte+0x5c>)
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	1c5a      	adds	r2, r3, #1
 8011d6c:	b291      	uxth	r1, r2
 8011d6e:	4a13      	ldr	r2, [pc, #76]	; (8011dbc <tcp_get_next_optbyte+0x5c>)
 8011d70:	8011      	strh	r1, [r2, #0]
 8011d72:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011d74:	4b12      	ldr	r3, [pc, #72]	; (8011dc0 <tcp_get_next_optbyte+0x60>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d004      	beq.n	8011d86 <tcp_get_next_optbyte+0x26>
 8011d7c:	4b11      	ldr	r3, [pc, #68]	; (8011dc4 <tcp_get_next_optbyte+0x64>)
 8011d7e:	881b      	ldrh	r3, [r3, #0]
 8011d80:	88fa      	ldrh	r2, [r7, #6]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d208      	bcs.n	8011d98 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011d86:	4b10      	ldr	r3, [pc, #64]	; (8011dc8 <tcp_get_next_optbyte+0x68>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	3314      	adds	r3, #20
 8011d8c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011d8e:	88fb      	ldrh	r3, [r7, #6]
 8011d90:	683a      	ldr	r2, [r7, #0]
 8011d92:	4413      	add	r3, r2
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	e00b      	b.n	8011db0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011d98:	88fb      	ldrh	r3, [r7, #6]
 8011d9a:	b2da      	uxtb	r2, r3
 8011d9c:	4b09      	ldr	r3, [pc, #36]	; (8011dc4 <tcp_get_next_optbyte+0x64>)
 8011d9e:	881b      	ldrh	r3, [r3, #0]
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	1ad3      	subs	r3, r2, r3
 8011da4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011da6:	4b06      	ldr	r3, [pc, #24]	; (8011dc0 <tcp_get_next_optbyte+0x60>)
 8011da8:	681a      	ldr	r2, [r3, #0]
 8011daa:	797b      	ldrb	r3, [r7, #5]
 8011dac:	4413      	add	r3, r2
 8011dae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	370c      	adds	r7, #12
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	20010ef8 	.word	0x20010ef8
 8011dc0:	20010ef4 	.word	0x20010ef4
 8011dc4:	20010ef2 	.word	0x20010ef2
 8011dc8:	20010eec 	.word	0x20010eec

08011dcc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d106      	bne.n	8011de8 <tcp_parseopt+0x1c>
 8011dda:	4b32      	ldr	r3, [pc, #200]	; (8011ea4 <tcp_parseopt+0xd8>)
 8011ddc:	f240 727d 	movw	r2, #1917	; 0x77d
 8011de0:	4931      	ldr	r1, [pc, #196]	; (8011ea8 <tcp_parseopt+0xdc>)
 8011de2:	4832      	ldr	r0, [pc, #200]	; (8011eac <tcp_parseopt+0xe0>)
 8011de4:	f007 fa40 	bl	8019268 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011de8:	4b31      	ldr	r3, [pc, #196]	; (8011eb0 <tcp_parseopt+0xe4>)
 8011dea:	881b      	ldrh	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d055      	beq.n	8011e9c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011df0:	4b30      	ldr	r3, [pc, #192]	; (8011eb4 <tcp_parseopt+0xe8>)
 8011df2:	2200      	movs	r2, #0
 8011df4:	801a      	strh	r2, [r3, #0]
 8011df6:	e045      	b.n	8011e84 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011df8:	f7ff ffb2 	bl	8011d60 <tcp_get_next_optbyte>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011e00:	7bfb      	ldrb	r3, [r7, #15]
 8011e02:	2b02      	cmp	r3, #2
 8011e04:	d006      	beq.n	8011e14 <tcp_parseopt+0x48>
 8011e06:	2b02      	cmp	r3, #2
 8011e08:	dc2b      	bgt.n	8011e62 <tcp_parseopt+0x96>
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d041      	beq.n	8011e92 <tcp_parseopt+0xc6>
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d127      	bne.n	8011e62 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011e12:	e037      	b.n	8011e84 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011e14:	f7ff ffa4 	bl	8011d60 <tcp_get_next_optbyte>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b04      	cmp	r3, #4
 8011e1c:	d13b      	bne.n	8011e96 <tcp_parseopt+0xca>
 8011e1e:	4b25      	ldr	r3, [pc, #148]	; (8011eb4 <tcp_parseopt+0xe8>)
 8011e20:	881b      	ldrh	r3, [r3, #0]
 8011e22:	3301      	adds	r3, #1
 8011e24:	4a22      	ldr	r2, [pc, #136]	; (8011eb0 <tcp_parseopt+0xe4>)
 8011e26:	8812      	ldrh	r2, [r2, #0]
 8011e28:	4293      	cmp	r3, r2
 8011e2a:	da34      	bge.n	8011e96 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011e2c:	f7ff ff98 	bl	8011d60 <tcp_get_next_optbyte>
 8011e30:	4603      	mov	r3, r0
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	021b      	lsls	r3, r3, #8
 8011e36:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011e38:	f7ff ff92 	bl	8011d60 <tcp_get_next_optbyte>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	b29a      	uxth	r2, r3
 8011e40:	89bb      	ldrh	r3, [r7, #12]
 8011e42:	4313      	orrs	r3, r2
 8011e44:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011e46:	89bb      	ldrh	r3, [r7, #12]
 8011e48:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011e4c:	d804      	bhi.n	8011e58 <tcp_parseopt+0x8c>
 8011e4e:	89bb      	ldrh	r3, [r7, #12]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d001      	beq.n	8011e58 <tcp_parseopt+0x8c>
 8011e54:	89ba      	ldrh	r2, [r7, #12]
 8011e56:	e001      	b.n	8011e5c <tcp_parseopt+0x90>
 8011e58:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011e60:	e010      	b.n	8011e84 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011e62:	f7ff ff7d 	bl	8011d60 <tcp_get_next_optbyte>
 8011e66:	4603      	mov	r3, r0
 8011e68:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011e6a:	7afb      	ldrb	r3, [r7, #11]
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d914      	bls.n	8011e9a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011e70:	7afb      	ldrb	r3, [r7, #11]
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	4b0f      	ldr	r3, [pc, #60]	; (8011eb4 <tcp_parseopt+0xe8>)
 8011e76:	881b      	ldrh	r3, [r3, #0]
 8011e78:	4413      	add	r3, r2
 8011e7a:	b29b      	uxth	r3, r3
 8011e7c:	3b02      	subs	r3, #2
 8011e7e:	b29a      	uxth	r2, r3
 8011e80:	4b0c      	ldr	r3, [pc, #48]	; (8011eb4 <tcp_parseopt+0xe8>)
 8011e82:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011e84:	4b0b      	ldr	r3, [pc, #44]	; (8011eb4 <tcp_parseopt+0xe8>)
 8011e86:	881a      	ldrh	r2, [r3, #0]
 8011e88:	4b09      	ldr	r3, [pc, #36]	; (8011eb0 <tcp_parseopt+0xe4>)
 8011e8a:	881b      	ldrh	r3, [r3, #0]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d3b3      	bcc.n	8011df8 <tcp_parseopt+0x2c>
 8011e90:	e004      	b.n	8011e9c <tcp_parseopt+0xd0>
          return;
 8011e92:	bf00      	nop
 8011e94:	e002      	b.n	8011e9c <tcp_parseopt+0xd0>
            return;
 8011e96:	bf00      	nop
 8011e98:	e000      	b.n	8011e9c <tcp_parseopt+0xd0>
            return;
 8011e9a:	bf00      	nop
      }
    }
  }
}
 8011e9c:	3710      	adds	r7, #16
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	0801c748 	.word	0x0801c748
 8011ea8:	0801cbac 	.word	0x0801cbac
 8011eac:	0801c794 	.word	0x0801c794
 8011eb0:	20010ef0 	.word	0x20010ef0
 8011eb4:	20010ef8 	.word	0x20010ef8

08011eb8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011ebc:	4b05      	ldr	r3, [pc, #20]	; (8011ed4 <tcp_trigger_input_pcb_close+0x1c>)
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	f043 0310 	orr.w	r3, r3, #16
 8011ec4:	b2da      	uxtb	r2, r3
 8011ec6:	4b03      	ldr	r3, [pc, #12]	; (8011ed4 <tcp_trigger_input_pcb_close+0x1c>)
 8011ec8:	701a      	strb	r2, [r3, #0]
}
 8011eca:	bf00      	nop
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr
 8011ed4:	20010f09 	.word	0x20010f09

08011ed8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d00a      	beq.n	8011f00 <tcp_route+0x28>
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	7a1b      	ldrb	r3, [r3, #8]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d006      	beq.n	8011f00 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	7a1b      	ldrb	r3, [r3, #8]
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7fa fef6 	bl	800cce8 <netif_get_by_index>
 8011efc:	4603      	mov	r3, r0
 8011efe:	e003      	b.n	8011f08 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f005 fca9 	bl	8017858 <ip4_route>
 8011f06:	4603      	mov	r3, r0
  }
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011f10:	b590      	push	{r4, r7, lr}
 8011f12:	b087      	sub	sp, #28
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	60b9      	str	r1, [r7, #8]
 8011f1a:	603b      	str	r3, [r7, #0]
 8011f1c:	4613      	mov	r3, r2
 8011f1e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d105      	bne.n	8011f32 <tcp_create_segment+0x22>
 8011f26:	4b44      	ldr	r3, [pc, #272]	; (8012038 <tcp_create_segment+0x128>)
 8011f28:	22a3      	movs	r2, #163	; 0xa3
 8011f2a:	4944      	ldr	r1, [pc, #272]	; (801203c <tcp_create_segment+0x12c>)
 8011f2c:	4844      	ldr	r0, [pc, #272]	; (8012040 <tcp_create_segment+0x130>)
 8011f2e:	f007 f99b 	bl	8019268 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d105      	bne.n	8011f44 <tcp_create_segment+0x34>
 8011f38:	4b3f      	ldr	r3, [pc, #252]	; (8012038 <tcp_create_segment+0x128>)
 8011f3a:	22a4      	movs	r2, #164	; 0xa4
 8011f3c:	4941      	ldr	r1, [pc, #260]	; (8012044 <tcp_create_segment+0x134>)
 8011f3e:	4840      	ldr	r0, [pc, #256]	; (8012040 <tcp_create_segment+0x130>)
 8011f40:	f007 f992 	bl	8019268 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011f44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	b2db      	uxtb	r3, r3
 8011f4c:	f003 0304 	and.w	r3, r3, #4
 8011f50:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011f52:	2003      	movs	r0, #3
 8011f54:	f7fa fb30 	bl	800c5b8 <memp_malloc>
 8011f58:	6138      	str	r0, [r7, #16]
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d104      	bne.n	8011f6a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011f60:	68b8      	ldr	r0, [r7, #8]
 8011f62:	f7fb fa4f 	bl	800d404 <pbuf_free>
    return NULL;
 8011f66:	2300      	movs	r3, #0
 8011f68:	e061      	b.n	801202e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011f6a:	693b      	ldr	r3, [r7, #16]
 8011f6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011f70:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	2200      	movs	r2, #0
 8011f76:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	68ba      	ldr	r2, [r7, #8]
 8011f7c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	891a      	ldrh	r2, [r3, #8]
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d205      	bcs.n	8011f96 <tcp_create_segment+0x86>
 8011f8a:	4b2b      	ldr	r3, [pc, #172]	; (8012038 <tcp_create_segment+0x128>)
 8011f8c:	22b0      	movs	r2, #176	; 0xb0
 8011f8e:	492e      	ldr	r1, [pc, #184]	; (8012048 <tcp_create_segment+0x138>)
 8011f90:	482b      	ldr	r0, [pc, #172]	; (8012040 <tcp_create_segment+0x130>)
 8011f92:	f007 f969 	bl	8019268 <iprintf>
  seg->len = p->tot_len - optlen;
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	891a      	ldrh	r2, [r3, #8]
 8011f9a:	7dfb      	ldrb	r3, [r7, #23]
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	1ad3      	subs	r3, r2, r3
 8011fa0:	b29a      	uxth	r2, r3
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011fa6:	2114      	movs	r1, #20
 8011fa8:	68b8      	ldr	r0, [r7, #8]
 8011faa:	f7fb f995 	bl	800d2d8 <pbuf_add_header>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d004      	beq.n	8011fbe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011fb4:	6938      	ldr	r0, [r7, #16]
 8011fb6:	f7fc ffe2 	bl	800ef7e <tcp_seg_free>
    return NULL;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	e037      	b.n	801202e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	685a      	ldr	r2, [r3, #4]
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	8ada      	ldrh	r2, [r3, #22]
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	68dc      	ldr	r4, [r3, #12]
 8011fd0:	4610      	mov	r0, r2
 8011fd2:	f7f9 fde3 	bl	800bb9c <lwip_htons>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	8b1a      	ldrh	r2, [r3, #24]
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	68dc      	ldr	r4, [r3, #12]
 8011fe2:	4610      	mov	r0, r2
 8011fe4:	f7f9 fdda 	bl	800bb9c <lwip_htons>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	68dc      	ldr	r4, [r3, #12]
 8011ff0:	6838      	ldr	r0, [r7, #0]
 8011ff2:	f7f9 fde8 	bl	800bbc6 <lwip_htonl>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011ffa:	7dfb      	ldrb	r3, [r7, #23]
 8011ffc:	089b      	lsrs	r3, r3, #2
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	b29b      	uxth	r3, r3
 8012002:	3305      	adds	r3, #5
 8012004:	b29b      	uxth	r3, r3
 8012006:	031b      	lsls	r3, r3, #12
 8012008:	b29a      	uxth	r2, r3
 801200a:	79fb      	ldrb	r3, [r7, #7]
 801200c:	b29b      	uxth	r3, r3
 801200e:	4313      	orrs	r3, r2
 8012010:	b29a      	uxth	r2, r3
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	68dc      	ldr	r4, [r3, #12]
 8012016:	4610      	mov	r0, r2
 8012018:	f7f9 fdc0 	bl	800bb9c <lwip_htons>
 801201c:	4603      	mov	r3, r0
 801201e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	2200      	movs	r2, #0
 8012026:	749a      	strb	r2, [r3, #18]
 8012028:	2200      	movs	r2, #0
 801202a:	74da      	strb	r2, [r3, #19]
  return seg;
 801202c:	693b      	ldr	r3, [r7, #16]
}
 801202e:	4618      	mov	r0, r3
 8012030:	371c      	adds	r7, #28
 8012032:	46bd      	mov	sp, r7
 8012034:	bd90      	pop	{r4, r7, pc}
 8012036:	bf00      	nop
 8012038:	0801cbc8 	.word	0x0801cbc8
 801203c:	0801cbfc 	.word	0x0801cbfc
 8012040:	0801cc1c 	.word	0x0801cc1c
 8012044:	0801cc44 	.word	0x0801cc44
 8012048:	0801cc68 	.word	0x0801cc68

0801204c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b086      	sub	sp, #24
 8012050:	af00      	add	r7, sp, #0
 8012052:	607b      	str	r3, [r7, #4]
 8012054:	4603      	mov	r3, r0
 8012056:	73fb      	strb	r3, [r7, #15]
 8012058:	460b      	mov	r3, r1
 801205a:	81bb      	strh	r3, [r7, #12]
 801205c:	4613      	mov	r3, r2
 801205e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012060:	89bb      	ldrh	r3, [r7, #12]
 8012062:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d105      	bne.n	8012076 <tcp_pbuf_prealloc+0x2a>
 801206a:	4b30      	ldr	r3, [pc, #192]	; (801212c <tcp_pbuf_prealloc+0xe0>)
 801206c:	22e8      	movs	r2, #232	; 0xe8
 801206e:	4930      	ldr	r1, [pc, #192]	; (8012130 <tcp_pbuf_prealloc+0xe4>)
 8012070:	4830      	ldr	r0, [pc, #192]	; (8012134 <tcp_pbuf_prealloc+0xe8>)
 8012072:	f007 f8f9 	bl	8019268 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012076:	6a3b      	ldr	r3, [r7, #32]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d105      	bne.n	8012088 <tcp_pbuf_prealloc+0x3c>
 801207c:	4b2b      	ldr	r3, [pc, #172]	; (801212c <tcp_pbuf_prealloc+0xe0>)
 801207e:	22e9      	movs	r2, #233	; 0xe9
 8012080:	492d      	ldr	r1, [pc, #180]	; (8012138 <tcp_pbuf_prealloc+0xec>)
 8012082:	482c      	ldr	r0, [pc, #176]	; (8012134 <tcp_pbuf_prealloc+0xe8>)
 8012084:	f007 f8f0 	bl	8019268 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012088:	89ba      	ldrh	r2, [r7, #12]
 801208a:	897b      	ldrh	r3, [r7, #10]
 801208c:	429a      	cmp	r2, r3
 801208e:	d221      	bcs.n	80120d4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012094:	f003 0302 	and.w	r3, r3, #2
 8012098:	2b00      	cmp	r3, #0
 801209a:	d111      	bne.n	80120c0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801209c:	6a3b      	ldr	r3, [r7, #32]
 801209e:	8b5b      	ldrh	r3, [r3, #26]
 80120a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d115      	bne.n	80120d4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80120a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d007      	beq.n	80120c0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80120b0:	6a3b      	ldr	r3, [r7, #32]
 80120b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d103      	bne.n	80120c0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80120b8:	6a3b      	ldr	r3, [r7, #32]
 80120ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d009      	beq.n	80120d4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80120c0:	89bb      	ldrh	r3, [r7, #12]
 80120c2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80120c6:	f023 0203 	bic.w	r2, r3, #3
 80120ca:	897b      	ldrh	r3, [r7, #10]
 80120cc:	4293      	cmp	r3, r2
 80120ce:	bf28      	it	cs
 80120d0:	4613      	movcs	r3, r2
 80120d2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80120d4:	8af9      	ldrh	r1, [r7, #22]
 80120d6:	7bfb      	ldrb	r3, [r7, #15]
 80120d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80120dc:	4618      	mov	r0, r3
 80120de:	f7fa fead 	bl	800ce3c <pbuf_alloc>
 80120e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d101      	bne.n	80120ee <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80120ea:	2300      	movs	r3, #0
 80120ec:	e019      	b.n	8012122 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d006      	beq.n	8012104 <tcp_pbuf_prealloc+0xb8>
 80120f6:	4b0d      	ldr	r3, [pc, #52]	; (801212c <tcp_pbuf_prealloc+0xe0>)
 80120f8:	f240 120b 	movw	r2, #267	; 0x10b
 80120fc:	490f      	ldr	r1, [pc, #60]	; (801213c <tcp_pbuf_prealloc+0xf0>)
 80120fe:	480d      	ldr	r0, [pc, #52]	; (8012134 <tcp_pbuf_prealloc+0xe8>)
 8012100:	f007 f8b2 	bl	8019268 <iprintf>
  *oversize = p->len - length;
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	895a      	ldrh	r2, [r3, #10]
 8012108:	89bb      	ldrh	r3, [r7, #12]
 801210a:	1ad3      	subs	r3, r2, r3
 801210c:	b29a      	uxth	r2, r3
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	89ba      	ldrh	r2, [r7, #12]
 8012116:	811a      	strh	r2, [r3, #8]
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	891a      	ldrh	r2, [r3, #8]
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	815a      	strh	r2, [r3, #10]
  return p;
 8012120:	693b      	ldr	r3, [r7, #16]
}
 8012122:	4618      	mov	r0, r3
 8012124:	3718      	adds	r7, #24
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	0801cbc8 	.word	0x0801cbc8
 8012130:	0801cc80 	.word	0x0801cc80
 8012134:	0801cc1c 	.word	0x0801cc1c
 8012138:	0801cca4 	.word	0x0801cca4
 801213c:	0801ccc4 	.word	0x0801ccc4

08012140 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	460b      	mov	r3, r1
 801214a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d106      	bne.n	8012160 <tcp_write_checks+0x20>
 8012152:	4b33      	ldr	r3, [pc, #204]	; (8012220 <tcp_write_checks+0xe0>)
 8012154:	f240 1233 	movw	r2, #307	; 0x133
 8012158:	4932      	ldr	r1, [pc, #200]	; (8012224 <tcp_write_checks+0xe4>)
 801215a:	4833      	ldr	r0, [pc, #204]	; (8012228 <tcp_write_checks+0xe8>)
 801215c:	f007 f884 	bl	8019268 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	7d1b      	ldrb	r3, [r3, #20]
 8012164:	2b04      	cmp	r3, #4
 8012166:	d00e      	beq.n	8012186 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801216c:	2b07      	cmp	r3, #7
 801216e:	d00a      	beq.n	8012186 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012174:	2b02      	cmp	r3, #2
 8012176:	d006      	beq.n	8012186 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801217c:	2b03      	cmp	r3, #3
 801217e:	d002      	beq.n	8012186 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012180:	f06f 030a 	mvn.w	r3, #10
 8012184:	e048      	b.n	8012218 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012186:	887b      	ldrh	r3, [r7, #2]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d101      	bne.n	8012190 <tcp_write_checks+0x50>
    return ERR_OK;
 801218c:	2300      	movs	r3, #0
 801218e:	e043      	b.n	8012218 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012196:	887a      	ldrh	r2, [r7, #2]
 8012198:	429a      	cmp	r2, r3
 801219a:	d909      	bls.n	80121b0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	8b5b      	ldrh	r3, [r3, #26]
 80121a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121a4:	b29a      	uxth	r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80121aa:	f04f 33ff 	mov.w	r3, #4294967295
 80121ae:	e033      	b.n	8012218 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121b6:	2b08      	cmp	r3, #8
 80121b8:	d909      	bls.n	80121ce <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8b5b      	ldrh	r3, [r3, #26]
 80121be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80121c8:	f04f 33ff 	mov.w	r3, #4294967295
 80121cc:	e024      	b.n	8012218 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d00f      	beq.n	80121f8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d11a      	bne.n	8012216 <tcp_write_checks+0xd6>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d116      	bne.n	8012216 <tcp_write_checks+0xd6>
 80121e8:	4b0d      	ldr	r3, [pc, #52]	; (8012220 <tcp_write_checks+0xe0>)
 80121ea:	f240 1255 	movw	r2, #341	; 0x155
 80121ee:	490f      	ldr	r1, [pc, #60]	; (801222c <tcp_write_checks+0xec>)
 80121f0:	480d      	ldr	r0, [pc, #52]	; (8012228 <tcp_write_checks+0xe8>)
 80121f2:	f007 f839 	bl	8019268 <iprintf>
 80121f6:	e00e      	b.n	8012216 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d103      	bne.n	8012208 <tcp_write_checks+0xc8>
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012204:	2b00      	cmp	r3, #0
 8012206:	d006      	beq.n	8012216 <tcp_write_checks+0xd6>
 8012208:	4b05      	ldr	r3, [pc, #20]	; (8012220 <tcp_write_checks+0xe0>)
 801220a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801220e:	4908      	ldr	r1, [pc, #32]	; (8012230 <tcp_write_checks+0xf0>)
 8012210:	4805      	ldr	r0, [pc, #20]	; (8012228 <tcp_write_checks+0xe8>)
 8012212:	f007 f829 	bl	8019268 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012216:	2300      	movs	r3, #0
}
 8012218:	4618      	mov	r0, r3
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	0801cbc8 	.word	0x0801cbc8
 8012224:	0801ccd8 	.word	0x0801ccd8
 8012228:	0801cc1c 	.word	0x0801cc1c
 801222c:	0801ccf8 	.word	0x0801ccf8
 8012230:	0801cd34 	.word	0x0801cd34

08012234 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012234:	b590      	push	{r4, r7, lr}
 8012236:	b09b      	sub	sp, #108	; 0x6c
 8012238:	af04      	add	r7, sp, #16
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	4611      	mov	r1, r2
 8012240:	461a      	mov	r2, r3
 8012242:	460b      	mov	r3, r1
 8012244:	80fb      	strh	r3, [r7, #6]
 8012246:	4613      	mov	r3, r2
 8012248:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801224a:	2300      	movs	r3, #0
 801224c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801224e:	2300      	movs	r3, #0
 8012250:	653b      	str	r3, [r7, #80]	; 0x50
 8012252:	2300      	movs	r3, #0
 8012254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012256:	2300      	movs	r3, #0
 8012258:	64bb      	str	r3, [r7, #72]	; 0x48
 801225a:	2300      	movs	r3, #0
 801225c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801225e:	2300      	movs	r3, #0
 8012260:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012264:	2300      	movs	r3, #0
 8012266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801226a:	2300      	movs	r3, #0
 801226c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801226e:	2300      	movs	r3, #0
 8012270:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d109      	bne.n	8012290 <tcp_write+0x5c>
 801227c:	4ba4      	ldr	r3, [pc, #656]	; (8012510 <tcp_write+0x2dc>)
 801227e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012282:	49a4      	ldr	r1, [pc, #656]	; (8012514 <tcp_write+0x2e0>)
 8012284:	48a4      	ldr	r0, [pc, #656]	; (8012518 <tcp_write+0x2e4>)
 8012286:	f006 ffef 	bl	8019268 <iprintf>
 801228a:	f06f 030f 	mvn.w	r3, #15
 801228e:	e32a      	b.n	80128e6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012296:	085b      	lsrs	r3, r3, #1
 8012298:	b29a      	uxth	r2, r3
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801229e:	4293      	cmp	r3, r2
 80122a0:	bf28      	it	cs
 80122a2:	4613      	movcs	r3, r2
 80122a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80122a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d102      	bne.n	80122b2 <tcp_write+0x7e>
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122b0:	e000      	b.n	80122b4 <tcp_write+0x80>
 80122b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d109      	bne.n	80122d0 <tcp_write+0x9c>
 80122bc:	4b94      	ldr	r3, [pc, #592]	; (8012510 <tcp_write+0x2dc>)
 80122be:	f240 12ad 	movw	r2, #429	; 0x1ad
 80122c2:	4996      	ldr	r1, [pc, #600]	; (801251c <tcp_write+0x2e8>)
 80122c4:	4894      	ldr	r0, [pc, #592]	; (8012518 <tcp_write+0x2e4>)
 80122c6:	f006 ffcf 	bl	8019268 <iprintf>
 80122ca:	f06f 030f 	mvn.w	r3, #15
 80122ce:	e30a      	b.n	80128e6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80122d0:	88fb      	ldrh	r3, [r7, #6]
 80122d2:	4619      	mov	r1, r3
 80122d4:	68f8      	ldr	r0, [r7, #12]
 80122d6:	f7ff ff33 	bl	8012140 <tcp_write_checks>
 80122da:	4603      	mov	r3, r0
 80122dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80122e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d002      	beq.n	80122ee <tcp_write+0xba>
    return err;
 80122e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80122ec:	e2fb      	b.n	80128e6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80122f8:	2300      	movs	r3, #0
 80122fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012302:	2b00      	cmp	r3, #0
 8012304:	f000 80f6 	beq.w	80124f4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801230c:	653b      	str	r3, [r7, #80]	; 0x50
 801230e:	e002      	b.n	8012316 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d1f8      	bne.n	8012310 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801231e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012320:	7a9b      	ldrb	r3, [r3, #10]
 8012322:	009b      	lsls	r3, r3, #2
 8012324:	b29b      	uxth	r3, r3
 8012326:	f003 0304 	and.w	r3, r3, #4
 801232a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801232c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801232e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012330:	891b      	ldrh	r3, [r3, #8]
 8012332:	4619      	mov	r1, r3
 8012334:	8c3b      	ldrh	r3, [r7, #32]
 8012336:	440b      	add	r3, r1
 8012338:	429a      	cmp	r2, r3
 801233a:	da06      	bge.n	801234a <tcp_write+0x116>
 801233c:	4b74      	ldr	r3, [pc, #464]	; (8012510 <tcp_write+0x2dc>)
 801233e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012342:	4977      	ldr	r1, [pc, #476]	; (8012520 <tcp_write+0x2ec>)
 8012344:	4874      	ldr	r0, [pc, #464]	; (8012518 <tcp_write+0x2e4>)
 8012346:	f006 ff8f 	bl	8019268 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801234a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801234c:	891a      	ldrh	r2, [r3, #8]
 801234e:	8c3b      	ldrh	r3, [r7, #32]
 8012350:	4413      	add	r3, r2
 8012352:	b29b      	uxth	r3, r3
 8012354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012356:	1ad3      	subs	r3, r2, r3
 8012358:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012360:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012362:	8a7b      	ldrh	r3, [r7, #18]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d026      	beq.n	80123b6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012368:	8a7b      	ldrh	r3, [r7, #18]
 801236a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801236c:	429a      	cmp	r2, r3
 801236e:	d206      	bcs.n	801237e <tcp_write+0x14a>
 8012370:	4b67      	ldr	r3, [pc, #412]	; (8012510 <tcp_write+0x2dc>)
 8012372:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012376:	496b      	ldr	r1, [pc, #428]	; (8012524 <tcp_write+0x2f0>)
 8012378:	4867      	ldr	r0, [pc, #412]	; (8012518 <tcp_write+0x2e4>)
 801237a:	f006 ff75 	bl	8019268 <iprintf>
      seg = last_unsent;
 801237e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012380:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012382:	8a7b      	ldrh	r3, [r7, #18]
 8012384:	88fa      	ldrh	r2, [r7, #6]
 8012386:	4293      	cmp	r3, r2
 8012388:	bf28      	it	cs
 801238a:	4613      	movcs	r3, r2
 801238c:	b29b      	uxth	r3, r3
 801238e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012390:	4293      	cmp	r3, r2
 8012392:	bf28      	it	cs
 8012394:	4613      	movcs	r3, r2
 8012396:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012398:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801239c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801239e:	4413      	add	r3, r2
 80123a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80123a4:	8a7a      	ldrh	r2, [r7, #18]
 80123a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123a8:	1ad3      	subs	r3, r2, r3
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80123ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80123b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80123b6:	8a7b      	ldrh	r3, [r7, #18]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d00b      	beq.n	80123d4 <tcp_write+0x1a0>
 80123bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123c0:	88fb      	ldrh	r3, [r7, #6]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d006      	beq.n	80123d4 <tcp_write+0x1a0>
 80123c6:	4b52      	ldr	r3, [pc, #328]	; (8012510 <tcp_write+0x2dc>)
 80123c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123cc:	4956      	ldr	r1, [pc, #344]	; (8012528 <tcp_write+0x2f4>)
 80123ce:	4852      	ldr	r0, [pc, #328]	; (8012518 <tcp_write+0x2e4>)
 80123d0:	f006 ff4a 	bl	8019268 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80123d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123d8:	88fb      	ldrh	r3, [r7, #6]
 80123da:	429a      	cmp	r2, r3
 80123dc:	f080 8167 	bcs.w	80126ae <tcp_write+0x47a>
 80123e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	f000 8163 	beq.w	80126ae <tcp_write+0x47a>
 80123e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ea:	891b      	ldrh	r3, [r3, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f000 815e 	beq.w	80126ae <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80123f2:	88fa      	ldrh	r2, [r7, #6]
 80123f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123f8:	1ad2      	subs	r2, r2, r3
 80123fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80123fc:	4293      	cmp	r3, r2
 80123fe:	bfa8      	it	ge
 8012400:	4613      	movge	r3, r2
 8012402:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012406:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012408:	797b      	ldrb	r3, [r7, #5]
 801240a:	f003 0301 	and.w	r3, r3, #1
 801240e:	2b00      	cmp	r3, #0
 8012410:	d027      	beq.n	8012462 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012412:	f107 0012 	add.w	r0, r7, #18
 8012416:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012418:	8bf9      	ldrh	r1, [r7, #30]
 801241a:	2301      	movs	r3, #1
 801241c:	9302      	str	r3, [sp, #8]
 801241e:	797b      	ldrb	r3, [r7, #5]
 8012420:	9301      	str	r3, [sp, #4]
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	4603      	mov	r3, r0
 8012428:	2000      	movs	r0, #0
 801242a:	f7ff fe0f 	bl	801204c <tcp_pbuf_prealloc>
 801242e:	6578      	str	r0, [r7, #84]	; 0x54
 8012430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012432:	2b00      	cmp	r3, #0
 8012434:	f000 8225 	beq.w	8012882 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801243a:	6858      	ldr	r0, [r3, #4]
 801243c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012440:	68ba      	ldr	r2, [r7, #8]
 8012442:	4413      	add	r3, r2
 8012444:	8bfa      	ldrh	r2, [r7, #30]
 8012446:	4619      	mov	r1, r3
 8012448:	f007 f90e 	bl	8019668 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801244c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801244e:	f7fb f867 	bl	800d520 <pbuf_clen>
 8012452:	4603      	mov	r3, r0
 8012454:	461a      	mov	r2, r3
 8012456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801245a:	4413      	add	r3, r2
 801245c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012460:	e041      	b.n	80124e6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	637b      	str	r3, [r7, #52]	; 0x34
 8012468:	e002      	b.n	8012470 <tcp_write+0x23c>
 801246a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	637b      	str	r3, [r7, #52]	; 0x34
 8012470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d1f8      	bne.n	801246a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801247a:	7b1b      	ldrb	r3, [r3, #12]
 801247c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012480:	2b00      	cmp	r3, #0
 8012482:	d115      	bne.n	80124b0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801248a:	8952      	ldrh	r2, [r2, #10]
 801248c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801248e:	68ba      	ldr	r2, [r7, #8]
 8012490:	429a      	cmp	r2, r3
 8012492:	d10d      	bne.n	80124b0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012498:	2b00      	cmp	r3, #0
 801249a:	d006      	beq.n	80124aa <tcp_write+0x276>
 801249c:	4b1c      	ldr	r3, [pc, #112]	; (8012510 <tcp_write+0x2dc>)
 801249e:	f240 2231 	movw	r2, #561	; 0x231
 80124a2:	4922      	ldr	r1, [pc, #136]	; (801252c <tcp_write+0x2f8>)
 80124a4:	481c      	ldr	r0, [pc, #112]	; (8012518 <tcp_write+0x2e4>)
 80124a6:	f006 fedf 	bl	8019268 <iprintf>
          extendlen = seglen;
 80124aa:	8bfb      	ldrh	r3, [r7, #30]
 80124ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80124ae:	e01a      	b.n	80124e6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80124b0:	8bfb      	ldrh	r3, [r7, #30]
 80124b2:	2201      	movs	r2, #1
 80124b4:	4619      	mov	r1, r3
 80124b6:	2000      	movs	r0, #0
 80124b8:	f7fa fcc0 	bl	800ce3c <pbuf_alloc>
 80124bc:	6578      	str	r0, [r7, #84]	; 0x54
 80124be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	f000 81e0 	beq.w	8012886 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80124c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	441a      	add	r2, r3
 80124ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124d0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80124d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80124d4:	f7fb f824 	bl	800d520 <pbuf_clen>
 80124d8:	4603      	mov	r3, r0
 80124da:	461a      	mov	r2, r3
 80124dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80124e0:	4413      	add	r3, r2
 80124e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80124e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80124ea:	8bfb      	ldrh	r3, [r7, #30]
 80124ec:	4413      	add	r3, r2
 80124ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80124f2:	e0dc      	b.n	80126ae <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	f000 80d7 	beq.w	80126ae <tcp_write+0x47a>
 8012500:	4b03      	ldr	r3, [pc, #12]	; (8012510 <tcp_write+0x2dc>)
 8012502:	f240 224a 	movw	r2, #586	; 0x24a
 8012506:	490a      	ldr	r1, [pc, #40]	; (8012530 <tcp_write+0x2fc>)
 8012508:	4803      	ldr	r0, [pc, #12]	; (8012518 <tcp_write+0x2e4>)
 801250a:	f006 fead 	bl	8019268 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801250e:	e0ce      	b.n	80126ae <tcp_write+0x47a>
 8012510:	0801cbc8 	.word	0x0801cbc8
 8012514:	0801cd68 	.word	0x0801cd68
 8012518:	0801cc1c 	.word	0x0801cc1c
 801251c:	0801cd80 	.word	0x0801cd80
 8012520:	0801cdb4 	.word	0x0801cdb4
 8012524:	0801cdcc 	.word	0x0801cdcc
 8012528:	0801cdec 	.word	0x0801cdec
 801252c:	0801ce0c 	.word	0x0801ce0c
 8012530:	0801ce38 	.word	0x0801ce38
    struct pbuf *p;
    u16_t left = len - pos;
 8012534:	88fa      	ldrh	r2, [r7, #6]
 8012536:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801253a:	1ad3      	subs	r3, r2, r3
 801253c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801253e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012542:	b29b      	uxth	r3, r3
 8012544:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012546:	1ad3      	subs	r3, r2, r3
 8012548:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801254a:	8b7a      	ldrh	r2, [r7, #26]
 801254c:	8bbb      	ldrh	r3, [r7, #28]
 801254e:	4293      	cmp	r3, r2
 8012550:	bf28      	it	cs
 8012552:	4613      	movcs	r3, r2
 8012554:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012556:	797b      	ldrb	r3, [r7, #5]
 8012558:	f003 0301 	and.w	r3, r3, #1
 801255c:	2b00      	cmp	r3, #0
 801255e:	d036      	beq.n	80125ce <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012560:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012564:	b29a      	uxth	r2, r3
 8012566:	8b3b      	ldrh	r3, [r7, #24]
 8012568:	4413      	add	r3, r2
 801256a:	b299      	uxth	r1, r3
 801256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801256e:	2b00      	cmp	r3, #0
 8012570:	bf0c      	ite	eq
 8012572:	2301      	moveq	r3, #1
 8012574:	2300      	movne	r3, #0
 8012576:	b2db      	uxtb	r3, r3
 8012578:	f107 0012 	add.w	r0, r7, #18
 801257c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801257e:	9302      	str	r3, [sp, #8]
 8012580:	797b      	ldrb	r3, [r7, #5]
 8012582:	9301      	str	r3, [sp, #4]
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	9300      	str	r3, [sp, #0]
 8012588:	4603      	mov	r3, r0
 801258a:	2036      	movs	r0, #54	; 0x36
 801258c:	f7ff fd5e 	bl	801204c <tcp_pbuf_prealloc>
 8012590:	6338      	str	r0, [r7, #48]	; 0x30
 8012592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012594:	2b00      	cmp	r3, #0
 8012596:	f000 8178 	beq.w	801288a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259c:	895b      	ldrh	r3, [r3, #10]
 801259e:	8b3a      	ldrh	r2, [r7, #24]
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d906      	bls.n	80125b2 <tcp_write+0x37e>
 80125a4:	4b8c      	ldr	r3, [pc, #560]	; (80127d8 <tcp_write+0x5a4>)
 80125a6:	f240 2266 	movw	r2, #614	; 0x266
 80125aa:	498c      	ldr	r1, [pc, #560]	; (80127dc <tcp_write+0x5a8>)
 80125ac:	488c      	ldr	r0, [pc, #560]	; (80127e0 <tcp_write+0x5ac>)
 80125ae:	f006 fe5b 	bl	8019268 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80125b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b4:	685a      	ldr	r2, [r3, #4]
 80125b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80125ba:	18d0      	adds	r0, r2, r3
 80125bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125c0:	68ba      	ldr	r2, [r7, #8]
 80125c2:	4413      	add	r3, r2
 80125c4:	8b3a      	ldrh	r2, [r7, #24]
 80125c6:	4619      	mov	r1, r3
 80125c8:	f007 f84e 	bl	8019668 <memcpy>
 80125cc:	e02f      	b.n	801262e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80125ce:	8a7b      	ldrh	r3, [r7, #18]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d006      	beq.n	80125e2 <tcp_write+0x3ae>
 80125d4:	4b80      	ldr	r3, [pc, #512]	; (80127d8 <tcp_write+0x5a4>)
 80125d6:	f240 2271 	movw	r2, #625	; 0x271
 80125da:	4982      	ldr	r1, [pc, #520]	; (80127e4 <tcp_write+0x5b0>)
 80125dc:	4880      	ldr	r0, [pc, #512]	; (80127e0 <tcp_write+0x5ac>)
 80125de:	f006 fe43 	bl	8019268 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80125e2:	8b3b      	ldrh	r3, [r7, #24]
 80125e4:	2201      	movs	r2, #1
 80125e6:	4619      	mov	r1, r3
 80125e8:	2036      	movs	r0, #54	; 0x36
 80125ea:	f7fa fc27 	bl	800ce3c <pbuf_alloc>
 80125ee:	6178      	str	r0, [r7, #20]
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	f000 814b 	beq.w	801288e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80125f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125fc:	68ba      	ldr	r2, [r7, #8]
 80125fe:	441a      	add	r2, r3
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012604:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012608:	b29b      	uxth	r3, r3
 801260a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801260e:	4619      	mov	r1, r3
 8012610:	2036      	movs	r0, #54	; 0x36
 8012612:	f7fa fc13 	bl	800ce3c <pbuf_alloc>
 8012616:	6338      	str	r0, [r7, #48]	; 0x30
 8012618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261a:	2b00      	cmp	r3, #0
 801261c:	d103      	bne.n	8012626 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801261e:	6978      	ldr	r0, [r7, #20]
 8012620:	f7fa fef0 	bl	800d404 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012624:	e136      	b.n	8012894 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012626:	6979      	ldr	r1, [r7, #20]
 8012628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801262a:	f7fa ffb9 	bl	800d5a0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801262e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012630:	f7fa ff76 	bl	800d520 <pbuf_clen>
 8012634:	4603      	mov	r3, r0
 8012636:	461a      	mov	r2, r3
 8012638:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801263c:	4413      	add	r3, r2
 801263e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012642:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012646:	2b09      	cmp	r3, #9
 8012648:	d903      	bls.n	8012652 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801264a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801264c:	f7fa feda 	bl	800d404 <pbuf_free>
      goto memerr;
 8012650:	e120      	b.n	8012894 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012656:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801265a:	441a      	add	r2, r3
 801265c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012660:	9300      	str	r3, [sp, #0]
 8012662:	4613      	mov	r3, r2
 8012664:	2200      	movs	r2, #0
 8012666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012668:	68f8      	ldr	r0, [r7, #12]
 801266a:	f7ff fc51 	bl	8011f10 <tcp_create_segment>
 801266e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012672:	2b00      	cmp	r3, #0
 8012674:	f000 810d 	beq.w	8012892 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801267a:	2b00      	cmp	r3, #0
 801267c:	d102      	bne.n	8012684 <tcp_write+0x450>
      queue = seg;
 801267e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012680:	647b      	str	r3, [r7, #68]	; 0x44
 8012682:	e00c      	b.n	801269e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012686:	2b00      	cmp	r3, #0
 8012688:	d106      	bne.n	8012698 <tcp_write+0x464>
 801268a:	4b53      	ldr	r3, [pc, #332]	; (80127d8 <tcp_write+0x5a4>)
 801268c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012690:	4955      	ldr	r1, [pc, #340]	; (80127e8 <tcp_write+0x5b4>)
 8012692:	4853      	ldr	r0, [pc, #332]	; (80127e0 <tcp_write+0x5ac>)
 8012694:	f006 fde8 	bl	8019268 <iprintf>
      prev_seg->next = seg;
 8012698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801269a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801269c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801269e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80126a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126a6:	8b3b      	ldrh	r3, [r7, #24]
 80126a8:	4413      	add	r3, r2
 80126aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80126ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126b2:	88fb      	ldrh	r3, [r7, #6]
 80126b4:	429a      	cmp	r2, r3
 80126b6:	f4ff af3d 	bcc.w	8012534 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80126ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d02c      	beq.n	801271a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80126c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80126c6:	e01e      	b.n	8012706 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80126c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ca:	891a      	ldrh	r2, [r3, #8]
 80126cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80126ce:	4413      	add	r3, r2
 80126d0:	b29a      	uxth	r2, r3
 80126d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80126d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d110      	bne.n	8012700 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80126de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126e4:	8952      	ldrh	r2, [r2, #10]
 80126e6:	4413      	add	r3, r2
 80126e8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80126ea:	68b9      	ldr	r1, [r7, #8]
 80126ec:	4618      	mov	r0, r3
 80126ee:	f006 ffbb 	bl	8019668 <memcpy>
        p->len += oversize_used;
 80126f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f4:	895a      	ldrh	r2, [r3, #10]
 80126f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80126f8:	4413      	add	r3, r2
 80126fa:	b29a      	uxth	r2, r3
 80126fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fe:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012708:	2b00      	cmp	r3, #0
 801270a:	d1dd      	bne.n	80126c8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801270c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801270e:	891a      	ldrh	r2, [r3, #8]
 8012710:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012712:	4413      	add	r3, r2
 8012714:	b29a      	uxth	r2, r3
 8012716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012718:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801271a:	8a7a      	ldrh	r2, [r7, #18]
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012724:	2b00      	cmp	r3, #0
 8012726:	d018      	beq.n	801275a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801272a:	2b00      	cmp	r3, #0
 801272c:	d106      	bne.n	801273c <tcp_write+0x508>
 801272e:	4b2a      	ldr	r3, [pc, #168]	; (80127d8 <tcp_write+0x5a4>)
 8012730:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012734:	492d      	ldr	r1, [pc, #180]	; (80127ec <tcp_write+0x5b8>)
 8012736:	482a      	ldr	r0, [pc, #168]	; (80127e0 <tcp_write+0x5ac>)
 8012738:	f006 fd96 	bl	8019268 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801273c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012742:	4618      	mov	r0, r3
 8012744:	f7fa ff2c 	bl	800d5a0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801274a:	891a      	ldrh	r2, [r3, #8]
 801274c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801274e:	891b      	ldrh	r3, [r3, #8]
 8012750:	4413      	add	r3, r2
 8012752:	b29a      	uxth	r2, r3
 8012754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012756:	811a      	strh	r2, [r3, #8]
 8012758:	e037      	b.n	80127ca <tcp_write+0x596>
  } else if (extendlen > 0) {
 801275a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801275c:	2b00      	cmp	r3, #0
 801275e:	d034      	beq.n	80127ca <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012762:	2b00      	cmp	r3, #0
 8012764:	d003      	beq.n	801276e <tcp_write+0x53a>
 8012766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d106      	bne.n	801277c <tcp_write+0x548>
 801276e:	4b1a      	ldr	r3, [pc, #104]	; (80127d8 <tcp_write+0x5a4>)
 8012770:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012774:	491e      	ldr	r1, [pc, #120]	; (80127f0 <tcp_write+0x5bc>)
 8012776:	481a      	ldr	r0, [pc, #104]	; (80127e0 <tcp_write+0x5ac>)
 8012778:	f006 fd76 	bl	8019268 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801277c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	62bb      	str	r3, [r7, #40]	; 0x28
 8012782:	e009      	b.n	8012798 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012786:	891a      	ldrh	r2, [r3, #8]
 8012788:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801278a:	4413      	add	r3, r2
 801278c:	b29a      	uxth	r2, r3
 801278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012790:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	62bb      	str	r3, [r7, #40]	; 0x28
 8012798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d1f1      	bne.n	8012784 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80127a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a2:	891a      	ldrh	r2, [r3, #8]
 80127a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127a6:	4413      	add	r3, r2
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80127ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b0:	895a      	ldrh	r2, [r3, #10]
 80127b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127b4:	4413      	add	r3, r2
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ba:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80127bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127be:	891a      	ldrh	r2, [r3, #8]
 80127c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127c2:	4413      	add	r3, r2
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127c8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80127ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d111      	bne.n	80127f4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80127d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80127d6:	e010      	b.n	80127fa <tcp_write+0x5c6>
 80127d8:	0801cbc8 	.word	0x0801cbc8
 80127dc:	0801ce68 	.word	0x0801ce68
 80127e0:	0801cc1c 	.word	0x0801cc1c
 80127e4:	0801cea8 	.word	0x0801cea8
 80127e8:	0801ceb8 	.word	0x0801ceb8
 80127ec:	0801cecc 	.word	0x0801cecc
 80127f0:	0801cf04 	.word	0x0801cf04
  } else {
    last_unsent->next = queue;
 80127f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80127f8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80127fe:	88fb      	ldrh	r3, [r7, #6]
 8012800:	441a      	add	r2, r3
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801280c:	88fb      	ldrh	r3, [r7, #6]
 801280e:	1ad3      	subs	r3, r2, r3
 8012810:	b29a      	uxth	r2, r3
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801281e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00e      	beq.n	801284a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012830:	2b00      	cmp	r3, #0
 8012832:	d10a      	bne.n	801284a <tcp_write+0x616>
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012838:	2b00      	cmp	r3, #0
 801283a:	d106      	bne.n	801284a <tcp_write+0x616>
 801283c:	4b2c      	ldr	r3, [pc, #176]	; (80128f0 <tcp_write+0x6bc>)
 801283e:	f240 3212 	movw	r2, #786	; 0x312
 8012842:	492c      	ldr	r1, [pc, #176]	; (80128f4 <tcp_write+0x6c0>)
 8012844:	482c      	ldr	r0, [pc, #176]	; (80128f8 <tcp_write+0x6c4>)
 8012846:	f006 fd0f 	bl	8019268 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801284c:	2b00      	cmp	r3, #0
 801284e:	d016      	beq.n	801287e <tcp_write+0x64a>
 8012850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012852:	68db      	ldr	r3, [r3, #12]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d012      	beq.n	801287e <tcp_write+0x64a>
 8012858:	797b      	ldrb	r3, [r7, #5]
 801285a:	f003 0302 	and.w	r3, r3, #2
 801285e:	2b00      	cmp	r3, #0
 8012860:	d10d      	bne.n	801287e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	899b      	ldrh	r3, [r3, #12]
 8012868:	b29c      	uxth	r4, r3
 801286a:	2008      	movs	r0, #8
 801286c:	f7f9 f996 	bl	800bb9c <lwip_htons>
 8012870:	4603      	mov	r3, r0
 8012872:	461a      	mov	r2, r3
 8012874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	4322      	orrs	r2, r4
 801287a:	b292      	uxth	r2, r2
 801287c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801287e:	2300      	movs	r3, #0
 8012880:	e031      	b.n	80128e6 <tcp_write+0x6b2>
          goto memerr;
 8012882:	bf00      	nop
 8012884:	e006      	b.n	8012894 <tcp_write+0x660>
            goto memerr;
 8012886:	bf00      	nop
 8012888:	e004      	b.n	8012894 <tcp_write+0x660>
        goto memerr;
 801288a:	bf00      	nop
 801288c:	e002      	b.n	8012894 <tcp_write+0x660>
        goto memerr;
 801288e:	bf00      	nop
 8012890:	e000      	b.n	8012894 <tcp_write+0x660>
      goto memerr;
 8012892:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	8b5b      	ldrh	r3, [r3, #26]
 8012898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801289c:	b29a      	uxth	r2, r3
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80128a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d002      	beq.n	80128ae <tcp_write+0x67a>
    pbuf_free(concat_p);
 80128a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80128aa:	f7fa fdab 	bl	800d404 <pbuf_free>
  }
  if (queue != NULL) {
 80128ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d002      	beq.n	80128ba <tcp_write+0x686>
    tcp_segs_free(queue);
 80128b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80128b6:	f7fc fb4d 	bl	800ef54 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d00e      	beq.n	80128e2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d10a      	bne.n	80128e2 <tcp_write+0x6ae>
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d106      	bne.n	80128e2 <tcp_write+0x6ae>
 80128d4:	4b06      	ldr	r3, [pc, #24]	; (80128f0 <tcp_write+0x6bc>)
 80128d6:	f240 3227 	movw	r2, #807	; 0x327
 80128da:	4906      	ldr	r1, [pc, #24]	; (80128f4 <tcp_write+0x6c0>)
 80128dc:	4806      	ldr	r0, [pc, #24]	; (80128f8 <tcp_write+0x6c4>)
 80128de:	f006 fcc3 	bl	8019268 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80128e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	375c      	adds	r7, #92	; 0x5c
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd90      	pop	{r4, r7, pc}
 80128ee:	bf00      	nop
 80128f0:	0801cbc8 	.word	0x0801cbc8
 80128f4:	0801cf3c 	.word	0x0801cf3c
 80128f8:	0801cc1c 	.word	0x0801cc1c

080128fc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80128fc:	b590      	push	{r4, r7, lr}
 80128fe:	b08b      	sub	sp, #44	; 0x2c
 8012900:	af02      	add	r7, sp, #8
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	460b      	mov	r3, r1
 8012906:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012908:	2300      	movs	r3, #0
 801290a:	61fb      	str	r3, [r7, #28]
 801290c:	2300      	movs	r3, #0
 801290e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012910:	2300      	movs	r3, #0
 8012912:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d106      	bne.n	8012928 <tcp_split_unsent_seg+0x2c>
 801291a:	4b95      	ldr	r3, [pc, #596]	; (8012b70 <tcp_split_unsent_seg+0x274>)
 801291c:	f240 324b 	movw	r2, #843	; 0x34b
 8012920:	4994      	ldr	r1, [pc, #592]	; (8012b74 <tcp_split_unsent_seg+0x278>)
 8012922:	4895      	ldr	r0, [pc, #596]	; (8012b78 <tcp_split_unsent_seg+0x27c>)
 8012924:	f006 fca0 	bl	8019268 <iprintf>

  useg = pcb->unsent;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801292c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d102      	bne.n	801293a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012934:	f04f 33ff 	mov.w	r3, #4294967295
 8012938:	e116      	b.n	8012b68 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801293a:	887b      	ldrh	r3, [r7, #2]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d109      	bne.n	8012954 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012940:	4b8b      	ldr	r3, [pc, #556]	; (8012b70 <tcp_split_unsent_seg+0x274>)
 8012942:	f240 3253 	movw	r2, #851	; 0x353
 8012946:	498d      	ldr	r1, [pc, #564]	; (8012b7c <tcp_split_unsent_seg+0x280>)
 8012948:	488b      	ldr	r0, [pc, #556]	; (8012b78 <tcp_split_unsent_seg+0x27c>)
 801294a:	f006 fc8d 	bl	8019268 <iprintf>
    return ERR_VAL;
 801294e:	f06f 0305 	mvn.w	r3, #5
 8012952:	e109      	b.n	8012b68 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	891b      	ldrh	r3, [r3, #8]
 8012958:	887a      	ldrh	r2, [r7, #2]
 801295a:	429a      	cmp	r2, r3
 801295c:	d301      	bcc.n	8012962 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801295e:	2300      	movs	r3, #0
 8012960:	e102      	b.n	8012b68 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012966:	887a      	ldrh	r2, [r7, #2]
 8012968:	429a      	cmp	r2, r3
 801296a:	d906      	bls.n	801297a <tcp_split_unsent_seg+0x7e>
 801296c:	4b80      	ldr	r3, [pc, #512]	; (8012b70 <tcp_split_unsent_seg+0x274>)
 801296e:	f240 325b 	movw	r2, #859	; 0x35b
 8012972:	4983      	ldr	r1, [pc, #524]	; (8012b80 <tcp_split_unsent_seg+0x284>)
 8012974:	4880      	ldr	r0, [pc, #512]	; (8012b78 <tcp_split_unsent_seg+0x27c>)
 8012976:	f006 fc77 	bl	8019268 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	891b      	ldrh	r3, [r3, #8]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d106      	bne.n	8012990 <tcp_split_unsent_seg+0x94>
 8012982:	4b7b      	ldr	r3, [pc, #492]	; (8012b70 <tcp_split_unsent_seg+0x274>)
 8012984:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012988:	497e      	ldr	r1, [pc, #504]	; (8012b84 <tcp_split_unsent_seg+0x288>)
 801298a:	487b      	ldr	r0, [pc, #492]	; (8012b78 <tcp_split_unsent_seg+0x27c>)
 801298c:	f006 fc6c 	bl	8019268 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012990:	697b      	ldr	r3, [r7, #20]
 8012992:	7a9b      	ldrb	r3, [r3, #10]
 8012994:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012996:	7bfb      	ldrb	r3, [r7, #15]
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	b2db      	uxtb	r3, r3
 801299c:	f003 0304 	and.w	r3, r3, #4
 80129a0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	891a      	ldrh	r2, [r3, #8]
 80129a6:	887b      	ldrh	r3, [r7, #2]
 80129a8:	1ad3      	subs	r3, r2, r3
 80129aa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80129ac:	7bbb      	ldrb	r3, [r7, #14]
 80129ae:	b29a      	uxth	r2, r3
 80129b0:	89bb      	ldrh	r3, [r7, #12]
 80129b2:	4413      	add	r3, r2
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129ba:	4619      	mov	r1, r3
 80129bc:	2036      	movs	r0, #54	; 0x36
 80129be:	f7fa fa3d 	bl	800ce3c <pbuf_alloc>
 80129c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	f000 80b7 	beq.w	8012b3a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	891a      	ldrh	r2, [r3, #8]
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	891b      	ldrh	r3, [r3, #8]
 80129d6:	1ad3      	subs	r3, r2, r3
 80129d8:	b29a      	uxth	r2, r3
 80129da:	887b      	ldrh	r3, [r7, #2]
 80129dc:	4413      	add	r3, r2
 80129de:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	6858      	ldr	r0, [r3, #4]
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	685a      	ldr	r2, [r3, #4]
 80129e8:	7bbb      	ldrb	r3, [r7, #14]
 80129ea:	18d1      	adds	r1, r2, r3
 80129ec:	897b      	ldrh	r3, [r7, #10]
 80129ee:	89ba      	ldrh	r2, [r7, #12]
 80129f0:	f7fa ff0e 	bl	800d810 <pbuf_copy_partial>
 80129f4:	4603      	mov	r3, r0
 80129f6:	461a      	mov	r2, r3
 80129f8:	89bb      	ldrh	r3, [r7, #12]
 80129fa:	4293      	cmp	r3, r2
 80129fc:	f040 809f 	bne.w	8012b3e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	68db      	ldr	r3, [r3, #12]
 8012a04:	899b      	ldrh	r3, [r3, #12]
 8012a06:	b29b      	uxth	r3, r3
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f7f9 f8c7 	bl	800bb9c <lwip_htons>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a16:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012a18:	2300      	movs	r3, #0
 8012a1a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012a1c:	7efb      	ldrb	r3, [r7, #27]
 8012a1e:	f003 0308 	and.w	r3, r3, #8
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d007      	beq.n	8012a36 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012a26:	7efb      	ldrb	r3, [r7, #27]
 8012a28:	f023 0308 	bic.w	r3, r3, #8
 8012a2c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012a2e:	7ebb      	ldrb	r3, [r7, #26]
 8012a30:	f043 0308 	orr.w	r3, r3, #8
 8012a34:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012a36:	7efb      	ldrb	r3, [r7, #27]
 8012a38:	f003 0301 	and.w	r3, r3, #1
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d007      	beq.n	8012a50 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012a40:	7efb      	ldrb	r3, [r7, #27]
 8012a42:	f023 0301 	bic.w	r3, r3, #1
 8012a46:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012a48:	7ebb      	ldrb	r3, [r7, #26]
 8012a4a:	f043 0301 	orr.w	r3, r3, #1
 8012a4e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7f9 f8b5 	bl	800bbc6 <lwip_htonl>
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	887b      	ldrh	r3, [r7, #2]
 8012a60:	18d1      	adds	r1, r2, r3
 8012a62:	7eba      	ldrb	r2, [r7, #26]
 8012a64:	7bfb      	ldrb	r3, [r7, #15]
 8012a66:	9300      	str	r3, [sp, #0]
 8012a68:	460b      	mov	r3, r1
 8012a6a:	6939      	ldr	r1, [r7, #16]
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f7ff fa4f 	bl	8011f10 <tcp_create_segment>
 8012a72:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d063      	beq.n	8012b42 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7fa fd4e 	bl	800d520 <pbuf_clen>
 8012a84:	4603      	mov	r3, r0
 8012a86:	461a      	mov	r2, r3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a8e:	1a9b      	subs	r3, r3, r2
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	6858      	ldr	r0, [r3, #4]
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	891a      	ldrh	r2, [r3, #8]
 8012aa2:	89bb      	ldrh	r3, [r7, #12]
 8012aa4:	1ad3      	subs	r3, r2, r3
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	f7fa fb25 	bl	800d0f8 <pbuf_realloc>
  useg->len -= remainder;
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	891a      	ldrh	r2, [r3, #8]
 8012ab2:	89bb      	ldrh	r3, [r7, #12]
 8012ab4:	1ad3      	subs	r3, r2, r3
 8012ab6:	b29a      	uxth	r2, r3
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	68db      	ldr	r3, [r3, #12]
 8012ac0:	899b      	ldrh	r3, [r3, #12]
 8012ac2:	b29c      	uxth	r4, r3
 8012ac4:	7efb      	ldrb	r3, [r7, #27]
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f7f9 f867 	bl	800bb9c <lwip_htons>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	461a      	mov	r2, r3
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	68db      	ldr	r3, [r3, #12]
 8012ad6:	4322      	orrs	r2, r4
 8012ad8:	b292      	uxth	r2, r2
 8012ada:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f7fa fd1d 	bl	800d520 <pbuf_clen>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	461a      	mov	r2, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012af0:	4413      	add	r3, r2
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fa fd0e 	bl	800d520 <pbuf_clen>
 8012b04:	4603      	mov	r3, r0
 8012b06:	461a      	mov	r2, r3
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b0e:	4413      	add	r3, r2
 8012b10:	b29a      	uxth	r2, r3
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	681a      	ldr	r2, [r3, #0]
 8012b1c:	69fb      	ldr	r3, [r7, #28]
 8012b1e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	69fa      	ldr	r2, [r7, #28]
 8012b24:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012b26:	69fb      	ldr	r3, [r7, #28]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d103      	bne.n	8012b36 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2200      	movs	r2, #0
 8012b32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012b36:	2300      	movs	r3, #0
 8012b38:	e016      	b.n	8012b68 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012b3a:	bf00      	nop
 8012b3c:	e002      	b.n	8012b44 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012b3e:	bf00      	nop
 8012b40:	e000      	b.n	8012b44 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012b42:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d006      	beq.n	8012b58 <tcp_split_unsent_seg+0x25c>
 8012b4a:	4b09      	ldr	r3, [pc, #36]	; (8012b70 <tcp_split_unsent_seg+0x274>)
 8012b4c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012b50:	490d      	ldr	r1, [pc, #52]	; (8012b88 <tcp_split_unsent_seg+0x28c>)
 8012b52:	4809      	ldr	r0, [pc, #36]	; (8012b78 <tcp_split_unsent_seg+0x27c>)
 8012b54:	f006 fb88 	bl	8019268 <iprintf>
  if (p != NULL) {
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d002      	beq.n	8012b64 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012b5e:	6938      	ldr	r0, [r7, #16]
 8012b60:	f7fa fc50 	bl	800d404 <pbuf_free>
  }

  return ERR_MEM;
 8012b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3724      	adds	r7, #36	; 0x24
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd90      	pop	{r4, r7, pc}
 8012b70:	0801cbc8 	.word	0x0801cbc8
 8012b74:	0801cf5c 	.word	0x0801cf5c
 8012b78:	0801cc1c 	.word	0x0801cc1c
 8012b7c:	0801cf80 	.word	0x0801cf80
 8012b80:	0801cfa4 	.word	0x0801cfa4
 8012b84:	0801cfb4 	.word	0x0801cfb4
 8012b88:	0801cfc4 	.word	0x0801cfc4

08012b8c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012b8c:	b590      	push	{r4, r7, lr}
 8012b8e:	b085      	sub	sp, #20
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d106      	bne.n	8012ba8 <tcp_send_fin+0x1c>
 8012b9a:	4b21      	ldr	r3, [pc, #132]	; (8012c20 <tcp_send_fin+0x94>)
 8012b9c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012ba0:	4920      	ldr	r1, [pc, #128]	; (8012c24 <tcp_send_fin+0x98>)
 8012ba2:	4821      	ldr	r0, [pc, #132]	; (8012c28 <tcp_send_fin+0x9c>)
 8012ba4:	f006 fb60 	bl	8019268 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d02e      	beq.n	8012c0e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bb4:	60fb      	str	r3, [r7, #12]
 8012bb6:	e002      	b.n	8012bbe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d1f8      	bne.n	8012bb8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	899b      	ldrh	r3, [r3, #12]
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7f8 ffe4 	bl	800bb9c <lwip_htons>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	f003 0307 	and.w	r3, r3, #7
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d116      	bne.n	8012c0e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	899b      	ldrh	r3, [r3, #12]
 8012be6:	b29c      	uxth	r4, r3
 8012be8:	2001      	movs	r0, #1
 8012bea:	f7f8 ffd7 	bl	800bb9c <lwip_htons>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	68db      	ldr	r3, [r3, #12]
 8012bf6:	4322      	orrs	r2, r4
 8012bf8:	b292      	uxth	r2, r2
 8012bfa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	8b5b      	ldrh	r3, [r3, #26]
 8012c00:	f043 0320 	orr.w	r3, r3, #32
 8012c04:	b29a      	uxth	r2, r3
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	e004      	b.n	8012c18 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012c0e:	2101      	movs	r1, #1
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f000 f80b 	bl	8012c2c <tcp_enqueue_flags>
 8012c16:	4603      	mov	r3, r0
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3714      	adds	r7, #20
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd90      	pop	{r4, r7, pc}
 8012c20:	0801cbc8 	.word	0x0801cbc8
 8012c24:	0801cfd0 	.word	0x0801cfd0
 8012c28:	0801cc1c 	.word	0x0801cc1c

08012c2c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b08a      	sub	sp, #40	; 0x28
 8012c30:	af02      	add	r7, sp, #8
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	460b      	mov	r3, r1
 8012c36:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012c40:	78fb      	ldrb	r3, [r7, #3]
 8012c42:	f003 0303 	and.w	r3, r3, #3
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d106      	bne.n	8012c58 <tcp_enqueue_flags+0x2c>
 8012c4a:	4b67      	ldr	r3, [pc, #412]	; (8012de8 <tcp_enqueue_flags+0x1bc>)
 8012c4c:	f240 4211 	movw	r2, #1041	; 0x411
 8012c50:	4966      	ldr	r1, [pc, #408]	; (8012dec <tcp_enqueue_flags+0x1c0>)
 8012c52:	4867      	ldr	r0, [pc, #412]	; (8012df0 <tcp_enqueue_flags+0x1c4>)
 8012c54:	f006 fb08 	bl	8019268 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d106      	bne.n	8012c6c <tcp_enqueue_flags+0x40>
 8012c5e:	4b62      	ldr	r3, [pc, #392]	; (8012de8 <tcp_enqueue_flags+0x1bc>)
 8012c60:	f240 4213 	movw	r2, #1043	; 0x413
 8012c64:	4963      	ldr	r1, [pc, #396]	; (8012df4 <tcp_enqueue_flags+0x1c8>)
 8012c66:	4862      	ldr	r0, [pc, #392]	; (8012df0 <tcp_enqueue_flags+0x1c4>)
 8012c68:	f006 fafe 	bl	8019268 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012c6c:	78fb      	ldrb	r3, [r7, #3]
 8012c6e:	f003 0302 	and.w	r3, r3, #2
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d001      	beq.n	8012c7a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012c76:	2301      	movs	r3, #1
 8012c78:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c7a:	7ffb      	ldrb	r3, [r7, #31]
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	b2db      	uxtb	r3, r3
 8012c80:	f003 0304 	and.w	r3, r3, #4
 8012c84:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012c86:	7dfb      	ldrb	r3, [r7, #23]
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c8e:	4619      	mov	r1, r3
 8012c90:	2036      	movs	r0, #54	; 0x36
 8012c92:	f7fa f8d3 	bl	800ce3c <pbuf_alloc>
 8012c96:	6138      	str	r0, [r7, #16]
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d109      	bne.n	8012cb2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	8b5b      	ldrh	r3, [r3, #26]
 8012ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ca6:	b29a      	uxth	r2, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012cac:	f04f 33ff 	mov.w	r3, #4294967295
 8012cb0:	e095      	b.n	8012dde <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	895a      	ldrh	r2, [r3, #10]
 8012cb6:	7dfb      	ldrb	r3, [r7, #23]
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d206      	bcs.n	8012ccc <tcp_enqueue_flags+0xa0>
 8012cbe:	4b4a      	ldr	r3, [pc, #296]	; (8012de8 <tcp_enqueue_flags+0x1bc>)
 8012cc0:	f240 4239 	movw	r2, #1081	; 0x439
 8012cc4:	494c      	ldr	r1, [pc, #304]	; (8012df8 <tcp_enqueue_flags+0x1cc>)
 8012cc6:	484a      	ldr	r0, [pc, #296]	; (8012df0 <tcp_enqueue_flags+0x1c4>)
 8012cc8:	f006 face 	bl	8019268 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012cd0:	78fa      	ldrb	r2, [r7, #3]
 8012cd2:	7ffb      	ldrb	r3, [r7, #31]
 8012cd4:	9300      	str	r3, [sp, #0]
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	6939      	ldr	r1, [r7, #16]
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f7ff f918 	bl	8011f10 <tcp_create_segment>
 8012ce0:	60f8      	str	r0, [r7, #12]
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d109      	bne.n	8012cfc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	8b5b      	ldrh	r3, [r3, #26]
 8012cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cf0:	b29a      	uxth	r2, r3
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8012cfa:	e070      	b.n	8012dde <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	f003 0303 	and.w	r3, r3, #3
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d006      	beq.n	8012d16 <tcp_enqueue_flags+0xea>
 8012d08:	4b37      	ldr	r3, [pc, #220]	; (8012de8 <tcp_enqueue_flags+0x1bc>)
 8012d0a:	f240 4242 	movw	r2, #1090	; 0x442
 8012d0e:	493b      	ldr	r1, [pc, #236]	; (8012dfc <tcp_enqueue_flags+0x1d0>)
 8012d10:	4837      	ldr	r0, [pc, #220]	; (8012df0 <tcp_enqueue_flags+0x1c4>)
 8012d12:	f006 faa9 	bl	8019268 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	891b      	ldrh	r3, [r3, #8]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d006      	beq.n	8012d2c <tcp_enqueue_flags+0x100>
 8012d1e:	4b32      	ldr	r3, [pc, #200]	; (8012de8 <tcp_enqueue_flags+0x1bc>)
 8012d20:	f240 4243 	movw	r2, #1091	; 0x443
 8012d24:	4936      	ldr	r1, [pc, #216]	; (8012e00 <tcp_enqueue_flags+0x1d4>)
 8012d26:	4832      	ldr	r0, [pc, #200]	; (8012df0 <tcp_enqueue_flags+0x1c4>)
 8012d28:	f006 fa9e 	bl	8019268 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d103      	bne.n	8012d3c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	68fa      	ldr	r2, [r7, #12]
 8012d38:	66da      	str	r2, [r3, #108]	; 0x6c
 8012d3a:	e00d      	b.n	8012d58 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d40:	61bb      	str	r3, [r7, #24]
 8012d42:	e002      	b.n	8012d4a <tcp_enqueue_flags+0x11e>
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	61bb      	str	r3, [r7, #24]
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d1f8      	bne.n	8012d44 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	68fa      	ldr	r2, [r7, #12]
 8012d56:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012d60:	78fb      	ldrb	r3, [r7, #3]
 8012d62:	f003 0302 	and.w	r3, r3, #2
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d104      	bne.n	8012d74 <tcp_enqueue_flags+0x148>
 8012d6a:	78fb      	ldrb	r3, [r7, #3]
 8012d6c:	f003 0301 	and.w	r3, r3, #1
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d004      	beq.n	8012d7e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012d78:	1c5a      	adds	r2, r3, #1
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012d7e:	78fb      	ldrb	r3, [r7, #3]
 8012d80:	f003 0301 	and.w	r3, r3, #1
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d006      	beq.n	8012d96 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	8b5b      	ldrh	r3, [r3, #26]
 8012d8c:	f043 0320 	orr.w	r3, r3, #32
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7fa fbc0 	bl	800d520 <pbuf_clen>
 8012da0:	4603      	mov	r3, r0
 8012da2:	461a      	mov	r2, r3
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012daa:	4413      	add	r3, r2
 8012dac:	b29a      	uxth	r2, r3
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d00e      	beq.n	8012ddc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d10a      	bne.n	8012ddc <tcp_enqueue_flags+0x1b0>
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d106      	bne.n	8012ddc <tcp_enqueue_flags+0x1b0>
 8012dce:	4b06      	ldr	r3, [pc, #24]	; (8012de8 <tcp_enqueue_flags+0x1bc>)
 8012dd0:	f240 4265 	movw	r2, #1125	; 0x465
 8012dd4:	490b      	ldr	r1, [pc, #44]	; (8012e04 <tcp_enqueue_flags+0x1d8>)
 8012dd6:	4806      	ldr	r0, [pc, #24]	; (8012df0 <tcp_enqueue_flags+0x1c4>)
 8012dd8:	f006 fa46 	bl	8019268 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012ddc:	2300      	movs	r3, #0
}
 8012dde:	4618      	mov	r0, r3
 8012de0:	3720      	adds	r7, #32
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	0801cbc8 	.word	0x0801cbc8
 8012dec:	0801cfec 	.word	0x0801cfec
 8012df0:	0801cc1c 	.word	0x0801cc1c
 8012df4:	0801d044 	.word	0x0801d044
 8012df8:	0801d064 	.word	0x0801d064
 8012dfc:	0801d0a0 	.word	0x0801d0a0
 8012e00:	0801d0b8 	.word	0x0801d0b8
 8012e04:	0801d0e4 	.word	0x0801d0e4

08012e08 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012e08:	b5b0      	push	{r4, r5, r7, lr}
 8012e0a:	b08a      	sub	sp, #40	; 0x28
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d106      	bne.n	8012e24 <tcp_output+0x1c>
 8012e16:	4b8a      	ldr	r3, [pc, #552]	; (8013040 <tcp_output+0x238>)
 8012e18:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012e1c:	4989      	ldr	r1, [pc, #548]	; (8013044 <tcp_output+0x23c>)
 8012e1e:	488a      	ldr	r0, [pc, #552]	; (8013048 <tcp_output+0x240>)
 8012e20:	f006 fa22 	bl	8019268 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	7d1b      	ldrb	r3, [r3, #20]
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d106      	bne.n	8012e3a <tcp_output+0x32>
 8012e2c:	4b84      	ldr	r3, [pc, #528]	; (8013040 <tcp_output+0x238>)
 8012e2e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012e32:	4986      	ldr	r1, [pc, #536]	; (801304c <tcp_output+0x244>)
 8012e34:	4884      	ldr	r0, [pc, #528]	; (8013048 <tcp_output+0x240>)
 8012e36:	f006 fa17 	bl	8019268 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012e3a:	4b85      	ldr	r3, [pc, #532]	; (8013050 <tcp_output+0x248>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d101      	bne.n	8012e48 <tcp_output+0x40>
    return ERR_OK;
 8012e44:	2300      	movs	r3, #0
 8012e46:	e1ce      	b.n	80131e6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012e54:	4293      	cmp	r3, r2
 8012e56:	bf28      	it	cs
 8012e58:	4613      	movcs	r3, r2
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e62:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d10b      	bne.n	8012e82 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	8b5b      	ldrh	r3, [r3, #26]
 8012e6e:	f003 0302 	and.w	r3, r3, #2
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	f000 81aa 	beq.w	80131cc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f000 fdcb 	bl	8013a14 <tcp_send_empty_ack>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	e1b1      	b.n	80131e6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012e82:	6879      	ldr	r1, [r7, #4]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	3304      	adds	r3, #4
 8012e88:	461a      	mov	r2, r3
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f7ff f824 	bl	8011ed8 <tcp_route>
 8012e90:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d102      	bne.n	8012e9e <tcp_output+0x96>
    return ERR_RTE;
 8012e98:	f06f 0303 	mvn.w	r3, #3
 8012e9c:	e1a3      	b.n	80131e6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d003      	beq.n	8012eac <tcp_output+0xa4>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d111      	bne.n	8012ed0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d002      	beq.n	8012eb8 <tcp_output+0xb0>
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	3304      	adds	r3, #4
 8012eb6:	e000      	b.n	8012eba <tcp_output+0xb2>
 8012eb8:	2300      	movs	r3, #0
 8012eba:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012ebc:	693b      	ldr	r3, [r7, #16]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d102      	bne.n	8012ec8 <tcp_output+0xc0>
      return ERR_RTE;
 8012ec2:	f06f 0303 	mvn.w	r3, #3
 8012ec6:	e18e      	b.n	80131e6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed2:	68db      	ldr	r3, [r3, #12]
 8012ed4:	685b      	ldr	r3, [r3, #4]
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7f8 fe75 	bl	800bbc6 <lwip_htonl>
 8012edc:	4602      	mov	r2, r0
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ee2:	1ad3      	subs	r3, r2, r3
 8012ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ee6:	8912      	ldrh	r2, [r2, #8]
 8012ee8:	4413      	add	r3, r2
 8012eea:	69ba      	ldr	r2, [r7, #24]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d227      	bcs.n	8012f40 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ef6:	461a      	mov	r2, r3
 8012ef8:	69bb      	ldr	r3, [r7, #24]
 8012efa:	4293      	cmp	r3, r2
 8012efc:	d114      	bne.n	8012f28 <tcp_output+0x120>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d110      	bne.n	8012f28 <tcp_output+0x120>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d10b      	bne.n	8012f28 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2200      	movs	r2, #0
 8012f14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2200      	movs	r2, #0
 8012f24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	8b5b      	ldrh	r3, [r3, #26]
 8012f2c:	f003 0302 	and.w	r3, r3, #2
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	f000 814d 	beq.w	80131d0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f000 fd6c 	bl	8013a14 <tcp_send_empty_ack>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	e152      	b.n	80131e6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2200      	movs	r2, #0
 8012f44:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f4c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012f4e:	6a3b      	ldr	r3, [r7, #32]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	f000 811c 	beq.w	801318e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012f56:	e002      	b.n	8012f5e <tcp_output+0x156>
 8012f58:	6a3b      	ldr	r3, [r7, #32]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	623b      	str	r3, [r7, #32]
 8012f5e:	6a3b      	ldr	r3, [r7, #32]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d1f8      	bne.n	8012f58 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012f66:	e112      	b.n	801318e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6a:	68db      	ldr	r3, [r3, #12]
 8012f6c:	899b      	ldrh	r3, [r3, #12]
 8012f6e:	b29b      	uxth	r3, r3
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7f8 fe13 	bl	800bb9c <lwip_htons>
 8012f76:	4603      	mov	r3, r0
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	f003 0304 	and.w	r3, r3, #4
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d006      	beq.n	8012f90 <tcp_output+0x188>
 8012f82:	4b2f      	ldr	r3, [pc, #188]	; (8013040 <tcp_output+0x238>)
 8012f84:	f240 5236 	movw	r2, #1334	; 0x536
 8012f88:	4932      	ldr	r1, [pc, #200]	; (8013054 <tcp_output+0x24c>)
 8012f8a:	482f      	ldr	r0, [pc, #188]	; (8013048 <tcp_output+0x240>)
 8012f8c:	f006 f96c 	bl	8019268 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d01f      	beq.n	8012fd8 <tcp_output+0x1d0>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	8b5b      	ldrh	r3, [r3, #26]
 8012f9c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d119      	bne.n	8012fd8 <tcp_output+0x1d0>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00b      	beq.n	8012fc4 <tcp_output+0x1bc>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d110      	bne.n	8012fd8 <tcp_output+0x1d0>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fba:	891a      	ldrh	r2, [r3, #8]
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d209      	bcs.n	8012fd8 <tcp_output+0x1d0>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d004      	beq.n	8012fd8 <tcp_output+0x1d0>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012fd4:	2b08      	cmp	r3, #8
 8012fd6:	d901      	bls.n	8012fdc <tcp_output+0x1d4>
 8012fd8:	2301      	movs	r3, #1
 8012fda:	e000      	b.n	8012fde <tcp_output+0x1d6>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d106      	bne.n	8012ff0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	8b5b      	ldrh	r3, [r3, #26]
 8012fe6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	f000 80e4 	beq.w	80131b8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	7d1b      	ldrb	r3, [r3, #20]
 8012ff4:	2b02      	cmp	r3, #2
 8012ff6:	d00d      	beq.n	8013014 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffa:	68db      	ldr	r3, [r3, #12]
 8012ffc:	899b      	ldrh	r3, [r3, #12]
 8012ffe:	b29c      	uxth	r4, r3
 8013000:	2010      	movs	r0, #16
 8013002:	f7f8 fdcb 	bl	800bb9c <lwip_htons>
 8013006:	4603      	mov	r3, r0
 8013008:	461a      	mov	r2, r3
 801300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	4322      	orrs	r2, r4
 8013010:	b292      	uxth	r2, r2
 8013012:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013014:	697a      	ldr	r2, [r7, #20]
 8013016:	6879      	ldr	r1, [r7, #4]
 8013018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801301a:	f000 f909 	bl	8013230 <tcp_output_segment>
 801301e:	4603      	mov	r3, r0
 8013020:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d016      	beq.n	8013058 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	8b5b      	ldrh	r3, [r3, #26]
 801302e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013032:	b29a      	uxth	r2, r3
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	835a      	strh	r2, [r3, #26]
      return err;
 8013038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801303c:	e0d3      	b.n	80131e6 <tcp_output+0x3de>
 801303e:	bf00      	nop
 8013040:	0801cbc8 	.word	0x0801cbc8
 8013044:	0801d10c 	.word	0x0801d10c
 8013048:	0801cc1c 	.word	0x0801cc1c
 801304c:	0801d124 	.word	0x0801d124
 8013050:	20010f10 	.word	0x20010f10
 8013054:	0801d14c 	.word	0x0801d14c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305a:	681a      	ldr	r2, [r3, #0]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	7d1b      	ldrb	r3, [r3, #20]
 8013064:	2b02      	cmp	r3, #2
 8013066:	d006      	beq.n	8013076 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	8b5b      	ldrh	r3, [r3, #26]
 801306c:	f023 0303 	bic.w	r3, r3, #3
 8013070:	b29a      	uxth	r2, r3
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	4618      	mov	r0, r3
 801307e:	f7f8 fda2 	bl	800bbc6 <lwip_htonl>
 8013082:	4604      	mov	r4, r0
 8013084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013086:	891b      	ldrh	r3, [r3, #8]
 8013088:	461d      	mov	r5, r3
 801308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	899b      	ldrh	r3, [r3, #12]
 8013090:	b29b      	uxth	r3, r3
 8013092:	4618      	mov	r0, r3
 8013094:	f7f8 fd82 	bl	800bb9c <lwip_htons>
 8013098:	4603      	mov	r3, r0
 801309a:	b2db      	uxtb	r3, r3
 801309c:	f003 0303 	and.w	r3, r3, #3
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d001      	beq.n	80130a8 <tcp_output+0x2a0>
 80130a4:	2301      	movs	r3, #1
 80130a6:	e000      	b.n	80130aa <tcp_output+0x2a2>
 80130a8:	2300      	movs	r3, #0
 80130aa:	442b      	add	r3, r5
 80130ac:	4423      	add	r3, r4
 80130ae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	1ad3      	subs	r3, r2, r3
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	da02      	bge.n	80130c2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	68ba      	ldr	r2, [r7, #8]
 80130c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80130c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c4:	891b      	ldrh	r3, [r3, #8]
 80130c6:	461c      	mov	r4, r3
 80130c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	899b      	ldrh	r3, [r3, #12]
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7f8 fd63 	bl	800bb9c <lwip_htons>
 80130d6:	4603      	mov	r3, r0
 80130d8:	b2db      	uxtb	r3, r3
 80130da:	f003 0303 	and.w	r3, r3, #3
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d001      	beq.n	80130e6 <tcp_output+0x2de>
 80130e2:	2301      	movs	r3, #1
 80130e4:	e000      	b.n	80130e8 <tcp_output+0x2e0>
 80130e6:	2300      	movs	r3, #0
 80130e8:	4423      	add	r3, r4
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d049      	beq.n	8013182 <tcp_output+0x37a>
      seg->next = NULL;
 80130ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f0:	2200      	movs	r2, #0
 80130f2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d105      	bne.n	8013108 <tcp_output+0x300>
        pcb->unacked = seg;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013100:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013104:	623b      	str	r3, [r7, #32]
 8013106:	e03f      	b.n	8013188 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	4618      	mov	r0, r3
 8013110:	f7f8 fd59 	bl	800bbc6 <lwip_htonl>
 8013114:	4604      	mov	r4, r0
 8013116:	6a3b      	ldr	r3, [r7, #32]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	4618      	mov	r0, r3
 801311e:	f7f8 fd52 	bl	800bbc6 <lwip_htonl>
 8013122:	4603      	mov	r3, r0
 8013124:	1ae3      	subs	r3, r4, r3
 8013126:	2b00      	cmp	r3, #0
 8013128:	da24      	bge.n	8013174 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	3370      	adds	r3, #112	; 0x70
 801312e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013130:	e002      	b.n	8013138 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013132:	69fb      	ldr	r3, [r7, #28]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d011      	beq.n	8013164 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	68db      	ldr	r3, [r3, #12]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	f7f8 fd3c 	bl	800bbc6 <lwip_htonl>
 801314e:	4604      	mov	r4, r0
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	68db      	ldr	r3, [r3, #12]
 8013154:	685b      	ldr	r3, [r3, #4]
 8013156:	4618      	mov	r0, r3
 8013158:	f7f8 fd35 	bl	800bbc6 <lwip_htonl>
 801315c:	4603      	mov	r3, r0
 801315e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013160:	2b00      	cmp	r3, #0
 8013162:	dbe6      	blt.n	8013132 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	681a      	ldr	r2, [r3, #0]
 8013168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801316c:	69fb      	ldr	r3, [r7, #28]
 801316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013170:	601a      	str	r2, [r3, #0]
 8013172:	e009      	b.n	8013188 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013174:	6a3b      	ldr	r3, [r7, #32]
 8013176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013178:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801317a:	6a3b      	ldr	r3, [r7, #32]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	623b      	str	r3, [r7, #32]
 8013180:	e002      	b.n	8013188 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013184:	f7fb fefb 	bl	800ef7e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801318c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013190:	2b00      	cmp	r3, #0
 8013192:	d012      	beq.n	80131ba <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	4618      	mov	r0, r3
 801319c:	f7f8 fd13 	bl	800bbc6 <lwip_htonl>
 80131a0:	4602      	mov	r2, r0
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131a6:	1ad3      	subs	r3, r2, r3
 80131a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131aa:	8912      	ldrh	r2, [r2, #8]
 80131ac:	4413      	add	r3, r2
  while (seg != NULL &&
 80131ae:	69ba      	ldr	r2, [r7, #24]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	f4bf aed9 	bcs.w	8012f68 <tcp_output+0x160>
 80131b6:	e000      	b.n	80131ba <tcp_output+0x3b2>
      break;
 80131b8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d108      	bne.n	80131d4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2200      	movs	r2, #0
 80131c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80131ca:	e004      	b.n	80131d6 <tcp_output+0x3ce>
    goto output_done;
 80131cc:	bf00      	nop
 80131ce:	e002      	b.n	80131d6 <tcp_output+0x3ce>
    goto output_done;
 80131d0:	bf00      	nop
 80131d2:	e000      	b.n	80131d6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80131d4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	8b5b      	ldrh	r3, [r3, #26]
 80131da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80131de:	b29a      	uxth	r2, r3
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80131e4:	2300      	movs	r3, #0
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3728      	adds	r7, #40	; 0x28
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bdb0      	pop	{r4, r5, r7, pc}
 80131ee:	bf00      	nop

080131f0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d106      	bne.n	801320c <tcp_output_segment_busy+0x1c>
 80131fe:	4b09      	ldr	r3, [pc, #36]	; (8013224 <tcp_output_segment_busy+0x34>)
 8013200:	f240 529a 	movw	r2, #1434	; 0x59a
 8013204:	4908      	ldr	r1, [pc, #32]	; (8013228 <tcp_output_segment_busy+0x38>)
 8013206:	4809      	ldr	r0, [pc, #36]	; (801322c <tcp_output_segment_busy+0x3c>)
 8013208:	f006 f82e 	bl	8019268 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	7b9b      	ldrb	r3, [r3, #14]
 8013212:	2b01      	cmp	r3, #1
 8013214:	d001      	beq.n	801321a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013216:	2301      	movs	r3, #1
 8013218:	e000      	b.n	801321c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801321a:	2300      	movs	r3, #0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	0801cbc8 	.word	0x0801cbc8
 8013228:	0801d164 	.word	0x0801d164
 801322c:	0801cc1c 	.word	0x0801cc1c

08013230 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013230:	b5b0      	push	{r4, r5, r7, lr}
 8013232:	b08c      	sub	sp, #48	; 0x30
 8013234:	af04      	add	r7, sp, #16
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d106      	bne.n	8013250 <tcp_output_segment+0x20>
 8013242:	4b64      	ldr	r3, [pc, #400]	; (80133d4 <tcp_output_segment+0x1a4>)
 8013244:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013248:	4963      	ldr	r1, [pc, #396]	; (80133d8 <tcp_output_segment+0x1a8>)
 801324a:	4864      	ldr	r0, [pc, #400]	; (80133dc <tcp_output_segment+0x1ac>)
 801324c:	f006 f80c 	bl	8019268 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d106      	bne.n	8013264 <tcp_output_segment+0x34>
 8013256:	4b5f      	ldr	r3, [pc, #380]	; (80133d4 <tcp_output_segment+0x1a4>)
 8013258:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801325c:	4960      	ldr	r1, [pc, #384]	; (80133e0 <tcp_output_segment+0x1b0>)
 801325e:	485f      	ldr	r0, [pc, #380]	; (80133dc <tcp_output_segment+0x1ac>)
 8013260:	f006 f802 	bl	8019268 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d106      	bne.n	8013278 <tcp_output_segment+0x48>
 801326a:	4b5a      	ldr	r3, [pc, #360]	; (80133d4 <tcp_output_segment+0x1a4>)
 801326c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013270:	495c      	ldr	r1, [pc, #368]	; (80133e4 <tcp_output_segment+0x1b4>)
 8013272:	485a      	ldr	r0, [pc, #360]	; (80133dc <tcp_output_segment+0x1ac>)
 8013274:	f005 fff8 	bl	8019268 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013278:	68f8      	ldr	r0, [r7, #12]
 801327a:	f7ff ffb9 	bl	80131f0 <tcp_output_segment_busy>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	d001      	beq.n	8013288 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013284:	2300      	movs	r3, #0
 8013286:	e0a1      	b.n	80133cc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	68dc      	ldr	r4, [r3, #12]
 8013290:	4610      	mov	r0, r2
 8013292:	f7f8 fc98 	bl	800bbc6 <lwip_htonl>
 8013296:	4603      	mov	r3, r0
 8013298:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	68dc      	ldr	r4, [r3, #12]
 80132a2:	4610      	mov	r0, r2
 80132a4:	f7f8 fc7a 	bl	800bb9c <lwip_htons>
 80132a8:	4603      	mov	r3, r0
 80132aa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b0:	68ba      	ldr	r2, [r7, #8]
 80132b2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80132b4:	441a      	add	r2, r3
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	68db      	ldr	r3, [r3, #12]
 80132be:	3314      	adds	r3, #20
 80132c0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	7a9b      	ldrb	r3, [r3, #10]
 80132c6:	f003 0301 	and.w	r3, r3, #1
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d015      	beq.n	80132fa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	3304      	adds	r3, #4
 80132d2:	461a      	mov	r2, r3
 80132d4:	6879      	ldr	r1, [r7, #4]
 80132d6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80132da:	f7fc fa33 	bl	800f744 <tcp_eff_send_mss_netif>
 80132de:	4603      	mov	r3, r0
 80132e0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80132e2:	8b7b      	ldrh	r3, [r7, #26]
 80132e4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7f8 fc6c 	bl	800bbc6 <lwip_htonl>
 80132ee:	4602      	mov	r2, r0
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80132f4:	69fb      	ldr	r3, [r7, #28]
 80132f6:	3304      	adds	r3, #4
 80132f8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013300:	2b00      	cmp	r3, #0
 8013302:	da02      	bge.n	801330a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	2200      	movs	r2, #0
 8013308:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801330e:	2b00      	cmp	r3, #0
 8013310:	d10c      	bne.n	801332c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013312:	4b35      	ldr	r3, [pc, #212]	; (80133e8 <tcp_output_segment+0x1b8>)
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	68db      	ldr	r3, [r3, #12]
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	4618      	mov	r0, r3
 8013322:	f7f8 fc50 	bl	800bbc6 <lwip_htonl>
 8013326:	4602      	mov	r2, r0
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	68da      	ldr	r2, [r3, #12]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	685b      	ldr	r3, [r3, #4]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	8959      	ldrh	r1, [r3, #10]
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	8b3a      	ldrh	r2, [r7, #24]
 8013346:	1a8a      	subs	r2, r1, r2
 8013348:	b292      	uxth	r2, r2
 801334a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	8919      	ldrh	r1, [r3, #8]
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	8b3a      	ldrh	r2, [r7, #24]
 8013358:	1a8a      	subs	r2, r1, r2
 801335a:	b292      	uxth	r2, r2
 801335c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	68fa      	ldr	r2, [r7, #12]
 8013364:	68d2      	ldr	r2, [r2, #12]
 8013366:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	2200      	movs	r2, #0
 801336e:	741a      	strb	r2, [r3, #16]
 8013370:	2200      	movs	r2, #0
 8013372:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	68da      	ldr	r2, [r3, #12]
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	7a9b      	ldrb	r3, [r3, #10]
 801337c:	f003 0301 	and.w	r3, r3, #1
 8013380:	2b00      	cmp	r3, #0
 8013382:	d001      	beq.n	8013388 <tcp_output_segment+0x158>
 8013384:	2318      	movs	r3, #24
 8013386:	e000      	b.n	801338a <tcp_output_segment+0x15a>
 8013388:	2314      	movs	r3, #20
 801338a:	4413      	add	r3, r2
 801338c:	69fa      	ldr	r2, [r7, #28]
 801338e:	429a      	cmp	r2, r3
 8013390:	d006      	beq.n	80133a0 <tcp_output_segment+0x170>
 8013392:	4b10      	ldr	r3, [pc, #64]	; (80133d4 <tcp_output_segment+0x1a4>)
 8013394:	f240 621c 	movw	r2, #1564	; 0x61c
 8013398:	4914      	ldr	r1, [pc, #80]	; (80133ec <tcp_output_segment+0x1bc>)
 801339a:	4810      	ldr	r0, [pc, #64]	; (80133dc <tcp_output_segment+0x1ac>)
 801339c:	f005 ff64 	bl	8019268 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	6858      	ldr	r0, [r3, #4]
 80133a4:	68b9      	ldr	r1, [r7, #8]
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	1d1c      	adds	r4, r3, #4
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	7add      	ldrb	r5, [r3, #11]
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	7a9b      	ldrb	r3, [r3, #10]
 80133b2:	687a      	ldr	r2, [r7, #4]
 80133b4:	9202      	str	r2, [sp, #8]
 80133b6:	2206      	movs	r2, #6
 80133b8:	9201      	str	r2, [sp, #4]
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	462b      	mov	r3, r5
 80133be:	4622      	mov	r2, r4
 80133c0:	f004 fc26 	bl	8017c10 <ip4_output_if>
 80133c4:	4603      	mov	r3, r0
 80133c6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80133c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3720      	adds	r7, #32
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bdb0      	pop	{r4, r5, r7, pc}
 80133d4:	0801cbc8 	.word	0x0801cbc8
 80133d8:	0801d18c 	.word	0x0801d18c
 80133dc:	0801cc1c 	.word	0x0801cc1c
 80133e0:	0801d1ac 	.word	0x0801d1ac
 80133e4:	0801d1cc 	.word	0x0801d1cc
 80133e8:	20010ec4 	.word	0x20010ec4
 80133ec:	0801d1f0 	.word	0x0801d1f0

080133f0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80133f0:	b5b0      	push	{r4, r5, r7, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d106      	bne.n	801340c <tcp_rexmit_rto_prepare+0x1c>
 80133fe:	4b31      	ldr	r3, [pc, #196]	; (80134c4 <tcp_rexmit_rto_prepare+0xd4>)
 8013400:	f240 6263 	movw	r2, #1635	; 0x663
 8013404:	4930      	ldr	r1, [pc, #192]	; (80134c8 <tcp_rexmit_rto_prepare+0xd8>)
 8013406:	4831      	ldr	r0, [pc, #196]	; (80134cc <tcp_rexmit_rto_prepare+0xdc>)
 8013408:	f005 ff2e 	bl	8019268 <iprintf>

  if (pcb->unacked == NULL) {
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013410:	2b00      	cmp	r3, #0
 8013412:	d102      	bne.n	801341a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013414:	f06f 0305 	mvn.w	r3, #5
 8013418:	e050      	b.n	80134bc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801341e:	60fb      	str	r3, [r7, #12]
 8013420:	e00b      	b.n	801343a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013422:	68f8      	ldr	r0, [r7, #12]
 8013424:	f7ff fee4 	bl	80131f0 <tcp_output_segment_busy>
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d002      	beq.n	8013434 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801342e:	f06f 0305 	mvn.w	r3, #5
 8013432:	e043      	b.n	80134bc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	60fb      	str	r3, [r7, #12]
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d1ef      	bne.n	8013422 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013442:	68f8      	ldr	r0, [r7, #12]
 8013444:	f7ff fed4 	bl	80131f0 <tcp_output_segment_busy>
 8013448:	4603      	mov	r3, r0
 801344a:	2b00      	cmp	r3, #0
 801344c:	d002      	beq.n	8013454 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801344e:	f06f 0305 	mvn.w	r3, #5
 8013452:	e033      	b.n	80134bc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2200      	movs	r2, #0
 8013468:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	8b5b      	ldrh	r3, [r3, #26]
 801346e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013472:	b29a      	uxth	r2, r3
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	4618      	mov	r0, r3
 8013480:	f7f8 fba1 	bl	800bbc6 <lwip_htonl>
 8013484:	4604      	mov	r4, r0
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	891b      	ldrh	r3, [r3, #8]
 801348a:	461d      	mov	r5, r3
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	899b      	ldrh	r3, [r3, #12]
 8013492:	b29b      	uxth	r3, r3
 8013494:	4618      	mov	r0, r3
 8013496:	f7f8 fb81 	bl	800bb9c <lwip_htons>
 801349a:	4603      	mov	r3, r0
 801349c:	b2db      	uxtb	r3, r3
 801349e:	f003 0303 	and.w	r3, r3, #3
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d001      	beq.n	80134aa <tcp_rexmit_rto_prepare+0xba>
 80134a6:	2301      	movs	r3, #1
 80134a8:	e000      	b.n	80134ac <tcp_rexmit_rto_prepare+0xbc>
 80134aa:	2300      	movs	r3, #0
 80134ac:	442b      	add	r3, r5
 80134ae:	18e2      	adds	r2, r4, r3
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2200      	movs	r2, #0
 80134b8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80134ba:	2300      	movs	r3, #0
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3710      	adds	r7, #16
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bdb0      	pop	{r4, r5, r7, pc}
 80134c4:	0801cbc8 	.word	0x0801cbc8
 80134c8:	0801d204 	.word	0x0801d204
 80134cc:	0801cc1c 	.word	0x0801cc1c

080134d0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d106      	bne.n	80134ec <tcp_rexmit_rto_commit+0x1c>
 80134de:	4b0d      	ldr	r3, [pc, #52]	; (8013514 <tcp_rexmit_rto_commit+0x44>)
 80134e0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80134e4:	490c      	ldr	r1, [pc, #48]	; (8013518 <tcp_rexmit_rto_commit+0x48>)
 80134e6:	480d      	ldr	r0, [pc, #52]	; (801351c <tcp_rexmit_rto_commit+0x4c>)
 80134e8:	f005 febe 	bl	8019268 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80134f2:	2bff      	cmp	r3, #255	; 0xff
 80134f4:	d007      	beq.n	8013506 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80134fc:	3301      	adds	r3, #1
 80134fe:	b2da      	uxtb	r2, r3
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f7ff fc7e 	bl	8012e08 <tcp_output>
}
 801350c:	bf00      	nop
 801350e:	3708      	adds	r7, #8
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	0801cbc8 	.word	0x0801cbc8
 8013518:	0801d228 	.word	0x0801d228
 801351c:	0801cc1c 	.word	0x0801cc1c

08013520 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d106      	bne.n	801353c <tcp_rexmit_rto+0x1c>
 801352e:	4b0a      	ldr	r3, [pc, #40]	; (8013558 <tcp_rexmit_rto+0x38>)
 8013530:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013534:	4909      	ldr	r1, [pc, #36]	; (801355c <tcp_rexmit_rto+0x3c>)
 8013536:	480a      	ldr	r0, [pc, #40]	; (8013560 <tcp_rexmit_rto+0x40>)
 8013538:	f005 fe96 	bl	8019268 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f7ff ff57 	bl	80133f0 <tcp_rexmit_rto_prepare>
 8013542:	4603      	mov	r3, r0
 8013544:	2b00      	cmp	r3, #0
 8013546:	d102      	bne.n	801354e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f7ff ffc1 	bl	80134d0 <tcp_rexmit_rto_commit>
  }
}
 801354e:	bf00      	nop
 8013550:	3708      	adds	r7, #8
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop
 8013558:	0801cbc8 	.word	0x0801cbc8
 801355c:	0801d24c 	.word	0x0801d24c
 8013560:	0801cc1c 	.word	0x0801cc1c

08013564 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013564:	b590      	push	{r4, r7, lr}
 8013566:	b085      	sub	sp, #20
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d106      	bne.n	8013580 <tcp_rexmit+0x1c>
 8013572:	4b2f      	ldr	r3, [pc, #188]	; (8013630 <tcp_rexmit+0xcc>)
 8013574:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013578:	492e      	ldr	r1, [pc, #184]	; (8013634 <tcp_rexmit+0xd0>)
 801357a:	482f      	ldr	r0, [pc, #188]	; (8013638 <tcp_rexmit+0xd4>)
 801357c:	f005 fe74 	bl	8019268 <iprintf>

  if (pcb->unacked == NULL) {
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013584:	2b00      	cmp	r3, #0
 8013586:	d102      	bne.n	801358e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013588:	f06f 0305 	mvn.w	r3, #5
 801358c:	e04c      	b.n	8013628 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013592:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013594:	68b8      	ldr	r0, [r7, #8]
 8013596:	f7ff fe2b 	bl	80131f0 <tcp_output_segment_busy>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d002      	beq.n	80135a6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80135a0:	f06f 0305 	mvn.w	r3, #5
 80135a4:	e040      	b.n	8013628 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	336c      	adds	r3, #108	; 0x6c
 80135b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80135b4:	e002      	b.n	80135bc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d011      	beq.n	80135e8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	68db      	ldr	r3, [r3, #12]
 80135ca:	685b      	ldr	r3, [r3, #4]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7f8 fafa 	bl	800bbc6 <lwip_htonl>
 80135d2:	4604      	mov	r4, r0
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	4618      	mov	r0, r3
 80135dc:	f7f8 faf3 	bl	800bbc6 <lwip_htonl>
 80135e0:	4603      	mov	r3, r0
 80135e2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	dbe6      	blt.n	80135b6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	681a      	ldr	r2, [r3, #0]
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	68ba      	ldr	r2, [r7, #8]
 80135f4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d103      	bne.n	8013606 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2200      	movs	r2, #0
 8013602:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801360c:	2bff      	cmp	r3, #255	; 0xff
 801360e:	d007      	beq.n	8013620 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013616:	3301      	adds	r3, #1
 8013618:	b2da      	uxtb	r2, r3
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2200      	movs	r2, #0
 8013624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013626:	2300      	movs	r3, #0
}
 8013628:	4618      	mov	r0, r3
 801362a:	3714      	adds	r7, #20
 801362c:	46bd      	mov	sp, r7
 801362e:	bd90      	pop	{r4, r7, pc}
 8013630:	0801cbc8 	.word	0x0801cbc8
 8013634:	0801d268 	.word	0x0801d268
 8013638:	0801cc1c 	.word	0x0801cc1c

0801363c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d106      	bne.n	8013658 <tcp_rexmit_fast+0x1c>
 801364a:	4b2a      	ldr	r3, [pc, #168]	; (80136f4 <tcp_rexmit_fast+0xb8>)
 801364c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013650:	4929      	ldr	r1, [pc, #164]	; (80136f8 <tcp_rexmit_fast+0xbc>)
 8013652:	482a      	ldr	r0, [pc, #168]	; (80136fc <tcp_rexmit_fast+0xc0>)
 8013654:	f005 fe08 	bl	8019268 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801365c:	2b00      	cmp	r3, #0
 801365e:	d044      	beq.n	80136ea <tcp_rexmit_fast+0xae>
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	8b5b      	ldrh	r3, [r3, #26]
 8013664:	f003 0304 	and.w	r3, r3, #4
 8013668:	2b00      	cmp	r3, #0
 801366a:	d13e      	bne.n	80136ea <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f7ff ff79 	bl	8013564 <tcp_rexmit>
 8013672:	4603      	mov	r3, r0
 8013674:	2b00      	cmp	r3, #0
 8013676:	d138      	bne.n	80136ea <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013684:	4293      	cmp	r3, r2
 8013686:	bf28      	it	cs
 8013688:	4613      	movcs	r3, r2
 801368a:	b29b      	uxth	r3, r3
 801368c:	0fda      	lsrs	r2, r3, #31
 801368e:	4413      	add	r3, r2
 8013690:	105b      	asrs	r3, r3, #1
 8013692:	b29a      	uxth	r2, r3
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80136a0:	461a      	mov	r2, r3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136a6:	005b      	lsls	r3, r3, #1
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d206      	bcs.n	80136ba <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136b0:	005b      	lsls	r3, r3, #1
 80136b2:	b29a      	uxth	r2, r3
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136c4:	4619      	mov	r1, r3
 80136c6:	0049      	lsls	r1, r1, #1
 80136c8:	440b      	add	r3, r1
 80136ca:	b29b      	uxth	r3, r3
 80136cc:	4413      	add	r3, r2
 80136ce:	b29a      	uxth	r2, r3
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	8b5b      	ldrh	r3, [r3, #26]
 80136da:	f043 0304 	orr.w	r3, r3, #4
 80136de:	b29a      	uxth	r2, r3
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2200      	movs	r2, #0
 80136e8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80136ea:	bf00      	nop
 80136ec:	3708      	adds	r7, #8
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	0801cbc8 	.word	0x0801cbc8
 80136f8:	0801d280 	.word	0x0801d280
 80136fc:	0801cc1c 	.word	0x0801cc1c

08013700 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b086      	sub	sp, #24
 8013704:	af00      	add	r7, sp, #0
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	607b      	str	r3, [r7, #4]
 801370a:	460b      	mov	r3, r1
 801370c:	817b      	strh	r3, [r7, #10]
 801370e:	4613      	mov	r3, r2
 8013710:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013712:	897a      	ldrh	r2, [r7, #10]
 8013714:	893b      	ldrh	r3, [r7, #8]
 8013716:	4413      	add	r3, r2
 8013718:	b29b      	uxth	r3, r3
 801371a:	3314      	adds	r3, #20
 801371c:	b29b      	uxth	r3, r3
 801371e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013722:	4619      	mov	r1, r3
 8013724:	2022      	movs	r0, #34	; 0x22
 8013726:	f7f9 fb89 	bl	800ce3c <pbuf_alloc>
 801372a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d04d      	beq.n	80137ce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013732:	897b      	ldrh	r3, [r7, #10]
 8013734:	3313      	adds	r3, #19
 8013736:	697a      	ldr	r2, [r7, #20]
 8013738:	8952      	ldrh	r2, [r2, #10]
 801373a:	4293      	cmp	r3, r2
 801373c:	db06      	blt.n	801374c <tcp_output_alloc_header_common+0x4c>
 801373e:	4b26      	ldr	r3, [pc, #152]	; (80137d8 <tcp_output_alloc_header_common+0xd8>)
 8013740:	f240 7223 	movw	r2, #1827	; 0x723
 8013744:	4925      	ldr	r1, [pc, #148]	; (80137dc <tcp_output_alloc_header_common+0xdc>)
 8013746:	4826      	ldr	r0, [pc, #152]	; (80137e0 <tcp_output_alloc_header_common+0xe0>)
 8013748:	f005 fd8e 	bl	8019268 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013752:	8c3b      	ldrh	r3, [r7, #32]
 8013754:	4618      	mov	r0, r3
 8013756:	f7f8 fa21 	bl	800bb9c <lwip_htons>
 801375a:	4603      	mov	r3, r0
 801375c:	461a      	mov	r2, r3
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013764:	4618      	mov	r0, r3
 8013766:	f7f8 fa19 	bl	800bb9c <lwip_htons>
 801376a:	4603      	mov	r3, r0
 801376c:	461a      	mov	r2, r3
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013778:	68f8      	ldr	r0, [r7, #12]
 801377a:	f7f8 fa24 	bl	800bbc6 <lwip_htonl>
 801377e:	4602      	mov	r2, r0
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013784:	897b      	ldrh	r3, [r7, #10]
 8013786:	089b      	lsrs	r3, r3, #2
 8013788:	b29b      	uxth	r3, r3
 801378a:	3305      	adds	r3, #5
 801378c:	b29b      	uxth	r3, r3
 801378e:	031b      	lsls	r3, r3, #12
 8013790:	b29a      	uxth	r2, r3
 8013792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013796:	b29b      	uxth	r3, r3
 8013798:	4313      	orrs	r3, r2
 801379a:	b29b      	uxth	r3, r3
 801379c:	4618      	mov	r0, r3
 801379e:	f7f8 f9fd 	bl	800bb9c <lwip_htons>
 80137a2:	4603      	mov	r3, r0
 80137a4:	461a      	mov	r2, r3
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80137aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80137ac:	4618      	mov	r0, r3
 80137ae:	f7f8 f9f5 	bl	800bb9c <lwip_htons>
 80137b2:	4603      	mov	r3, r0
 80137b4:	461a      	mov	r2, r3
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	2200      	movs	r2, #0
 80137be:	741a      	strb	r2, [r3, #16]
 80137c0:	2200      	movs	r2, #0
 80137c2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	2200      	movs	r2, #0
 80137c8:	749a      	strb	r2, [r3, #18]
 80137ca:	2200      	movs	r2, #0
 80137cc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80137ce:	697b      	ldr	r3, [r7, #20]
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3718      	adds	r7, #24
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	0801cbc8 	.word	0x0801cbc8
 80137dc:	0801d2a0 	.word	0x0801d2a0
 80137e0:	0801cc1c 	.word	0x0801cc1c

080137e4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80137e4:	b5b0      	push	{r4, r5, r7, lr}
 80137e6:	b08a      	sub	sp, #40	; 0x28
 80137e8:	af04      	add	r7, sp, #16
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	607b      	str	r3, [r7, #4]
 80137ee:	460b      	mov	r3, r1
 80137f0:	817b      	strh	r3, [r7, #10]
 80137f2:	4613      	mov	r3, r2
 80137f4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d106      	bne.n	801380a <tcp_output_alloc_header+0x26>
 80137fc:	4b15      	ldr	r3, [pc, #84]	; (8013854 <tcp_output_alloc_header+0x70>)
 80137fe:	f240 7242 	movw	r2, #1858	; 0x742
 8013802:	4915      	ldr	r1, [pc, #84]	; (8013858 <tcp_output_alloc_header+0x74>)
 8013804:	4815      	ldr	r0, [pc, #84]	; (801385c <tcp_output_alloc_header+0x78>)
 8013806:	f005 fd2f 	bl	8019268 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	8adb      	ldrh	r3, [r3, #22]
 8013812:	68fa      	ldr	r2, [r7, #12]
 8013814:	8b12      	ldrh	r2, [r2, #24]
 8013816:	68f9      	ldr	r1, [r7, #12]
 8013818:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801381a:	893d      	ldrh	r5, [r7, #8]
 801381c:	897c      	ldrh	r4, [r7, #10]
 801381e:	9103      	str	r1, [sp, #12]
 8013820:	2110      	movs	r1, #16
 8013822:	9102      	str	r1, [sp, #8]
 8013824:	9201      	str	r2, [sp, #4]
 8013826:	9300      	str	r3, [sp, #0]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	462a      	mov	r2, r5
 801382c:	4621      	mov	r1, r4
 801382e:	f7ff ff67 	bl	8013700 <tcp_output_alloc_header_common>
 8013832:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d006      	beq.n	8013848 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801383e:	68fa      	ldr	r2, [r7, #12]
 8013840:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013842:	441a      	add	r2, r3
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013848:	697b      	ldr	r3, [r7, #20]
}
 801384a:	4618      	mov	r0, r3
 801384c:	3718      	adds	r7, #24
 801384e:	46bd      	mov	sp, r7
 8013850:	bdb0      	pop	{r4, r5, r7, pc}
 8013852:	bf00      	nop
 8013854:	0801cbc8 	.word	0x0801cbc8
 8013858:	0801d2d0 	.word	0x0801d2d0
 801385c:	0801cc1c 	.word	0x0801cc1c

08013860 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b088      	sub	sp, #32
 8013864:	af00      	add	r7, sp, #0
 8013866:	60f8      	str	r0, [r7, #12]
 8013868:	60b9      	str	r1, [r7, #8]
 801386a:	4611      	mov	r1, r2
 801386c:	461a      	mov	r2, r3
 801386e:	460b      	mov	r3, r1
 8013870:	71fb      	strb	r3, [r7, #7]
 8013872:	4613      	mov	r3, r2
 8013874:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013876:	2300      	movs	r3, #0
 8013878:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d106      	bne.n	801388e <tcp_output_fill_options+0x2e>
 8013880:	4b12      	ldr	r3, [pc, #72]	; (80138cc <tcp_output_fill_options+0x6c>)
 8013882:	f240 7256 	movw	r2, #1878	; 0x756
 8013886:	4912      	ldr	r1, [pc, #72]	; (80138d0 <tcp_output_fill_options+0x70>)
 8013888:	4812      	ldr	r0, [pc, #72]	; (80138d4 <tcp_output_fill_options+0x74>)
 801388a:	f005 fced 	bl	8019268 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	3314      	adds	r3, #20
 8013898:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801389a:	8bfb      	ldrh	r3, [r7, #30]
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	461a      	mov	r2, r3
 80138a0:	79fb      	ldrb	r3, [r7, #7]
 80138a2:	009b      	lsls	r3, r3, #2
 80138a4:	f003 0304 	and.w	r3, r3, #4
 80138a8:	4413      	add	r3, r2
 80138aa:	3314      	adds	r3, #20
 80138ac:	69ba      	ldr	r2, [r7, #24]
 80138ae:	4413      	add	r3, r2
 80138b0:	697a      	ldr	r2, [r7, #20]
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d006      	beq.n	80138c4 <tcp_output_fill_options+0x64>
 80138b6:	4b05      	ldr	r3, [pc, #20]	; (80138cc <tcp_output_fill_options+0x6c>)
 80138b8:	f240 7275 	movw	r2, #1909	; 0x775
 80138bc:	4906      	ldr	r1, [pc, #24]	; (80138d8 <tcp_output_fill_options+0x78>)
 80138be:	4805      	ldr	r0, [pc, #20]	; (80138d4 <tcp_output_fill_options+0x74>)
 80138c0:	f005 fcd2 	bl	8019268 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80138c4:	bf00      	nop
 80138c6:	3720      	adds	r7, #32
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	0801cbc8 	.word	0x0801cbc8
 80138d0:	0801d2f8 	.word	0x0801d2f8
 80138d4:	0801cc1c 	.word	0x0801cc1c
 80138d8:	0801d1f0 	.word	0x0801d1f0

080138dc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b08a      	sub	sp, #40	; 0x28
 80138e0:	af04      	add	r7, sp, #16
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	607a      	str	r2, [r7, #4]
 80138e8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d106      	bne.n	80138fe <tcp_output_control_segment+0x22>
 80138f0:	4b1c      	ldr	r3, [pc, #112]	; (8013964 <tcp_output_control_segment+0x88>)
 80138f2:	f240 7287 	movw	r2, #1927	; 0x787
 80138f6:	491c      	ldr	r1, [pc, #112]	; (8013968 <tcp_output_control_segment+0x8c>)
 80138f8:	481c      	ldr	r0, [pc, #112]	; (801396c <tcp_output_control_segment+0x90>)
 80138fa:	f005 fcb5 	bl	8019268 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80138fe:	683a      	ldr	r2, [r7, #0]
 8013900:	6879      	ldr	r1, [r7, #4]
 8013902:	68f8      	ldr	r0, [r7, #12]
 8013904:	f7fe fae8 	bl	8011ed8 <tcp_route>
 8013908:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d102      	bne.n	8013916 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013910:	23fc      	movs	r3, #252	; 0xfc
 8013912:	75fb      	strb	r3, [r7, #23]
 8013914:	e01c      	b.n	8013950 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d006      	beq.n	801392a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	7adb      	ldrb	r3, [r3, #11]
 8013920:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	7a9b      	ldrb	r3, [r3, #10]
 8013926:	757b      	strb	r3, [r7, #21]
 8013928:	e003      	b.n	8013932 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801392a:	23ff      	movs	r3, #255	; 0xff
 801392c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801392e:	2300      	movs	r3, #0
 8013930:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013932:	7dba      	ldrb	r2, [r7, #22]
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	9302      	str	r3, [sp, #8]
 8013938:	2306      	movs	r3, #6
 801393a:	9301      	str	r3, [sp, #4]
 801393c:	7d7b      	ldrb	r3, [r7, #21]
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	4613      	mov	r3, r2
 8013942:	683a      	ldr	r2, [r7, #0]
 8013944:	6879      	ldr	r1, [r7, #4]
 8013946:	68b8      	ldr	r0, [r7, #8]
 8013948:	f004 f962 	bl	8017c10 <ip4_output_if>
 801394c:	4603      	mov	r3, r0
 801394e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013950:	68b8      	ldr	r0, [r7, #8]
 8013952:	f7f9 fd57 	bl	800d404 <pbuf_free>
  return err;
 8013956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801395a:	4618      	mov	r0, r3
 801395c:	3718      	adds	r7, #24
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	0801cbc8 	.word	0x0801cbc8
 8013968:	0801d320 	.word	0x0801d320
 801396c:	0801cc1c 	.word	0x0801cc1c

08013970 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013970:	b590      	push	{r4, r7, lr}
 8013972:	b08b      	sub	sp, #44	; 0x2c
 8013974:	af04      	add	r7, sp, #16
 8013976:	60f8      	str	r0, [r7, #12]
 8013978:	60b9      	str	r1, [r7, #8]
 801397a:	607a      	str	r2, [r7, #4]
 801397c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d106      	bne.n	8013992 <tcp_rst+0x22>
 8013984:	4b1f      	ldr	r3, [pc, #124]	; (8013a04 <tcp_rst+0x94>)
 8013986:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801398a:	491f      	ldr	r1, [pc, #124]	; (8013a08 <tcp_rst+0x98>)
 801398c:	481f      	ldr	r0, [pc, #124]	; (8013a0c <tcp_rst+0x9c>)
 801398e:	f005 fc6b 	bl	8019268 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013994:	2b00      	cmp	r3, #0
 8013996:	d106      	bne.n	80139a6 <tcp_rst+0x36>
 8013998:	4b1a      	ldr	r3, [pc, #104]	; (8013a04 <tcp_rst+0x94>)
 801399a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801399e:	491c      	ldr	r1, [pc, #112]	; (8013a10 <tcp_rst+0xa0>)
 80139a0:	481a      	ldr	r0, [pc, #104]	; (8013a0c <tcp_rst+0x9c>)
 80139a2:	f005 fc61 	bl	8019268 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80139a6:	2300      	movs	r3, #0
 80139a8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80139aa:	f246 0308 	movw	r3, #24584	; 0x6008
 80139ae:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80139b0:	7dfb      	ldrb	r3, [r7, #23]
 80139b2:	b29c      	uxth	r4, r3
 80139b4:	68b8      	ldr	r0, [r7, #8]
 80139b6:	f7f8 f906 	bl	800bbc6 <lwip_htonl>
 80139ba:	4602      	mov	r2, r0
 80139bc:	8abb      	ldrh	r3, [r7, #20]
 80139be:	9303      	str	r3, [sp, #12]
 80139c0:	2314      	movs	r3, #20
 80139c2:	9302      	str	r3, [sp, #8]
 80139c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80139c6:	9301      	str	r3, [sp, #4]
 80139c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80139ca:	9300      	str	r3, [sp, #0]
 80139cc:	4613      	mov	r3, r2
 80139ce:	2200      	movs	r2, #0
 80139d0:	4621      	mov	r1, r4
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f7ff fe94 	bl	8013700 <tcp_output_alloc_header_common>
 80139d8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d00c      	beq.n	80139fa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80139e0:	7dfb      	ldrb	r3, [r7, #23]
 80139e2:	2200      	movs	r2, #0
 80139e4:	6939      	ldr	r1, [r7, #16]
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f7ff ff3a 	bl	8013860 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80139ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ee:	683a      	ldr	r2, [r7, #0]
 80139f0:	6939      	ldr	r1, [r7, #16]
 80139f2:	68f8      	ldr	r0, [r7, #12]
 80139f4:	f7ff ff72 	bl	80138dc <tcp_output_control_segment>
 80139f8:	e000      	b.n	80139fc <tcp_rst+0x8c>
    return;
 80139fa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80139fc:	371c      	adds	r7, #28
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd90      	pop	{r4, r7, pc}
 8013a02:	bf00      	nop
 8013a04:	0801cbc8 	.word	0x0801cbc8
 8013a08:	0801d34c 	.word	0x0801d34c
 8013a0c:	0801cc1c 	.word	0x0801cc1c
 8013a10:	0801d368 	.word	0x0801d368

08013a14 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013a14:	b590      	push	{r4, r7, lr}
 8013a16:	b087      	sub	sp, #28
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013a20:	2300      	movs	r3, #0
 8013a22:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d106      	bne.n	8013a38 <tcp_send_empty_ack+0x24>
 8013a2a:	4b28      	ldr	r3, [pc, #160]	; (8013acc <tcp_send_empty_ack+0xb8>)
 8013a2c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013a30:	4927      	ldr	r1, [pc, #156]	; (8013ad0 <tcp_send_empty_ack+0xbc>)
 8013a32:	4828      	ldr	r0, [pc, #160]	; (8013ad4 <tcp_send_empty_ack+0xc0>)
 8013a34:	f005 fc18 	bl	8019268 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013a38:	7dfb      	ldrb	r3, [r7, #23]
 8013a3a:	009b      	lsls	r3, r3, #2
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	f003 0304 	and.w	r3, r3, #4
 8013a42:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013a44:	7d7b      	ldrb	r3, [r7, #21]
 8013a46:	b29c      	uxth	r4, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7f8 f8ba 	bl	800bbc6 <lwip_htonl>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2200      	movs	r2, #0
 8013a56:	4621      	mov	r1, r4
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f7ff fec3 	bl	80137e4 <tcp_output_alloc_header>
 8013a5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d109      	bne.n	8013a7a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	8b5b      	ldrh	r3, [r3, #26]
 8013a6a:	f043 0303 	orr.w	r3, r3, #3
 8013a6e:	b29a      	uxth	r2, r3
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013a74:	f06f 0301 	mvn.w	r3, #1
 8013a78:	e023      	b.n	8013ac2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013a7a:	7dbb      	ldrb	r3, [r7, #22]
 8013a7c:	7dfa      	ldrb	r2, [r7, #23]
 8013a7e:	6939      	ldr	r1, [r7, #16]
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	f7ff feed 	bl	8013860 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	3304      	adds	r3, #4
 8013a8c:	6939      	ldr	r1, [r7, #16]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f7ff ff24 	bl	80138dc <tcp_output_control_segment>
 8013a94:	4603      	mov	r3, r0
 8013a96:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d007      	beq.n	8013ab0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	8b5b      	ldrh	r3, [r3, #26]
 8013aa4:	f043 0303 	orr.w	r3, r3, #3
 8013aa8:	b29a      	uxth	r2, r3
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	835a      	strh	r2, [r3, #26]
 8013aae:	e006      	b.n	8013abe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	8b5b      	ldrh	r3, [r3, #26]
 8013ab4:	f023 0303 	bic.w	r3, r3, #3
 8013ab8:	b29a      	uxth	r2, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	371c      	adds	r7, #28
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd90      	pop	{r4, r7, pc}
 8013aca:	bf00      	nop
 8013acc:	0801cbc8 	.word	0x0801cbc8
 8013ad0:	0801d384 	.word	0x0801d384
 8013ad4:	0801cc1c 	.word	0x0801cc1c

08013ad8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013ad8:	b590      	push	{r4, r7, lr}
 8013ada:	b087      	sub	sp, #28
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d106      	bne.n	8013af8 <tcp_keepalive+0x20>
 8013aea:	4b18      	ldr	r3, [pc, #96]	; (8013b4c <tcp_keepalive+0x74>)
 8013aec:	f640 0224 	movw	r2, #2084	; 0x824
 8013af0:	4917      	ldr	r1, [pc, #92]	; (8013b50 <tcp_keepalive+0x78>)
 8013af2:	4818      	ldr	r0, [pc, #96]	; (8013b54 <tcp_keepalive+0x7c>)
 8013af4:	f005 fbb8 	bl	8019268 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013af8:	7dfb      	ldrb	r3, [r7, #23]
 8013afa:	b29c      	uxth	r4, r3
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b00:	3b01      	subs	r3, #1
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7f8 f85f 	bl	800bbc6 <lwip_htonl>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	4621      	mov	r1, r4
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f7ff fe68 	bl	80137e4 <tcp_output_alloc_header>
 8013b14:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d102      	bne.n	8013b22 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b20:	e010      	b.n	8013b44 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013b22:	7dfb      	ldrb	r3, [r7, #23]
 8013b24:	2200      	movs	r2, #0
 8013b26:	6939      	ldr	r1, [r7, #16]
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f7ff fe99 	bl	8013860 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	3304      	adds	r3, #4
 8013b34:	6939      	ldr	r1, [r7, #16]
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7ff fed0 	bl	80138dc <tcp_output_control_segment>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	371c      	adds	r7, #28
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd90      	pop	{r4, r7, pc}
 8013b4c:	0801cbc8 	.word	0x0801cbc8
 8013b50:	0801d3a4 	.word	0x0801d3a4
 8013b54:	0801cc1c 	.word	0x0801cc1c

08013b58 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013b58:	b590      	push	{r4, r7, lr}
 8013b5a:	b08b      	sub	sp, #44	; 0x2c
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013b60:	2300      	movs	r3, #0
 8013b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d106      	bne.n	8013b7a <tcp_zero_window_probe+0x22>
 8013b6c:	4b4c      	ldr	r3, [pc, #304]	; (8013ca0 <tcp_zero_window_probe+0x148>)
 8013b6e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013b72:	494c      	ldr	r1, [pc, #304]	; (8013ca4 <tcp_zero_window_probe+0x14c>)
 8013b74:	484c      	ldr	r0, [pc, #304]	; (8013ca8 <tcp_zero_window_probe+0x150>)
 8013b76:	f005 fb77 	bl	8019268 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b7e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013b80:	6a3b      	ldr	r3, [r7, #32]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d101      	bne.n	8013b8a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013b86:	2300      	movs	r3, #0
 8013b88:	e086      	b.n	8013c98 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013b90:	2bff      	cmp	r3, #255	; 0xff
 8013b92:	d007      	beq.n	8013ba4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	b2da      	uxtb	r2, r3
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013ba4:	6a3b      	ldr	r3, [r7, #32]
 8013ba6:	68db      	ldr	r3, [r3, #12]
 8013ba8:	899b      	ldrh	r3, [r3, #12]
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7f7 fff5 	bl	800bb9c <lwip_htons>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	f003 0301 	and.w	r3, r3, #1
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d005      	beq.n	8013bca <tcp_zero_window_probe+0x72>
 8013bbe:	6a3b      	ldr	r3, [r7, #32]
 8013bc0:	891b      	ldrh	r3, [r3, #8]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d101      	bne.n	8013bca <tcp_zero_window_probe+0x72>
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	e000      	b.n	8013bcc <tcp_zero_window_probe+0x74>
 8013bca:	2300      	movs	r3, #0
 8013bcc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013bce:	7ffb      	ldrb	r3, [r7, #31]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	bf0c      	ite	eq
 8013bd4:	2301      	moveq	r3, #1
 8013bd6:	2300      	movne	r3, #0
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013be0:	b299      	uxth	r1, r3
 8013be2:	6a3b      	ldr	r3, [r7, #32]
 8013be4:	68db      	ldr	r3, [r3, #12]
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	8bba      	ldrh	r2, [r7, #28]
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f7ff fdfa 	bl	80137e4 <tcp_output_alloc_header>
 8013bf0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013bf2:	69bb      	ldr	r3, [r7, #24]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d102      	bne.n	8013bfe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bfc:	e04c      	b.n	8013c98 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013bfe:	69bb      	ldr	r3, [r7, #24]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013c04:	7ffb      	ldrb	r3, [r7, #31]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d011      	beq.n	8013c2e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	899b      	ldrh	r3, [r3, #12]
 8013c0e:	b29b      	uxth	r3, r3
 8013c10:	b21b      	sxth	r3, r3
 8013c12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c16:	b21c      	sxth	r4, r3
 8013c18:	2011      	movs	r0, #17
 8013c1a:	f7f7 ffbf 	bl	800bb9c <lwip_htons>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	b21b      	sxth	r3, r3
 8013c22:	4323      	orrs	r3, r4
 8013c24:	b21b      	sxth	r3, r3
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	819a      	strh	r2, [r3, #12]
 8013c2c:	e010      	b.n	8013c50 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013c2e:	69bb      	ldr	r3, [r7, #24]
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	3314      	adds	r3, #20
 8013c34:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013c36:	6a3b      	ldr	r3, [r7, #32]
 8013c38:	6858      	ldr	r0, [r3, #4]
 8013c3a:	6a3b      	ldr	r3, [r7, #32]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	891a      	ldrh	r2, [r3, #8]
 8013c40:	6a3b      	ldr	r3, [r7, #32]
 8013c42:	891b      	ldrh	r3, [r3, #8]
 8013c44:	1ad3      	subs	r3, r2, r3
 8013c46:	b29b      	uxth	r3, r3
 8013c48:	2201      	movs	r2, #1
 8013c4a:	6939      	ldr	r1, [r7, #16]
 8013c4c:	f7f9 fde0 	bl	800d810 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013c50:	6a3b      	ldr	r3, [r7, #32]
 8013c52:	68db      	ldr	r3, [r3, #12]
 8013c54:	685b      	ldr	r3, [r3, #4]
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7f7 ffb5 	bl	800bbc6 <lwip_htonl>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	3301      	adds	r3, #1
 8013c60:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	1ad3      	subs	r3, r2, r3
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	da02      	bge.n	8013c74 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	68fa      	ldr	r2, [r7, #12]
 8013c72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c78:	2200      	movs	r2, #0
 8013c7a:	69b9      	ldr	r1, [r7, #24]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7ff fdef 	bl	8013860 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013c82:	687a      	ldr	r2, [r7, #4]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	3304      	adds	r3, #4
 8013c88:	69b9      	ldr	r1, [r7, #24]
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f7ff fe26 	bl	80138dc <tcp_output_control_segment>
 8013c90:	4603      	mov	r3, r0
 8013c92:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013c94:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	372c      	adds	r7, #44	; 0x2c
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd90      	pop	{r4, r7, pc}
 8013ca0:	0801cbc8 	.word	0x0801cbc8
 8013ca4:	0801d3c0 	.word	0x0801d3c0
 8013ca8:	0801cc1c 	.word	0x0801cc1c

08013cac <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013cb4:	f7f9 fe9a 	bl	800d9ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013cb8:	4b0a      	ldr	r3, [pc, #40]	; (8013ce4 <tcpip_tcp_timer+0x38>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d103      	bne.n	8013cc8 <tcpip_tcp_timer+0x1c>
 8013cc0:	4b09      	ldr	r3, [pc, #36]	; (8013ce8 <tcpip_tcp_timer+0x3c>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d005      	beq.n	8013cd4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013cc8:	2200      	movs	r2, #0
 8013cca:	4908      	ldr	r1, [pc, #32]	; (8013cec <tcpip_tcp_timer+0x40>)
 8013ccc:	20fa      	movs	r0, #250	; 0xfa
 8013cce:	f000 f8f3 	bl	8013eb8 <sys_timeout>
 8013cd2:	e003      	b.n	8013cdc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013cd4:	4b06      	ldr	r3, [pc, #24]	; (8013cf0 <tcpip_tcp_timer+0x44>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	601a      	str	r2, [r3, #0]
  }
}
 8013cda:	bf00      	nop
 8013cdc:	bf00      	nop
 8013cde:	3708      	adds	r7, #8
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}
 8013ce4:	20010ed0 	.word	0x20010ed0
 8013ce8:	20010ed4 	.word	0x20010ed4
 8013cec:	08013cad 	.word	0x08013cad
 8013cf0:	20010f1c 	.word	0x20010f1c

08013cf4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013cf8:	4b0a      	ldr	r3, [pc, #40]	; (8013d24 <tcp_timer_needed+0x30>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d10f      	bne.n	8013d20 <tcp_timer_needed+0x2c>
 8013d00:	4b09      	ldr	r3, [pc, #36]	; (8013d28 <tcp_timer_needed+0x34>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d103      	bne.n	8013d10 <tcp_timer_needed+0x1c>
 8013d08:	4b08      	ldr	r3, [pc, #32]	; (8013d2c <tcp_timer_needed+0x38>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d007      	beq.n	8013d20 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013d10:	4b04      	ldr	r3, [pc, #16]	; (8013d24 <tcp_timer_needed+0x30>)
 8013d12:	2201      	movs	r2, #1
 8013d14:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013d16:	2200      	movs	r2, #0
 8013d18:	4905      	ldr	r1, [pc, #20]	; (8013d30 <tcp_timer_needed+0x3c>)
 8013d1a:	20fa      	movs	r0, #250	; 0xfa
 8013d1c:	f000 f8cc 	bl	8013eb8 <sys_timeout>
  }
}
 8013d20:	bf00      	nop
 8013d22:	bd80      	pop	{r7, pc}
 8013d24:	20010f1c 	.word	0x20010f1c
 8013d28:	20010ed0 	.word	0x20010ed0
 8013d2c:	20010ed4 	.word	0x20010ed4
 8013d30:	08013cad 	.word	0x08013cad

08013d34 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b086      	sub	sp, #24
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013d40:	200a      	movs	r0, #10
 8013d42:	f7f8 fc39 	bl	800c5b8 <memp_malloc>
 8013d46:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d109      	bne.n	8013d62 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d151      	bne.n	8013df8 <sys_timeout_abs+0xc4>
 8013d54:	4b2a      	ldr	r3, [pc, #168]	; (8013e00 <sys_timeout_abs+0xcc>)
 8013d56:	22be      	movs	r2, #190	; 0xbe
 8013d58:	492a      	ldr	r1, [pc, #168]	; (8013e04 <sys_timeout_abs+0xd0>)
 8013d5a:	482b      	ldr	r0, [pc, #172]	; (8013e08 <sys_timeout_abs+0xd4>)
 8013d5c:	f005 fa84 	bl	8019268 <iprintf>
    return;
 8013d60:	e04a      	b.n	8013df8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	2200      	movs	r2, #0
 8013d66:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	68ba      	ldr	r2, [r7, #8]
 8013d6c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	68fa      	ldr	r2, [r7, #12]
 8013d78:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013d7a:	4b24      	ldr	r3, [pc, #144]	; (8013e0c <sys_timeout_abs+0xd8>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d103      	bne.n	8013d8a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013d82:	4a22      	ldr	r2, [pc, #136]	; (8013e0c <sys_timeout_abs+0xd8>)
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	6013      	str	r3, [r2, #0]
    return;
 8013d88:	e037      	b.n	8013dfa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	685a      	ldr	r2, [r3, #4]
 8013d8e:	4b1f      	ldr	r3, [pc, #124]	; (8013e0c <sys_timeout_abs+0xd8>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	1ad3      	subs	r3, r2, r3
 8013d96:	0fdb      	lsrs	r3, r3, #31
 8013d98:	f003 0301 	and.w	r3, r3, #1
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d007      	beq.n	8013db2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013da2:	4b1a      	ldr	r3, [pc, #104]	; (8013e0c <sys_timeout_abs+0xd8>)
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013daa:	4a18      	ldr	r2, [pc, #96]	; (8013e0c <sys_timeout_abs+0xd8>)
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	6013      	str	r3, [r2, #0]
 8013db0:	e023      	b.n	8013dfa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013db2:	4b16      	ldr	r3, [pc, #88]	; (8013e0c <sys_timeout_abs+0xd8>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	617b      	str	r3, [r7, #20]
 8013db8:	e01a      	b.n	8013df0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d00b      	beq.n	8013dda <sys_timeout_abs+0xa6>
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	685a      	ldr	r2, [r3, #4]
 8013dc6:	697b      	ldr	r3, [r7, #20]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	685b      	ldr	r3, [r3, #4]
 8013dcc:	1ad3      	subs	r3, r2, r3
 8013dce:	0fdb      	lsrs	r3, r3, #31
 8013dd0:	f003 0301 	and.w	r3, r3, #1
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d007      	beq.n	8013dea <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	681a      	ldr	r2, [r3, #0]
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	693a      	ldr	r2, [r7, #16]
 8013de6:	601a      	str	r2, [r3, #0]
        break;
 8013de8:	e007      	b.n	8013dfa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	617b      	str	r3, [r7, #20]
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d1e1      	bne.n	8013dba <sys_timeout_abs+0x86>
 8013df6:	e000      	b.n	8013dfa <sys_timeout_abs+0xc6>
    return;
 8013df8:	bf00      	nop
      }
    }
  }
}
 8013dfa:	3718      	adds	r7, #24
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	0801d3e4 	.word	0x0801d3e4
 8013e04:	0801d418 	.word	0x0801d418
 8013e08:	0801d458 	.word	0x0801d458
 8013e0c:	20010f14 	.word	0x20010f14

08013e10 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b086      	sub	sp, #24
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	685b      	ldr	r3, [r3, #4]
 8013e20:	4798      	blx	r3

  now = sys_now();
 8013e22:	f7f1 f9e3 	bl	80051ec <sys_now>
 8013e26:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	681a      	ldr	r2, [r3, #0]
 8013e2c:	4b0f      	ldr	r3, [pc, #60]	; (8013e6c <lwip_cyclic_timer+0x5c>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	4413      	add	r3, r2
 8013e32:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013e34:	68fa      	ldr	r2, [r7, #12]
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	1ad3      	subs	r3, r2, r3
 8013e3a:	0fdb      	lsrs	r3, r3, #31
 8013e3c:	f003 0301 	and.w	r3, r3, #1
 8013e40:	b2db      	uxtb	r3, r3
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d009      	beq.n	8013e5a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	4413      	add	r3, r2
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	4907      	ldr	r1, [pc, #28]	; (8013e70 <lwip_cyclic_timer+0x60>)
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7ff ff6e 	bl	8013d34 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013e58:	e004      	b.n	8013e64 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	4904      	ldr	r1, [pc, #16]	; (8013e70 <lwip_cyclic_timer+0x60>)
 8013e5e:	68f8      	ldr	r0, [r7, #12]
 8013e60:	f7ff ff68 	bl	8013d34 <sys_timeout_abs>
}
 8013e64:	bf00      	nop
 8013e66:	3718      	adds	r7, #24
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	20010f18 	.word	0x20010f18
 8013e70:	08013e11 	.word	0x08013e11

08013e74 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	607b      	str	r3, [r7, #4]
 8013e7e:	e00e      	b.n	8013e9e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013e80:	4a0b      	ldr	r2, [pc, #44]	; (8013eb0 <sys_timeouts_init+0x3c>)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	00db      	lsls	r3, r3, #3
 8013e8c:	4a08      	ldr	r2, [pc, #32]	; (8013eb0 <sys_timeouts_init+0x3c>)
 8013e8e:	4413      	add	r3, r2
 8013e90:	461a      	mov	r2, r3
 8013e92:	4908      	ldr	r1, [pc, #32]	; (8013eb4 <sys_timeouts_init+0x40>)
 8013e94:	f000 f810 	bl	8013eb8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	607b      	str	r3, [r7, #4]
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2b04      	cmp	r3, #4
 8013ea2:	d9ed      	bls.n	8013e80 <sys_timeouts_init+0xc>
  }
}
 8013ea4:	bf00      	nop
 8013ea6:	bf00      	nop
 8013ea8:	3708      	adds	r7, #8
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}
 8013eae:	bf00      	nop
 8013eb0:	080284ec 	.word	0x080284ec
 8013eb4:	08013e11 	.word	0x08013e11

08013eb8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b086      	sub	sp, #24
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013eca:	d306      	bcc.n	8013eda <sys_timeout+0x22>
 8013ecc:	4b0a      	ldr	r3, [pc, #40]	; (8013ef8 <sys_timeout+0x40>)
 8013ece:	f240 1229 	movw	r2, #297	; 0x129
 8013ed2:	490a      	ldr	r1, [pc, #40]	; (8013efc <sys_timeout+0x44>)
 8013ed4:	480a      	ldr	r0, [pc, #40]	; (8013f00 <sys_timeout+0x48>)
 8013ed6:	f005 f9c7 	bl	8019268 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013eda:	f7f1 f987 	bl	80051ec <sys_now>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	4413      	add	r3, r2
 8013ee4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013ee6:	687a      	ldr	r2, [r7, #4]
 8013ee8:	68b9      	ldr	r1, [r7, #8]
 8013eea:	6978      	ldr	r0, [r7, #20]
 8013eec:	f7ff ff22 	bl	8013d34 <sys_timeout_abs>
#endif
}
 8013ef0:	bf00      	nop
 8013ef2:	3718      	adds	r7, #24
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	0801d3e4 	.word	0x0801d3e4
 8013efc:	0801d480 	.word	0x0801d480
 8013f00:	0801d458 	.word	0x0801d458

08013f04 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b084      	sub	sp, #16
 8013f08:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013f0a:	f7f1 f96f 	bl	80051ec <sys_now>
 8013f0e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013f10:	4b17      	ldr	r3, [pc, #92]	; (8013f70 <sys_check_timeouts+0x6c>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d022      	beq.n	8013f62 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	68fa      	ldr	r2, [r7, #12]
 8013f22:	1ad3      	subs	r3, r2, r3
 8013f24:	0fdb      	lsrs	r3, r3, #31
 8013f26:	f003 0301 	and.w	r3, r3, #1
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d11a      	bne.n	8013f66 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	4a0e      	ldr	r2, [pc, #56]	; (8013f70 <sys_check_timeouts+0x6c>)
 8013f36:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	689b      	ldr	r3, [r3, #8]
 8013f3c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	68db      	ldr	r3, [r3, #12]
 8013f42:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	4a0a      	ldr	r2, [pc, #40]	; (8013f74 <sys_check_timeouts+0x70>)
 8013f4a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013f4c:	68b9      	ldr	r1, [r7, #8]
 8013f4e:	200a      	movs	r0, #10
 8013f50:	f7f8 fba8 	bl	800c6a4 <memp_free>
    if (handler != NULL) {
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d0da      	beq.n	8013f10 <sys_check_timeouts+0xc>
      handler(arg);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6838      	ldr	r0, [r7, #0]
 8013f5e:	4798      	blx	r3
  do {
 8013f60:	e7d6      	b.n	8013f10 <sys_check_timeouts+0xc>
      return;
 8013f62:	bf00      	nop
 8013f64:	e000      	b.n	8013f68 <sys_check_timeouts+0x64>
      return;
 8013f66:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013f68:	3710      	adds	r7, #16
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}
 8013f6e:	bf00      	nop
 8013f70:	20010f14 	.word	0x20010f14
 8013f74:	20010f18 	.word	0x20010f18

08013f78 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013f7e:	4b16      	ldr	r3, [pc, #88]	; (8013fd8 <sys_timeouts_sleeptime+0x60>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d102      	bne.n	8013f8c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013f86:	f04f 33ff 	mov.w	r3, #4294967295
 8013f8a:	e020      	b.n	8013fce <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013f8c:	f7f1 f92e 	bl	80051ec <sys_now>
 8013f90:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013f92:	4b11      	ldr	r3, [pc, #68]	; (8013fd8 <sys_timeouts_sleeptime+0x60>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	685a      	ldr	r2, [r3, #4]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	1ad3      	subs	r3, r2, r3
 8013f9c:	0fdb      	lsrs	r3, r3, #31
 8013f9e:	f003 0301 	and.w	r3, r3, #1
 8013fa2:	b2db      	uxtb	r3, r3
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d001      	beq.n	8013fac <sys_timeouts_sleeptime+0x34>
    return 0;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	e010      	b.n	8013fce <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013fac:	4b0a      	ldr	r3, [pc, #40]	; (8013fd8 <sys_timeouts_sleeptime+0x60>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	685a      	ldr	r2, [r3, #4]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	1ad3      	subs	r3, r2, r3
 8013fb6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	da06      	bge.n	8013fcc <sys_timeouts_sleeptime+0x54>
 8013fbe:	4b07      	ldr	r3, [pc, #28]	; (8013fdc <sys_timeouts_sleeptime+0x64>)
 8013fc0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013fc4:	4906      	ldr	r1, [pc, #24]	; (8013fe0 <sys_timeouts_sleeptime+0x68>)
 8013fc6:	4807      	ldr	r0, [pc, #28]	; (8013fe4 <sys_timeouts_sleeptime+0x6c>)
 8013fc8:	f005 f94e 	bl	8019268 <iprintf>
    return ret;
 8013fcc:	683b      	ldr	r3, [r7, #0]
  }
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3708      	adds	r7, #8
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	20010f14 	.word	0x20010f14
 8013fdc:	0801d3e4 	.word	0x0801d3e4
 8013fe0:	0801d4b8 	.word	0x0801d4b8
 8013fe4:	0801d458 	.word	0x0801d458

08013fe8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013fec:	f005 f84e 	bl	801908c <rand>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	4b01      	ldr	r3, [pc, #4]	; (8014008 <udp_init+0x20>)
 8014002:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014004:	bf00      	nop
 8014006:	bd80      	pop	{r7, pc}
 8014008:	2000002c 	.word	0x2000002c

0801400c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801400c:	b480      	push	{r7}
 801400e:	b083      	sub	sp, #12
 8014010:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014012:	2300      	movs	r3, #0
 8014014:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014016:	4b17      	ldr	r3, [pc, #92]	; (8014074 <udp_new_port+0x68>)
 8014018:	881b      	ldrh	r3, [r3, #0]
 801401a:	1c5a      	adds	r2, r3, #1
 801401c:	b291      	uxth	r1, r2
 801401e:	4a15      	ldr	r2, [pc, #84]	; (8014074 <udp_new_port+0x68>)
 8014020:	8011      	strh	r1, [r2, #0]
 8014022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014026:	4293      	cmp	r3, r2
 8014028:	d103      	bne.n	8014032 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801402a:	4b12      	ldr	r3, [pc, #72]	; (8014074 <udp_new_port+0x68>)
 801402c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014030:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014032:	4b11      	ldr	r3, [pc, #68]	; (8014078 <udp_new_port+0x6c>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	603b      	str	r3, [r7, #0]
 8014038:	e011      	b.n	801405e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	8a5a      	ldrh	r2, [r3, #18]
 801403e:	4b0d      	ldr	r3, [pc, #52]	; (8014074 <udp_new_port+0x68>)
 8014040:	881b      	ldrh	r3, [r3, #0]
 8014042:	429a      	cmp	r2, r3
 8014044:	d108      	bne.n	8014058 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014046:	88fb      	ldrh	r3, [r7, #6]
 8014048:	3301      	adds	r3, #1
 801404a:	80fb      	strh	r3, [r7, #6]
 801404c:	88fb      	ldrh	r3, [r7, #6]
 801404e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014052:	d3e0      	bcc.n	8014016 <udp_new_port+0xa>
        return 0;
 8014054:	2300      	movs	r3, #0
 8014056:	e007      	b.n	8014068 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	603b      	str	r3, [r7, #0]
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1ea      	bne.n	801403a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014064:	4b03      	ldr	r3, [pc, #12]	; (8014074 <udp_new_port+0x68>)
 8014066:	881b      	ldrh	r3, [r3, #0]
}
 8014068:	4618      	mov	r0, r3
 801406a:	370c      	adds	r7, #12
 801406c:	46bd      	mov	sp, r7
 801406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014072:	4770      	bx	lr
 8014074:	2000002c 	.word	0x2000002c
 8014078:	20010f20 	.word	0x20010f20

0801407c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b084      	sub	sp, #16
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	60b9      	str	r1, [r7, #8]
 8014086:	4613      	mov	r3, r2
 8014088:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d105      	bne.n	801409c <udp_input_local_match+0x20>
 8014090:	4b27      	ldr	r3, [pc, #156]	; (8014130 <udp_input_local_match+0xb4>)
 8014092:	2287      	movs	r2, #135	; 0x87
 8014094:	4927      	ldr	r1, [pc, #156]	; (8014134 <udp_input_local_match+0xb8>)
 8014096:	4828      	ldr	r0, [pc, #160]	; (8014138 <udp_input_local_match+0xbc>)
 8014098:	f005 f8e6 	bl	8019268 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d105      	bne.n	80140ae <udp_input_local_match+0x32>
 80140a2:	4b23      	ldr	r3, [pc, #140]	; (8014130 <udp_input_local_match+0xb4>)
 80140a4:	2288      	movs	r2, #136	; 0x88
 80140a6:	4925      	ldr	r1, [pc, #148]	; (801413c <udp_input_local_match+0xc0>)
 80140a8:	4823      	ldr	r0, [pc, #140]	; (8014138 <udp_input_local_match+0xbc>)
 80140aa:	f005 f8dd 	bl	8019268 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	7a1b      	ldrb	r3, [r3, #8]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d00b      	beq.n	80140ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	7a1a      	ldrb	r2, [r3, #8]
 80140ba:	4b21      	ldr	r3, [pc, #132]	; (8014140 <udp_input_local_match+0xc4>)
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80140c2:	3301      	adds	r3, #1
 80140c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d001      	beq.n	80140ce <udp_input_local_match+0x52>
    return 0;
 80140ca:	2300      	movs	r3, #0
 80140cc:	e02b      	b.n	8014126 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80140ce:	79fb      	ldrb	r3, [r7, #7]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d018      	beq.n	8014106 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d013      	beq.n	8014102 <udp_input_local_match+0x86>
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d00f      	beq.n	8014102 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80140e2:	4b17      	ldr	r3, [pc, #92]	; (8014140 <udp_input_local_match+0xc4>)
 80140e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80140e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ea:	d00a      	beq.n	8014102 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	681a      	ldr	r2, [r3, #0]
 80140f0:	4b13      	ldr	r3, [pc, #76]	; (8014140 <udp_input_local_match+0xc4>)
 80140f2:	695b      	ldr	r3, [r3, #20]
 80140f4:	405a      	eors	r2, r3
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	3308      	adds	r3, #8
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d110      	bne.n	8014124 <udp_input_local_match+0xa8>
          return 1;
 8014102:	2301      	movs	r3, #1
 8014104:	e00f      	b.n	8014126 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d009      	beq.n	8014120 <udp_input_local_match+0xa4>
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d005      	beq.n	8014120 <udp_input_local_match+0xa4>
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	681a      	ldr	r2, [r3, #0]
 8014118:	4b09      	ldr	r3, [pc, #36]	; (8014140 <udp_input_local_match+0xc4>)
 801411a:	695b      	ldr	r3, [r3, #20]
 801411c:	429a      	cmp	r2, r3
 801411e:	d101      	bne.n	8014124 <udp_input_local_match+0xa8>
        return 1;
 8014120:	2301      	movs	r3, #1
 8014122:	e000      	b.n	8014126 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014124:	2300      	movs	r3, #0
}
 8014126:	4618      	mov	r0, r3
 8014128:	3710      	adds	r7, #16
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
 801412e:	bf00      	nop
 8014130:	0801d4cc 	.word	0x0801d4cc
 8014134:	0801d4fc 	.word	0x0801d4fc
 8014138:	0801d520 	.word	0x0801d520
 801413c:	0801d548 	.word	0x0801d548
 8014140:	2000d750 	.word	0x2000d750

08014144 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014144:	b590      	push	{r4, r7, lr}
 8014146:	b08d      	sub	sp, #52	; 0x34
 8014148:	af02      	add	r7, sp, #8
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801414e:	2300      	movs	r3, #0
 8014150:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d105      	bne.n	8014164 <udp_input+0x20>
 8014158:	4b7c      	ldr	r3, [pc, #496]	; (801434c <udp_input+0x208>)
 801415a:	22cf      	movs	r2, #207	; 0xcf
 801415c:	497c      	ldr	r1, [pc, #496]	; (8014350 <udp_input+0x20c>)
 801415e:	487d      	ldr	r0, [pc, #500]	; (8014354 <udp_input+0x210>)
 8014160:	f005 f882 	bl	8019268 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d105      	bne.n	8014176 <udp_input+0x32>
 801416a:	4b78      	ldr	r3, [pc, #480]	; (801434c <udp_input+0x208>)
 801416c:	22d0      	movs	r2, #208	; 0xd0
 801416e:	497a      	ldr	r1, [pc, #488]	; (8014358 <udp_input+0x214>)
 8014170:	4878      	ldr	r0, [pc, #480]	; (8014354 <udp_input+0x210>)
 8014172:	f005 f879 	bl	8019268 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	895b      	ldrh	r3, [r3, #10]
 801417a:	2b07      	cmp	r3, #7
 801417c:	d803      	bhi.n	8014186 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f7f9 f940 	bl	800d404 <pbuf_free>
    goto end;
 8014184:	e0de      	b.n	8014344 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801418c:	4b73      	ldr	r3, [pc, #460]	; (801435c <udp_input+0x218>)
 801418e:	695b      	ldr	r3, [r3, #20]
 8014190:	4a72      	ldr	r2, [pc, #456]	; (801435c <udp_input+0x218>)
 8014192:	6812      	ldr	r2, [r2, #0]
 8014194:	4611      	mov	r1, r2
 8014196:	4618      	mov	r0, r3
 8014198:	f003 fe12 	bl	8017dc0 <ip4_addr_isbroadcast_u32>
 801419c:	4603      	mov	r3, r0
 801419e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	881b      	ldrh	r3, [r3, #0]
 80141a4:	b29b      	uxth	r3, r3
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7f7 fcf8 	bl	800bb9c <lwip_htons>
 80141ac:	4603      	mov	r3, r0
 80141ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	885b      	ldrh	r3, [r3, #2]
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7f7 fcf0 	bl	800bb9c <lwip_htons>
 80141bc:	4603      	mov	r3, r0
 80141be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80141c0:	2300      	movs	r3, #0
 80141c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80141c4:	2300      	movs	r3, #0
 80141c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80141c8:	2300      	movs	r3, #0
 80141ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80141cc:	4b64      	ldr	r3, [pc, #400]	; (8014360 <udp_input+0x21c>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	627b      	str	r3, [r7, #36]	; 0x24
 80141d2:	e054      	b.n	801427e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80141d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d6:	8a5b      	ldrh	r3, [r3, #18]
 80141d8:	89fa      	ldrh	r2, [r7, #14]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d14a      	bne.n	8014274 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80141de:	7cfb      	ldrb	r3, [r7, #19]
 80141e0:	461a      	mov	r2, r3
 80141e2:	6839      	ldr	r1, [r7, #0]
 80141e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141e6:	f7ff ff49 	bl	801407c <udp_input_local_match>
 80141ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d041      	beq.n	8014274 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80141f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f2:	7c1b      	ldrb	r3, [r3, #16]
 80141f4:	f003 0304 	and.w	r3, r3, #4
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d11d      	bne.n	8014238 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d102      	bne.n	8014208 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014204:	61fb      	str	r3, [r7, #28]
 8014206:	e017      	b.n	8014238 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014208:	7cfb      	ldrb	r3, [r7, #19]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d014      	beq.n	8014238 <udp_input+0xf4>
 801420e:	4b53      	ldr	r3, [pc, #332]	; (801435c <udp_input+0x218>)
 8014210:	695b      	ldr	r3, [r3, #20]
 8014212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014216:	d10f      	bne.n	8014238 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014218:	69fb      	ldr	r3, [r7, #28]
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	3304      	adds	r3, #4
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	429a      	cmp	r2, r3
 8014224:	d008      	beq.n	8014238 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014228:	681a      	ldr	r2, [r3, #0]
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	3304      	adds	r3, #4
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	429a      	cmp	r2, r3
 8014232:	d101      	bne.n	8014238 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014236:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423a:	8a9b      	ldrh	r3, [r3, #20]
 801423c:	8a3a      	ldrh	r2, [r7, #16]
 801423e:	429a      	cmp	r2, r3
 8014240:	d118      	bne.n	8014274 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014244:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014246:	2b00      	cmp	r3, #0
 8014248:	d005      	beq.n	8014256 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424c:	685a      	ldr	r2, [r3, #4]
 801424e:	4b43      	ldr	r3, [pc, #268]	; (801435c <udp_input+0x218>)
 8014250:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014252:	429a      	cmp	r2, r3
 8014254:	d10e      	bne.n	8014274 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014256:	6a3b      	ldr	r3, [r7, #32]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d014      	beq.n	8014286 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425e:	68da      	ldr	r2, [r3, #12]
 8014260:	6a3b      	ldr	r3, [r7, #32]
 8014262:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014264:	4b3e      	ldr	r3, [pc, #248]	; (8014360 <udp_input+0x21c>)
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801426c:	4a3c      	ldr	r2, [pc, #240]	; (8014360 <udp_input+0x21c>)
 801426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014270:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014272:	e008      	b.n	8014286 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014276:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801427a:	68db      	ldr	r3, [r3, #12]
 801427c:	627b      	str	r3, [r7, #36]	; 0x24
 801427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014280:	2b00      	cmp	r3, #0
 8014282:	d1a7      	bne.n	80141d4 <udp_input+0x90>
 8014284:	e000      	b.n	8014288 <udp_input+0x144>
        break;
 8014286:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428a:	2b00      	cmp	r3, #0
 801428c:	d101      	bne.n	8014292 <udp_input+0x14e>
    pcb = uncon_pcb;
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014294:	2b00      	cmp	r3, #0
 8014296:	d002      	beq.n	801429e <udp_input+0x15a>
    for_us = 1;
 8014298:	2301      	movs	r3, #1
 801429a:	76fb      	strb	r3, [r7, #27]
 801429c:	e00a      	b.n	80142b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	3304      	adds	r3, #4
 80142a2:	681a      	ldr	r2, [r3, #0]
 80142a4:	4b2d      	ldr	r3, [pc, #180]	; (801435c <udp_input+0x218>)
 80142a6:	695b      	ldr	r3, [r3, #20]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	bf0c      	ite	eq
 80142ac:	2301      	moveq	r3, #1
 80142ae:	2300      	movne	r3, #0
 80142b0:	b2db      	uxtb	r3, r3
 80142b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80142b4:	7efb      	ldrb	r3, [r7, #27]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d041      	beq.n	801433e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80142ba:	2108      	movs	r1, #8
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f7f9 f81b 	bl	800d2f8 <pbuf_remove_header>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d00a      	beq.n	80142de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80142c8:	4b20      	ldr	r3, [pc, #128]	; (801434c <udp_input+0x208>)
 80142ca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80142ce:	4925      	ldr	r1, [pc, #148]	; (8014364 <udp_input+0x220>)
 80142d0:	4820      	ldr	r0, [pc, #128]	; (8014354 <udp_input+0x210>)
 80142d2:	f004 ffc9 	bl	8019268 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f7f9 f894 	bl	800d404 <pbuf_free>
      goto end;
 80142dc:	e032      	b.n	8014344 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80142de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d012      	beq.n	801430a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80142e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e6:	699b      	ldr	r3, [r3, #24]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d00a      	beq.n	8014302 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80142ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ee:	699c      	ldr	r4, [r3, #24]
 80142f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f2:	69d8      	ldr	r0, [r3, #28]
 80142f4:	8a3b      	ldrh	r3, [r7, #16]
 80142f6:	9300      	str	r3, [sp, #0]
 80142f8:	4b1b      	ldr	r3, [pc, #108]	; (8014368 <udp_input+0x224>)
 80142fa:	687a      	ldr	r2, [r7, #4]
 80142fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80142fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014300:	e021      	b.n	8014346 <udp_input+0x202>
        pbuf_free(p);
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7f9 f87e 	bl	800d404 <pbuf_free>
        goto end;
 8014308:	e01c      	b.n	8014344 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801430a:	7cfb      	ldrb	r3, [r7, #19]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d112      	bne.n	8014336 <udp_input+0x1f2>
 8014310:	4b12      	ldr	r3, [pc, #72]	; (801435c <udp_input+0x218>)
 8014312:	695b      	ldr	r3, [r3, #20]
 8014314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014318:	2be0      	cmp	r3, #224	; 0xe0
 801431a:	d00c      	beq.n	8014336 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801431c:	4b0f      	ldr	r3, [pc, #60]	; (801435c <udp_input+0x218>)
 801431e:	899b      	ldrh	r3, [r3, #12]
 8014320:	3308      	adds	r3, #8
 8014322:	b29b      	uxth	r3, r3
 8014324:	b21b      	sxth	r3, r3
 8014326:	4619      	mov	r1, r3
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7f9 f858 	bl	800d3de <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801432e:	2103      	movs	r1, #3
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f003 fa07 	bl	8017744 <icmp_dest_unreach>
      pbuf_free(p);
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f7f9 f864 	bl	800d404 <pbuf_free>
  return;
 801433c:	e003      	b.n	8014346 <udp_input+0x202>
    pbuf_free(p);
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f7f9 f860 	bl	800d404 <pbuf_free>
  return;
 8014344:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014346:	372c      	adds	r7, #44	; 0x2c
 8014348:	46bd      	mov	sp, r7
 801434a:	bd90      	pop	{r4, r7, pc}
 801434c:	0801d4cc 	.word	0x0801d4cc
 8014350:	0801d570 	.word	0x0801d570
 8014354:	0801d520 	.word	0x0801d520
 8014358:	0801d588 	.word	0x0801d588
 801435c:	2000d750 	.word	0x2000d750
 8014360:	20010f20 	.word	0x20010f20
 8014364:	0801d5a4 	.word	0x0801d5a4
 8014368:	2000d760 	.word	0x2000d760

0801436c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b088      	sub	sp, #32
 8014370:	af02      	add	r7, sp, #8
 8014372:	60f8      	str	r0, [r7, #12]
 8014374:	60b9      	str	r1, [r7, #8]
 8014376:	607a      	str	r2, [r7, #4]
 8014378:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d109      	bne.n	8014394 <udp_sendto_if+0x28>
 8014380:	4b2e      	ldr	r3, [pc, #184]	; (801443c <udp_sendto_if+0xd0>)
 8014382:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014386:	492e      	ldr	r1, [pc, #184]	; (8014440 <udp_sendto_if+0xd4>)
 8014388:	482e      	ldr	r0, [pc, #184]	; (8014444 <udp_sendto_if+0xd8>)
 801438a:	f004 ff6d 	bl	8019268 <iprintf>
 801438e:	f06f 030f 	mvn.w	r3, #15
 8014392:	e04f      	b.n	8014434 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d109      	bne.n	80143ae <udp_sendto_if+0x42>
 801439a:	4b28      	ldr	r3, [pc, #160]	; (801443c <udp_sendto_if+0xd0>)
 801439c:	f240 2281 	movw	r2, #641	; 0x281
 80143a0:	4929      	ldr	r1, [pc, #164]	; (8014448 <udp_sendto_if+0xdc>)
 80143a2:	4828      	ldr	r0, [pc, #160]	; (8014444 <udp_sendto_if+0xd8>)
 80143a4:	f004 ff60 	bl	8019268 <iprintf>
 80143a8:	f06f 030f 	mvn.w	r3, #15
 80143ac:	e042      	b.n	8014434 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d109      	bne.n	80143c8 <udp_sendto_if+0x5c>
 80143b4:	4b21      	ldr	r3, [pc, #132]	; (801443c <udp_sendto_if+0xd0>)
 80143b6:	f240 2282 	movw	r2, #642	; 0x282
 80143ba:	4924      	ldr	r1, [pc, #144]	; (801444c <udp_sendto_if+0xe0>)
 80143bc:	4821      	ldr	r0, [pc, #132]	; (8014444 <udp_sendto_if+0xd8>)
 80143be:	f004 ff53 	bl	8019268 <iprintf>
 80143c2:	f06f 030f 	mvn.w	r3, #15
 80143c6:	e035      	b.n	8014434 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80143c8:	6a3b      	ldr	r3, [r7, #32]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d109      	bne.n	80143e2 <udp_sendto_if+0x76>
 80143ce:	4b1b      	ldr	r3, [pc, #108]	; (801443c <udp_sendto_if+0xd0>)
 80143d0:	f240 2283 	movw	r2, #643	; 0x283
 80143d4:	491e      	ldr	r1, [pc, #120]	; (8014450 <udp_sendto_if+0xe4>)
 80143d6:	481b      	ldr	r0, [pc, #108]	; (8014444 <udp_sendto_if+0xd8>)
 80143d8:	f004 ff46 	bl	8019268 <iprintf>
 80143dc:	f06f 030f 	mvn.w	r3, #15
 80143e0:	e028      	b.n	8014434 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d009      	beq.n	80143fc <udp_sendto_if+0x90>
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d005      	beq.n	80143fc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80143f8:	2be0      	cmp	r3, #224	; 0xe0
 80143fa:	d103      	bne.n	8014404 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80143fc:	6a3b      	ldr	r3, [r7, #32]
 80143fe:	3304      	adds	r3, #4
 8014400:	617b      	str	r3, [r7, #20]
 8014402:	e00b      	b.n	801441c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	6a3b      	ldr	r3, [r7, #32]
 801440a:	3304      	adds	r3, #4
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	429a      	cmp	r2, r3
 8014410:	d002      	beq.n	8014418 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014412:	f06f 0303 	mvn.w	r3, #3
 8014416:	e00d      	b.n	8014434 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801441c:	887a      	ldrh	r2, [r7, #2]
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	9301      	str	r3, [sp, #4]
 8014422:	6a3b      	ldr	r3, [r7, #32]
 8014424:	9300      	str	r3, [sp, #0]
 8014426:	4613      	mov	r3, r2
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	68b9      	ldr	r1, [r7, #8]
 801442c:	68f8      	ldr	r0, [r7, #12]
 801442e:	f000 f811 	bl	8014454 <udp_sendto_if_src>
 8014432:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014434:	4618      	mov	r0, r3
 8014436:	3718      	adds	r7, #24
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}
 801443c:	0801d4cc 	.word	0x0801d4cc
 8014440:	0801d640 	.word	0x0801d640
 8014444:	0801d520 	.word	0x0801d520
 8014448:	0801d65c 	.word	0x0801d65c
 801444c:	0801d678 	.word	0x0801d678
 8014450:	0801d698 	.word	0x0801d698

08014454 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b08c      	sub	sp, #48	; 0x30
 8014458:	af04      	add	r7, sp, #16
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	607a      	str	r2, [r7, #4]
 8014460:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d109      	bne.n	801447c <udp_sendto_if_src+0x28>
 8014468:	4b65      	ldr	r3, [pc, #404]	; (8014600 <udp_sendto_if_src+0x1ac>)
 801446a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801446e:	4965      	ldr	r1, [pc, #404]	; (8014604 <udp_sendto_if_src+0x1b0>)
 8014470:	4865      	ldr	r0, [pc, #404]	; (8014608 <udp_sendto_if_src+0x1b4>)
 8014472:	f004 fef9 	bl	8019268 <iprintf>
 8014476:	f06f 030f 	mvn.w	r3, #15
 801447a:	e0bc      	b.n	80145f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d109      	bne.n	8014496 <udp_sendto_if_src+0x42>
 8014482:	4b5f      	ldr	r3, [pc, #380]	; (8014600 <udp_sendto_if_src+0x1ac>)
 8014484:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014488:	4960      	ldr	r1, [pc, #384]	; (801460c <udp_sendto_if_src+0x1b8>)
 801448a:	485f      	ldr	r0, [pc, #380]	; (8014608 <udp_sendto_if_src+0x1b4>)
 801448c:	f004 feec 	bl	8019268 <iprintf>
 8014490:	f06f 030f 	mvn.w	r3, #15
 8014494:	e0af      	b.n	80145f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d109      	bne.n	80144b0 <udp_sendto_if_src+0x5c>
 801449c:	4b58      	ldr	r3, [pc, #352]	; (8014600 <udp_sendto_if_src+0x1ac>)
 801449e:	f240 22d3 	movw	r2, #723	; 0x2d3
 80144a2:	495b      	ldr	r1, [pc, #364]	; (8014610 <udp_sendto_if_src+0x1bc>)
 80144a4:	4858      	ldr	r0, [pc, #352]	; (8014608 <udp_sendto_if_src+0x1b4>)
 80144a6:	f004 fedf 	bl	8019268 <iprintf>
 80144aa:	f06f 030f 	mvn.w	r3, #15
 80144ae:	e0a2      	b.n	80145f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80144b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d109      	bne.n	80144ca <udp_sendto_if_src+0x76>
 80144b6:	4b52      	ldr	r3, [pc, #328]	; (8014600 <udp_sendto_if_src+0x1ac>)
 80144b8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80144bc:	4955      	ldr	r1, [pc, #340]	; (8014614 <udp_sendto_if_src+0x1c0>)
 80144be:	4852      	ldr	r0, [pc, #328]	; (8014608 <udp_sendto_if_src+0x1b4>)
 80144c0:	f004 fed2 	bl	8019268 <iprintf>
 80144c4:	f06f 030f 	mvn.w	r3, #15
 80144c8:	e095      	b.n	80145f6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80144ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d109      	bne.n	80144e4 <udp_sendto_if_src+0x90>
 80144d0:	4b4b      	ldr	r3, [pc, #300]	; (8014600 <udp_sendto_if_src+0x1ac>)
 80144d2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80144d6:	4950      	ldr	r1, [pc, #320]	; (8014618 <udp_sendto_if_src+0x1c4>)
 80144d8:	484b      	ldr	r0, [pc, #300]	; (8014608 <udp_sendto_if_src+0x1b4>)
 80144da:	f004 fec5 	bl	8019268 <iprintf>
 80144de:	f06f 030f 	mvn.w	r3, #15
 80144e2:	e088      	b.n	80145f6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	8a5b      	ldrh	r3, [r3, #18]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d10f      	bne.n	801450c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80144ec:	68f9      	ldr	r1, [r7, #12]
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	8a5b      	ldrh	r3, [r3, #18]
 80144f2:	461a      	mov	r2, r3
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	f000 f893 	bl	8014620 <udp_bind>
 80144fa:	4603      	mov	r3, r0
 80144fc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80144fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d002      	beq.n	801450c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014506:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801450a:	e074      	b.n	80145f6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	891b      	ldrh	r3, [r3, #8]
 8014510:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014514:	4293      	cmp	r3, r2
 8014516:	d902      	bls.n	801451e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014518:	f04f 33ff 	mov.w	r3, #4294967295
 801451c:	e06b      	b.n	80145f6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801451e:	2108      	movs	r1, #8
 8014520:	68b8      	ldr	r0, [r7, #8]
 8014522:	f7f8 fed9 	bl	800d2d8 <pbuf_add_header>
 8014526:	4603      	mov	r3, r0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d015      	beq.n	8014558 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801452c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014530:	2108      	movs	r1, #8
 8014532:	2022      	movs	r0, #34	; 0x22
 8014534:	f7f8 fc82 	bl	800ce3c <pbuf_alloc>
 8014538:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801453a:	69fb      	ldr	r3, [r7, #28]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d102      	bne.n	8014546 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014540:	f04f 33ff 	mov.w	r3, #4294967295
 8014544:	e057      	b.n	80145f6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	891b      	ldrh	r3, [r3, #8]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d006      	beq.n	801455c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801454e:	68b9      	ldr	r1, [r7, #8]
 8014550:	69f8      	ldr	r0, [r7, #28]
 8014552:	f7f9 f87b 	bl	800d64c <pbuf_chain>
 8014556:	e001      	b.n	801455c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801455c:	69fb      	ldr	r3, [r7, #28]
 801455e:	895b      	ldrh	r3, [r3, #10]
 8014560:	2b07      	cmp	r3, #7
 8014562:	d806      	bhi.n	8014572 <udp_sendto_if_src+0x11e>
 8014564:	4b26      	ldr	r3, [pc, #152]	; (8014600 <udp_sendto_if_src+0x1ac>)
 8014566:	f240 320d 	movw	r2, #781	; 0x30d
 801456a:	492c      	ldr	r1, [pc, #176]	; (801461c <udp_sendto_if_src+0x1c8>)
 801456c:	4826      	ldr	r0, [pc, #152]	; (8014608 <udp_sendto_if_src+0x1b4>)
 801456e:	f004 fe7b 	bl	8019268 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014572:	69fb      	ldr	r3, [r7, #28]
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	8a5b      	ldrh	r3, [r3, #18]
 801457c:	4618      	mov	r0, r3
 801457e:	f7f7 fb0d 	bl	800bb9c <lwip_htons>
 8014582:	4603      	mov	r3, r0
 8014584:	461a      	mov	r2, r3
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801458a:	887b      	ldrh	r3, [r7, #2]
 801458c:	4618      	mov	r0, r3
 801458e:	f7f7 fb05 	bl	800bb9c <lwip_htons>
 8014592:	4603      	mov	r3, r0
 8014594:	461a      	mov	r2, r3
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	2200      	movs	r2, #0
 801459e:	719a      	strb	r2, [r3, #6]
 80145a0:	2200      	movs	r2, #0
 80145a2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80145a4:	69fb      	ldr	r3, [r7, #28]
 80145a6:	891b      	ldrh	r3, [r3, #8]
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7f7 faf7 	bl	800bb9c <lwip_htons>
 80145ae:	4603      	mov	r3, r0
 80145b0:	461a      	mov	r2, r3
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80145b6:	2311      	movs	r3, #17
 80145b8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	7adb      	ldrb	r3, [r3, #11]
 80145be:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	7a9b      	ldrb	r3, [r3, #10]
 80145c4:	7cb9      	ldrb	r1, [r7, #18]
 80145c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145c8:	9202      	str	r2, [sp, #8]
 80145ca:	7cfa      	ldrb	r2, [r7, #19]
 80145cc:	9201      	str	r2, [sp, #4]
 80145ce:	9300      	str	r3, [sp, #0]
 80145d0:	460b      	mov	r3, r1
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80145d6:	69f8      	ldr	r0, [r7, #28]
 80145d8:	f003 fb44 	bl	8017c64 <ip4_output_if_src>
 80145dc:	4603      	mov	r3, r0
 80145de:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80145e0:	69fa      	ldr	r2, [r7, #28]
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d004      	beq.n	80145f2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80145e8:	69f8      	ldr	r0, [r7, #28]
 80145ea:	f7f8 ff0b 	bl	800d404 <pbuf_free>
    q = NULL;
 80145ee:	2300      	movs	r3, #0
 80145f0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80145f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3720      	adds	r7, #32
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	0801d4cc 	.word	0x0801d4cc
 8014604:	0801d6b8 	.word	0x0801d6b8
 8014608:	0801d520 	.word	0x0801d520
 801460c:	0801d6d8 	.word	0x0801d6d8
 8014610:	0801d6f8 	.word	0x0801d6f8
 8014614:	0801d71c 	.word	0x0801d71c
 8014618:	0801d740 	.word	0x0801d740
 801461c:	0801d764 	.word	0x0801d764

08014620 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b086      	sub	sp, #24
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	4613      	mov	r3, r2
 801462c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d101      	bne.n	8014638 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014634:	4b39      	ldr	r3, [pc, #228]	; (801471c <udp_bind+0xfc>)
 8014636:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d109      	bne.n	8014652 <udp_bind+0x32>
 801463e:	4b38      	ldr	r3, [pc, #224]	; (8014720 <udp_bind+0x100>)
 8014640:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014644:	4937      	ldr	r1, [pc, #220]	; (8014724 <udp_bind+0x104>)
 8014646:	4838      	ldr	r0, [pc, #224]	; (8014728 <udp_bind+0x108>)
 8014648:	f004 fe0e 	bl	8019268 <iprintf>
 801464c:	f06f 030f 	mvn.w	r3, #15
 8014650:	e060      	b.n	8014714 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014652:	2300      	movs	r3, #0
 8014654:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014656:	4b35      	ldr	r3, [pc, #212]	; (801472c <udp_bind+0x10c>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	617b      	str	r3, [r7, #20]
 801465c:	e009      	b.n	8014672 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801465e:	68fa      	ldr	r2, [r7, #12]
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	429a      	cmp	r2, r3
 8014664:	d102      	bne.n	801466c <udp_bind+0x4c>
      rebind = 1;
 8014666:	2301      	movs	r3, #1
 8014668:	74fb      	strb	r3, [r7, #19]
      break;
 801466a:	e005      	b.n	8014678 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	617b      	str	r3, [r7, #20]
 8014672:	697b      	ldr	r3, [r7, #20]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d1f2      	bne.n	801465e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014678:	88fb      	ldrh	r3, [r7, #6]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d109      	bne.n	8014692 <udp_bind+0x72>
    port = udp_new_port();
 801467e:	f7ff fcc5 	bl	801400c <udp_new_port>
 8014682:	4603      	mov	r3, r0
 8014684:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014686:	88fb      	ldrh	r3, [r7, #6]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d12c      	bne.n	80146e6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801468c:	f06f 0307 	mvn.w	r3, #7
 8014690:	e040      	b.n	8014714 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014692:	4b26      	ldr	r3, [pc, #152]	; (801472c <udp_bind+0x10c>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	617b      	str	r3, [r7, #20]
 8014698:	e022      	b.n	80146e0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801469a:	68fa      	ldr	r2, [r7, #12]
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d01b      	beq.n	80146da <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	8a5b      	ldrh	r3, [r3, #18]
 80146a6:	88fa      	ldrh	r2, [r7, #6]
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d116      	bne.n	80146da <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	681a      	ldr	r2, [r3, #0]
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d00d      	beq.n	80146d4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d00a      	beq.n	80146d4 <udp_bind+0xb4>
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d006      	beq.n	80146d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80146c6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d003      	beq.n	80146d4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d102      	bne.n	80146da <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80146d4:	f06f 0307 	mvn.w	r3, #7
 80146d8:	e01c      	b.n	8014714 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	68db      	ldr	r3, [r3, #12]
 80146de:	617b      	str	r3, [r7, #20]
 80146e0:	697b      	ldr	r3, [r7, #20]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d1d9      	bne.n	801469a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d002      	beq.n	80146f2 <udp_bind+0xd2>
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	e000      	b.n	80146f4 <udp_bind+0xd4>
 80146f2:	2300      	movs	r3, #0
 80146f4:	68fa      	ldr	r2, [r7, #12]
 80146f6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	88fa      	ldrh	r2, [r7, #6]
 80146fc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80146fe:	7cfb      	ldrb	r3, [r7, #19]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d106      	bne.n	8014712 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014704:	4b09      	ldr	r3, [pc, #36]	; (801472c <udp_bind+0x10c>)
 8014706:	681a      	ldr	r2, [r3, #0]
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801470c:	4a07      	ldr	r2, [pc, #28]	; (801472c <udp_bind+0x10c>)
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014712:	2300      	movs	r3, #0
}
 8014714:	4618      	mov	r0, r3
 8014716:	3718      	adds	r7, #24
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}
 801471c:	08028514 	.word	0x08028514
 8014720:	0801d4cc 	.word	0x0801d4cc
 8014724:	0801d794 	.word	0x0801d794
 8014728:	0801d520 	.word	0x0801d520
 801472c:	20010f20 	.word	0x20010f20

08014730 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b086      	sub	sp, #24
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	4613      	mov	r3, r2
 801473c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d109      	bne.n	8014758 <udp_connect+0x28>
 8014744:	4b2c      	ldr	r3, [pc, #176]	; (80147f8 <udp_connect+0xc8>)
 8014746:	f240 4235 	movw	r2, #1077	; 0x435
 801474a:	492c      	ldr	r1, [pc, #176]	; (80147fc <udp_connect+0xcc>)
 801474c:	482c      	ldr	r0, [pc, #176]	; (8014800 <udp_connect+0xd0>)
 801474e:	f004 fd8b 	bl	8019268 <iprintf>
 8014752:	f06f 030f 	mvn.w	r3, #15
 8014756:	e04b      	b.n	80147f0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d109      	bne.n	8014772 <udp_connect+0x42>
 801475e:	4b26      	ldr	r3, [pc, #152]	; (80147f8 <udp_connect+0xc8>)
 8014760:	f240 4236 	movw	r2, #1078	; 0x436
 8014764:	4927      	ldr	r1, [pc, #156]	; (8014804 <udp_connect+0xd4>)
 8014766:	4826      	ldr	r0, [pc, #152]	; (8014800 <udp_connect+0xd0>)
 8014768:	f004 fd7e 	bl	8019268 <iprintf>
 801476c:	f06f 030f 	mvn.w	r3, #15
 8014770:	e03e      	b.n	80147f0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	8a5b      	ldrh	r3, [r3, #18]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d10f      	bne.n	801479a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801477a:	68f9      	ldr	r1, [r7, #12]
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	8a5b      	ldrh	r3, [r3, #18]
 8014780:	461a      	mov	r2, r3
 8014782:	68f8      	ldr	r0, [r7, #12]
 8014784:	f7ff ff4c 	bl	8014620 <udp_bind>
 8014788:	4603      	mov	r3, r0
 801478a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801478c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d002      	beq.n	801479a <udp_connect+0x6a>
      return err;
 8014794:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014798:	e02a      	b.n	80147f0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d002      	beq.n	80147a6 <udp_connect+0x76>
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	e000      	b.n	80147a8 <udp_connect+0x78>
 80147a6:	2300      	movs	r3, #0
 80147a8:	68fa      	ldr	r2, [r7, #12]
 80147aa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	88fa      	ldrh	r2, [r7, #6]
 80147b0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	7c1b      	ldrb	r3, [r3, #16]
 80147b6:	f043 0304 	orr.w	r3, r3, #4
 80147ba:	b2da      	uxtb	r2, r3
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80147c0:	4b11      	ldr	r3, [pc, #68]	; (8014808 <udp_connect+0xd8>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	617b      	str	r3, [r7, #20]
 80147c6:	e008      	b.n	80147da <udp_connect+0xaa>
    if (pcb == ipcb) {
 80147c8:	68fa      	ldr	r2, [r7, #12]
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d101      	bne.n	80147d4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80147d0:	2300      	movs	r3, #0
 80147d2:	e00d      	b.n	80147f0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	617b      	str	r3, [r7, #20]
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d1f3      	bne.n	80147c8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80147e0:	4b09      	ldr	r3, [pc, #36]	; (8014808 <udp_connect+0xd8>)
 80147e2:	681a      	ldr	r2, [r3, #0]
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80147e8:	4a07      	ldr	r2, [pc, #28]	; (8014808 <udp_connect+0xd8>)
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80147ee:	2300      	movs	r3, #0
}
 80147f0:	4618      	mov	r0, r3
 80147f2:	3718      	adds	r7, #24
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}
 80147f8:	0801d4cc 	.word	0x0801d4cc
 80147fc:	0801d7ac 	.word	0x0801d7ac
 8014800:	0801d520 	.word	0x0801d520
 8014804:	0801d7c8 	.word	0x0801d7c8
 8014808:	20010f20 	.word	0x20010f20

0801480c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b084      	sub	sp, #16
 8014810:	af00      	add	r7, sp, #0
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d107      	bne.n	801482e <udp_recv+0x22>
 801481e:	4b08      	ldr	r3, [pc, #32]	; (8014840 <udp_recv+0x34>)
 8014820:	f240 428a 	movw	r2, #1162	; 0x48a
 8014824:	4907      	ldr	r1, [pc, #28]	; (8014844 <udp_recv+0x38>)
 8014826:	4808      	ldr	r0, [pc, #32]	; (8014848 <udp_recv+0x3c>)
 8014828:	f004 fd1e 	bl	8019268 <iprintf>
 801482c:	e005      	b.n	801483a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	61da      	str	r2, [r3, #28]
}
 801483a:	3710      	adds	r7, #16
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	0801d4cc 	.word	0x0801d4cc
 8014844:	0801d800 	.word	0x0801d800
 8014848:	0801d520 	.word	0x0801d520

0801484c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d107      	bne.n	801486a <udp_remove+0x1e>
 801485a:	4b19      	ldr	r3, [pc, #100]	; (80148c0 <udp_remove+0x74>)
 801485c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014860:	4918      	ldr	r1, [pc, #96]	; (80148c4 <udp_remove+0x78>)
 8014862:	4819      	ldr	r0, [pc, #100]	; (80148c8 <udp_remove+0x7c>)
 8014864:	f004 fd00 	bl	8019268 <iprintf>
 8014868:	e026      	b.n	80148b8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801486a:	4b18      	ldr	r3, [pc, #96]	; (80148cc <udp_remove+0x80>)
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	429a      	cmp	r2, r3
 8014872:	d105      	bne.n	8014880 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014874:	4b15      	ldr	r3, [pc, #84]	; (80148cc <udp_remove+0x80>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	68db      	ldr	r3, [r3, #12]
 801487a:	4a14      	ldr	r2, [pc, #80]	; (80148cc <udp_remove+0x80>)
 801487c:	6013      	str	r3, [r2, #0]
 801487e:	e017      	b.n	80148b0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014880:	4b12      	ldr	r3, [pc, #72]	; (80148cc <udp_remove+0x80>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	60fb      	str	r3, [r7, #12]
 8014886:	e010      	b.n	80148aa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d009      	beq.n	80148a4 <udp_remove+0x58>
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	687a      	ldr	r2, [r7, #4]
 8014896:	429a      	cmp	r2, r3
 8014898:	d104      	bne.n	80148a4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	68da      	ldr	r2, [r3, #12]
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	60da      	str	r2, [r3, #12]
        break;
 80148a2:	e005      	b.n	80148b0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	68db      	ldr	r3, [r3, #12]
 80148a8:	60fb      	str	r3, [r7, #12]
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d1eb      	bne.n	8014888 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80148b0:	6879      	ldr	r1, [r7, #4]
 80148b2:	2000      	movs	r0, #0
 80148b4:	f7f7 fef6 	bl	800c6a4 <memp_free>
}
 80148b8:	3710      	adds	r7, #16
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	0801d4cc 	.word	0x0801d4cc
 80148c4:	0801d818 	.word	0x0801d818
 80148c8:	0801d520 	.word	0x0801d520
 80148cc:	20010f20 	.word	0x20010f20

080148d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b082      	sub	sp, #8
 80148d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80148d6:	2000      	movs	r0, #0
 80148d8:	f7f7 fe6e 	bl	800c5b8 <memp_malloc>
 80148dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d007      	beq.n	80148f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80148e4:	2220      	movs	r2, #32
 80148e6:	2100      	movs	r1, #0
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f004 fd5c 	bl	80193a6 <memset>
    pcb->ttl = UDP_TTL;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	22ff      	movs	r2, #255	; 0xff
 80148f2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80148f4:	687b      	ldr	r3, [r7, #4]
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3708      	adds	r7, #8
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}

080148fe <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80148fe:	b580      	push	{r7, lr}
 8014900:	b084      	sub	sp, #16
 8014902:	af00      	add	r7, sp, #0
 8014904:	4603      	mov	r3, r0
 8014906:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014908:	f7ff ffe2 	bl	80148d0 <udp_new>
 801490c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801490e:	68fb      	ldr	r3, [r7, #12]
}
 8014910:	4618      	mov	r0, r3
 8014912:	3710      	adds	r7, #16
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014918:	b480      	push	{r7}
 801491a:	b085      	sub	sp, #20
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d01e      	beq.n	8014966 <udp_netif_ip_addr_changed+0x4e>
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d01a      	beq.n	8014966 <udp_netif_ip_addr_changed+0x4e>
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d017      	beq.n	8014966 <udp_netif_ip_addr_changed+0x4e>
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d013      	beq.n	8014966 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801493e:	4b0d      	ldr	r3, [pc, #52]	; (8014974 <udp_netif_ip_addr_changed+0x5c>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	60fb      	str	r3, [r7, #12]
 8014944:	e00c      	b.n	8014960 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	681a      	ldr	r2, [r3, #0]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	429a      	cmp	r2, r3
 8014950:	d103      	bne.n	801495a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	68db      	ldr	r3, [r3, #12]
 801495e:	60fb      	str	r3, [r7, #12]
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d1ef      	bne.n	8014946 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014966:	bf00      	nop
 8014968:	3714      	adds	r7, #20
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr
 8014972:	bf00      	nop
 8014974:	20010f20 	.word	0x20010f20

08014978 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801497c:	4b20      	ldr	r3, [pc, #128]	; (8014a00 <dhcp_inc_pcb_refcount+0x88>)
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d133      	bne.n	80149ec <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014984:	4b1f      	ldr	r3, [pc, #124]	; (8014a04 <dhcp_inc_pcb_refcount+0x8c>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d005      	beq.n	8014998 <dhcp_inc_pcb_refcount+0x20>
 801498c:	4b1e      	ldr	r3, [pc, #120]	; (8014a08 <dhcp_inc_pcb_refcount+0x90>)
 801498e:	22e5      	movs	r2, #229	; 0xe5
 8014990:	491e      	ldr	r1, [pc, #120]	; (8014a0c <dhcp_inc_pcb_refcount+0x94>)
 8014992:	481f      	ldr	r0, [pc, #124]	; (8014a10 <dhcp_inc_pcb_refcount+0x98>)
 8014994:	f004 fc68 	bl	8019268 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014998:	f7ff ff9a 	bl	80148d0 <udp_new>
 801499c:	4603      	mov	r3, r0
 801499e:	4a19      	ldr	r2, [pc, #100]	; (8014a04 <dhcp_inc_pcb_refcount+0x8c>)
 80149a0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80149a2:	4b18      	ldr	r3, [pc, #96]	; (8014a04 <dhcp_inc_pcb_refcount+0x8c>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d102      	bne.n	80149b0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80149aa:	f04f 33ff 	mov.w	r3, #4294967295
 80149ae:	e024      	b.n	80149fa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80149b0:	4b14      	ldr	r3, [pc, #80]	; (8014a04 <dhcp_inc_pcb_refcount+0x8c>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	7a5a      	ldrb	r2, [r3, #9]
 80149b6:	4b13      	ldr	r3, [pc, #76]	; (8014a04 <dhcp_inc_pcb_refcount+0x8c>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	f042 0220 	orr.w	r2, r2, #32
 80149be:	b2d2      	uxtb	r2, r2
 80149c0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80149c2:	4b10      	ldr	r3, [pc, #64]	; (8014a04 <dhcp_inc_pcb_refcount+0x8c>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	2244      	movs	r2, #68	; 0x44
 80149c8:	4912      	ldr	r1, [pc, #72]	; (8014a14 <dhcp_inc_pcb_refcount+0x9c>)
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7ff fe28 	bl	8014620 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80149d0:	4b0c      	ldr	r3, [pc, #48]	; (8014a04 <dhcp_inc_pcb_refcount+0x8c>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	2243      	movs	r2, #67	; 0x43
 80149d6:	490f      	ldr	r1, [pc, #60]	; (8014a14 <dhcp_inc_pcb_refcount+0x9c>)
 80149d8:	4618      	mov	r0, r3
 80149da:	f7ff fea9 	bl	8014730 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80149de:	4b09      	ldr	r3, [pc, #36]	; (8014a04 <dhcp_inc_pcb_refcount+0x8c>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	2200      	movs	r2, #0
 80149e4:	490c      	ldr	r1, [pc, #48]	; (8014a18 <dhcp_inc_pcb_refcount+0xa0>)
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7ff ff10 	bl	801480c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80149ec:	4b04      	ldr	r3, [pc, #16]	; (8014a00 <dhcp_inc_pcb_refcount+0x88>)
 80149ee:	781b      	ldrb	r3, [r3, #0]
 80149f0:	3301      	adds	r3, #1
 80149f2:	b2da      	uxtb	r2, r3
 80149f4:	4b02      	ldr	r3, [pc, #8]	; (8014a00 <dhcp_inc_pcb_refcount+0x88>)
 80149f6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80149f8:	2300      	movs	r3, #0
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	bd80      	pop	{r7, pc}
 80149fe:	bf00      	nop
 8014a00:	20010f50 	.word	0x20010f50
 8014a04:	20010f4c 	.word	0x20010f4c
 8014a08:	0801d830 	.word	0x0801d830
 8014a0c:	0801d868 	.word	0x0801d868
 8014a10:	0801d890 	.word	0x0801d890
 8014a14:	08028514 	.word	0x08028514
 8014a18:	080162ad 	.word	0x080162ad

08014a1c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014a20:	4b0e      	ldr	r3, [pc, #56]	; (8014a5c <dhcp_dec_pcb_refcount+0x40>)
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d105      	bne.n	8014a34 <dhcp_dec_pcb_refcount+0x18>
 8014a28:	4b0d      	ldr	r3, [pc, #52]	; (8014a60 <dhcp_dec_pcb_refcount+0x44>)
 8014a2a:	22ff      	movs	r2, #255	; 0xff
 8014a2c:	490d      	ldr	r1, [pc, #52]	; (8014a64 <dhcp_dec_pcb_refcount+0x48>)
 8014a2e:	480e      	ldr	r0, [pc, #56]	; (8014a68 <dhcp_dec_pcb_refcount+0x4c>)
 8014a30:	f004 fc1a 	bl	8019268 <iprintf>
  dhcp_pcb_refcount--;
 8014a34:	4b09      	ldr	r3, [pc, #36]	; (8014a5c <dhcp_dec_pcb_refcount+0x40>)
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	3b01      	subs	r3, #1
 8014a3a:	b2da      	uxtb	r2, r3
 8014a3c:	4b07      	ldr	r3, [pc, #28]	; (8014a5c <dhcp_dec_pcb_refcount+0x40>)
 8014a3e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014a40:	4b06      	ldr	r3, [pc, #24]	; (8014a5c <dhcp_dec_pcb_refcount+0x40>)
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d107      	bne.n	8014a58 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014a48:	4b08      	ldr	r3, [pc, #32]	; (8014a6c <dhcp_dec_pcb_refcount+0x50>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff fefd 	bl	801484c <udp_remove>
    dhcp_pcb = NULL;
 8014a52:	4b06      	ldr	r3, [pc, #24]	; (8014a6c <dhcp_dec_pcb_refcount+0x50>)
 8014a54:	2200      	movs	r2, #0
 8014a56:	601a      	str	r2, [r3, #0]
  }
}
 8014a58:	bf00      	nop
 8014a5a:	bd80      	pop	{r7, pc}
 8014a5c:	20010f50 	.word	0x20010f50
 8014a60:	0801d830 	.word	0x0801d830
 8014a64:	0801d8b8 	.word	0x0801d8b8
 8014a68:	0801d890 	.word	0x0801d890
 8014a6c:	20010f4c 	.word	0x20010f4c

08014a70 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b084      	sub	sp, #16
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a7c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014a7e:	210c      	movs	r1, #12
 8014a80:	68f8      	ldr	r0, [r7, #12]
 8014a82:	f001 f855 	bl	8015b30 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014a86:	4b06      	ldr	r3, [pc, #24]	; (8014aa0 <dhcp_handle_nak+0x30>)
 8014a88:	4a05      	ldr	r2, [pc, #20]	; (8014aa0 <dhcp_handle_nak+0x30>)
 8014a8a:	4905      	ldr	r1, [pc, #20]	; (8014aa0 <dhcp_handle_nak+0x30>)
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f7f7 ffab 	bl	800c9e8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 fc48 	bl	8015328 <dhcp_discover>
}
 8014a98:	bf00      	nop
 8014a9a:	3710      	adds	r7, #16
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	08028514 	.word	0x08028514

08014aa4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ab0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014ab2:	2108      	movs	r1, #8
 8014ab4:	68f8      	ldr	r0, [r7, #12]
 8014ab6:	f001 f83b 	bl	8015b30 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	331c      	adds	r3, #28
 8014abe:	2200      	movs	r2, #0
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f002 fb3c 	bl	8017140 <etharp_query>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	799b      	ldrb	r3, [r3, #6]
 8014ad0:	2bff      	cmp	r3, #255	; 0xff
 8014ad2:	d005      	beq.n	8014ae0 <dhcp_check+0x3c>
    dhcp->tries++;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	799b      	ldrb	r3, [r3, #6]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	b2da      	uxtb	r2, r3
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014ae0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014ae4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014ae6:	893b      	ldrh	r3, [r7, #8]
 8014ae8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014aec:	4a06      	ldr	r2, [pc, #24]	; (8014b08 <dhcp_check+0x64>)
 8014aee:	fb82 1203 	smull	r1, r2, r2, r3
 8014af2:	1152      	asrs	r2, r2, #5
 8014af4:	17db      	asrs	r3, r3, #31
 8014af6:	1ad3      	subs	r3, r2, r3
 8014af8:	b29a      	uxth	r2, r3
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014afe:	bf00      	nop
 8014b00:	3710      	adds	r7, #16
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	10624dd3 	.word	0x10624dd3

08014b0c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b1a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014b1c:	4b0c      	ldr	r3, [pc, #48]	; (8014b50 <dhcp_handle_offer+0x44>)
 8014b1e:	789b      	ldrb	r3, [r3, #2]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d011      	beq.n	8014b48 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	2200      	movs	r2, #0
 8014b28:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014b2a:	4b0a      	ldr	r3, [pc, #40]	; (8014b54 <dhcp_handle_offer+0x48>)
 8014b2c:	689b      	ldr	r3, [r3, #8]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7f7 f849 	bl	800bbc6 <lwip_htonl>
 8014b34:	4602      	mov	r2, r0
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	691a      	ldr	r2, [r3, #16]
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 f808 	bl	8014b58 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014b48:	bf00      	nop
 8014b4a:	3710      	adds	r7, #16
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bd80      	pop	{r7, pc}
 8014b50:	20010f44 	.word	0x20010f44
 8014b54:	20010f24 	.word	0x20010f24

08014b58 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014b58:	b5b0      	push	{r4, r5, r7, lr}
 8014b5a:	b08a      	sub	sp, #40	; 0x28
 8014b5c:	af02      	add	r7, sp, #8
 8014b5e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d109      	bne.n	8014b7a <dhcp_select+0x22>
 8014b66:	4b71      	ldr	r3, [pc, #452]	; (8014d2c <dhcp_select+0x1d4>)
 8014b68:	f240 1277 	movw	r2, #375	; 0x177
 8014b6c:	4970      	ldr	r1, [pc, #448]	; (8014d30 <dhcp_select+0x1d8>)
 8014b6e:	4871      	ldr	r0, [pc, #452]	; (8014d34 <dhcp_select+0x1dc>)
 8014b70:	f004 fb7a 	bl	8019268 <iprintf>
 8014b74:	f06f 030f 	mvn.w	r3, #15
 8014b78:	e0d3      	b.n	8014d22 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b7e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014b80:	69bb      	ldr	r3, [r7, #24]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d109      	bne.n	8014b9a <dhcp_select+0x42>
 8014b86:	4b69      	ldr	r3, [pc, #420]	; (8014d2c <dhcp_select+0x1d4>)
 8014b88:	f240 1279 	movw	r2, #377	; 0x179
 8014b8c:	496a      	ldr	r1, [pc, #424]	; (8014d38 <dhcp_select+0x1e0>)
 8014b8e:	4869      	ldr	r0, [pc, #420]	; (8014d34 <dhcp_select+0x1dc>)
 8014b90:	f004 fb6a 	bl	8019268 <iprintf>
 8014b94:	f06f 0305 	mvn.w	r3, #5
 8014b98:	e0c3      	b.n	8014d22 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014b9a:	2101      	movs	r1, #1
 8014b9c:	69b8      	ldr	r0, [r7, #24]
 8014b9e:	f000 ffc7 	bl	8015b30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014ba2:	f107 030c 	add.w	r3, r7, #12
 8014ba6:	2203      	movs	r2, #3
 8014ba8:	69b9      	ldr	r1, [r7, #24]
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f001 fc4c 	bl	8016448 <dhcp_create_msg>
 8014bb0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	f000 8085 	beq.w	8014cc4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014bc0:	89b8      	ldrh	r0, [r7, #12]
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014bc8:	2302      	movs	r3, #2
 8014bca:	2239      	movs	r2, #57	; 0x39
 8014bcc:	f000 ffca 	bl	8015b64 <dhcp_option>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014bd4:	89b8      	ldrh	r0, [r7, #12]
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014be0:	461a      	mov	r2, r3
 8014be2:	f001 f819 	bl	8015c18 <dhcp_option_short>
 8014be6:	4603      	mov	r3, r0
 8014be8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014bea:	89b8      	ldrh	r0, [r7, #12]
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014bf2:	2304      	movs	r3, #4
 8014bf4:	2232      	movs	r2, #50	; 0x32
 8014bf6:	f000 ffb5 	bl	8015b64 <dhcp_option>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014bfe:	89bc      	ldrh	r4, [r7, #12]
 8014c00:	693b      	ldr	r3, [r7, #16]
 8014c02:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014c06:	69bb      	ldr	r3, [r7, #24]
 8014c08:	69db      	ldr	r3, [r3, #28]
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7f6 ffdb 	bl	800bbc6 <lwip_htonl>
 8014c10:	4603      	mov	r3, r0
 8014c12:	461a      	mov	r2, r3
 8014c14:	4629      	mov	r1, r5
 8014c16:	4620      	mov	r0, r4
 8014c18:	f001 f830 	bl	8015c7c <dhcp_option_long>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014c20:	89b8      	ldrh	r0, [r7, #12]
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c28:	2304      	movs	r3, #4
 8014c2a:	2236      	movs	r2, #54	; 0x36
 8014c2c:	f000 ff9a 	bl	8015b64 <dhcp_option>
 8014c30:	4603      	mov	r3, r0
 8014c32:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014c34:	89bc      	ldrh	r4, [r7, #12]
 8014c36:	693b      	ldr	r3, [r7, #16]
 8014c38:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	699b      	ldr	r3, [r3, #24]
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7f6 ffc0 	bl	800bbc6 <lwip_htonl>
 8014c46:	4603      	mov	r3, r0
 8014c48:	461a      	mov	r2, r3
 8014c4a:	4629      	mov	r1, r5
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	f001 f815 	bl	8015c7c <dhcp_option_long>
 8014c52:	4603      	mov	r3, r0
 8014c54:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014c56:	89b8      	ldrh	r0, [r7, #12]
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c5e:	2303      	movs	r3, #3
 8014c60:	2237      	movs	r2, #55	; 0x37
 8014c62:	f000 ff7f 	bl	8015b64 <dhcp_option>
 8014c66:	4603      	mov	r3, r0
 8014c68:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	77bb      	strb	r3, [r7, #30]
 8014c6e:	e00e      	b.n	8014c8e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014c70:	89b8      	ldrh	r0, [r7, #12]
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c78:	7fbb      	ldrb	r3, [r7, #30]
 8014c7a:	4a30      	ldr	r2, [pc, #192]	; (8014d3c <dhcp_select+0x1e4>)
 8014c7c:	5cd3      	ldrb	r3, [r2, r3]
 8014c7e:	461a      	mov	r2, r3
 8014c80:	f000 ffa4 	bl	8015bcc <dhcp_option_byte>
 8014c84:	4603      	mov	r3, r0
 8014c86:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014c88:	7fbb      	ldrb	r3, [r7, #30]
 8014c8a:	3301      	adds	r3, #1
 8014c8c:	77bb      	strb	r3, [r7, #30]
 8014c8e:	7fbb      	ldrb	r3, [r7, #30]
 8014c90:	2b02      	cmp	r3, #2
 8014c92:	d9ed      	bls.n	8014c70 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014c94:	89b8      	ldrh	r0, [r7, #12]
 8014c96:	693b      	ldr	r3, [r7, #16]
 8014c98:	33f0      	adds	r3, #240	; 0xf0
 8014c9a:	697a      	ldr	r2, [r7, #20]
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	f001 fca9 	bl	80165f4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014ca2:	4b27      	ldr	r3, [pc, #156]	; (8014d40 <dhcp_select+0x1e8>)
 8014ca4:	6818      	ldr	r0, [r3, #0]
 8014ca6:	4b27      	ldr	r3, [pc, #156]	; (8014d44 <dhcp_select+0x1ec>)
 8014ca8:	9301      	str	r3, [sp, #4]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	9300      	str	r3, [sp, #0]
 8014cae:	2343      	movs	r3, #67	; 0x43
 8014cb0:	4a25      	ldr	r2, [pc, #148]	; (8014d48 <dhcp_select+0x1f0>)
 8014cb2:	6979      	ldr	r1, [r7, #20]
 8014cb4:	f7ff fbce 	bl	8014454 <udp_sendto_if_src>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014cbc:	6978      	ldr	r0, [r7, #20]
 8014cbe:	f7f8 fba1 	bl	800d404 <pbuf_free>
 8014cc2:	e001      	b.n	8014cc8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014cc4:	23ff      	movs	r3, #255	; 0xff
 8014cc6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	799b      	ldrb	r3, [r3, #6]
 8014ccc:	2bff      	cmp	r3, #255	; 0xff
 8014cce:	d005      	beq.n	8014cdc <dhcp_select+0x184>
    dhcp->tries++;
 8014cd0:	69bb      	ldr	r3, [r7, #24]
 8014cd2:	799b      	ldrb	r3, [r3, #6]
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	b2da      	uxtb	r2, r3
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014cdc:	69bb      	ldr	r3, [r7, #24]
 8014cde:	799b      	ldrb	r3, [r3, #6]
 8014ce0:	2b05      	cmp	r3, #5
 8014ce2:	d80d      	bhi.n	8014d00 <dhcp_select+0x1a8>
 8014ce4:	69bb      	ldr	r3, [r7, #24]
 8014ce6:	799b      	ldrb	r3, [r3, #6]
 8014ce8:	461a      	mov	r2, r3
 8014cea:	2301      	movs	r3, #1
 8014cec:	4093      	lsls	r3, r2
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	0152      	lsls	r2, r2, #5
 8014cf4:	1ad2      	subs	r2, r2, r3
 8014cf6:	0092      	lsls	r2, r2, #2
 8014cf8:	4413      	add	r3, r2
 8014cfa:	00db      	lsls	r3, r3, #3
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	e001      	b.n	8014d04 <dhcp_select+0x1ac>
 8014d00:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014d04:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d06:	89fb      	ldrh	r3, [r7, #14]
 8014d08:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014d0c:	4a0f      	ldr	r2, [pc, #60]	; (8014d4c <dhcp_select+0x1f4>)
 8014d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8014d12:	1152      	asrs	r2, r2, #5
 8014d14:	17db      	asrs	r3, r3, #31
 8014d16:	1ad3      	subs	r3, r2, r3
 8014d18:	b29a      	uxth	r2, r3
 8014d1a:	69bb      	ldr	r3, [r7, #24]
 8014d1c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014d1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3720      	adds	r7, #32
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bdb0      	pop	{r4, r5, r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	0801d830 	.word	0x0801d830
 8014d30:	0801d8dc 	.word	0x0801d8dc
 8014d34:	0801d890 	.word	0x0801d890
 8014d38:	0801d8f8 	.word	0x0801d8f8
 8014d3c:	20000030 	.word	0x20000030
 8014d40:	20010f4c 	.word	0x20010f4c
 8014d44:	08028514 	.word	0x08028514
 8014d48:	08028518 	.word	0x08028518
 8014d4c:	10624dd3 	.word	0x10624dd3

08014d50 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014d56:	4b27      	ldr	r3, [pc, #156]	; (8014df4 <dhcp_coarse_tmr+0xa4>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	607b      	str	r3, [r7, #4]
 8014d5c:	e042      	b.n	8014de4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d62:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d039      	beq.n	8014dde <dhcp_coarse_tmr+0x8e>
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	795b      	ldrb	r3, [r3, #5]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d035      	beq.n	8014dde <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	8a9b      	ldrh	r3, [r3, #20]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d012      	beq.n	8014da0 <dhcp_coarse_tmr+0x50>
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	8a5b      	ldrh	r3, [r3, #18]
 8014d7e:	3301      	adds	r3, #1
 8014d80:	b29a      	uxth	r2, r3
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	825a      	strh	r2, [r3, #18]
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	8a5a      	ldrh	r2, [r3, #18]
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	8a9b      	ldrh	r3, [r3, #20]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d106      	bne.n	8014da0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014d92:	6878      	ldr	r0, [r7, #4]
 8014d94:	f000 fe32 	bl	80159fc <dhcp_release_and_stop>
        dhcp_start(netif);
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f000 f969 	bl	8015070 <dhcp_start>
 8014d9e:	e01e      	b.n	8014dde <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	8a1b      	ldrh	r3, [r3, #16]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d00b      	beq.n	8014dc0 <dhcp_coarse_tmr+0x70>
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	8a1b      	ldrh	r3, [r3, #16]
 8014dac:	1e5a      	subs	r2, r3, #1
 8014dae:	b291      	uxth	r1, r2
 8014db0:	683a      	ldr	r2, [r7, #0]
 8014db2:	8211      	strh	r1, [r2, #16]
 8014db4:	2b01      	cmp	r3, #1
 8014db6:	d103      	bne.n	8014dc0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f000 f8c6 	bl	8014f4a <dhcp_t2_timeout>
 8014dbe:	e00e      	b.n	8014dde <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	89db      	ldrh	r3, [r3, #14]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d00a      	beq.n	8014dde <dhcp_coarse_tmr+0x8e>
 8014dc8:	683b      	ldr	r3, [r7, #0]
 8014dca:	89db      	ldrh	r3, [r3, #14]
 8014dcc:	1e5a      	subs	r2, r3, #1
 8014dce:	b291      	uxth	r1, r2
 8014dd0:	683a      	ldr	r2, [r7, #0]
 8014dd2:	81d1      	strh	r1, [r2, #14]
 8014dd4:	2b01      	cmp	r3, #1
 8014dd6:	d102      	bne.n	8014dde <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f000 f888 	bl	8014eee <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	607b      	str	r3, [r7, #4]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d1b9      	bne.n	8014d5e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014dea:	bf00      	nop
 8014dec:	bf00      	nop
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}
 8014df4:	20010eb8 	.word	0x20010eb8

08014df8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014dfe:	4b16      	ldr	r3, [pc, #88]	; (8014e58 <dhcp_fine_tmr+0x60>)
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	607b      	str	r3, [r7, #4]
 8014e04:	e020      	b.n	8014e48 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e0a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d017      	beq.n	8014e42 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014e12:	683b      	ldr	r3, [r7, #0]
 8014e14:	891b      	ldrh	r3, [r3, #8]
 8014e16:	2b01      	cmp	r3, #1
 8014e18:	d906      	bls.n	8014e28 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	891b      	ldrh	r3, [r3, #8]
 8014e1e:	3b01      	subs	r3, #1
 8014e20:	b29a      	uxth	r2, r3
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	811a      	strh	r2, [r3, #8]
 8014e26:	e00c      	b.n	8014e42 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	891b      	ldrh	r3, [r3, #8]
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	d108      	bne.n	8014e42 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	891b      	ldrh	r3, [r3, #8]
 8014e34:	3b01      	subs	r3, #1
 8014e36:	b29a      	uxth	r2, r3
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f000 f80d 	bl	8014e5c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	607b      	str	r3, [r7, #4]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d1db      	bne.n	8014e06 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014e4e:	bf00      	nop
 8014e50:	bf00      	nop
 8014e52:	3708      	adds	r7, #8
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	20010eb8 	.word	0x20010eb8

08014e5c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e68:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	795b      	ldrb	r3, [r3, #5]
 8014e6e:	2b0c      	cmp	r3, #12
 8014e70:	d003      	beq.n	8014e7a <dhcp_timeout+0x1e>
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	795b      	ldrb	r3, [r3, #5]
 8014e76:	2b06      	cmp	r3, #6
 8014e78:	d103      	bne.n	8014e82 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f000 fa54 	bl	8015328 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014e80:	e031      	b.n	8014ee6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	795b      	ldrb	r3, [r3, #5]
 8014e86:	2b01      	cmp	r3, #1
 8014e88:	d10e      	bne.n	8014ea8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	799b      	ldrb	r3, [r3, #6]
 8014e8e:	2b05      	cmp	r3, #5
 8014e90:	d803      	bhi.n	8014e9a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f7ff fe60 	bl	8014b58 <dhcp_select>
}
 8014e98:	e025      	b.n	8014ee6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f000 fdae 	bl	80159fc <dhcp_release_and_stop>
      dhcp_start(netif);
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f000 f8e5 	bl	8015070 <dhcp_start>
}
 8014ea6:	e01e      	b.n	8014ee6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	795b      	ldrb	r3, [r3, #5]
 8014eac:	2b08      	cmp	r3, #8
 8014eae:	d10b      	bne.n	8014ec8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	799b      	ldrb	r3, [r3, #6]
 8014eb4:	2b01      	cmp	r3, #1
 8014eb6:	d803      	bhi.n	8014ec0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7ff fdf3 	bl	8014aa4 <dhcp_check>
}
 8014ebe:	e012      	b.n	8014ee6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f000 fad3 	bl	801546c <dhcp_bind>
}
 8014ec6:	e00e      	b.n	8014ee6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	795b      	ldrb	r3, [r3, #5]
 8014ecc:	2b03      	cmp	r3, #3
 8014ece:	d10a      	bne.n	8014ee6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	799b      	ldrb	r3, [r3, #6]
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	d803      	bhi.n	8014ee0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f000 fcd9 	bl	8015890 <dhcp_reboot>
}
 8014ede:	e002      	b.n	8014ee6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014ee0:	6878      	ldr	r0, [r7, #4]
 8014ee2:	f000 fa21 	bl	8015328 <dhcp_discover>
}
 8014ee6:	bf00      	nop
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b084      	sub	sp, #16
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014efa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	795b      	ldrb	r3, [r3, #5]
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	d007      	beq.n	8014f14 <dhcp_t1_timeout+0x26>
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	795b      	ldrb	r3, [r3, #5]
 8014f08:	2b0a      	cmp	r3, #10
 8014f0a:	d003      	beq.n	8014f14 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014f10:	2b05      	cmp	r3, #5
 8014f12:	d116      	bne.n	8014f42 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f000 fb83 	bl	8015620 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	899b      	ldrh	r3, [r3, #12]
 8014f1e:	461a      	mov	r2, r3
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	8a5b      	ldrh	r3, [r3, #18]
 8014f24:	1ad3      	subs	r3, r2, r3
 8014f26:	2b01      	cmp	r3, #1
 8014f28:	dd0b      	ble.n	8014f42 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	899b      	ldrh	r3, [r3, #12]
 8014f2e:	461a      	mov	r2, r3
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	8a5b      	ldrh	r3, [r3, #18]
 8014f34:	1ad3      	subs	r3, r2, r3
 8014f36:	0fda      	lsrs	r2, r3, #31
 8014f38:	4413      	add	r3, r2
 8014f3a:	105b      	asrs	r3, r3, #1
 8014f3c:	b29a      	uxth	r2, r3
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014f42:	bf00      	nop
 8014f44:	3710      	adds	r7, #16
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}

08014f4a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014f4a:	b580      	push	{r7, lr}
 8014f4c:	b084      	sub	sp, #16
 8014f4e:	af00      	add	r7, sp, #0
 8014f50:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f56:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	795b      	ldrb	r3, [r3, #5]
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	d00b      	beq.n	8014f78 <dhcp_t2_timeout+0x2e>
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	795b      	ldrb	r3, [r3, #5]
 8014f64:	2b0a      	cmp	r3, #10
 8014f66:	d007      	beq.n	8014f78 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014f6c:	2b05      	cmp	r3, #5
 8014f6e:	d003      	beq.n	8014f78 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	795b      	ldrb	r3, [r3, #5]
 8014f74:	2b04      	cmp	r3, #4
 8014f76:	d116      	bne.n	8014fa6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f000 fbed 	bl	8015758 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	8a9b      	ldrh	r3, [r3, #20]
 8014f82:	461a      	mov	r2, r3
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	8a5b      	ldrh	r3, [r3, #18]
 8014f88:	1ad3      	subs	r3, r2, r3
 8014f8a:	2b01      	cmp	r3, #1
 8014f8c:	dd0b      	ble.n	8014fa6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	8a9b      	ldrh	r3, [r3, #20]
 8014f92:	461a      	mov	r2, r3
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	8a5b      	ldrh	r3, [r3, #18]
 8014f98:	1ad3      	subs	r3, r2, r3
 8014f9a:	0fda      	lsrs	r2, r3, #31
 8014f9c:	4413      	add	r3, r2
 8014f9e:	105b      	asrs	r3, r3, #1
 8014fa0:	b29a      	uxth	r2, r3
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014fa6:	bf00      	nop
 8014fa8:	3710      	adds	r7, #16
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
	...

08014fb0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fbe:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014fcc:	4b26      	ldr	r3, [pc, #152]	; (8015068 <dhcp_handle_ack+0xb8>)
 8014fce:	78db      	ldrb	r3, [r3, #3]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d003      	beq.n	8014fdc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014fd4:	4b25      	ldr	r3, [pc, #148]	; (801506c <dhcp_handle_ack+0xbc>)
 8014fd6:	68da      	ldr	r2, [r3, #12]
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014fdc:	4b22      	ldr	r3, [pc, #136]	; (8015068 <dhcp_handle_ack+0xb8>)
 8014fde:	791b      	ldrb	r3, [r3, #4]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d004      	beq.n	8014fee <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014fe4:	4b21      	ldr	r3, [pc, #132]	; (801506c <dhcp_handle_ack+0xbc>)
 8014fe6:	691a      	ldr	r2, [r3, #16]
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	62da      	str	r2, [r3, #44]	; 0x2c
 8014fec:	e004      	b.n	8014ff8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ff2:	085a      	lsrs	r2, r3, #1
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014ff8:	4b1b      	ldr	r3, [pc, #108]	; (8015068 <dhcp_handle_ack+0xb8>)
 8014ffa:	795b      	ldrb	r3, [r3, #5]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d004      	beq.n	801500a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015000:	4b1a      	ldr	r3, [pc, #104]	; (801506c <dhcp_handle_ack+0xbc>)
 8015002:	695a      	ldr	r2, [r3, #20]
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	631a      	str	r2, [r3, #48]	; 0x30
 8015008:	e007      	b.n	801501a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801500e:	4613      	mov	r3, r2
 8015010:	00db      	lsls	r3, r3, #3
 8015012:	1a9b      	subs	r3, r3, r2
 8015014:	08da      	lsrs	r2, r3, #3
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	691a      	ldr	r2, [r3, #16]
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8015022:	4b11      	ldr	r3, [pc, #68]	; (8015068 <dhcp_handle_ack+0xb8>)
 8015024:	799b      	ldrb	r3, [r3, #6]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d00b      	beq.n	8015042 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801502a:	4b10      	ldr	r3, [pc, #64]	; (801506c <dhcp_handle_ack+0xbc>)
 801502c:	699b      	ldr	r3, [r3, #24]
 801502e:	4618      	mov	r0, r3
 8015030:	f7f6 fdc9 	bl	800bbc6 <lwip_htonl>
 8015034:	4602      	mov	r2, r0
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2201      	movs	r2, #1
 801503e:	71da      	strb	r2, [r3, #7]
 8015040:	e002      	b.n	8015048 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2200      	movs	r2, #0
 8015046:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015048:	4b07      	ldr	r3, [pc, #28]	; (8015068 <dhcp_handle_ack+0xb8>)
 801504a:	79db      	ldrb	r3, [r3, #7]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d007      	beq.n	8015060 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015050:	4b06      	ldr	r3, [pc, #24]	; (801506c <dhcp_handle_ack+0xbc>)
 8015052:	69db      	ldr	r3, [r3, #28]
 8015054:	4618      	mov	r0, r3
 8015056:	f7f6 fdb6 	bl	800bbc6 <lwip_htonl>
 801505a:	4602      	mov	r2, r0
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015060:	bf00      	nop
 8015062:	3710      	adds	r7, #16
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}
 8015068:	20010f44 	.word	0x20010f44
 801506c:	20010f24 	.word	0x20010f24

08015070 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b084      	sub	sp, #16
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d109      	bne.n	8015092 <dhcp_start+0x22>
 801507e:	4b37      	ldr	r3, [pc, #220]	; (801515c <dhcp_start+0xec>)
 8015080:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015084:	4936      	ldr	r1, [pc, #216]	; (8015160 <dhcp_start+0xf0>)
 8015086:	4837      	ldr	r0, [pc, #220]	; (8015164 <dhcp_start+0xf4>)
 8015088:	f004 f8ee 	bl	8019268 <iprintf>
 801508c:	f06f 030f 	mvn.w	r3, #15
 8015090:	e060      	b.n	8015154 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015098:	f003 0301 	and.w	r3, r3, #1
 801509c:	2b00      	cmp	r3, #0
 801509e:	d109      	bne.n	80150b4 <dhcp_start+0x44>
 80150a0:	4b2e      	ldr	r3, [pc, #184]	; (801515c <dhcp_start+0xec>)
 80150a2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80150a6:	4930      	ldr	r1, [pc, #192]	; (8015168 <dhcp_start+0xf8>)
 80150a8:	482e      	ldr	r0, [pc, #184]	; (8015164 <dhcp_start+0xf4>)
 80150aa:	f004 f8dd 	bl	8019268 <iprintf>
 80150ae:	f06f 030f 	mvn.w	r3, #15
 80150b2:	e04f      	b.n	8015154 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80150be:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80150c2:	d202      	bcs.n	80150ca <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80150c4:	f04f 33ff 	mov.w	r3, #4294967295
 80150c8:	e044      	b.n	8015154 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d10d      	bne.n	80150ec <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80150d0:	2034      	movs	r0, #52	; 0x34
 80150d2:	f7f7 f8cd 	bl	800c270 <mem_malloc>
 80150d6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d102      	bne.n	80150e4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80150de:	f04f 33ff 	mov.w	r3, #4294967295
 80150e2:	e037      	b.n	8015154 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	68fa      	ldr	r2, [r7, #12]
 80150e8:	625a      	str	r2, [r3, #36]	; 0x24
 80150ea:	e005      	b.n	80150f8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	791b      	ldrb	r3, [r3, #4]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80150f4:	f7ff fc92 	bl	8014a1c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80150f8:	2234      	movs	r2, #52	; 0x34
 80150fa:	2100      	movs	r1, #0
 80150fc:	68f8      	ldr	r0, [r7, #12]
 80150fe:	f004 f952 	bl	80193a6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8015102:	f7ff fc39 	bl	8014978 <dhcp_inc_pcb_refcount>
 8015106:	4603      	mov	r3, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	d002      	beq.n	8015112 <dhcp_start+0xa2>
    return ERR_MEM;
 801510c:	f04f 33ff 	mov.w	r3, #4294967295
 8015110:	e020      	b.n	8015154 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2201      	movs	r2, #1
 8015116:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801511e:	f003 0304 	and.w	r3, r3, #4
 8015122:	2b00      	cmp	r3, #0
 8015124:	d105      	bne.n	8015132 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8015126:	2102      	movs	r1, #2
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f000 fd01 	bl	8015b30 <dhcp_set_state>
    return ERR_OK;
 801512e:	2300      	movs	r3, #0
 8015130:	e010      	b.n	8015154 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f000 f8f8 	bl	8015328 <dhcp_discover>
 8015138:	4603      	mov	r3, r0
 801513a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801513c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d005      	beq.n	8015150 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f000 fc59 	bl	80159fc <dhcp_release_and_stop>
    return ERR_MEM;
 801514a:	f04f 33ff 	mov.w	r3, #4294967295
 801514e:	e001      	b.n	8015154 <dhcp_start+0xe4>
  }
  return result;
 8015150:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015154:	4618      	mov	r0, r3
 8015156:	3710      	adds	r7, #16
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	0801d830 	.word	0x0801d830
 8015160:	0801d914 	.word	0x0801d914
 8015164:	0801d890 	.word	0x0801d890
 8015168:	0801d958 	.word	0x0801d958

0801516c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b084      	sub	sp, #16
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015178:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d025      	beq.n	80151cc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	795b      	ldrb	r3, [r3, #5]
 8015184:	2b0a      	cmp	r3, #10
 8015186:	d008      	beq.n	801519a <dhcp_network_changed+0x2e>
 8015188:	2b0a      	cmp	r3, #10
 801518a:	dc0d      	bgt.n	80151a8 <dhcp_network_changed+0x3c>
 801518c:	2b00      	cmp	r3, #0
 801518e:	d01f      	beq.n	80151d0 <dhcp_network_changed+0x64>
 8015190:	2b00      	cmp	r3, #0
 8015192:	db09      	blt.n	80151a8 <dhcp_network_changed+0x3c>
 8015194:	3b03      	subs	r3, #3
 8015196:	2b02      	cmp	r3, #2
 8015198:	d806      	bhi.n	80151a8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	2200      	movs	r2, #0
 801519e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f000 fb75 	bl	8015890 <dhcp_reboot>
      break;
 80151a6:	e014      	b.n	80151d2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	795b      	ldrb	r3, [r3, #5]
 80151ac:	2b0c      	cmp	r3, #12
 80151ae:	d906      	bls.n	80151be <dhcp_network_changed+0x52>
 80151b0:	4b09      	ldr	r3, [pc, #36]	; (80151d8 <dhcp_network_changed+0x6c>)
 80151b2:	f240 326d 	movw	r2, #877	; 0x36d
 80151b6:	4909      	ldr	r1, [pc, #36]	; (80151dc <dhcp_network_changed+0x70>)
 80151b8:	4809      	ldr	r0, [pc, #36]	; (80151e0 <dhcp_network_changed+0x74>)
 80151ba:	f004 f855 	bl	8019268 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	2200      	movs	r2, #0
 80151c2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 f8af 	bl	8015328 <dhcp_discover>
      break;
 80151ca:	e002      	b.n	80151d2 <dhcp_network_changed+0x66>
    return;
 80151cc:	bf00      	nop
 80151ce:	e000      	b.n	80151d2 <dhcp_network_changed+0x66>
      break;
 80151d0:	bf00      	nop
  }
}
 80151d2:	3710      	adds	r7, #16
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	0801d830 	.word	0x0801d830
 80151dc:	0801d97c 	.word	0x0801d97c
 80151e0:	0801d890 	.word	0x0801d890

080151e4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d107      	bne.n	8015204 <dhcp_arp_reply+0x20>
 80151f4:	4b0e      	ldr	r3, [pc, #56]	; (8015230 <dhcp_arp_reply+0x4c>)
 80151f6:	f240 328b 	movw	r2, #907	; 0x38b
 80151fa:	490e      	ldr	r1, [pc, #56]	; (8015234 <dhcp_arp_reply+0x50>)
 80151fc:	480e      	ldr	r0, [pc, #56]	; (8015238 <dhcp_arp_reply+0x54>)
 80151fe:	f004 f833 	bl	8019268 <iprintf>
 8015202:	e012      	b.n	801522a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015208:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d00c      	beq.n	801522a <dhcp_arp_reply+0x46>
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	795b      	ldrb	r3, [r3, #5]
 8015214:	2b08      	cmp	r3, #8
 8015216:	d108      	bne.n	801522a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	681a      	ldr	r2, [r3, #0]
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	69db      	ldr	r3, [r3, #28]
 8015220:	429a      	cmp	r2, r3
 8015222:	d102      	bne.n	801522a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f000 f809 	bl	801523c <dhcp_decline>
    }
  }
}
 801522a:	3710      	adds	r7, #16
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}
 8015230:	0801d830 	.word	0x0801d830
 8015234:	0801d914 	.word	0x0801d914
 8015238:	0801d890 	.word	0x0801d890

0801523c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801523c:	b5b0      	push	{r4, r5, r7, lr}
 801523e:	b08a      	sub	sp, #40	; 0x28
 8015240:	af02      	add	r7, sp, #8
 8015242:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015248:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801524a:	210c      	movs	r1, #12
 801524c:	69b8      	ldr	r0, [r7, #24]
 801524e:	f000 fc6f 	bl	8015b30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8015252:	f107 030c 	add.w	r3, r7, #12
 8015256:	2204      	movs	r2, #4
 8015258:	69b9      	ldr	r1, [r7, #24]
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f001 f8f4 	bl	8016448 <dhcp_create_msg>
 8015260:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d035      	beq.n	80152d4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	685b      	ldr	r3, [r3, #4]
 801526c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801526e:	89b8      	ldrh	r0, [r7, #12]
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015276:	2304      	movs	r3, #4
 8015278:	2232      	movs	r2, #50	; 0x32
 801527a:	f000 fc73 	bl	8015b64 <dhcp_option>
 801527e:	4603      	mov	r3, r0
 8015280:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015282:	89bc      	ldrh	r4, [r7, #12]
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801528a:	69bb      	ldr	r3, [r7, #24]
 801528c:	69db      	ldr	r3, [r3, #28]
 801528e:	4618      	mov	r0, r3
 8015290:	f7f6 fc99 	bl	800bbc6 <lwip_htonl>
 8015294:	4603      	mov	r3, r0
 8015296:	461a      	mov	r2, r3
 8015298:	4629      	mov	r1, r5
 801529a:	4620      	mov	r0, r4
 801529c:	f000 fcee 	bl	8015c7c <dhcp_option_long>
 80152a0:	4603      	mov	r3, r0
 80152a2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80152a4:	89b8      	ldrh	r0, [r7, #12]
 80152a6:	693b      	ldr	r3, [r7, #16]
 80152a8:	33f0      	adds	r3, #240	; 0xf0
 80152aa:	697a      	ldr	r2, [r7, #20]
 80152ac:	4619      	mov	r1, r3
 80152ae:	f001 f9a1 	bl	80165f4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80152b2:	4b19      	ldr	r3, [pc, #100]	; (8015318 <dhcp_decline+0xdc>)
 80152b4:	6818      	ldr	r0, [r3, #0]
 80152b6:	4b19      	ldr	r3, [pc, #100]	; (801531c <dhcp_decline+0xe0>)
 80152b8:	9301      	str	r3, [sp, #4]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	9300      	str	r3, [sp, #0]
 80152be:	2343      	movs	r3, #67	; 0x43
 80152c0:	4a17      	ldr	r2, [pc, #92]	; (8015320 <dhcp_decline+0xe4>)
 80152c2:	6979      	ldr	r1, [r7, #20]
 80152c4:	f7ff f8c6 	bl	8014454 <udp_sendto_if_src>
 80152c8:	4603      	mov	r3, r0
 80152ca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80152cc:	6978      	ldr	r0, [r7, #20]
 80152ce:	f7f8 f899 	bl	800d404 <pbuf_free>
 80152d2:	e001      	b.n	80152d8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80152d4:	23ff      	movs	r3, #255	; 0xff
 80152d6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	799b      	ldrb	r3, [r3, #6]
 80152dc:	2bff      	cmp	r3, #255	; 0xff
 80152de:	d005      	beq.n	80152ec <dhcp_decline+0xb0>
    dhcp->tries++;
 80152e0:	69bb      	ldr	r3, [r7, #24]
 80152e2:	799b      	ldrb	r3, [r3, #6]
 80152e4:	3301      	adds	r3, #1
 80152e6:	b2da      	uxtb	r2, r3
 80152e8:	69bb      	ldr	r3, [r7, #24]
 80152ea:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80152ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80152f0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80152f2:	89fb      	ldrh	r3, [r7, #14]
 80152f4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80152f8:	4a0a      	ldr	r2, [pc, #40]	; (8015324 <dhcp_decline+0xe8>)
 80152fa:	fb82 1203 	smull	r1, r2, r2, r3
 80152fe:	1152      	asrs	r2, r2, #5
 8015300:	17db      	asrs	r3, r3, #31
 8015302:	1ad3      	subs	r3, r2, r3
 8015304:	b29a      	uxth	r2, r3
 8015306:	69bb      	ldr	r3, [r7, #24]
 8015308:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801530a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801530e:	4618      	mov	r0, r3
 8015310:	3720      	adds	r7, #32
 8015312:	46bd      	mov	sp, r7
 8015314:	bdb0      	pop	{r4, r5, r7, pc}
 8015316:	bf00      	nop
 8015318:	20010f4c 	.word	0x20010f4c
 801531c:	08028514 	.word	0x08028514
 8015320:	08028518 	.word	0x08028518
 8015324:	10624dd3 	.word	0x10624dd3

08015328 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08a      	sub	sp, #40	; 0x28
 801532c:	af02      	add	r7, sp, #8
 801532e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015334:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8015336:	2300      	movs	r3, #0
 8015338:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801533a:	69bb      	ldr	r3, [r7, #24]
 801533c:	2200      	movs	r2, #0
 801533e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015340:	2106      	movs	r1, #6
 8015342:	69b8      	ldr	r0, [r7, #24]
 8015344:	f000 fbf4 	bl	8015b30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015348:	f107 0308 	add.w	r3, r7, #8
 801534c:	2201      	movs	r2, #1
 801534e:	69b9      	ldr	r1, [r7, #24]
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f001 f879 	bl	8016448 <dhcp_create_msg>
 8015356:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d04b      	beq.n	80153f6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801535e:	693b      	ldr	r3, [r7, #16]
 8015360:	685b      	ldr	r3, [r3, #4]
 8015362:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015364:	8938      	ldrh	r0, [r7, #8]
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801536c:	2302      	movs	r3, #2
 801536e:	2239      	movs	r2, #57	; 0x39
 8015370:	f000 fbf8 	bl	8015b64 <dhcp_option>
 8015374:	4603      	mov	r3, r0
 8015376:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015378:	8938      	ldrh	r0, [r7, #8]
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015384:	461a      	mov	r2, r3
 8015386:	f000 fc47 	bl	8015c18 <dhcp_option_short>
 801538a:	4603      	mov	r3, r0
 801538c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801538e:	8938      	ldrh	r0, [r7, #8]
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015396:	2303      	movs	r3, #3
 8015398:	2237      	movs	r2, #55	; 0x37
 801539a:	f000 fbe3 	bl	8015b64 <dhcp_option>
 801539e:	4603      	mov	r3, r0
 80153a0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80153a2:	2300      	movs	r3, #0
 80153a4:	77fb      	strb	r3, [r7, #31]
 80153a6:	e00e      	b.n	80153c6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80153a8:	8938      	ldrh	r0, [r7, #8]
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153b0:	7ffb      	ldrb	r3, [r7, #31]
 80153b2:	4a29      	ldr	r2, [pc, #164]	; (8015458 <dhcp_discover+0x130>)
 80153b4:	5cd3      	ldrb	r3, [r2, r3]
 80153b6:	461a      	mov	r2, r3
 80153b8:	f000 fc08 	bl	8015bcc <dhcp_option_byte>
 80153bc:	4603      	mov	r3, r0
 80153be:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80153c0:	7ffb      	ldrb	r3, [r7, #31]
 80153c2:	3301      	adds	r3, #1
 80153c4:	77fb      	strb	r3, [r7, #31]
 80153c6:	7ffb      	ldrb	r3, [r7, #31]
 80153c8:	2b02      	cmp	r3, #2
 80153ca:	d9ed      	bls.n	80153a8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80153cc:	8938      	ldrh	r0, [r7, #8]
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	33f0      	adds	r3, #240	; 0xf0
 80153d2:	693a      	ldr	r2, [r7, #16]
 80153d4:	4619      	mov	r1, r3
 80153d6:	f001 f90d 	bl	80165f4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80153da:	4b20      	ldr	r3, [pc, #128]	; (801545c <dhcp_discover+0x134>)
 80153dc:	6818      	ldr	r0, [r3, #0]
 80153de:	4b20      	ldr	r3, [pc, #128]	; (8015460 <dhcp_discover+0x138>)
 80153e0:	9301      	str	r3, [sp, #4]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	9300      	str	r3, [sp, #0]
 80153e6:	2343      	movs	r3, #67	; 0x43
 80153e8:	4a1e      	ldr	r2, [pc, #120]	; (8015464 <dhcp_discover+0x13c>)
 80153ea:	6939      	ldr	r1, [r7, #16]
 80153ec:	f7ff f832 	bl	8014454 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80153f0:	6938      	ldr	r0, [r7, #16]
 80153f2:	f7f8 f807 	bl	800d404 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80153f6:	69bb      	ldr	r3, [r7, #24]
 80153f8:	799b      	ldrb	r3, [r3, #6]
 80153fa:	2bff      	cmp	r3, #255	; 0xff
 80153fc:	d005      	beq.n	801540a <dhcp_discover+0xe2>
    dhcp->tries++;
 80153fe:	69bb      	ldr	r3, [r7, #24]
 8015400:	799b      	ldrb	r3, [r3, #6]
 8015402:	3301      	adds	r3, #1
 8015404:	b2da      	uxtb	r2, r3
 8015406:	69bb      	ldr	r3, [r7, #24]
 8015408:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801540a:	69bb      	ldr	r3, [r7, #24]
 801540c:	799b      	ldrb	r3, [r3, #6]
 801540e:	2b05      	cmp	r3, #5
 8015410:	d80d      	bhi.n	801542e <dhcp_discover+0x106>
 8015412:	69bb      	ldr	r3, [r7, #24]
 8015414:	799b      	ldrb	r3, [r3, #6]
 8015416:	461a      	mov	r2, r3
 8015418:	2301      	movs	r3, #1
 801541a:	4093      	lsls	r3, r2
 801541c:	b29b      	uxth	r3, r3
 801541e:	461a      	mov	r2, r3
 8015420:	0152      	lsls	r2, r2, #5
 8015422:	1ad2      	subs	r2, r2, r3
 8015424:	0092      	lsls	r2, r2, #2
 8015426:	4413      	add	r3, r2
 8015428:	00db      	lsls	r3, r3, #3
 801542a:	b29b      	uxth	r3, r3
 801542c:	e001      	b.n	8015432 <dhcp_discover+0x10a>
 801542e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015432:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015434:	897b      	ldrh	r3, [r7, #10]
 8015436:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801543a:	4a0b      	ldr	r2, [pc, #44]	; (8015468 <dhcp_discover+0x140>)
 801543c:	fb82 1203 	smull	r1, r2, r2, r3
 8015440:	1152      	asrs	r2, r2, #5
 8015442:	17db      	asrs	r3, r3, #31
 8015444:	1ad3      	subs	r3, r2, r3
 8015446:	b29a      	uxth	r2, r3
 8015448:	69bb      	ldr	r3, [r7, #24]
 801544a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801544c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015450:	4618      	mov	r0, r3
 8015452:	3720      	adds	r7, #32
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}
 8015458:	20000030 	.word	0x20000030
 801545c:	20010f4c 	.word	0x20010f4c
 8015460:	08028514 	.word	0x08028514
 8015464:	08028518 	.word	0x08028518
 8015468:	10624dd3 	.word	0x10624dd3

0801546c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b088      	sub	sp, #32
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d107      	bne.n	801548a <dhcp_bind+0x1e>
 801547a:	4b64      	ldr	r3, [pc, #400]	; (801560c <dhcp_bind+0x1a0>)
 801547c:	f240 4215 	movw	r2, #1045	; 0x415
 8015480:	4963      	ldr	r1, [pc, #396]	; (8015610 <dhcp_bind+0x1a4>)
 8015482:	4864      	ldr	r0, [pc, #400]	; (8015614 <dhcp_bind+0x1a8>)
 8015484:	f003 fef0 	bl	8019268 <iprintf>
 8015488:	e0bc      	b.n	8015604 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801548e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015490:	69bb      	ldr	r3, [r7, #24]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d107      	bne.n	80154a6 <dhcp_bind+0x3a>
 8015496:	4b5d      	ldr	r3, [pc, #372]	; (801560c <dhcp_bind+0x1a0>)
 8015498:	f240 4217 	movw	r2, #1047	; 0x417
 801549c:	495e      	ldr	r1, [pc, #376]	; (8015618 <dhcp_bind+0x1ac>)
 801549e:	485d      	ldr	r0, [pc, #372]	; (8015614 <dhcp_bind+0x1a8>)
 80154a0:	f003 fee2 	bl	8019268 <iprintf>
 80154a4:	e0ae      	b.n	8015604 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80154a6:	69bb      	ldr	r3, [r7, #24]
 80154a8:	2200      	movs	r2, #0
 80154aa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80154ac:	69bb      	ldr	r3, [r7, #24]
 80154ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154b4:	d019      	beq.n	80154ea <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80154b6:	69bb      	ldr	r3, [r7, #24]
 80154b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154ba:	331e      	adds	r3, #30
 80154bc:	4a57      	ldr	r2, [pc, #348]	; (801561c <dhcp_bind+0x1b0>)
 80154be:	fba2 2303 	umull	r2, r3, r2, r3
 80154c2:	095b      	lsrs	r3, r3, #5
 80154c4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80154cc:	d302      	bcc.n	80154d4 <dhcp_bind+0x68>
      timeout = 0xffff;
 80154ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154d2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	b29a      	uxth	r2, r3
 80154d8:	69bb      	ldr	r3, [r7, #24]
 80154da:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	8a9b      	ldrh	r3, [r3, #20]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d102      	bne.n	80154ea <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80154e4:	69bb      	ldr	r3, [r7, #24]
 80154e6:	2201      	movs	r2, #1
 80154e8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80154ea:	69bb      	ldr	r3, [r7, #24]
 80154ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154f2:	d01d      	beq.n	8015530 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154f8:	331e      	adds	r3, #30
 80154fa:	4a48      	ldr	r2, [pc, #288]	; (801561c <dhcp_bind+0x1b0>)
 80154fc:	fba2 2303 	umull	r2, r3, r2, r3
 8015500:	095b      	lsrs	r3, r3, #5
 8015502:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015504:	69fb      	ldr	r3, [r7, #28]
 8015506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801550a:	d302      	bcc.n	8015512 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801550c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015510:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	b29a      	uxth	r2, r3
 8015516:	69bb      	ldr	r3, [r7, #24]
 8015518:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801551a:	69bb      	ldr	r3, [r7, #24]
 801551c:	895b      	ldrh	r3, [r3, #10]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d102      	bne.n	8015528 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015522:	69bb      	ldr	r3, [r7, #24]
 8015524:	2201      	movs	r2, #1
 8015526:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015528:	69bb      	ldr	r3, [r7, #24]
 801552a:	895a      	ldrh	r2, [r3, #10]
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015538:	d01d      	beq.n	8015576 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801553a:	69bb      	ldr	r3, [r7, #24]
 801553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801553e:	331e      	adds	r3, #30
 8015540:	4a36      	ldr	r2, [pc, #216]	; (801561c <dhcp_bind+0x1b0>)
 8015542:	fba2 2303 	umull	r2, r3, r2, r3
 8015546:	095b      	lsrs	r3, r3, #5
 8015548:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801554a:	69fb      	ldr	r3, [r7, #28]
 801554c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015550:	d302      	bcc.n	8015558 <dhcp_bind+0xec>
      timeout = 0xffff;
 8015552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015556:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015558:	69fb      	ldr	r3, [r7, #28]
 801555a:	b29a      	uxth	r2, r3
 801555c:	69bb      	ldr	r3, [r7, #24]
 801555e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015560:	69bb      	ldr	r3, [r7, #24]
 8015562:	899b      	ldrh	r3, [r3, #12]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d102      	bne.n	801556e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015568:	69bb      	ldr	r3, [r7, #24]
 801556a:	2201      	movs	r2, #1
 801556c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801556e:	69bb      	ldr	r3, [r7, #24]
 8015570:	899a      	ldrh	r2, [r3, #12]
 8015572:	69bb      	ldr	r3, [r7, #24]
 8015574:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015576:	69bb      	ldr	r3, [r7, #24]
 8015578:	895a      	ldrh	r2, [r3, #10]
 801557a:	69bb      	ldr	r3, [r7, #24]
 801557c:	899b      	ldrh	r3, [r3, #12]
 801557e:	429a      	cmp	r2, r3
 8015580:	d306      	bcc.n	8015590 <dhcp_bind+0x124>
 8015582:	69bb      	ldr	r3, [r7, #24]
 8015584:	899b      	ldrh	r3, [r3, #12]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d002      	beq.n	8015590 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	2200      	movs	r2, #0
 801558e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	79db      	ldrb	r3, [r3, #7]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d003      	beq.n	80155a0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015598:	69bb      	ldr	r3, [r7, #24]
 801559a:	6a1b      	ldr	r3, [r3, #32]
 801559c:	613b      	str	r3, [r7, #16]
 801559e:	e014      	b.n	80155ca <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80155a0:	69bb      	ldr	r3, [r7, #24]
 80155a2:	331c      	adds	r3, #28
 80155a4:	781b      	ldrb	r3, [r3, #0]
 80155a6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80155a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	db02      	blt.n	80155b6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80155b0:	23ff      	movs	r3, #255	; 0xff
 80155b2:	613b      	str	r3, [r7, #16]
 80155b4:	e009      	b.n	80155ca <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80155b6:	7dfb      	ldrb	r3, [r7, #23]
 80155b8:	2bbf      	cmp	r3, #191	; 0xbf
 80155ba:	d903      	bls.n	80155c4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80155bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80155c0:	613b      	str	r3, [r7, #16]
 80155c2:	e002      	b.n	80155ca <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80155c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155c8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80155ca:	69bb      	ldr	r3, [r7, #24]
 80155cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ce:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d108      	bne.n	80155e8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80155d6:	69bb      	ldr	r3, [r7, #24]
 80155d8:	69da      	ldr	r2, [r3, #28]
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	4013      	ands	r3, r2
 80155de:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80155e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80155e8:	210a      	movs	r1, #10
 80155ea:	69b8      	ldr	r0, [r7, #24]
 80155ec:	f000 faa0 	bl	8015b30 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80155f0:	69bb      	ldr	r3, [r7, #24]
 80155f2:	f103 011c 	add.w	r1, r3, #28
 80155f6:	f107 030c 	add.w	r3, r7, #12
 80155fa:	f107 0210 	add.w	r2, r7, #16
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f7f7 f9f2 	bl	800c9e8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015604:	3720      	adds	r7, #32
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}
 801560a:	bf00      	nop
 801560c:	0801d830 	.word	0x0801d830
 8015610:	0801d990 	.word	0x0801d990
 8015614:	0801d890 	.word	0x0801d890
 8015618:	0801d9ac 	.word	0x0801d9ac
 801561c:	88888889 	.word	0x88888889

08015620 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b08a      	sub	sp, #40	; 0x28
 8015624:	af02      	add	r7, sp, #8
 8015626:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801562c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801562e:	2105      	movs	r1, #5
 8015630:	69b8      	ldr	r0, [r7, #24]
 8015632:	f000 fa7d 	bl	8015b30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015636:	f107 030c 	add.w	r3, r7, #12
 801563a:	2203      	movs	r2, #3
 801563c:	69b9      	ldr	r1, [r7, #24]
 801563e:	6878      	ldr	r0, [r7, #4]
 8015640:	f000 ff02 	bl	8016448 <dhcp_create_msg>
 8015644:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d04e      	beq.n	80156ea <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	685b      	ldr	r3, [r3, #4]
 8015650:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015652:	89b8      	ldrh	r0, [r7, #12]
 8015654:	693b      	ldr	r3, [r7, #16]
 8015656:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801565a:	2302      	movs	r3, #2
 801565c:	2239      	movs	r2, #57	; 0x39
 801565e:	f000 fa81 	bl	8015b64 <dhcp_option>
 8015662:	4603      	mov	r3, r0
 8015664:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015666:	89b8      	ldrh	r0, [r7, #12]
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015672:	461a      	mov	r2, r3
 8015674:	f000 fad0 	bl	8015c18 <dhcp_option_short>
 8015678:	4603      	mov	r3, r0
 801567a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801567c:	89b8      	ldrh	r0, [r7, #12]
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015684:	2303      	movs	r3, #3
 8015686:	2237      	movs	r2, #55	; 0x37
 8015688:	f000 fa6c 	bl	8015b64 <dhcp_option>
 801568c:	4603      	mov	r3, r0
 801568e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015690:	2300      	movs	r3, #0
 8015692:	77bb      	strb	r3, [r7, #30]
 8015694:	e00e      	b.n	80156b4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015696:	89b8      	ldrh	r0, [r7, #12]
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801569e:	7fbb      	ldrb	r3, [r7, #30]
 80156a0:	4a2a      	ldr	r2, [pc, #168]	; (801574c <dhcp_renew+0x12c>)
 80156a2:	5cd3      	ldrb	r3, [r2, r3]
 80156a4:	461a      	mov	r2, r3
 80156a6:	f000 fa91 	bl	8015bcc <dhcp_option_byte>
 80156aa:	4603      	mov	r3, r0
 80156ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80156ae:	7fbb      	ldrb	r3, [r7, #30]
 80156b0:	3301      	adds	r3, #1
 80156b2:	77bb      	strb	r3, [r7, #30]
 80156b4:	7fbb      	ldrb	r3, [r7, #30]
 80156b6:	2b02      	cmp	r3, #2
 80156b8:	d9ed      	bls.n	8015696 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80156ba:	89b8      	ldrh	r0, [r7, #12]
 80156bc:	693b      	ldr	r3, [r7, #16]
 80156be:	33f0      	adds	r3, #240	; 0xf0
 80156c0:	697a      	ldr	r2, [r7, #20]
 80156c2:	4619      	mov	r1, r3
 80156c4:	f000 ff96 	bl	80165f4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80156c8:	4b21      	ldr	r3, [pc, #132]	; (8015750 <dhcp_renew+0x130>)
 80156ca:	6818      	ldr	r0, [r3, #0]
 80156cc:	69bb      	ldr	r3, [r7, #24]
 80156ce:	f103 0218 	add.w	r2, r3, #24
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	9300      	str	r3, [sp, #0]
 80156d6:	2343      	movs	r3, #67	; 0x43
 80156d8:	6979      	ldr	r1, [r7, #20]
 80156da:	f7fe fe47 	bl	801436c <udp_sendto_if>
 80156de:	4603      	mov	r3, r0
 80156e0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80156e2:	6978      	ldr	r0, [r7, #20]
 80156e4:	f7f7 fe8e 	bl	800d404 <pbuf_free>
 80156e8:	e001      	b.n	80156ee <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80156ea:	23ff      	movs	r3, #255	; 0xff
 80156ec:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80156ee:	69bb      	ldr	r3, [r7, #24]
 80156f0:	799b      	ldrb	r3, [r3, #6]
 80156f2:	2bff      	cmp	r3, #255	; 0xff
 80156f4:	d005      	beq.n	8015702 <dhcp_renew+0xe2>
    dhcp->tries++;
 80156f6:	69bb      	ldr	r3, [r7, #24]
 80156f8:	799b      	ldrb	r3, [r3, #6]
 80156fa:	3301      	adds	r3, #1
 80156fc:	b2da      	uxtb	r2, r3
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015702:	69bb      	ldr	r3, [r7, #24]
 8015704:	799b      	ldrb	r3, [r3, #6]
 8015706:	2b09      	cmp	r3, #9
 8015708:	d80a      	bhi.n	8015720 <dhcp_renew+0x100>
 801570a:	69bb      	ldr	r3, [r7, #24]
 801570c:	799b      	ldrb	r3, [r3, #6]
 801570e:	b29b      	uxth	r3, r3
 8015710:	461a      	mov	r2, r3
 8015712:	0152      	lsls	r2, r2, #5
 8015714:	1ad2      	subs	r2, r2, r3
 8015716:	0092      	lsls	r2, r2, #2
 8015718:	4413      	add	r3, r2
 801571a:	011b      	lsls	r3, r3, #4
 801571c:	b29b      	uxth	r3, r3
 801571e:	e001      	b.n	8015724 <dhcp_renew+0x104>
 8015720:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015724:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015726:	89fb      	ldrh	r3, [r7, #14]
 8015728:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801572c:	4a09      	ldr	r2, [pc, #36]	; (8015754 <dhcp_renew+0x134>)
 801572e:	fb82 1203 	smull	r1, r2, r2, r3
 8015732:	1152      	asrs	r2, r2, #5
 8015734:	17db      	asrs	r3, r3, #31
 8015736:	1ad3      	subs	r3, r2, r3
 8015738:	b29a      	uxth	r2, r3
 801573a:	69bb      	ldr	r3, [r7, #24]
 801573c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801573e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015742:	4618      	mov	r0, r3
 8015744:	3720      	adds	r7, #32
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	20000030 	.word	0x20000030
 8015750:	20010f4c 	.word	0x20010f4c
 8015754:	10624dd3 	.word	0x10624dd3

08015758 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b08a      	sub	sp, #40	; 0x28
 801575c:	af02      	add	r7, sp, #8
 801575e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015764:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015766:	2104      	movs	r1, #4
 8015768:	69b8      	ldr	r0, [r7, #24]
 801576a:	f000 f9e1 	bl	8015b30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801576e:	f107 030c 	add.w	r3, r7, #12
 8015772:	2203      	movs	r2, #3
 8015774:	69b9      	ldr	r1, [r7, #24]
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f000 fe66 	bl	8016448 <dhcp_create_msg>
 801577c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d04c      	beq.n	801581e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	685b      	ldr	r3, [r3, #4]
 8015788:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801578a:	89b8      	ldrh	r0, [r7, #12]
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015792:	2302      	movs	r3, #2
 8015794:	2239      	movs	r2, #57	; 0x39
 8015796:	f000 f9e5 	bl	8015b64 <dhcp_option>
 801579a:	4603      	mov	r3, r0
 801579c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801579e:	89b8      	ldrh	r0, [r7, #12]
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80157aa:	461a      	mov	r2, r3
 80157ac:	f000 fa34 	bl	8015c18 <dhcp_option_short>
 80157b0:	4603      	mov	r3, r0
 80157b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80157b4:	89b8      	ldrh	r0, [r7, #12]
 80157b6:	693b      	ldr	r3, [r7, #16]
 80157b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157bc:	2303      	movs	r3, #3
 80157be:	2237      	movs	r2, #55	; 0x37
 80157c0:	f000 f9d0 	bl	8015b64 <dhcp_option>
 80157c4:	4603      	mov	r3, r0
 80157c6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80157c8:	2300      	movs	r3, #0
 80157ca:	77bb      	strb	r3, [r7, #30]
 80157cc:	e00e      	b.n	80157ec <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80157ce:	89b8      	ldrh	r0, [r7, #12]
 80157d0:	693b      	ldr	r3, [r7, #16]
 80157d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157d6:	7fbb      	ldrb	r3, [r7, #30]
 80157d8:	4a29      	ldr	r2, [pc, #164]	; (8015880 <dhcp_rebind+0x128>)
 80157da:	5cd3      	ldrb	r3, [r2, r3]
 80157dc:	461a      	mov	r2, r3
 80157de:	f000 f9f5 	bl	8015bcc <dhcp_option_byte>
 80157e2:	4603      	mov	r3, r0
 80157e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80157e6:	7fbb      	ldrb	r3, [r7, #30]
 80157e8:	3301      	adds	r3, #1
 80157ea:	77bb      	strb	r3, [r7, #30]
 80157ec:	7fbb      	ldrb	r3, [r7, #30]
 80157ee:	2b02      	cmp	r3, #2
 80157f0:	d9ed      	bls.n	80157ce <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80157f2:	89b8      	ldrh	r0, [r7, #12]
 80157f4:	693b      	ldr	r3, [r7, #16]
 80157f6:	33f0      	adds	r3, #240	; 0xf0
 80157f8:	697a      	ldr	r2, [r7, #20]
 80157fa:	4619      	mov	r1, r3
 80157fc:	f000 fefa 	bl	80165f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015800:	4b20      	ldr	r3, [pc, #128]	; (8015884 <dhcp_rebind+0x12c>)
 8015802:	6818      	ldr	r0, [r3, #0]
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	9300      	str	r3, [sp, #0]
 8015808:	2343      	movs	r3, #67	; 0x43
 801580a:	4a1f      	ldr	r2, [pc, #124]	; (8015888 <dhcp_rebind+0x130>)
 801580c:	6979      	ldr	r1, [r7, #20]
 801580e:	f7fe fdad 	bl	801436c <udp_sendto_if>
 8015812:	4603      	mov	r3, r0
 8015814:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015816:	6978      	ldr	r0, [r7, #20]
 8015818:	f7f7 fdf4 	bl	800d404 <pbuf_free>
 801581c:	e001      	b.n	8015822 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801581e:	23ff      	movs	r3, #255	; 0xff
 8015820:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015822:	69bb      	ldr	r3, [r7, #24]
 8015824:	799b      	ldrb	r3, [r3, #6]
 8015826:	2bff      	cmp	r3, #255	; 0xff
 8015828:	d005      	beq.n	8015836 <dhcp_rebind+0xde>
    dhcp->tries++;
 801582a:	69bb      	ldr	r3, [r7, #24]
 801582c:	799b      	ldrb	r3, [r3, #6]
 801582e:	3301      	adds	r3, #1
 8015830:	b2da      	uxtb	r2, r3
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	799b      	ldrb	r3, [r3, #6]
 801583a:	2b09      	cmp	r3, #9
 801583c:	d80a      	bhi.n	8015854 <dhcp_rebind+0xfc>
 801583e:	69bb      	ldr	r3, [r7, #24]
 8015840:	799b      	ldrb	r3, [r3, #6]
 8015842:	b29b      	uxth	r3, r3
 8015844:	461a      	mov	r2, r3
 8015846:	0152      	lsls	r2, r2, #5
 8015848:	1ad2      	subs	r2, r2, r3
 801584a:	0092      	lsls	r2, r2, #2
 801584c:	4413      	add	r3, r2
 801584e:	00db      	lsls	r3, r3, #3
 8015850:	b29b      	uxth	r3, r3
 8015852:	e001      	b.n	8015858 <dhcp_rebind+0x100>
 8015854:	f242 7310 	movw	r3, #10000	; 0x2710
 8015858:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801585a:	89fb      	ldrh	r3, [r7, #14]
 801585c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015860:	4a0a      	ldr	r2, [pc, #40]	; (801588c <dhcp_rebind+0x134>)
 8015862:	fb82 1203 	smull	r1, r2, r2, r3
 8015866:	1152      	asrs	r2, r2, #5
 8015868:	17db      	asrs	r3, r3, #31
 801586a:	1ad3      	subs	r3, r2, r3
 801586c:	b29a      	uxth	r2, r3
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015872:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015876:	4618      	mov	r0, r3
 8015878:	3720      	adds	r7, #32
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	20000030 	.word	0x20000030
 8015884:	20010f4c 	.word	0x20010f4c
 8015888:	08028518 	.word	0x08028518
 801588c:	10624dd3 	.word	0x10624dd3

08015890 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015890:	b5b0      	push	{r4, r5, r7, lr}
 8015892:	b08a      	sub	sp, #40	; 0x28
 8015894:	af02      	add	r7, sp, #8
 8015896:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801589c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801589e:	2103      	movs	r1, #3
 80158a0:	69b8      	ldr	r0, [r7, #24]
 80158a2:	f000 f945 	bl	8015b30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80158a6:	f107 030c 	add.w	r3, r7, #12
 80158aa:	2203      	movs	r2, #3
 80158ac:	69b9      	ldr	r1, [r7, #24]
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f000 fdca 	bl	8016448 <dhcp_create_msg>
 80158b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80158b6:	697b      	ldr	r3, [r7, #20]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d066      	beq.n	801598a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80158c2:	89b8      	ldrh	r0, [r7, #12]
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158ca:	2302      	movs	r3, #2
 80158cc:	2239      	movs	r2, #57	; 0x39
 80158ce:	f000 f949 	bl	8015b64 <dhcp_option>
 80158d2:	4603      	mov	r3, r0
 80158d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80158d6:	89b8      	ldrh	r0, [r7, #12]
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	33f0      	adds	r3, #240	; 0xf0
 80158dc:	f44f 7210 	mov.w	r2, #576	; 0x240
 80158e0:	4619      	mov	r1, r3
 80158e2:	f000 f999 	bl	8015c18 <dhcp_option_short>
 80158e6:	4603      	mov	r3, r0
 80158e8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80158ea:	89b8      	ldrh	r0, [r7, #12]
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158f2:	2304      	movs	r3, #4
 80158f4:	2232      	movs	r2, #50	; 0x32
 80158f6:	f000 f935 	bl	8015b64 <dhcp_option>
 80158fa:	4603      	mov	r3, r0
 80158fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80158fe:	89bc      	ldrh	r4, [r7, #12]
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015906:	69bb      	ldr	r3, [r7, #24]
 8015908:	69db      	ldr	r3, [r3, #28]
 801590a:	4618      	mov	r0, r3
 801590c:	f7f6 f95b 	bl	800bbc6 <lwip_htonl>
 8015910:	4603      	mov	r3, r0
 8015912:	461a      	mov	r2, r3
 8015914:	4629      	mov	r1, r5
 8015916:	4620      	mov	r0, r4
 8015918:	f000 f9b0 	bl	8015c7c <dhcp_option_long>
 801591c:	4603      	mov	r3, r0
 801591e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015920:	89b8      	ldrh	r0, [r7, #12]
 8015922:	693b      	ldr	r3, [r7, #16]
 8015924:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015928:	2303      	movs	r3, #3
 801592a:	2237      	movs	r2, #55	; 0x37
 801592c:	f000 f91a 	bl	8015b64 <dhcp_option>
 8015930:	4603      	mov	r3, r0
 8015932:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015934:	2300      	movs	r3, #0
 8015936:	77bb      	strb	r3, [r7, #30]
 8015938:	e00e      	b.n	8015958 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801593a:	89b8      	ldrh	r0, [r7, #12]
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015942:	7fbb      	ldrb	r3, [r7, #30]
 8015944:	4a29      	ldr	r2, [pc, #164]	; (80159ec <dhcp_reboot+0x15c>)
 8015946:	5cd3      	ldrb	r3, [r2, r3]
 8015948:	461a      	mov	r2, r3
 801594a:	f000 f93f 	bl	8015bcc <dhcp_option_byte>
 801594e:	4603      	mov	r3, r0
 8015950:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015952:	7fbb      	ldrb	r3, [r7, #30]
 8015954:	3301      	adds	r3, #1
 8015956:	77bb      	strb	r3, [r7, #30]
 8015958:	7fbb      	ldrb	r3, [r7, #30]
 801595a:	2b02      	cmp	r3, #2
 801595c:	d9ed      	bls.n	801593a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801595e:	89b8      	ldrh	r0, [r7, #12]
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	33f0      	adds	r3, #240	; 0xf0
 8015964:	697a      	ldr	r2, [r7, #20]
 8015966:	4619      	mov	r1, r3
 8015968:	f000 fe44 	bl	80165f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801596c:	4b20      	ldr	r3, [pc, #128]	; (80159f0 <dhcp_reboot+0x160>)
 801596e:	6818      	ldr	r0, [r3, #0]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	9300      	str	r3, [sp, #0]
 8015974:	2343      	movs	r3, #67	; 0x43
 8015976:	4a1f      	ldr	r2, [pc, #124]	; (80159f4 <dhcp_reboot+0x164>)
 8015978:	6979      	ldr	r1, [r7, #20]
 801597a:	f7fe fcf7 	bl	801436c <udp_sendto_if>
 801597e:	4603      	mov	r3, r0
 8015980:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015982:	6978      	ldr	r0, [r7, #20]
 8015984:	f7f7 fd3e 	bl	800d404 <pbuf_free>
 8015988:	e001      	b.n	801598e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801598a:	23ff      	movs	r3, #255	; 0xff
 801598c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801598e:	69bb      	ldr	r3, [r7, #24]
 8015990:	799b      	ldrb	r3, [r3, #6]
 8015992:	2bff      	cmp	r3, #255	; 0xff
 8015994:	d005      	beq.n	80159a2 <dhcp_reboot+0x112>
    dhcp->tries++;
 8015996:	69bb      	ldr	r3, [r7, #24]
 8015998:	799b      	ldrb	r3, [r3, #6]
 801599a:	3301      	adds	r3, #1
 801599c:	b2da      	uxtb	r2, r3
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80159a2:	69bb      	ldr	r3, [r7, #24]
 80159a4:	799b      	ldrb	r3, [r3, #6]
 80159a6:	2b09      	cmp	r3, #9
 80159a8:	d80a      	bhi.n	80159c0 <dhcp_reboot+0x130>
 80159aa:	69bb      	ldr	r3, [r7, #24]
 80159ac:	799b      	ldrb	r3, [r3, #6]
 80159ae:	b29b      	uxth	r3, r3
 80159b0:	461a      	mov	r2, r3
 80159b2:	0152      	lsls	r2, r2, #5
 80159b4:	1ad2      	subs	r2, r2, r3
 80159b6:	0092      	lsls	r2, r2, #2
 80159b8:	4413      	add	r3, r2
 80159ba:	00db      	lsls	r3, r3, #3
 80159bc:	b29b      	uxth	r3, r3
 80159be:	e001      	b.n	80159c4 <dhcp_reboot+0x134>
 80159c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80159c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80159c6:	89fb      	ldrh	r3, [r7, #14]
 80159c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80159cc:	4a0a      	ldr	r2, [pc, #40]	; (80159f8 <dhcp_reboot+0x168>)
 80159ce:	fb82 1203 	smull	r1, r2, r2, r3
 80159d2:	1152      	asrs	r2, r2, #5
 80159d4:	17db      	asrs	r3, r3, #31
 80159d6:	1ad3      	subs	r3, r2, r3
 80159d8:	b29a      	uxth	r2, r3
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80159de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	3720      	adds	r7, #32
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bdb0      	pop	{r4, r5, r7, pc}
 80159ea:	bf00      	nop
 80159ec:	20000030 	.word	0x20000030
 80159f0:	20010f4c 	.word	0x20010f4c
 80159f4:	08028518 	.word	0x08028518
 80159f8:	10624dd3 	.word	0x10624dd3

080159fc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80159fc:	b5b0      	push	{r4, r5, r7, lr}
 80159fe:	b08a      	sub	sp, #40	; 0x28
 8015a00:	af02      	add	r7, sp, #8
 8015a02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a08:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015a0a:	69fb      	ldr	r3, [r7, #28]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	f000 8084 	beq.w	8015b1a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015a12:	69fb      	ldr	r3, [r7, #28]
 8015a14:	795b      	ldrb	r3, [r3, #5]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	f000 8081 	beq.w	8015b1e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015a1c:	69fb      	ldr	r3, [r7, #28]
 8015a1e:	699b      	ldr	r3, [r3, #24]
 8015a20:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015a22:	69fb      	ldr	r3, [r7, #28]
 8015a24:	2200      	movs	r2, #0
 8015a26:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	2200      	movs	r2, #0
 8015a32:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015a34:	69fb      	ldr	r3, [r7, #28]
 8015a36:	2200      	movs	r2, #0
 8015a38:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015a3a:	69fb      	ldr	r3, [r7, #28]
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8015a40:	69fb      	ldr	r3, [r7, #28]
 8015a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015a44:	69fb      	ldr	r3, [r7, #28]
 8015a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8015a48:	69fb      	ldr	r3, [r7, #28]
 8015a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a4c:	69fb      	ldr	r3, [r7, #28]
 8015a4e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015a50:	69fb      	ldr	r3, [r7, #28]
 8015a52:	2200      	movs	r2, #0
 8015a54:	829a      	strh	r2, [r3, #20]
 8015a56:	69fb      	ldr	r3, [r7, #28]
 8015a58:	8a9a      	ldrh	r2, [r3, #20]
 8015a5a:	69fb      	ldr	r3, [r7, #28]
 8015a5c:	825a      	strh	r2, [r3, #18]
 8015a5e:	69fb      	ldr	r3, [r7, #28]
 8015a60:	8a5a      	ldrh	r2, [r3, #18]
 8015a62:	69fb      	ldr	r3, [r7, #28]
 8015a64:	821a      	strh	r2, [r3, #16]
 8015a66:	69fb      	ldr	r3, [r7, #28]
 8015a68:	8a1a      	ldrh	r2, [r3, #16]
 8015a6a:	69fb      	ldr	r3, [r7, #28]
 8015a6c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015a6e:	6878      	ldr	r0, [r7, #4]
 8015a70:	f000 fdee 	bl	8016650 <dhcp_supplied_address>
 8015a74:	4603      	mov	r3, r0
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d03b      	beq.n	8015af2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015a7a:	f107 030e 	add.w	r3, r7, #14
 8015a7e:	2207      	movs	r2, #7
 8015a80:	69f9      	ldr	r1, [r7, #28]
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f000 fce0 	bl	8016448 <dhcp_create_msg>
 8015a88:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015a8a:	69bb      	ldr	r3, [r7, #24]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d030      	beq.n	8015af2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015a90:	69bb      	ldr	r3, [r7, #24]
 8015a92:	685b      	ldr	r3, [r3, #4]
 8015a94:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015a96:	89f8      	ldrh	r0, [r7, #14]
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a9e:	2304      	movs	r3, #4
 8015aa0:	2236      	movs	r2, #54	; 0x36
 8015aa2:	f000 f85f 	bl	8015b64 <dhcp_option>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015aaa:	89fc      	ldrh	r4, [r7, #14]
 8015aac:	697b      	ldr	r3, [r7, #20]
 8015aae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7f6 f886 	bl	800bbc6 <lwip_htonl>
 8015aba:	4603      	mov	r3, r0
 8015abc:	461a      	mov	r2, r3
 8015abe:	4629      	mov	r1, r5
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	f000 f8db 	bl	8015c7c <dhcp_option_long>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015aca:	89f8      	ldrh	r0, [r7, #14]
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	33f0      	adds	r3, #240	; 0xf0
 8015ad0:	69ba      	ldr	r2, [r7, #24]
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	f000 fd8e 	bl	80165f4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015ad8:	4b13      	ldr	r3, [pc, #76]	; (8015b28 <dhcp_release_and_stop+0x12c>)
 8015ada:	6818      	ldr	r0, [r3, #0]
 8015adc:	f107 0210 	add.w	r2, r7, #16
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	9300      	str	r3, [sp, #0]
 8015ae4:	2343      	movs	r3, #67	; 0x43
 8015ae6:	69b9      	ldr	r1, [r7, #24]
 8015ae8:	f7fe fc40 	bl	801436c <udp_sendto_if>
      pbuf_free(p_out);
 8015aec:	69b8      	ldr	r0, [r7, #24]
 8015aee:	f7f7 fc89 	bl	800d404 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015af2:	4b0e      	ldr	r3, [pc, #56]	; (8015b2c <dhcp_release_and_stop+0x130>)
 8015af4:	4a0d      	ldr	r2, [pc, #52]	; (8015b2c <dhcp_release_and_stop+0x130>)
 8015af6:	490d      	ldr	r1, [pc, #52]	; (8015b2c <dhcp_release_and_stop+0x130>)
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7f6 ff75 	bl	800c9e8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015afe:	2100      	movs	r1, #0
 8015b00:	69f8      	ldr	r0, [r7, #28]
 8015b02:	f000 f815 	bl	8015b30 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015b06:	69fb      	ldr	r3, [r7, #28]
 8015b08:	791b      	ldrb	r3, [r3, #4]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d008      	beq.n	8015b20 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015b0e:	f7fe ff85 	bl	8014a1c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015b12:	69fb      	ldr	r3, [r7, #28]
 8015b14:	2200      	movs	r2, #0
 8015b16:	711a      	strb	r2, [r3, #4]
 8015b18:	e002      	b.n	8015b20 <dhcp_release_and_stop+0x124>
    return;
 8015b1a:	bf00      	nop
 8015b1c:	e000      	b.n	8015b20 <dhcp_release_and_stop+0x124>
    return;
 8015b1e:	bf00      	nop
  }
}
 8015b20:	3720      	adds	r7, #32
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bdb0      	pop	{r4, r5, r7, pc}
 8015b26:	bf00      	nop
 8015b28:	20010f4c 	.word	0x20010f4c
 8015b2c:	08028514 	.word	0x08028514

08015b30 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015b30:	b480      	push	{r7}
 8015b32:	b083      	sub	sp, #12
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
 8015b38:	460b      	mov	r3, r1
 8015b3a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	795b      	ldrb	r3, [r3, #5]
 8015b40:	78fa      	ldrb	r2, [r7, #3]
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d008      	beq.n	8015b58 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	78fa      	ldrb	r2, [r7, #3]
 8015b4a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	2200      	movs	r2, #0
 8015b50:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2200      	movs	r2, #0
 8015b56:	811a      	strh	r2, [r3, #8]
  }
}
 8015b58:	bf00      	nop
 8015b5a:	370c      	adds	r7, #12
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b62:	4770      	bx	lr

08015b64 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6039      	str	r1, [r7, #0]
 8015b6c:	4611      	mov	r1, r2
 8015b6e:	461a      	mov	r2, r3
 8015b70:	4603      	mov	r3, r0
 8015b72:	80fb      	strh	r3, [r7, #6]
 8015b74:	460b      	mov	r3, r1
 8015b76:	717b      	strb	r3, [r7, #5]
 8015b78:	4613      	mov	r3, r2
 8015b7a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015b7c:	88fa      	ldrh	r2, [r7, #6]
 8015b7e:	793b      	ldrb	r3, [r7, #4]
 8015b80:	4413      	add	r3, r2
 8015b82:	3302      	adds	r3, #2
 8015b84:	2b44      	cmp	r3, #68	; 0x44
 8015b86:	d906      	bls.n	8015b96 <dhcp_option+0x32>
 8015b88:	4b0d      	ldr	r3, [pc, #52]	; (8015bc0 <dhcp_option+0x5c>)
 8015b8a:	f240 529a 	movw	r2, #1434	; 0x59a
 8015b8e:	490d      	ldr	r1, [pc, #52]	; (8015bc4 <dhcp_option+0x60>)
 8015b90:	480d      	ldr	r0, [pc, #52]	; (8015bc8 <dhcp_option+0x64>)
 8015b92:	f003 fb69 	bl	8019268 <iprintf>
  options[options_out_len++] = option_type;
 8015b96:	88fb      	ldrh	r3, [r7, #6]
 8015b98:	1c5a      	adds	r2, r3, #1
 8015b9a:	80fa      	strh	r2, [r7, #6]
 8015b9c:	461a      	mov	r2, r3
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	4413      	add	r3, r2
 8015ba2:	797a      	ldrb	r2, [r7, #5]
 8015ba4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015ba6:	88fb      	ldrh	r3, [r7, #6]
 8015ba8:	1c5a      	adds	r2, r3, #1
 8015baa:	80fa      	strh	r2, [r7, #6]
 8015bac:	461a      	mov	r2, r3
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	793a      	ldrb	r2, [r7, #4]
 8015bb4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015bb6:	88fb      	ldrh	r3, [r7, #6]
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3708      	adds	r7, #8
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	0801d830 	.word	0x0801d830
 8015bc4:	0801d9c4 	.word	0x0801d9c4
 8015bc8:	0801d890 	.word	0x0801d890

08015bcc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b082      	sub	sp, #8
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	6039      	str	r1, [r7, #0]
 8015bd6:	80fb      	strh	r3, [r7, #6]
 8015bd8:	4613      	mov	r3, r2
 8015bda:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015bdc:	88fb      	ldrh	r3, [r7, #6]
 8015bde:	2b43      	cmp	r3, #67	; 0x43
 8015be0:	d906      	bls.n	8015bf0 <dhcp_option_byte+0x24>
 8015be2:	4b0a      	ldr	r3, [pc, #40]	; (8015c0c <dhcp_option_byte+0x40>)
 8015be4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015be8:	4909      	ldr	r1, [pc, #36]	; (8015c10 <dhcp_option_byte+0x44>)
 8015bea:	480a      	ldr	r0, [pc, #40]	; (8015c14 <dhcp_option_byte+0x48>)
 8015bec:	f003 fb3c 	bl	8019268 <iprintf>
  options[options_out_len++] = value;
 8015bf0:	88fb      	ldrh	r3, [r7, #6]
 8015bf2:	1c5a      	adds	r2, r3, #1
 8015bf4:	80fa      	strh	r2, [r7, #6]
 8015bf6:	461a      	mov	r2, r3
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	4413      	add	r3, r2
 8015bfc:	797a      	ldrb	r2, [r7, #5]
 8015bfe:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015c00:	88fb      	ldrh	r3, [r7, #6]
}
 8015c02:	4618      	mov	r0, r3
 8015c04:	3708      	adds	r7, #8
 8015c06:	46bd      	mov	sp, r7
 8015c08:	bd80      	pop	{r7, pc}
 8015c0a:	bf00      	nop
 8015c0c:	0801d830 	.word	0x0801d830
 8015c10:	0801da08 	.word	0x0801da08
 8015c14:	0801d890 	.word	0x0801d890

08015c18 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	4603      	mov	r3, r0
 8015c20:	6039      	str	r1, [r7, #0]
 8015c22:	80fb      	strh	r3, [r7, #6]
 8015c24:	4613      	mov	r3, r2
 8015c26:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015c28:	88fb      	ldrh	r3, [r7, #6]
 8015c2a:	3302      	adds	r3, #2
 8015c2c:	2b44      	cmp	r3, #68	; 0x44
 8015c2e:	d906      	bls.n	8015c3e <dhcp_option_short+0x26>
 8015c30:	4b0f      	ldr	r3, [pc, #60]	; (8015c70 <dhcp_option_short+0x58>)
 8015c32:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015c36:	490f      	ldr	r1, [pc, #60]	; (8015c74 <dhcp_option_short+0x5c>)
 8015c38:	480f      	ldr	r0, [pc, #60]	; (8015c78 <dhcp_option_short+0x60>)
 8015c3a:	f003 fb15 	bl	8019268 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015c3e:	88bb      	ldrh	r3, [r7, #4]
 8015c40:	0a1b      	lsrs	r3, r3, #8
 8015c42:	b29a      	uxth	r2, r3
 8015c44:	88fb      	ldrh	r3, [r7, #6]
 8015c46:	1c59      	adds	r1, r3, #1
 8015c48:	80f9      	strh	r1, [r7, #6]
 8015c4a:	4619      	mov	r1, r3
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	440b      	add	r3, r1
 8015c50:	b2d2      	uxtb	r2, r2
 8015c52:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015c54:	88fb      	ldrh	r3, [r7, #6]
 8015c56:	1c5a      	adds	r2, r3, #1
 8015c58:	80fa      	strh	r2, [r7, #6]
 8015c5a:	461a      	mov	r2, r3
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	4413      	add	r3, r2
 8015c60:	88ba      	ldrh	r2, [r7, #4]
 8015c62:	b2d2      	uxtb	r2, r2
 8015c64:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015c66:	88fb      	ldrh	r3, [r7, #6]
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3708      	adds	r7, #8
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}
 8015c70:	0801d830 	.word	0x0801d830
 8015c74:	0801da40 	.word	0x0801da40
 8015c78:	0801d890 	.word	0x0801d890

08015c7c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	4603      	mov	r3, r0
 8015c84:	60b9      	str	r1, [r7, #8]
 8015c86:	607a      	str	r2, [r7, #4]
 8015c88:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015c8a:	89fb      	ldrh	r3, [r7, #14]
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	2b44      	cmp	r3, #68	; 0x44
 8015c90:	d906      	bls.n	8015ca0 <dhcp_option_long+0x24>
 8015c92:	4b19      	ldr	r3, [pc, #100]	; (8015cf8 <dhcp_option_long+0x7c>)
 8015c94:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015c98:	4918      	ldr	r1, [pc, #96]	; (8015cfc <dhcp_option_long+0x80>)
 8015c9a:	4819      	ldr	r0, [pc, #100]	; (8015d00 <dhcp_option_long+0x84>)
 8015c9c:	f003 fae4 	bl	8019268 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	0e1a      	lsrs	r2, r3, #24
 8015ca4:	89fb      	ldrh	r3, [r7, #14]
 8015ca6:	1c59      	adds	r1, r3, #1
 8015ca8:	81f9      	strh	r1, [r7, #14]
 8015caa:	4619      	mov	r1, r3
 8015cac:	68bb      	ldr	r3, [r7, #8]
 8015cae:	440b      	add	r3, r1
 8015cb0:	b2d2      	uxtb	r2, r2
 8015cb2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	0c1a      	lsrs	r2, r3, #16
 8015cb8:	89fb      	ldrh	r3, [r7, #14]
 8015cba:	1c59      	adds	r1, r3, #1
 8015cbc:	81f9      	strh	r1, [r7, #14]
 8015cbe:	4619      	mov	r1, r3
 8015cc0:	68bb      	ldr	r3, [r7, #8]
 8015cc2:	440b      	add	r3, r1
 8015cc4:	b2d2      	uxtb	r2, r2
 8015cc6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	0a1a      	lsrs	r2, r3, #8
 8015ccc:	89fb      	ldrh	r3, [r7, #14]
 8015cce:	1c59      	adds	r1, r3, #1
 8015cd0:	81f9      	strh	r1, [r7, #14]
 8015cd2:	4619      	mov	r1, r3
 8015cd4:	68bb      	ldr	r3, [r7, #8]
 8015cd6:	440b      	add	r3, r1
 8015cd8:	b2d2      	uxtb	r2, r2
 8015cda:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015cdc:	89fb      	ldrh	r3, [r7, #14]
 8015cde:	1c5a      	adds	r2, r3, #1
 8015ce0:	81fa      	strh	r2, [r7, #14]
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	68bb      	ldr	r3, [r7, #8]
 8015ce6:	4413      	add	r3, r2
 8015ce8:	687a      	ldr	r2, [r7, #4]
 8015cea:	b2d2      	uxtb	r2, r2
 8015cec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015cee:	89fb      	ldrh	r3, [r7, #14]
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3710      	adds	r7, #16
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}
 8015cf8:	0801d830 	.word	0x0801d830
 8015cfc:	0801da7c 	.word	0x0801da7c
 8015d00:	0801d890 	.word	0x0801d890

08015d04 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b090      	sub	sp, #64	; 0x40
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
 8015d0c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015d12:	2300      	movs	r3, #0
 8015d14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015d16:	2208      	movs	r2, #8
 8015d18:	2100      	movs	r1, #0
 8015d1a:	48b5      	ldr	r0, [pc, #724]	; (8015ff0 <dhcp_parse_reply+0x2ec>)
 8015d1c:	f003 fb43 	bl	80193a6 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	895b      	ldrh	r3, [r3, #10]
 8015d24:	2b2b      	cmp	r3, #43	; 0x2b
 8015d26:	d802      	bhi.n	8015d2e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015d28:	f06f 0301 	mvn.w	r3, #1
 8015d2c:	e2a7      	b.n	801627e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015d34:	23f0      	movs	r3, #240	; 0xf0
 8015d36:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	891b      	ldrh	r3, [r3, #8]
 8015d3c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015d42:	e00c      	b.n	8015d5e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d46:	895b      	ldrh	r3, [r3, #10]
 8015d48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015d4a:	1ad3      	subs	r3, r2, r3
 8015d4c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d50:	895b      	ldrh	r3, [r3, #10]
 8015d52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015d54:	1ad3      	subs	r3, r2, r3
 8015d56:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d004      	beq.n	8015d6e <dhcp_parse_reply+0x6a>
 8015d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d66:	895b      	ldrh	r3, [r3, #10]
 8015d68:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d2ea      	bcs.n	8015d44 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d102      	bne.n	8015d7a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015d74:	f06f 0301 	mvn.w	r3, #1
 8015d78:	e281      	b.n	801627e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8015d7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015d7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015d7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015d80:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d84:	685b      	ldr	r3, [r3, #4]
 8015d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015d88:	e239      	b.n	80161fe <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8015d8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015d8e:	4413      	add	r3, r2
 8015d90:	781b      	ldrb	r3, [r3, #0]
 8015d92:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015d94:	2300      	movs	r3, #0
 8015d96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d9e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015da0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015da2:	3302      	adds	r3, #2
 8015da4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015da6:	8bfa      	ldrh	r2, [r7, #30]
 8015da8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d202      	bcs.n	8015db4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015dae:	f06f 0301 	mvn.w	r3, #1
 8015db2:	e264      	b.n	801627e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015db4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015db6:	3301      	adds	r3, #1
 8015db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dba:	8952      	ldrh	r2, [r2, #10]
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	da07      	bge.n	8015dd0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015dc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015dc6:	4413      	add	r3, r2
 8015dc8:	781b      	ldrb	r3, [r3, #0]
 8015dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015dce:	e00b      	b.n	8015de8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d004      	beq.n	8015de2 <dhcp_parse_reply+0xde>
 8015dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	781b      	ldrb	r3, [r3, #0]
 8015de0:	e000      	b.n	8015de4 <dhcp_parse_reply+0xe0>
 8015de2:	2300      	movs	r3, #0
 8015de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015df0:	7dfb      	ldrb	r3, [r7, #23]
 8015df2:	2b3b      	cmp	r3, #59	; 0x3b
 8015df4:	f200 812c 	bhi.w	8016050 <dhcp_parse_reply+0x34c>
 8015df8:	a201      	add	r2, pc, #4	; (adr r2, 8015e00 <dhcp_parse_reply+0xfc>)
 8015dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dfe:	bf00      	nop
 8015e00:	08015ef1 	.word	0x08015ef1
 8015e04:	08015f01 	.word	0x08015f01
 8015e08:	08016051 	.word	0x08016051
 8015e0c:	08015f23 	.word	0x08015f23
 8015e10:	08016051 	.word	0x08016051
 8015e14:	08016051 	.word	0x08016051
 8015e18:	08016051 	.word	0x08016051
 8015e1c:	08016051 	.word	0x08016051
 8015e20:	08016051 	.word	0x08016051
 8015e24:	08016051 	.word	0x08016051
 8015e28:	08016051 	.word	0x08016051
 8015e2c:	08016051 	.word	0x08016051
 8015e30:	08016051 	.word	0x08016051
 8015e34:	08016051 	.word	0x08016051
 8015e38:	08016051 	.word	0x08016051
 8015e3c:	08016051 	.word	0x08016051
 8015e40:	08016051 	.word	0x08016051
 8015e44:	08016051 	.word	0x08016051
 8015e48:	08016051 	.word	0x08016051
 8015e4c:	08016051 	.word	0x08016051
 8015e50:	08016051 	.word	0x08016051
 8015e54:	08016051 	.word	0x08016051
 8015e58:	08016051 	.word	0x08016051
 8015e5c:	08016051 	.word	0x08016051
 8015e60:	08016051 	.word	0x08016051
 8015e64:	08016051 	.word	0x08016051
 8015e68:	08016051 	.word	0x08016051
 8015e6c:	08016051 	.word	0x08016051
 8015e70:	08016051 	.word	0x08016051
 8015e74:	08016051 	.word	0x08016051
 8015e78:	08016051 	.word	0x08016051
 8015e7c:	08016051 	.word	0x08016051
 8015e80:	08016051 	.word	0x08016051
 8015e84:	08016051 	.word	0x08016051
 8015e88:	08016051 	.word	0x08016051
 8015e8c:	08016051 	.word	0x08016051
 8015e90:	08016051 	.word	0x08016051
 8015e94:	08016051 	.word	0x08016051
 8015e98:	08016051 	.word	0x08016051
 8015e9c:	08016051 	.word	0x08016051
 8015ea0:	08016051 	.word	0x08016051
 8015ea4:	08016051 	.word	0x08016051
 8015ea8:	08016051 	.word	0x08016051
 8015eac:	08016051 	.word	0x08016051
 8015eb0:	08016051 	.word	0x08016051
 8015eb4:	08016051 	.word	0x08016051
 8015eb8:	08016051 	.word	0x08016051
 8015ebc:	08016051 	.word	0x08016051
 8015ec0:	08016051 	.word	0x08016051
 8015ec4:	08016051 	.word	0x08016051
 8015ec8:	08016051 	.word	0x08016051
 8015ecc:	08015f4f 	.word	0x08015f4f
 8015ed0:	08015f71 	.word	0x08015f71
 8015ed4:	08015fad 	.word	0x08015fad
 8015ed8:	08015fcf 	.word	0x08015fcf
 8015edc:	08016051 	.word	0x08016051
 8015ee0:	08016051 	.word	0x08016051
 8015ee4:	08016051 	.word	0x08016051
 8015ee8:	0801600d 	.word	0x0801600d
 8015eec:	0801602f 	.word	0x0801602f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015efa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015efe:	e0ab      	b.n	8016058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f04:	2b04      	cmp	r3, #4
 8015f06:	d009      	beq.n	8015f1c <dhcp_parse_reply+0x218>
 8015f08:	4b3a      	ldr	r3, [pc, #232]	; (8015ff4 <dhcp_parse_reply+0x2f0>)
 8015f0a:	f240 622e 	movw	r2, #1582	; 0x62e
 8015f0e:	493a      	ldr	r1, [pc, #232]	; (8015ff8 <dhcp_parse_reply+0x2f4>)
 8015f10:	483a      	ldr	r0, [pc, #232]	; (8015ffc <dhcp_parse_reply+0x2f8>)
 8015f12:	f003 f9a9 	bl	8019268 <iprintf>
 8015f16:	f06f 0305 	mvn.w	r3, #5
 8015f1a:	e1b0      	b.n	801627e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015f1c:	2306      	movs	r3, #6
 8015f1e:	623b      	str	r3, [r7, #32]
        break;
 8015f20:	e09a      	b.n	8016058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015f22:	2304      	movs	r3, #4
 8015f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015f28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d209      	bcs.n	8015f48 <dhcp_parse_reply+0x244>
 8015f34:	4b2f      	ldr	r3, [pc, #188]	; (8015ff4 <dhcp_parse_reply+0x2f0>)
 8015f36:	f240 6233 	movw	r2, #1587	; 0x633
 8015f3a:	4931      	ldr	r1, [pc, #196]	; (8016000 <dhcp_parse_reply+0x2fc>)
 8015f3c:	482f      	ldr	r0, [pc, #188]	; (8015ffc <dhcp_parse_reply+0x2f8>)
 8015f3e:	f003 f993 	bl	8019268 <iprintf>
 8015f42:	f06f 0305 	mvn.w	r3, #5
 8015f46:	e19a      	b.n	801627e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015f48:	2307      	movs	r3, #7
 8015f4a:	623b      	str	r3, [r7, #32]
        break;
 8015f4c:	e084      	b.n	8016058 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f52:	2b04      	cmp	r3, #4
 8015f54:	d009      	beq.n	8015f6a <dhcp_parse_reply+0x266>
 8015f56:	4b27      	ldr	r3, [pc, #156]	; (8015ff4 <dhcp_parse_reply+0x2f0>)
 8015f58:	f240 6241 	movw	r2, #1601	; 0x641
 8015f5c:	4926      	ldr	r1, [pc, #152]	; (8015ff8 <dhcp_parse_reply+0x2f4>)
 8015f5e:	4827      	ldr	r0, [pc, #156]	; (8015ffc <dhcp_parse_reply+0x2f8>)
 8015f60:	f003 f982 	bl	8019268 <iprintf>
 8015f64:	f06f 0305 	mvn.w	r3, #5
 8015f68:	e189      	b.n	801627e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015f6a:	2303      	movs	r3, #3
 8015f6c:	623b      	str	r3, [r7, #32]
        break;
 8015f6e:	e073      	b.n	8016058 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f74:	2b01      	cmp	r3, #1
 8015f76:	d009      	beq.n	8015f8c <dhcp_parse_reply+0x288>
 8015f78:	4b1e      	ldr	r3, [pc, #120]	; (8015ff4 <dhcp_parse_reply+0x2f0>)
 8015f7a:	f240 624f 	movw	r2, #1615	; 0x64f
 8015f7e:	4921      	ldr	r1, [pc, #132]	; (8016004 <dhcp_parse_reply+0x300>)
 8015f80:	481e      	ldr	r0, [pc, #120]	; (8015ffc <dhcp_parse_reply+0x2f8>)
 8015f82:	f003 f971 	bl	8019268 <iprintf>
 8015f86:	f06f 0305 	mvn.w	r3, #5
 8015f8a:	e178      	b.n	801627e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015f8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015f8e:	2bf0      	cmp	r3, #240	; 0xf0
 8015f90:	d009      	beq.n	8015fa6 <dhcp_parse_reply+0x2a2>
 8015f92:	4b18      	ldr	r3, [pc, #96]	; (8015ff4 <dhcp_parse_reply+0x2f0>)
 8015f94:	f240 6251 	movw	r2, #1617	; 0x651
 8015f98:	491b      	ldr	r1, [pc, #108]	; (8016008 <dhcp_parse_reply+0x304>)
 8015f9a:	4818      	ldr	r0, [pc, #96]	; (8015ffc <dhcp_parse_reply+0x2f8>)
 8015f9c:	f003 f964 	bl	8019268 <iprintf>
 8015fa0:	f06f 0305 	mvn.w	r3, #5
 8015fa4:	e16b      	b.n	801627e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	623b      	str	r3, [r7, #32]
        break;
 8015faa:	e055      	b.n	8016058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fb0:	2b01      	cmp	r3, #1
 8015fb2:	d009      	beq.n	8015fc8 <dhcp_parse_reply+0x2c4>
 8015fb4:	4b0f      	ldr	r3, [pc, #60]	; (8015ff4 <dhcp_parse_reply+0x2f0>)
 8015fb6:	f240 6255 	movw	r2, #1621	; 0x655
 8015fba:	4912      	ldr	r1, [pc, #72]	; (8016004 <dhcp_parse_reply+0x300>)
 8015fbc:	480f      	ldr	r0, [pc, #60]	; (8015ffc <dhcp_parse_reply+0x2f8>)
 8015fbe:	f003 f953 	bl	8019268 <iprintf>
 8015fc2:	f06f 0305 	mvn.w	r3, #5
 8015fc6:	e15a      	b.n	801627e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015fc8:	2301      	movs	r3, #1
 8015fca:	623b      	str	r3, [r7, #32]
        break;
 8015fcc:	e044      	b.n	8016058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fd2:	2b04      	cmp	r3, #4
 8015fd4:	d009      	beq.n	8015fea <dhcp_parse_reply+0x2e6>
 8015fd6:	4b07      	ldr	r3, [pc, #28]	; (8015ff4 <dhcp_parse_reply+0x2f0>)
 8015fd8:	f240 6259 	movw	r2, #1625	; 0x659
 8015fdc:	4906      	ldr	r1, [pc, #24]	; (8015ff8 <dhcp_parse_reply+0x2f4>)
 8015fde:	4807      	ldr	r0, [pc, #28]	; (8015ffc <dhcp_parse_reply+0x2f8>)
 8015fe0:	f003 f942 	bl	8019268 <iprintf>
 8015fe4:	f06f 0305 	mvn.w	r3, #5
 8015fe8:	e149      	b.n	801627e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015fea:	2302      	movs	r3, #2
 8015fec:	623b      	str	r3, [r7, #32]
        break;
 8015fee:	e033      	b.n	8016058 <dhcp_parse_reply+0x354>
 8015ff0:	20010f44 	.word	0x20010f44
 8015ff4:	0801d830 	.word	0x0801d830
 8015ff8:	0801dab8 	.word	0x0801dab8
 8015ffc:	0801d890 	.word	0x0801d890
 8016000:	0801dac4 	.word	0x0801dac4
 8016004:	0801dad8 	.word	0x0801dad8
 8016008:	0801dae4 	.word	0x0801dae4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801600c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016010:	2b04      	cmp	r3, #4
 8016012:	d009      	beq.n	8016028 <dhcp_parse_reply+0x324>
 8016014:	4b9c      	ldr	r3, [pc, #624]	; (8016288 <dhcp_parse_reply+0x584>)
 8016016:	f240 625d 	movw	r2, #1629	; 0x65d
 801601a:	499c      	ldr	r1, [pc, #624]	; (801628c <dhcp_parse_reply+0x588>)
 801601c:	489c      	ldr	r0, [pc, #624]	; (8016290 <dhcp_parse_reply+0x58c>)
 801601e:	f003 f923 	bl	8019268 <iprintf>
 8016022:	f06f 0305 	mvn.w	r3, #5
 8016026:	e12a      	b.n	801627e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016028:	2304      	movs	r3, #4
 801602a:	623b      	str	r3, [r7, #32]
        break;
 801602c:	e014      	b.n	8016058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801602e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016032:	2b04      	cmp	r3, #4
 8016034:	d009      	beq.n	801604a <dhcp_parse_reply+0x346>
 8016036:	4b94      	ldr	r3, [pc, #592]	; (8016288 <dhcp_parse_reply+0x584>)
 8016038:	f240 6261 	movw	r2, #1633	; 0x661
 801603c:	4993      	ldr	r1, [pc, #588]	; (801628c <dhcp_parse_reply+0x588>)
 801603e:	4894      	ldr	r0, [pc, #592]	; (8016290 <dhcp_parse_reply+0x58c>)
 8016040:	f003 f912 	bl	8019268 <iprintf>
 8016044:	f06f 0305 	mvn.w	r3, #5
 8016048:	e119      	b.n	801627e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801604a:	2305      	movs	r3, #5
 801604c:	623b      	str	r3, [r7, #32]
        break;
 801604e:	e003      	b.n	8016058 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8016050:	2300      	movs	r3, #0
 8016052:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8016056:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016058:	7dfb      	ldrb	r3, [r7, #23]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d103      	bne.n	8016066 <dhcp_parse_reply+0x362>
      offset++;
 801605e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016060:	3301      	adds	r3, #1
 8016062:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016064:	e0a1      	b.n	80161aa <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016066:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801606c:	4413      	add	r3, r2
 801606e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8016072:	4293      	cmp	r3, r2
 8016074:	dd02      	ble.n	801607c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8016076:	f06f 0301 	mvn.w	r3, #1
 801607a:	e100      	b.n	801627e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801607c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016080:	b29a      	uxth	r2, r3
 8016082:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016084:	4413      	add	r3, r2
 8016086:	b29b      	uxth	r3, r3
 8016088:	3302      	adds	r3, #2
 801608a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801608c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016090:	2b00      	cmp	r3, #0
 8016092:	f000 808a 	beq.w	80161aa <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8016096:	2300      	movs	r3, #0
 8016098:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801609a:	6a3b      	ldr	r3, [r7, #32]
 801609c:	2b00      	cmp	r3, #0
 801609e:	db02      	blt.n	80160a6 <dhcp_parse_reply+0x3a2>
 80160a0:	6a3b      	ldr	r3, [r7, #32]
 80160a2:	2b07      	cmp	r3, #7
 80160a4:	dd06      	ble.n	80160b4 <dhcp_parse_reply+0x3b0>
 80160a6:	4b78      	ldr	r3, [pc, #480]	; (8016288 <dhcp_parse_reply+0x584>)
 80160a8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80160ac:	4979      	ldr	r1, [pc, #484]	; (8016294 <dhcp_parse_reply+0x590>)
 80160ae:	4878      	ldr	r0, [pc, #480]	; (8016290 <dhcp_parse_reply+0x58c>)
 80160b0:	f003 f8da 	bl	8019268 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80160b4:	4a78      	ldr	r2, [pc, #480]	; (8016298 <dhcp_parse_reply+0x594>)
 80160b6:	6a3b      	ldr	r3, [r7, #32]
 80160b8:	4413      	add	r3, r2
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d174      	bne.n	80161aa <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80160c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160c4:	2b04      	cmp	r3, #4
 80160c6:	bf28      	it	cs
 80160c8:	2304      	movcs	r3, #4
 80160ca:	b2db      	uxtb	r3, r3
 80160cc:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80160ce:	8bfb      	ldrh	r3, [r7, #30]
 80160d0:	8aba      	ldrh	r2, [r7, #20]
 80160d2:	f107 0108 	add.w	r1, r7, #8
 80160d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160d8:	f7f7 fb9a 	bl	800d810 <pbuf_copy_partial>
 80160dc:	4603      	mov	r3, r0
 80160de:	461a      	mov	r2, r3
 80160e0:	8abb      	ldrh	r3, [r7, #20]
 80160e2:	4293      	cmp	r3, r2
 80160e4:	d002      	beq.n	80160ec <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80160e6:	f06f 0301 	mvn.w	r3, #1
 80160ea:	e0c8      	b.n	801627e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80160ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160f0:	2b04      	cmp	r3, #4
 80160f2:	d933      	bls.n	801615c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80160f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160f8:	f003 0303 	and.w	r3, r3, #3
 80160fc:	b2db      	uxtb	r3, r3
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d009      	beq.n	8016116 <dhcp_parse_reply+0x412>
 8016102:	4b61      	ldr	r3, [pc, #388]	; (8016288 <dhcp_parse_reply+0x584>)
 8016104:	f240 6281 	movw	r2, #1665	; 0x681
 8016108:	4964      	ldr	r1, [pc, #400]	; (801629c <dhcp_parse_reply+0x598>)
 801610a:	4861      	ldr	r0, [pc, #388]	; (8016290 <dhcp_parse_reply+0x58c>)
 801610c:	f003 f8ac 	bl	8019268 <iprintf>
 8016110:	f06f 0305 	mvn.w	r3, #5
 8016114:	e0b3      	b.n	801627e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8016116:	4a60      	ldr	r2, [pc, #384]	; (8016298 <dhcp_parse_reply+0x594>)
 8016118:	6a3b      	ldr	r3, [r7, #32]
 801611a:	4413      	add	r3, r2
 801611c:	2201      	movs	r2, #1
 801611e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	4618      	mov	r0, r3
 8016124:	f7f5 fd4f 	bl	800bbc6 <lwip_htonl>
 8016128:	4602      	mov	r2, r0
 801612a:	495d      	ldr	r1, [pc, #372]	; (80162a0 <dhcp_parse_reply+0x59c>)
 801612c:	6a3b      	ldr	r3, [r7, #32]
 801612e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8016132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016136:	3b04      	subs	r3, #4
 8016138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801613c:	8bfb      	ldrh	r3, [r7, #30]
 801613e:	3304      	adds	r3, #4
 8016140:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8016142:	8a7a      	ldrh	r2, [r7, #18]
 8016144:	8bfb      	ldrh	r3, [r7, #30]
 8016146:	429a      	cmp	r2, r3
 8016148:	d202      	bcs.n	8016150 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801614a:	f06f 0301 	mvn.w	r3, #1
 801614e:	e096      	b.n	801627e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8016150:	8a7b      	ldrh	r3, [r7, #18]
 8016152:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8016154:	6a3b      	ldr	r3, [r7, #32]
 8016156:	3301      	adds	r3, #1
 8016158:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801615a:	e79e      	b.n	801609a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801615c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016160:	2b04      	cmp	r3, #4
 8016162:	d106      	bne.n	8016172 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	4618      	mov	r0, r3
 8016168:	f7f5 fd2d 	bl	800bbc6 <lwip_htonl>
 801616c:	4603      	mov	r3, r0
 801616e:	60bb      	str	r3, [r7, #8]
 8016170:	e011      	b.n	8016196 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8016172:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016176:	2b01      	cmp	r3, #1
 8016178:	d009      	beq.n	801618e <dhcp_parse_reply+0x48a>
 801617a:	4b43      	ldr	r3, [pc, #268]	; (8016288 <dhcp_parse_reply+0x584>)
 801617c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8016180:	4948      	ldr	r1, [pc, #288]	; (80162a4 <dhcp_parse_reply+0x5a0>)
 8016182:	4843      	ldr	r0, [pc, #268]	; (8016290 <dhcp_parse_reply+0x58c>)
 8016184:	f003 f870 	bl	8019268 <iprintf>
 8016188:	f06f 0305 	mvn.w	r3, #5
 801618c:	e077      	b.n	801627e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801618e:	f107 0308 	add.w	r3, r7, #8
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016196:	4a40      	ldr	r2, [pc, #256]	; (8016298 <dhcp_parse_reply+0x594>)
 8016198:	6a3b      	ldr	r3, [r7, #32]
 801619a:	4413      	add	r3, r2
 801619c:	2201      	movs	r2, #1
 801619e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80161a0:	68ba      	ldr	r2, [r7, #8]
 80161a2:	493f      	ldr	r1, [pc, #252]	; (80162a0 <dhcp_parse_reply+0x59c>)
 80161a4:	6a3b      	ldr	r3, [r7, #32]
 80161a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80161aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ac:	895b      	ldrh	r3, [r3, #10]
 80161ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161b0:	429a      	cmp	r2, r3
 80161b2:	d324      	bcc.n	80161fe <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80161b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b6:	895b      	ldrh	r3, [r3, #10]
 80161b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161ba:	1ad3      	subs	r3, r2, r3
 80161bc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80161be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c0:	895b      	ldrh	r3, [r3, #10]
 80161c2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80161c4:	1ad3      	subs	r3, r2, r3
 80161c6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80161c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d213      	bcs.n	80161f8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80161d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80161d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d109      	bne.n	80161f0 <dhcp_parse_reply+0x4ec>
 80161dc:	4b2a      	ldr	r3, [pc, #168]	; (8016288 <dhcp_parse_reply+0x584>)
 80161de:	f240 629d 	movw	r2, #1693	; 0x69d
 80161e2:	4931      	ldr	r1, [pc, #196]	; (80162a8 <dhcp_parse_reply+0x5a4>)
 80161e4:	482a      	ldr	r0, [pc, #168]	; (8016290 <dhcp_parse_reply+0x58c>)
 80161e6:	f003 f83f 	bl	8019268 <iprintf>
 80161ea:	f06f 0305 	mvn.w	r3, #5
 80161ee:	e046      	b.n	801627e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80161f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161f2:	685b      	ldr	r3, [r3, #4]
 80161f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80161f6:	e002      	b.n	80161fe <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80161f8:	f06f 0301 	mvn.w	r3, #1
 80161fc:	e03f      	b.n	801627e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80161fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016200:	2b00      	cmp	r3, #0
 8016202:	d00a      	beq.n	801621a <dhcp_parse_reply+0x516>
 8016204:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016206:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016208:	429a      	cmp	r2, r3
 801620a:	d206      	bcs.n	801621a <dhcp_parse_reply+0x516>
 801620c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801620e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016210:	4413      	add	r3, r2
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	2bff      	cmp	r3, #255	; 0xff
 8016216:	f47f adb8 	bne.w	8015d8a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801621a:	4b1f      	ldr	r3, [pc, #124]	; (8016298 <dhcp_parse_reply+0x594>)
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d018      	beq.n	8016254 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016222:	4b1f      	ldr	r3, [pc, #124]	; (80162a0 <dhcp_parse_reply+0x59c>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016228:	4b1b      	ldr	r3, [pc, #108]	; (8016298 <dhcp_parse_reply+0x594>)
 801622a:	2200      	movs	r2, #0
 801622c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	2b01      	cmp	r3, #1
 8016232:	d102      	bne.n	801623a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8016234:	2301      	movs	r3, #1
 8016236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016238:	e00c      	b.n	8016254 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	2b02      	cmp	r3, #2
 801623e:	d102      	bne.n	8016246 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8016240:	2301      	movs	r3, #1
 8016242:	62bb      	str	r3, [r7, #40]	; 0x28
 8016244:	e006      	b.n	8016254 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	2b03      	cmp	r3, #3
 801624a:	d103      	bne.n	8016254 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801624c:	2301      	movs	r3, #1
 801624e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016250:	2301      	movs	r3, #1
 8016252:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8016254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016256:	2b00      	cmp	r3, #0
 8016258:	d006      	beq.n	8016268 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801625a:	2300      	movs	r3, #0
 801625c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801625e:	236c      	movs	r3, #108	; 0x6c
 8016260:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016262:	23ec      	movs	r3, #236	; 0xec
 8016264:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016266:	e56a      	b.n	8015d3e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801626a:	2b00      	cmp	r3, #0
 801626c:	d006      	beq.n	801627c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801626e:	2300      	movs	r3, #0
 8016270:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016272:	232c      	movs	r3, #44	; 0x2c
 8016274:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016276:	236c      	movs	r3, #108	; 0x6c
 8016278:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801627a:	e560      	b.n	8015d3e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801627c:	2300      	movs	r3, #0
}
 801627e:	4618      	mov	r0, r3
 8016280:	3740      	adds	r7, #64	; 0x40
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	0801d830 	.word	0x0801d830
 801628c:	0801dab8 	.word	0x0801dab8
 8016290:	0801d890 	.word	0x0801d890
 8016294:	0801dafc 	.word	0x0801dafc
 8016298:	20010f44 	.word	0x20010f44
 801629c:	0801db10 	.word	0x0801db10
 80162a0:	20010f24 	.word	0x20010f24
 80162a4:	0801db28 	.word	0x0801db28
 80162a8:	0801db3c 	.word	0x0801db3c

080162ac <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b08a      	sub	sp, #40	; 0x28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	607a      	str	r2, [r7, #4]
 80162b8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80162ba:	4b60      	ldr	r3, [pc, #384]	; (801643c <dhcp_recv+0x190>)
 80162bc:	685b      	ldr	r3, [r3, #4]
 80162be:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80162c0:	6a3b      	ldr	r3, [r7, #32]
 80162c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162c4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	685b      	ldr	r3, [r3, #4]
 80162ca:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	f000 809d 	beq.w	801640e <dhcp_recv+0x162>
 80162d4:	69fb      	ldr	r3, [r7, #28]
 80162d6:	791b      	ldrb	r3, [r3, #4]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	f000 8098 	beq.w	801640e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	895b      	ldrh	r3, [r3, #10]
 80162e2:	2b2b      	cmp	r3, #43	; 0x2b
 80162e4:	f240 8095 	bls.w	8016412 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80162e8:	69bb      	ldr	r3, [r7, #24]
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	2b02      	cmp	r3, #2
 80162ee:	f040 8092 	bne.w	8016416 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80162f2:	2300      	movs	r3, #0
 80162f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80162f8:	e012      	b.n	8016320 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80162fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162fe:	6a3a      	ldr	r2, [r7, #32]
 8016300:	4413      	add	r3, r2
 8016302:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8016306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801630a:	69b9      	ldr	r1, [r7, #24]
 801630c:	440b      	add	r3, r1
 801630e:	7f1b      	ldrb	r3, [r3, #28]
 8016310:	429a      	cmp	r2, r3
 8016312:	f040 8082 	bne.w	801641a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801631a:	3301      	adds	r3, #1
 801631c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016320:	6a3b      	ldr	r3, [r7, #32]
 8016322:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016326:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801632a:	429a      	cmp	r2, r3
 801632c:	d203      	bcs.n	8016336 <dhcp_recv+0x8a>
 801632e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016332:	2b05      	cmp	r3, #5
 8016334:	d9e1      	bls.n	80162fa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	4618      	mov	r0, r3
 801633c:	f7f5 fc43 	bl	800bbc6 <lwip_htonl>
 8016340:	4602      	mov	r2, r0
 8016342:	69fb      	ldr	r3, [r7, #28]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	429a      	cmp	r2, r3
 8016348:	d169      	bne.n	801641e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801634a:	69f9      	ldr	r1, [r7, #28]
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f7ff fcd9 	bl	8015d04 <dhcp_parse_reply>
 8016352:	4603      	mov	r3, r0
 8016354:	2b00      	cmp	r3, #0
 8016356:	d164      	bne.n	8016422 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016358:	4b39      	ldr	r3, [pc, #228]	; (8016440 <dhcp_recv+0x194>)
 801635a:	785b      	ldrb	r3, [r3, #1]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d062      	beq.n	8016426 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016366:	4b37      	ldr	r3, [pc, #220]	; (8016444 <dhcp_recv+0x198>)
 8016368:	685b      	ldr	r3, [r3, #4]
 801636a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801636c:	7cfb      	ldrb	r3, [r7, #19]
 801636e:	2b05      	cmp	r3, #5
 8016370:	d12a      	bne.n	80163c8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016372:	69fb      	ldr	r3, [r7, #28]
 8016374:	795b      	ldrb	r3, [r3, #5]
 8016376:	2b01      	cmp	r3, #1
 8016378:	d112      	bne.n	80163a0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801637a:	6979      	ldr	r1, [r7, #20]
 801637c:	6a38      	ldr	r0, [r7, #32]
 801637e:	f7fe fe17 	bl	8014fb0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016382:	6a3b      	ldr	r3, [r7, #32]
 8016384:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016388:	f003 0308 	and.w	r3, r3, #8
 801638c:	2b00      	cmp	r3, #0
 801638e:	d003      	beq.n	8016398 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016390:	6a38      	ldr	r0, [r7, #32]
 8016392:	f7fe fb87 	bl	8014aa4 <dhcp_check>
 8016396:	e049      	b.n	801642c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016398:	6a38      	ldr	r0, [r7, #32]
 801639a:	f7ff f867 	bl	801546c <dhcp_bind>
 801639e:	e045      	b.n	801642c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80163a0:	69fb      	ldr	r3, [r7, #28]
 80163a2:	795b      	ldrb	r3, [r3, #5]
 80163a4:	2b03      	cmp	r3, #3
 80163a6:	d007      	beq.n	80163b8 <dhcp_recv+0x10c>
 80163a8:	69fb      	ldr	r3, [r7, #28]
 80163aa:	795b      	ldrb	r3, [r3, #5]
 80163ac:	2b04      	cmp	r3, #4
 80163ae:	d003      	beq.n	80163b8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80163b0:	69fb      	ldr	r3, [r7, #28]
 80163b2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80163b4:	2b05      	cmp	r3, #5
 80163b6:	d139      	bne.n	801642c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80163b8:	6979      	ldr	r1, [r7, #20]
 80163ba:	6a38      	ldr	r0, [r7, #32]
 80163bc:	f7fe fdf8 	bl	8014fb0 <dhcp_handle_ack>
      dhcp_bind(netif);
 80163c0:	6a38      	ldr	r0, [r7, #32]
 80163c2:	f7ff f853 	bl	801546c <dhcp_bind>
 80163c6:	e031      	b.n	801642c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80163c8:	7cfb      	ldrb	r3, [r7, #19]
 80163ca:	2b06      	cmp	r3, #6
 80163cc:	d113      	bne.n	80163f6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80163ce:	69fb      	ldr	r3, [r7, #28]
 80163d0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80163d2:	2b03      	cmp	r3, #3
 80163d4:	d00b      	beq.n	80163ee <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80163d6:	69fb      	ldr	r3, [r7, #28]
 80163d8:	795b      	ldrb	r3, [r3, #5]
 80163da:	2b01      	cmp	r3, #1
 80163dc:	d007      	beq.n	80163ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80163de:	69fb      	ldr	r3, [r7, #28]
 80163e0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80163e2:	2b04      	cmp	r3, #4
 80163e4:	d003      	beq.n	80163ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80163e6:	69fb      	ldr	r3, [r7, #28]
 80163e8:	795b      	ldrb	r3, [r3, #5]
 80163ea:	2b05      	cmp	r3, #5
 80163ec:	d103      	bne.n	80163f6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80163ee:	6a38      	ldr	r0, [r7, #32]
 80163f0:	f7fe fb3e 	bl	8014a70 <dhcp_handle_nak>
 80163f4:	e01a      	b.n	801642c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80163f6:	7cfb      	ldrb	r3, [r7, #19]
 80163f8:	2b02      	cmp	r3, #2
 80163fa:	d116      	bne.n	801642a <dhcp_recv+0x17e>
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	795b      	ldrb	r3, [r3, #5]
 8016400:	2b06      	cmp	r3, #6
 8016402:	d112      	bne.n	801642a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016404:	6979      	ldr	r1, [r7, #20]
 8016406:	6a38      	ldr	r0, [r7, #32]
 8016408:	f7fe fb80 	bl	8014b0c <dhcp_handle_offer>
 801640c:	e00e      	b.n	801642c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801640e:	bf00      	nop
 8016410:	e00c      	b.n	801642c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016412:	bf00      	nop
 8016414:	e00a      	b.n	801642c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016416:	bf00      	nop
 8016418:	e008      	b.n	801642c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801641a:	bf00      	nop
 801641c:	e006      	b.n	801642c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801641e:	bf00      	nop
 8016420:	e004      	b.n	801642c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016422:	bf00      	nop
 8016424:	e002      	b.n	801642c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016426:	bf00      	nop
 8016428:	e000      	b.n	801642c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801642a:	bf00      	nop
  pbuf_free(p);
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f7f6 ffe9 	bl	800d404 <pbuf_free>
}
 8016432:	bf00      	nop
 8016434:	3728      	adds	r7, #40	; 0x28
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}
 801643a:	bf00      	nop
 801643c:	2000d750 	.word	0x2000d750
 8016440:	20010f44 	.word	0x20010f44
 8016444:	20010f24 	.word	0x20010f24

08016448 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b088      	sub	sp, #32
 801644c:	af00      	add	r7, sp, #0
 801644e:	60f8      	str	r0, [r7, #12]
 8016450:	60b9      	str	r1, [r7, #8]
 8016452:	603b      	str	r3, [r7, #0]
 8016454:	4613      	mov	r3, r2
 8016456:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d108      	bne.n	8016470 <dhcp_create_msg+0x28>
 801645e:	4b5f      	ldr	r3, [pc, #380]	; (80165dc <dhcp_create_msg+0x194>)
 8016460:	f240 7269 	movw	r2, #1897	; 0x769
 8016464:	495e      	ldr	r1, [pc, #376]	; (80165e0 <dhcp_create_msg+0x198>)
 8016466:	485f      	ldr	r0, [pc, #380]	; (80165e4 <dhcp_create_msg+0x19c>)
 8016468:	f002 fefe 	bl	8019268 <iprintf>
 801646c:	2300      	movs	r3, #0
 801646e:	e0b1      	b.n	80165d4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016470:	68bb      	ldr	r3, [r7, #8]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d108      	bne.n	8016488 <dhcp_create_msg+0x40>
 8016476:	4b59      	ldr	r3, [pc, #356]	; (80165dc <dhcp_create_msg+0x194>)
 8016478:	f240 726a 	movw	r2, #1898	; 0x76a
 801647c:	495a      	ldr	r1, [pc, #360]	; (80165e8 <dhcp_create_msg+0x1a0>)
 801647e:	4859      	ldr	r0, [pc, #356]	; (80165e4 <dhcp_create_msg+0x19c>)
 8016480:	f002 fef2 	bl	8019268 <iprintf>
 8016484:	2300      	movs	r3, #0
 8016486:	e0a5      	b.n	80165d4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016488:	f44f 7220 	mov.w	r2, #640	; 0x280
 801648c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016490:	2036      	movs	r0, #54	; 0x36
 8016492:	f7f6 fcd3 	bl	800ce3c <pbuf_alloc>
 8016496:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016498:	69bb      	ldr	r3, [r7, #24]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d101      	bne.n	80164a2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801649e:	2300      	movs	r3, #0
 80164a0:	e098      	b.n	80165d4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80164a2:	69bb      	ldr	r3, [r7, #24]
 80164a4:	895b      	ldrh	r3, [r3, #10]
 80164a6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80164aa:	d206      	bcs.n	80164ba <dhcp_create_msg+0x72>
 80164ac:	4b4b      	ldr	r3, [pc, #300]	; (80165dc <dhcp_create_msg+0x194>)
 80164ae:	f240 7271 	movw	r2, #1905	; 0x771
 80164b2:	494e      	ldr	r1, [pc, #312]	; (80165ec <dhcp_create_msg+0x1a4>)
 80164b4:	484b      	ldr	r0, [pc, #300]	; (80165e4 <dhcp_create_msg+0x19c>)
 80164b6:	f002 fed7 	bl	8019268 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80164ba:	79fb      	ldrb	r3, [r7, #7]
 80164bc:	2b03      	cmp	r3, #3
 80164be:	d103      	bne.n	80164c8 <dhcp_create_msg+0x80>
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	795b      	ldrb	r3, [r3, #5]
 80164c4:	2b03      	cmp	r3, #3
 80164c6:	d10d      	bne.n	80164e4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	799b      	ldrb	r3, [r3, #6]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d105      	bne.n	80164dc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80164d0:	f002 fddc 	bl	801908c <rand>
 80164d4:	4603      	mov	r3, r0
 80164d6:	461a      	mov	r2, r3
 80164d8:	4b45      	ldr	r3, [pc, #276]	; (80165f0 <dhcp_create_msg+0x1a8>)
 80164da:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80164dc:	4b44      	ldr	r3, [pc, #272]	; (80165f0 <dhcp_create_msg+0x1a8>)
 80164de:	681a      	ldr	r2, [r3, #0]
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80164e4:	69bb      	ldr	r3, [r7, #24]
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80164ea:	f44f 729a 	mov.w	r2, #308	; 0x134
 80164ee:	2100      	movs	r1, #0
 80164f0:	6978      	ldr	r0, [r7, #20]
 80164f2:	f002 ff58 	bl	80193a6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80164f6:	697b      	ldr	r3, [r7, #20]
 80164f8:	2201      	movs	r2, #1
 80164fa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	2201      	movs	r2, #1
 8016500:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016508:	697b      	ldr	r3, [r7, #20]
 801650a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801650c:	68bb      	ldr	r3, [r7, #8]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	4618      	mov	r0, r3
 8016512:	f7f5 fb58 	bl	800bbc6 <lwip_htonl>
 8016516:	4602      	mov	r2, r0
 8016518:	697b      	ldr	r3, [r7, #20]
 801651a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801651c:	79fb      	ldrb	r3, [r7, #7]
 801651e:	2b08      	cmp	r3, #8
 8016520:	d010      	beq.n	8016544 <dhcp_create_msg+0xfc>
 8016522:	79fb      	ldrb	r3, [r7, #7]
 8016524:	2b04      	cmp	r3, #4
 8016526:	d00d      	beq.n	8016544 <dhcp_create_msg+0xfc>
 8016528:	79fb      	ldrb	r3, [r7, #7]
 801652a:	2b07      	cmp	r3, #7
 801652c:	d00a      	beq.n	8016544 <dhcp_create_msg+0xfc>
 801652e:	79fb      	ldrb	r3, [r7, #7]
 8016530:	2b03      	cmp	r3, #3
 8016532:	d10c      	bne.n	801654e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016538:	2b05      	cmp	r3, #5
 801653a:	d003      	beq.n	8016544 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	795b      	ldrb	r3, [r3, #5]
 8016540:	2b04      	cmp	r3, #4
 8016542:	d104      	bne.n	801654e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	3304      	adds	r3, #4
 8016548:	681a      	ldr	r2, [r3, #0]
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801654e:	2300      	movs	r3, #0
 8016550:	83fb      	strh	r3, [r7, #30]
 8016552:	e00c      	b.n	801656e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016554:	8bfa      	ldrh	r2, [r7, #30]
 8016556:	8bfb      	ldrh	r3, [r7, #30]
 8016558:	68f9      	ldr	r1, [r7, #12]
 801655a:	440a      	add	r2, r1
 801655c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016560:	697a      	ldr	r2, [r7, #20]
 8016562:	4413      	add	r3, r2
 8016564:	460a      	mov	r2, r1
 8016566:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016568:	8bfb      	ldrh	r3, [r7, #30]
 801656a:	3301      	adds	r3, #1
 801656c:	83fb      	strh	r3, [r7, #30]
 801656e:	8bfb      	ldrh	r3, [r7, #30]
 8016570:	2b05      	cmp	r3, #5
 8016572:	d9ef      	bls.n	8016554 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	2200      	movs	r2, #0
 8016578:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801657c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016580:	2200      	movs	r2, #0
 8016582:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016586:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801658a:	2200      	movs	r2, #0
 801658c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016590:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016594:	2200      	movs	r2, #0
 8016596:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801659a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80165a4:	2301      	movs	r3, #1
 80165a6:	2235      	movs	r2, #53	; 0x35
 80165a8:	2000      	movs	r0, #0
 80165aa:	f7ff fadb 	bl	8015b64 <dhcp_option>
 80165ae:	4603      	mov	r3, r0
 80165b0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80165b2:	697b      	ldr	r3, [r7, #20]
 80165b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80165b8:	79fa      	ldrb	r2, [r7, #7]
 80165ba:	8a7b      	ldrh	r3, [r7, #18]
 80165bc:	4618      	mov	r0, r3
 80165be:	f7ff fb05 	bl	8015bcc <dhcp_option_byte>
 80165c2:	4603      	mov	r3, r0
 80165c4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d002      	beq.n	80165d2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	8a7a      	ldrh	r2, [r7, #18]
 80165d0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80165d2:	69bb      	ldr	r3, [r7, #24]
}
 80165d4:	4618      	mov	r0, r3
 80165d6:	3720      	adds	r7, #32
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}
 80165dc:	0801d830 	.word	0x0801d830
 80165e0:	0801db50 	.word	0x0801db50
 80165e4:	0801d890 	.word	0x0801d890
 80165e8:	0801db70 	.word	0x0801db70
 80165ec:	0801db90 	.word	0x0801db90
 80165f0:	20010f54 	.word	0x20010f54

080165f4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b084      	sub	sp, #16
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	4603      	mov	r3, r0
 80165fc:	60b9      	str	r1, [r7, #8]
 80165fe:	607a      	str	r2, [r7, #4]
 8016600:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016602:	89fb      	ldrh	r3, [r7, #14]
 8016604:	1c5a      	adds	r2, r3, #1
 8016606:	81fa      	strh	r2, [r7, #14]
 8016608:	461a      	mov	r2, r3
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	4413      	add	r3, r2
 801660e:	22ff      	movs	r2, #255	; 0xff
 8016610:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016612:	e007      	b.n	8016624 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016614:	89fb      	ldrh	r3, [r7, #14]
 8016616:	1c5a      	adds	r2, r3, #1
 8016618:	81fa      	strh	r2, [r7, #14]
 801661a:	461a      	mov	r2, r3
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	4413      	add	r3, r2
 8016620:	2200      	movs	r2, #0
 8016622:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016624:	89fb      	ldrh	r3, [r7, #14]
 8016626:	2b43      	cmp	r3, #67	; 0x43
 8016628:	d904      	bls.n	8016634 <dhcp_option_trailer+0x40>
 801662a:	89fb      	ldrh	r3, [r7, #14]
 801662c:	f003 0303 	and.w	r3, r3, #3
 8016630:	2b00      	cmp	r3, #0
 8016632:	d002      	beq.n	801663a <dhcp_option_trailer+0x46>
 8016634:	89fb      	ldrh	r3, [r7, #14]
 8016636:	2b43      	cmp	r3, #67	; 0x43
 8016638:	d9ec      	bls.n	8016614 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801663a:	89fb      	ldrh	r3, [r7, #14]
 801663c:	33f0      	adds	r3, #240	; 0xf0
 801663e:	b29b      	uxth	r3, r3
 8016640:	4619      	mov	r1, r3
 8016642:	6878      	ldr	r0, [r7, #4]
 8016644:	f7f6 fd58 	bl	800d0f8 <pbuf_realloc>
}
 8016648:	bf00      	nop
 801664a:	3710      	adds	r7, #16
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}

08016650 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016650:	b480      	push	{r7}
 8016652:	b085      	sub	sp, #20
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d017      	beq.n	801668e <dhcp_supplied_address+0x3e>
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016662:	2b00      	cmp	r3, #0
 8016664:	d013      	beq.n	801668e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801666a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	795b      	ldrb	r3, [r3, #5]
 8016670:	2b0a      	cmp	r3, #10
 8016672:	d007      	beq.n	8016684 <dhcp_supplied_address+0x34>
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	795b      	ldrb	r3, [r3, #5]
 8016678:	2b05      	cmp	r3, #5
 801667a:	d003      	beq.n	8016684 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016680:	2b04      	cmp	r3, #4
 8016682:	d101      	bne.n	8016688 <dhcp_supplied_address+0x38>
 8016684:	2301      	movs	r3, #1
 8016686:	e000      	b.n	801668a <dhcp_supplied_address+0x3a>
 8016688:	2300      	movs	r3, #0
 801668a:	b2db      	uxtb	r3, r3
 801668c:	e000      	b.n	8016690 <dhcp_supplied_address+0x40>
  }
  return 0;
 801668e:	2300      	movs	r3, #0
}
 8016690:	4618      	mov	r0, r3
 8016692:	3714      	adds	r7, #20
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr

0801669c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80166a4:	4915      	ldr	r1, [pc, #84]	; (80166fc <etharp_free_entry+0x60>)
 80166a6:	687a      	ldr	r2, [r7, #4]
 80166a8:	4613      	mov	r3, r2
 80166aa:	005b      	lsls	r3, r3, #1
 80166ac:	4413      	add	r3, r2
 80166ae:	00db      	lsls	r3, r3, #3
 80166b0:	440b      	add	r3, r1
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d013      	beq.n	80166e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80166b8:	4910      	ldr	r1, [pc, #64]	; (80166fc <etharp_free_entry+0x60>)
 80166ba:	687a      	ldr	r2, [r7, #4]
 80166bc:	4613      	mov	r3, r2
 80166be:	005b      	lsls	r3, r3, #1
 80166c0:	4413      	add	r3, r2
 80166c2:	00db      	lsls	r3, r3, #3
 80166c4:	440b      	add	r3, r1
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7f6 fe9b 	bl	800d404 <pbuf_free>
    arp_table[i].q = NULL;
 80166ce:	490b      	ldr	r1, [pc, #44]	; (80166fc <etharp_free_entry+0x60>)
 80166d0:	687a      	ldr	r2, [r7, #4]
 80166d2:	4613      	mov	r3, r2
 80166d4:	005b      	lsls	r3, r3, #1
 80166d6:	4413      	add	r3, r2
 80166d8:	00db      	lsls	r3, r3, #3
 80166da:	440b      	add	r3, r1
 80166dc:	2200      	movs	r2, #0
 80166de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80166e0:	4906      	ldr	r1, [pc, #24]	; (80166fc <etharp_free_entry+0x60>)
 80166e2:	687a      	ldr	r2, [r7, #4]
 80166e4:	4613      	mov	r3, r2
 80166e6:	005b      	lsls	r3, r3, #1
 80166e8:	4413      	add	r3, r2
 80166ea:	00db      	lsls	r3, r3, #3
 80166ec:	440b      	add	r3, r1
 80166ee:	3314      	adds	r3, #20
 80166f0:	2200      	movs	r2, #0
 80166f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80166f4:	bf00      	nop
 80166f6:	3708      	adds	r7, #8
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	20010f58 	.word	0x20010f58

08016700 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b082      	sub	sp, #8
 8016704:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016706:	2300      	movs	r3, #0
 8016708:	607b      	str	r3, [r7, #4]
 801670a:	e096      	b.n	801683a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801670c:	494f      	ldr	r1, [pc, #316]	; (801684c <etharp_tmr+0x14c>)
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	4613      	mov	r3, r2
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	4413      	add	r3, r2
 8016716:	00db      	lsls	r3, r3, #3
 8016718:	440b      	add	r3, r1
 801671a:	3314      	adds	r3, #20
 801671c:	781b      	ldrb	r3, [r3, #0]
 801671e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016720:	78fb      	ldrb	r3, [r7, #3]
 8016722:	2b00      	cmp	r3, #0
 8016724:	f000 8086 	beq.w	8016834 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016728:	4948      	ldr	r1, [pc, #288]	; (801684c <etharp_tmr+0x14c>)
 801672a:	687a      	ldr	r2, [r7, #4]
 801672c:	4613      	mov	r3, r2
 801672e:	005b      	lsls	r3, r3, #1
 8016730:	4413      	add	r3, r2
 8016732:	00db      	lsls	r3, r3, #3
 8016734:	440b      	add	r3, r1
 8016736:	3312      	adds	r3, #18
 8016738:	881b      	ldrh	r3, [r3, #0]
 801673a:	3301      	adds	r3, #1
 801673c:	b298      	uxth	r0, r3
 801673e:	4943      	ldr	r1, [pc, #268]	; (801684c <etharp_tmr+0x14c>)
 8016740:	687a      	ldr	r2, [r7, #4]
 8016742:	4613      	mov	r3, r2
 8016744:	005b      	lsls	r3, r3, #1
 8016746:	4413      	add	r3, r2
 8016748:	00db      	lsls	r3, r3, #3
 801674a:	440b      	add	r3, r1
 801674c:	3312      	adds	r3, #18
 801674e:	4602      	mov	r2, r0
 8016750:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016752:	493e      	ldr	r1, [pc, #248]	; (801684c <etharp_tmr+0x14c>)
 8016754:	687a      	ldr	r2, [r7, #4]
 8016756:	4613      	mov	r3, r2
 8016758:	005b      	lsls	r3, r3, #1
 801675a:	4413      	add	r3, r2
 801675c:	00db      	lsls	r3, r3, #3
 801675e:	440b      	add	r3, r1
 8016760:	3312      	adds	r3, #18
 8016762:	881b      	ldrh	r3, [r3, #0]
 8016764:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016768:	d215      	bcs.n	8016796 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801676a:	4938      	ldr	r1, [pc, #224]	; (801684c <etharp_tmr+0x14c>)
 801676c:	687a      	ldr	r2, [r7, #4]
 801676e:	4613      	mov	r3, r2
 8016770:	005b      	lsls	r3, r3, #1
 8016772:	4413      	add	r3, r2
 8016774:	00db      	lsls	r3, r3, #3
 8016776:	440b      	add	r3, r1
 8016778:	3314      	adds	r3, #20
 801677a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801677c:	2b01      	cmp	r3, #1
 801677e:	d10e      	bne.n	801679e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016780:	4932      	ldr	r1, [pc, #200]	; (801684c <etharp_tmr+0x14c>)
 8016782:	687a      	ldr	r2, [r7, #4]
 8016784:	4613      	mov	r3, r2
 8016786:	005b      	lsls	r3, r3, #1
 8016788:	4413      	add	r3, r2
 801678a:	00db      	lsls	r3, r3, #3
 801678c:	440b      	add	r3, r1
 801678e:	3312      	adds	r3, #18
 8016790:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016792:	2b04      	cmp	r3, #4
 8016794:	d903      	bls.n	801679e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f7ff ff80 	bl	801669c <etharp_free_entry>
 801679c:	e04a      	b.n	8016834 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801679e:	492b      	ldr	r1, [pc, #172]	; (801684c <etharp_tmr+0x14c>)
 80167a0:	687a      	ldr	r2, [r7, #4]
 80167a2:	4613      	mov	r3, r2
 80167a4:	005b      	lsls	r3, r3, #1
 80167a6:	4413      	add	r3, r2
 80167a8:	00db      	lsls	r3, r3, #3
 80167aa:	440b      	add	r3, r1
 80167ac:	3314      	adds	r3, #20
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	2b03      	cmp	r3, #3
 80167b2:	d10a      	bne.n	80167ca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80167b4:	4925      	ldr	r1, [pc, #148]	; (801684c <etharp_tmr+0x14c>)
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	4613      	mov	r3, r2
 80167ba:	005b      	lsls	r3, r3, #1
 80167bc:	4413      	add	r3, r2
 80167be:	00db      	lsls	r3, r3, #3
 80167c0:	440b      	add	r3, r1
 80167c2:	3314      	adds	r3, #20
 80167c4:	2204      	movs	r2, #4
 80167c6:	701a      	strb	r2, [r3, #0]
 80167c8:	e034      	b.n	8016834 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80167ca:	4920      	ldr	r1, [pc, #128]	; (801684c <etharp_tmr+0x14c>)
 80167cc:	687a      	ldr	r2, [r7, #4]
 80167ce:	4613      	mov	r3, r2
 80167d0:	005b      	lsls	r3, r3, #1
 80167d2:	4413      	add	r3, r2
 80167d4:	00db      	lsls	r3, r3, #3
 80167d6:	440b      	add	r3, r1
 80167d8:	3314      	adds	r3, #20
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	2b04      	cmp	r3, #4
 80167de:	d10a      	bne.n	80167f6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80167e0:	491a      	ldr	r1, [pc, #104]	; (801684c <etharp_tmr+0x14c>)
 80167e2:	687a      	ldr	r2, [r7, #4]
 80167e4:	4613      	mov	r3, r2
 80167e6:	005b      	lsls	r3, r3, #1
 80167e8:	4413      	add	r3, r2
 80167ea:	00db      	lsls	r3, r3, #3
 80167ec:	440b      	add	r3, r1
 80167ee:	3314      	adds	r3, #20
 80167f0:	2202      	movs	r2, #2
 80167f2:	701a      	strb	r2, [r3, #0]
 80167f4:	e01e      	b.n	8016834 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80167f6:	4915      	ldr	r1, [pc, #84]	; (801684c <etharp_tmr+0x14c>)
 80167f8:	687a      	ldr	r2, [r7, #4]
 80167fa:	4613      	mov	r3, r2
 80167fc:	005b      	lsls	r3, r3, #1
 80167fe:	4413      	add	r3, r2
 8016800:	00db      	lsls	r3, r3, #3
 8016802:	440b      	add	r3, r1
 8016804:	3314      	adds	r3, #20
 8016806:	781b      	ldrb	r3, [r3, #0]
 8016808:	2b01      	cmp	r3, #1
 801680a:	d113      	bne.n	8016834 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801680c:	490f      	ldr	r1, [pc, #60]	; (801684c <etharp_tmr+0x14c>)
 801680e:	687a      	ldr	r2, [r7, #4]
 8016810:	4613      	mov	r3, r2
 8016812:	005b      	lsls	r3, r3, #1
 8016814:	4413      	add	r3, r2
 8016816:	00db      	lsls	r3, r3, #3
 8016818:	440b      	add	r3, r1
 801681a:	3308      	adds	r3, #8
 801681c:	6818      	ldr	r0, [r3, #0]
 801681e:	687a      	ldr	r2, [r7, #4]
 8016820:	4613      	mov	r3, r2
 8016822:	005b      	lsls	r3, r3, #1
 8016824:	4413      	add	r3, r2
 8016826:	00db      	lsls	r3, r3, #3
 8016828:	4a08      	ldr	r2, [pc, #32]	; (801684c <etharp_tmr+0x14c>)
 801682a:	4413      	add	r3, r2
 801682c:	3304      	adds	r3, #4
 801682e:	4619      	mov	r1, r3
 8016830:	f000 fe72 	bl	8017518 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	3301      	adds	r3, #1
 8016838:	607b      	str	r3, [r7, #4]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2b09      	cmp	r3, #9
 801683e:	f77f af65 	ble.w	801670c <etharp_tmr+0xc>
      }
    }
  }
}
 8016842:	bf00      	nop
 8016844:	bf00      	nop
 8016846:	3708      	adds	r7, #8
 8016848:	46bd      	mov	sp, r7
 801684a:	bd80      	pop	{r7, pc}
 801684c:	20010f58 	.word	0x20010f58

08016850 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08a      	sub	sp, #40	; 0x28
 8016854:	af00      	add	r7, sp, #0
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	460b      	mov	r3, r1
 801685a:	607a      	str	r2, [r7, #4]
 801685c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801685e:	230a      	movs	r3, #10
 8016860:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016862:	230a      	movs	r3, #10
 8016864:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016866:	230a      	movs	r3, #10
 8016868:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801686a:	2300      	movs	r3, #0
 801686c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801686e:	230a      	movs	r3, #10
 8016870:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016872:	2300      	movs	r3, #0
 8016874:	83bb      	strh	r3, [r7, #28]
 8016876:	2300      	movs	r3, #0
 8016878:	837b      	strh	r3, [r7, #26]
 801687a:	2300      	movs	r3, #0
 801687c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801687e:	2300      	movs	r3, #0
 8016880:	843b      	strh	r3, [r7, #32]
 8016882:	e0ae      	b.n	80169e2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016884:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016888:	49a6      	ldr	r1, [pc, #664]	; (8016b24 <etharp_find_entry+0x2d4>)
 801688a:	4613      	mov	r3, r2
 801688c:	005b      	lsls	r3, r3, #1
 801688e:	4413      	add	r3, r2
 8016890:	00db      	lsls	r3, r3, #3
 8016892:	440b      	add	r3, r1
 8016894:	3314      	adds	r3, #20
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801689a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801689e:	2b0a      	cmp	r3, #10
 80168a0:	d105      	bne.n	80168ae <etharp_find_entry+0x5e>
 80168a2:	7dfb      	ldrb	r3, [r7, #23]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d102      	bne.n	80168ae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80168a8:	8c3b      	ldrh	r3, [r7, #32]
 80168aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80168ac:	e095      	b.n	80169da <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80168ae:	7dfb      	ldrb	r3, [r7, #23]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	f000 8092 	beq.w	80169da <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80168b6:	7dfb      	ldrb	r3, [r7, #23]
 80168b8:	2b01      	cmp	r3, #1
 80168ba:	d009      	beq.n	80168d0 <etharp_find_entry+0x80>
 80168bc:	7dfb      	ldrb	r3, [r7, #23]
 80168be:	2b01      	cmp	r3, #1
 80168c0:	d806      	bhi.n	80168d0 <etharp_find_entry+0x80>
 80168c2:	4b99      	ldr	r3, [pc, #612]	; (8016b28 <etharp_find_entry+0x2d8>)
 80168c4:	f240 1223 	movw	r2, #291	; 0x123
 80168c8:	4998      	ldr	r1, [pc, #608]	; (8016b2c <etharp_find_entry+0x2dc>)
 80168ca:	4899      	ldr	r0, [pc, #612]	; (8016b30 <etharp_find_entry+0x2e0>)
 80168cc:	f002 fccc 	bl	8019268 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d020      	beq.n	8016918 <etharp_find_entry+0xc8>
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	6819      	ldr	r1, [r3, #0]
 80168da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168de:	4891      	ldr	r0, [pc, #580]	; (8016b24 <etharp_find_entry+0x2d4>)
 80168e0:	4613      	mov	r3, r2
 80168e2:	005b      	lsls	r3, r3, #1
 80168e4:	4413      	add	r3, r2
 80168e6:	00db      	lsls	r3, r3, #3
 80168e8:	4403      	add	r3, r0
 80168ea:	3304      	adds	r3, #4
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	4299      	cmp	r1, r3
 80168f0:	d112      	bne.n	8016918 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d00c      	beq.n	8016912 <etharp_find_entry+0xc2>
 80168f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168fc:	4989      	ldr	r1, [pc, #548]	; (8016b24 <etharp_find_entry+0x2d4>)
 80168fe:	4613      	mov	r3, r2
 8016900:	005b      	lsls	r3, r3, #1
 8016902:	4413      	add	r3, r2
 8016904:	00db      	lsls	r3, r3, #3
 8016906:	440b      	add	r3, r1
 8016908:	3308      	adds	r3, #8
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	687a      	ldr	r2, [r7, #4]
 801690e:	429a      	cmp	r2, r3
 8016910:	d102      	bne.n	8016918 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016912:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016916:	e100      	b.n	8016b1a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016918:	7dfb      	ldrb	r3, [r7, #23]
 801691a:	2b01      	cmp	r3, #1
 801691c:	d140      	bne.n	80169a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801691e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016922:	4980      	ldr	r1, [pc, #512]	; (8016b24 <etharp_find_entry+0x2d4>)
 8016924:	4613      	mov	r3, r2
 8016926:	005b      	lsls	r3, r3, #1
 8016928:	4413      	add	r3, r2
 801692a:	00db      	lsls	r3, r3, #3
 801692c:	440b      	add	r3, r1
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d01a      	beq.n	801696a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016934:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016938:	497a      	ldr	r1, [pc, #488]	; (8016b24 <etharp_find_entry+0x2d4>)
 801693a:	4613      	mov	r3, r2
 801693c:	005b      	lsls	r3, r3, #1
 801693e:	4413      	add	r3, r2
 8016940:	00db      	lsls	r3, r3, #3
 8016942:	440b      	add	r3, r1
 8016944:	3312      	adds	r3, #18
 8016946:	881b      	ldrh	r3, [r3, #0]
 8016948:	8bba      	ldrh	r2, [r7, #28]
 801694a:	429a      	cmp	r2, r3
 801694c:	d845      	bhi.n	80169da <etharp_find_entry+0x18a>
            old_queue = i;
 801694e:	8c3b      	ldrh	r3, [r7, #32]
 8016950:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016956:	4973      	ldr	r1, [pc, #460]	; (8016b24 <etharp_find_entry+0x2d4>)
 8016958:	4613      	mov	r3, r2
 801695a:	005b      	lsls	r3, r3, #1
 801695c:	4413      	add	r3, r2
 801695e:	00db      	lsls	r3, r3, #3
 8016960:	440b      	add	r3, r1
 8016962:	3312      	adds	r3, #18
 8016964:	881b      	ldrh	r3, [r3, #0]
 8016966:	83bb      	strh	r3, [r7, #28]
 8016968:	e037      	b.n	80169da <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801696a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801696e:	496d      	ldr	r1, [pc, #436]	; (8016b24 <etharp_find_entry+0x2d4>)
 8016970:	4613      	mov	r3, r2
 8016972:	005b      	lsls	r3, r3, #1
 8016974:	4413      	add	r3, r2
 8016976:	00db      	lsls	r3, r3, #3
 8016978:	440b      	add	r3, r1
 801697a:	3312      	adds	r3, #18
 801697c:	881b      	ldrh	r3, [r3, #0]
 801697e:	8b7a      	ldrh	r2, [r7, #26]
 8016980:	429a      	cmp	r2, r3
 8016982:	d82a      	bhi.n	80169da <etharp_find_entry+0x18a>
            old_pending = i;
 8016984:	8c3b      	ldrh	r3, [r7, #32]
 8016986:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016988:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801698c:	4965      	ldr	r1, [pc, #404]	; (8016b24 <etharp_find_entry+0x2d4>)
 801698e:	4613      	mov	r3, r2
 8016990:	005b      	lsls	r3, r3, #1
 8016992:	4413      	add	r3, r2
 8016994:	00db      	lsls	r3, r3, #3
 8016996:	440b      	add	r3, r1
 8016998:	3312      	adds	r3, #18
 801699a:	881b      	ldrh	r3, [r3, #0]
 801699c:	837b      	strh	r3, [r7, #26]
 801699e:	e01c      	b.n	80169da <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80169a0:	7dfb      	ldrb	r3, [r7, #23]
 80169a2:	2b01      	cmp	r3, #1
 80169a4:	d919      	bls.n	80169da <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80169a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169aa:	495e      	ldr	r1, [pc, #376]	; (8016b24 <etharp_find_entry+0x2d4>)
 80169ac:	4613      	mov	r3, r2
 80169ae:	005b      	lsls	r3, r3, #1
 80169b0:	4413      	add	r3, r2
 80169b2:	00db      	lsls	r3, r3, #3
 80169b4:	440b      	add	r3, r1
 80169b6:	3312      	adds	r3, #18
 80169b8:	881b      	ldrh	r3, [r3, #0]
 80169ba:	8b3a      	ldrh	r2, [r7, #24]
 80169bc:	429a      	cmp	r2, r3
 80169be:	d80c      	bhi.n	80169da <etharp_find_entry+0x18a>
            old_stable = i;
 80169c0:	8c3b      	ldrh	r3, [r7, #32]
 80169c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80169c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169c8:	4956      	ldr	r1, [pc, #344]	; (8016b24 <etharp_find_entry+0x2d4>)
 80169ca:	4613      	mov	r3, r2
 80169cc:	005b      	lsls	r3, r3, #1
 80169ce:	4413      	add	r3, r2
 80169d0:	00db      	lsls	r3, r3, #3
 80169d2:	440b      	add	r3, r1
 80169d4:	3312      	adds	r3, #18
 80169d6:	881b      	ldrh	r3, [r3, #0]
 80169d8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169da:	8c3b      	ldrh	r3, [r7, #32]
 80169dc:	3301      	adds	r3, #1
 80169de:	b29b      	uxth	r3, r3
 80169e0:	843b      	strh	r3, [r7, #32]
 80169e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80169e6:	2b09      	cmp	r3, #9
 80169e8:	f77f af4c 	ble.w	8016884 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80169ec:	7afb      	ldrb	r3, [r7, #11]
 80169ee:	f003 0302 	and.w	r3, r3, #2
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d108      	bne.n	8016a08 <etharp_find_entry+0x1b8>
 80169f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80169fa:	2b0a      	cmp	r3, #10
 80169fc:	d107      	bne.n	8016a0e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80169fe:	7afb      	ldrb	r3, [r7, #11]
 8016a00:	f003 0301 	and.w	r3, r3, #1
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d102      	bne.n	8016a0e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016a08:	f04f 33ff 	mov.w	r3, #4294967295
 8016a0c:	e085      	b.n	8016b1a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016a0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a12:	2b09      	cmp	r3, #9
 8016a14:	dc02      	bgt.n	8016a1c <etharp_find_entry+0x1cc>
    i = empty;
 8016a16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a18:	843b      	strh	r3, [r7, #32]
 8016a1a:	e039      	b.n	8016a90 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016a1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016a20:	2b09      	cmp	r3, #9
 8016a22:	dc14      	bgt.n	8016a4e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016a24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a26:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016a28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a2c:	493d      	ldr	r1, [pc, #244]	; (8016b24 <etharp_find_entry+0x2d4>)
 8016a2e:	4613      	mov	r3, r2
 8016a30:	005b      	lsls	r3, r3, #1
 8016a32:	4413      	add	r3, r2
 8016a34:	00db      	lsls	r3, r3, #3
 8016a36:	440b      	add	r3, r1
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d018      	beq.n	8016a70 <etharp_find_entry+0x220>
 8016a3e:	4b3a      	ldr	r3, [pc, #232]	; (8016b28 <etharp_find_entry+0x2d8>)
 8016a40:	f240 126d 	movw	r2, #365	; 0x16d
 8016a44:	493b      	ldr	r1, [pc, #236]	; (8016b34 <etharp_find_entry+0x2e4>)
 8016a46:	483a      	ldr	r0, [pc, #232]	; (8016b30 <etharp_find_entry+0x2e0>)
 8016a48:	f002 fc0e 	bl	8019268 <iprintf>
 8016a4c:	e010      	b.n	8016a70 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016a4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016a52:	2b09      	cmp	r3, #9
 8016a54:	dc02      	bgt.n	8016a5c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016a58:	843b      	strh	r3, [r7, #32]
 8016a5a:	e009      	b.n	8016a70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016a5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016a60:	2b09      	cmp	r3, #9
 8016a62:	dc02      	bgt.n	8016a6a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016a64:	8bfb      	ldrh	r3, [r7, #30]
 8016a66:	843b      	strh	r3, [r7, #32]
 8016a68:	e002      	b.n	8016a70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a6e:	e054      	b.n	8016b1a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016a70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a74:	2b09      	cmp	r3, #9
 8016a76:	dd06      	ble.n	8016a86 <etharp_find_entry+0x236>
 8016a78:	4b2b      	ldr	r3, [pc, #172]	; (8016b28 <etharp_find_entry+0x2d8>)
 8016a7a:	f240 127f 	movw	r2, #383	; 0x17f
 8016a7e:	492e      	ldr	r1, [pc, #184]	; (8016b38 <etharp_find_entry+0x2e8>)
 8016a80:	482b      	ldr	r0, [pc, #172]	; (8016b30 <etharp_find_entry+0x2e0>)
 8016a82:	f002 fbf1 	bl	8019268 <iprintf>
    etharp_free_entry(i);
 8016a86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	f7ff fe06 	bl	801669c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016a90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a94:	2b09      	cmp	r3, #9
 8016a96:	dd06      	ble.n	8016aa6 <etharp_find_entry+0x256>
 8016a98:	4b23      	ldr	r3, [pc, #140]	; (8016b28 <etharp_find_entry+0x2d8>)
 8016a9a:	f240 1283 	movw	r2, #387	; 0x183
 8016a9e:	4926      	ldr	r1, [pc, #152]	; (8016b38 <etharp_find_entry+0x2e8>)
 8016aa0:	4823      	ldr	r0, [pc, #140]	; (8016b30 <etharp_find_entry+0x2e0>)
 8016aa2:	f002 fbe1 	bl	8019268 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016aa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aaa:	491e      	ldr	r1, [pc, #120]	; (8016b24 <etharp_find_entry+0x2d4>)
 8016aac:	4613      	mov	r3, r2
 8016aae:	005b      	lsls	r3, r3, #1
 8016ab0:	4413      	add	r3, r2
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	440b      	add	r3, r1
 8016ab6:	3314      	adds	r3, #20
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d006      	beq.n	8016acc <etharp_find_entry+0x27c>
 8016abe:	4b1a      	ldr	r3, [pc, #104]	; (8016b28 <etharp_find_entry+0x2d8>)
 8016ac0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016ac4:	491d      	ldr	r1, [pc, #116]	; (8016b3c <etharp_find_entry+0x2ec>)
 8016ac6:	481a      	ldr	r0, [pc, #104]	; (8016b30 <etharp_find_entry+0x2e0>)
 8016ac8:	f002 fbce 	bl	8019268 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d00b      	beq.n	8016aea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016ad2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	6819      	ldr	r1, [r3, #0]
 8016ada:	4812      	ldr	r0, [pc, #72]	; (8016b24 <etharp_find_entry+0x2d4>)
 8016adc:	4613      	mov	r3, r2
 8016ade:	005b      	lsls	r3, r3, #1
 8016ae0:	4413      	add	r3, r2
 8016ae2:	00db      	lsls	r3, r3, #3
 8016ae4:	4403      	add	r3, r0
 8016ae6:	3304      	adds	r3, #4
 8016ae8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016aea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aee:	490d      	ldr	r1, [pc, #52]	; (8016b24 <etharp_find_entry+0x2d4>)
 8016af0:	4613      	mov	r3, r2
 8016af2:	005b      	lsls	r3, r3, #1
 8016af4:	4413      	add	r3, r2
 8016af6:	00db      	lsls	r3, r3, #3
 8016af8:	440b      	add	r3, r1
 8016afa:	3312      	adds	r3, #18
 8016afc:	2200      	movs	r2, #0
 8016afe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016b00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b04:	4907      	ldr	r1, [pc, #28]	; (8016b24 <etharp_find_entry+0x2d4>)
 8016b06:	4613      	mov	r3, r2
 8016b08:	005b      	lsls	r3, r3, #1
 8016b0a:	4413      	add	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	440b      	add	r3, r1
 8016b10:	3308      	adds	r3, #8
 8016b12:	687a      	ldr	r2, [r7, #4]
 8016b14:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016b16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3728      	adds	r7, #40	; 0x28
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}
 8016b22:	bf00      	nop
 8016b24:	20010f58 	.word	0x20010f58
 8016b28:	0801dbd0 	.word	0x0801dbd0
 8016b2c:	0801dc08 	.word	0x0801dc08
 8016b30:	0801dc48 	.word	0x0801dc48
 8016b34:	0801dc70 	.word	0x0801dc70
 8016b38:	0801dc88 	.word	0x0801dc88
 8016b3c:	0801dc9c 	.word	0x0801dc9c

08016b40 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b088      	sub	sp, #32
 8016b44:	af02      	add	r7, sp, #8
 8016b46:	60f8      	str	r0, [r7, #12]
 8016b48:	60b9      	str	r1, [r7, #8]
 8016b4a:	607a      	str	r2, [r7, #4]
 8016b4c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b54:	2b06      	cmp	r3, #6
 8016b56:	d006      	beq.n	8016b66 <etharp_update_arp_entry+0x26>
 8016b58:	4b48      	ldr	r3, [pc, #288]	; (8016c7c <etharp_update_arp_entry+0x13c>)
 8016b5a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016b5e:	4948      	ldr	r1, [pc, #288]	; (8016c80 <etharp_update_arp_entry+0x140>)
 8016b60:	4848      	ldr	r0, [pc, #288]	; (8016c84 <etharp_update_arp_entry+0x144>)
 8016b62:	f002 fb81 	bl	8019268 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d012      	beq.n	8016b92 <etharp_update_arp_entry+0x52>
 8016b6c:	68bb      	ldr	r3, [r7, #8]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d00e      	beq.n	8016b92 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	68f9      	ldr	r1, [r7, #12]
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f001 f920 	bl	8017dc0 <ip4_addr_isbroadcast_u32>
 8016b80:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d105      	bne.n	8016b92 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016b86:	68bb      	ldr	r3, [r7, #8]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016b8e:	2be0      	cmp	r3, #224	; 0xe0
 8016b90:	d102      	bne.n	8016b98 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016b92:	f06f 030f 	mvn.w	r3, #15
 8016b96:	e06c      	b.n	8016c72 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016b98:	78fb      	ldrb	r3, [r7, #3]
 8016b9a:	68fa      	ldr	r2, [r7, #12]
 8016b9c:	4619      	mov	r1, r3
 8016b9e:	68b8      	ldr	r0, [r7, #8]
 8016ba0:	f7ff fe56 	bl	8016850 <etharp_find_entry>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016ba8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	da02      	bge.n	8016bb6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016bb0:	8afb      	ldrh	r3, [r7, #22]
 8016bb2:	b25b      	sxtb	r3, r3
 8016bb4:	e05d      	b.n	8016c72 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016bb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016bba:	4933      	ldr	r1, [pc, #204]	; (8016c88 <etharp_update_arp_entry+0x148>)
 8016bbc:	4613      	mov	r3, r2
 8016bbe:	005b      	lsls	r3, r3, #1
 8016bc0:	4413      	add	r3, r2
 8016bc2:	00db      	lsls	r3, r3, #3
 8016bc4:	440b      	add	r3, r1
 8016bc6:	3314      	adds	r3, #20
 8016bc8:	2202      	movs	r2, #2
 8016bca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016bcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016bd0:	492d      	ldr	r1, [pc, #180]	; (8016c88 <etharp_update_arp_entry+0x148>)
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	005b      	lsls	r3, r3, #1
 8016bd6:	4413      	add	r3, r2
 8016bd8:	00db      	lsls	r3, r3, #3
 8016bda:	440b      	add	r3, r1
 8016bdc:	3308      	adds	r3, #8
 8016bde:	68fa      	ldr	r2, [r7, #12]
 8016be0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016be2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016be6:	4613      	mov	r3, r2
 8016be8:	005b      	lsls	r3, r3, #1
 8016bea:	4413      	add	r3, r2
 8016bec:	00db      	lsls	r3, r3, #3
 8016bee:	3308      	adds	r3, #8
 8016bf0:	4a25      	ldr	r2, [pc, #148]	; (8016c88 <etharp_update_arp_entry+0x148>)
 8016bf2:	4413      	add	r3, r2
 8016bf4:	3304      	adds	r3, #4
 8016bf6:	2206      	movs	r2, #6
 8016bf8:	6879      	ldr	r1, [r7, #4]
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f002 fd34 	bl	8019668 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016c00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c04:	4920      	ldr	r1, [pc, #128]	; (8016c88 <etharp_update_arp_entry+0x148>)
 8016c06:	4613      	mov	r3, r2
 8016c08:	005b      	lsls	r3, r3, #1
 8016c0a:	4413      	add	r3, r2
 8016c0c:	00db      	lsls	r3, r3, #3
 8016c0e:	440b      	add	r3, r1
 8016c10:	3312      	adds	r3, #18
 8016c12:	2200      	movs	r2, #0
 8016c14:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016c16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c1a:	491b      	ldr	r1, [pc, #108]	; (8016c88 <etharp_update_arp_entry+0x148>)
 8016c1c:	4613      	mov	r3, r2
 8016c1e:	005b      	lsls	r3, r3, #1
 8016c20:	4413      	add	r3, r2
 8016c22:	00db      	lsls	r3, r3, #3
 8016c24:	440b      	add	r3, r1
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d021      	beq.n	8016c70 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016c2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c30:	4915      	ldr	r1, [pc, #84]	; (8016c88 <etharp_update_arp_entry+0x148>)
 8016c32:	4613      	mov	r3, r2
 8016c34:	005b      	lsls	r3, r3, #1
 8016c36:	4413      	add	r3, r2
 8016c38:	00db      	lsls	r3, r3, #3
 8016c3a:	440b      	add	r3, r1
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016c40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c44:	4910      	ldr	r1, [pc, #64]	; (8016c88 <etharp_update_arp_entry+0x148>)
 8016c46:	4613      	mov	r3, r2
 8016c48:	005b      	lsls	r3, r3, #1
 8016c4a:	4413      	add	r3, r2
 8016c4c:	00db      	lsls	r3, r3, #3
 8016c4e:	440b      	add	r3, r1
 8016c50:	2200      	movs	r2, #0
 8016c52:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6939      	ldr	r1, [r7, #16]
 8016c64:	68f8      	ldr	r0, [r7, #12]
 8016c66:	f001 ffb9 	bl	8018bdc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016c6a:	6938      	ldr	r0, [r7, #16]
 8016c6c:	f7f6 fbca 	bl	800d404 <pbuf_free>
  }
  return ERR_OK;
 8016c70:	2300      	movs	r3, #0
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3718      	adds	r7, #24
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}
 8016c7a:	bf00      	nop
 8016c7c:	0801dbd0 	.word	0x0801dbd0
 8016c80:	0801dcc8 	.word	0x0801dcc8
 8016c84:	0801dc48 	.word	0x0801dc48
 8016c88:	20010f58 	.word	0x20010f58

08016c8c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b084      	sub	sp, #16
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c94:	2300      	movs	r3, #0
 8016c96:	60fb      	str	r3, [r7, #12]
 8016c98:	e01e      	b.n	8016cd8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016c9a:	4913      	ldr	r1, [pc, #76]	; (8016ce8 <etharp_cleanup_netif+0x5c>)
 8016c9c:	68fa      	ldr	r2, [r7, #12]
 8016c9e:	4613      	mov	r3, r2
 8016ca0:	005b      	lsls	r3, r3, #1
 8016ca2:	4413      	add	r3, r2
 8016ca4:	00db      	lsls	r3, r3, #3
 8016ca6:	440b      	add	r3, r1
 8016ca8:	3314      	adds	r3, #20
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016cae:	7afb      	ldrb	r3, [r7, #11]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d00e      	beq.n	8016cd2 <etharp_cleanup_netif+0x46>
 8016cb4:	490c      	ldr	r1, [pc, #48]	; (8016ce8 <etharp_cleanup_netif+0x5c>)
 8016cb6:	68fa      	ldr	r2, [r7, #12]
 8016cb8:	4613      	mov	r3, r2
 8016cba:	005b      	lsls	r3, r3, #1
 8016cbc:	4413      	add	r3, r2
 8016cbe:	00db      	lsls	r3, r3, #3
 8016cc0:	440b      	add	r3, r1
 8016cc2:	3308      	adds	r3, #8
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	687a      	ldr	r2, [r7, #4]
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	d102      	bne.n	8016cd2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016ccc:	68f8      	ldr	r0, [r7, #12]
 8016cce:	f7ff fce5 	bl	801669c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	3301      	adds	r3, #1
 8016cd6:	60fb      	str	r3, [r7, #12]
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	2b09      	cmp	r3, #9
 8016cdc:	dddd      	ble.n	8016c9a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016cde:	bf00      	nop
 8016ce0:	bf00      	nop
 8016ce2:	3710      	adds	r7, #16
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	20010f58 	.word	0x20010f58

08016cec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016cec:	b5b0      	push	{r4, r5, r7, lr}
 8016cee:	b08a      	sub	sp, #40	; 0x28
 8016cf0:	af04      	add	r7, sp, #16
 8016cf2:	6078      	str	r0, [r7, #4]
 8016cf4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d107      	bne.n	8016d0c <etharp_input+0x20>
 8016cfc:	4b3f      	ldr	r3, [pc, #252]	; (8016dfc <etharp_input+0x110>)
 8016cfe:	f240 228a 	movw	r2, #650	; 0x28a
 8016d02:	493f      	ldr	r1, [pc, #252]	; (8016e00 <etharp_input+0x114>)
 8016d04:	483f      	ldr	r0, [pc, #252]	; (8016e04 <etharp_input+0x118>)
 8016d06:	f002 faaf 	bl	8019268 <iprintf>
 8016d0a:	e074      	b.n	8016df6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	685b      	ldr	r3, [r3, #4]
 8016d10:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016d12:	693b      	ldr	r3, [r7, #16]
 8016d14:	881b      	ldrh	r3, [r3, #0]
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d1c:	d10c      	bne.n	8016d38 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016d22:	2b06      	cmp	r3, #6
 8016d24:	d108      	bne.n	8016d38 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016d2a:	2b04      	cmp	r3, #4
 8016d2c:	d104      	bne.n	8016d38 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016d2e:	693b      	ldr	r3, [r7, #16]
 8016d30:	885b      	ldrh	r3, [r3, #2]
 8016d32:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016d34:	2b08      	cmp	r3, #8
 8016d36:	d003      	beq.n	8016d40 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016d38:	6878      	ldr	r0, [r7, #4]
 8016d3a:	f7f6 fb63 	bl	800d404 <pbuf_free>
    return;
 8016d3e:	e05a      	b.n	8016df6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016d40:	693b      	ldr	r3, [r7, #16]
 8016d42:	330e      	adds	r3, #14
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016d48:	693b      	ldr	r3, [r7, #16]
 8016d4a:	3318      	adds	r3, #24
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016d50:	683b      	ldr	r3, [r7, #0]
 8016d52:	3304      	adds	r3, #4
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d102      	bne.n	8016d60 <etharp_input+0x74>
    for_us = 0;
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	75fb      	strb	r3, [r7, #23]
 8016d5e:	e009      	b.n	8016d74 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016d60:	68ba      	ldr	r2, [r7, #8]
 8016d62:	683b      	ldr	r3, [r7, #0]
 8016d64:	3304      	adds	r3, #4
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	bf0c      	ite	eq
 8016d6c:	2301      	moveq	r3, #1
 8016d6e:	2300      	movne	r3, #0
 8016d70:	b2db      	uxtb	r3, r3
 8016d72:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016d74:	693b      	ldr	r3, [r7, #16]
 8016d76:	f103 0208 	add.w	r2, r3, #8
 8016d7a:	7dfb      	ldrb	r3, [r7, #23]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d001      	beq.n	8016d84 <etharp_input+0x98>
 8016d80:	2301      	movs	r3, #1
 8016d82:	e000      	b.n	8016d86 <etharp_input+0x9a>
 8016d84:	2302      	movs	r3, #2
 8016d86:	f107 010c 	add.w	r1, r7, #12
 8016d8a:	6838      	ldr	r0, [r7, #0]
 8016d8c:	f7ff fed8 	bl	8016b40 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	88db      	ldrh	r3, [r3, #6]
 8016d94:	b29b      	uxth	r3, r3
 8016d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d9a:	d003      	beq.n	8016da4 <etharp_input+0xb8>
 8016d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016da0:	d01e      	beq.n	8016de0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016da2:	e025      	b.n	8016df0 <etharp_input+0x104>
      if (for_us) {
 8016da4:	7dfb      	ldrb	r3, [r7, #23]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d021      	beq.n	8016dee <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016db0:	693b      	ldr	r3, [r7, #16]
 8016db2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016db6:	683b      	ldr	r3, [r7, #0]
 8016db8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016dbc:	683b      	ldr	r3, [r7, #0]
 8016dbe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016dc0:	693a      	ldr	r2, [r7, #16]
 8016dc2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016dc4:	2102      	movs	r1, #2
 8016dc6:	9103      	str	r1, [sp, #12]
 8016dc8:	f107 010c 	add.w	r1, r7, #12
 8016dcc:	9102      	str	r1, [sp, #8]
 8016dce:	9201      	str	r2, [sp, #4]
 8016dd0:	9300      	str	r3, [sp, #0]
 8016dd2:	462b      	mov	r3, r5
 8016dd4:	4622      	mov	r2, r4
 8016dd6:	4601      	mov	r1, r0
 8016dd8:	6838      	ldr	r0, [r7, #0]
 8016dda:	f000 faef 	bl	80173bc <etharp_raw>
      break;
 8016dde:	e006      	b.n	8016dee <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016de0:	f107 030c 	add.w	r3, r7, #12
 8016de4:	4619      	mov	r1, r3
 8016de6:	6838      	ldr	r0, [r7, #0]
 8016de8:	f7fe f9fc 	bl	80151e4 <dhcp_arp_reply>
      break;
 8016dec:	e000      	b.n	8016df0 <etharp_input+0x104>
      break;
 8016dee:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f7f6 fb07 	bl	800d404 <pbuf_free>
}
 8016df6:	3718      	adds	r7, #24
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8016dfc:	0801dbd0 	.word	0x0801dbd0
 8016e00:	0801dd20 	.word	0x0801dd20
 8016e04:	0801dc48 	.word	0x0801dc48

08016e08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b086      	sub	sp, #24
 8016e0c:	af02      	add	r7, sp, #8
 8016e0e:	60f8      	str	r0, [r7, #12]
 8016e10:	60b9      	str	r1, [r7, #8]
 8016e12:	4613      	mov	r3, r2
 8016e14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016e16:	79fa      	ldrb	r2, [r7, #7]
 8016e18:	4944      	ldr	r1, [pc, #272]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016e1a:	4613      	mov	r3, r2
 8016e1c:	005b      	lsls	r3, r3, #1
 8016e1e:	4413      	add	r3, r2
 8016e20:	00db      	lsls	r3, r3, #3
 8016e22:	440b      	add	r3, r1
 8016e24:	3314      	adds	r3, #20
 8016e26:	781b      	ldrb	r3, [r3, #0]
 8016e28:	2b01      	cmp	r3, #1
 8016e2a:	d806      	bhi.n	8016e3a <etharp_output_to_arp_index+0x32>
 8016e2c:	4b40      	ldr	r3, [pc, #256]	; (8016f30 <etharp_output_to_arp_index+0x128>)
 8016e2e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016e32:	4940      	ldr	r1, [pc, #256]	; (8016f34 <etharp_output_to_arp_index+0x12c>)
 8016e34:	4840      	ldr	r0, [pc, #256]	; (8016f38 <etharp_output_to_arp_index+0x130>)
 8016e36:	f002 fa17 	bl	8019268 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016e3a:	79fa      	ldrb	r2, [r7, #7]
 8016e3c:	493b      	ldr	r1, [pc, #236]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016e3e:	4613      	mov	r3, r2
 8016e40:	005b      	lsls	r3, r3, #1
 8016e42:	4413      	add	r3, r2
 8016e44:	00db      	lsls	r3, r3, #3
 8016e46:	440b      	add	r3, r1
 8016e48:	3314      	adds	r3, #20
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	2b02      	cmp	r3, #2
 8016e4e:	d153      	bne.n	8016ef8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016e50:	79fa      	ldrb	r2, [r7, #7]
 8016e52:	4936      	ldr	r1, [pc, #216]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016e54:	4613      	mov	r3, r2
 8016e56:	005b      	lsls	r3, r3, #1
 8016e58:	4413      	add	r3, r2
 8016e5a:	00db      	lsls	r3, r3, #3
 8016e5c:	440b      	add	r3, r1
 8016e5e:	3312      	adds	r3, #18
 8016e60:	881b      	ldrh	r3, [r3, #0]
 8016e62:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016e66:	d919      	bls.n	8016e9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016e68:	79fa      	ldrb	r2, [r7, #7]
 8016e6a:	4613      	mov	r3, r2
 8016e6c:	005b      	lsls	r3, r3, #1
 8016e6e:	4413      	add	r3, r2
 8016e70:	00db      	lsls	r3, r3, #3
 8016e72:	4a2e      	ldr	r2, [pc, #184]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016e74:	4413      	add	r3, r2
 8016e76:	3304      	adds	r3, #4
 8016e78:	4619      	mov	r1, r3
 8016e7a:	68f8      	ldr	r0, [r7, #12]
 8016e7c:	f000 fb4c 	bl	8017518 <etharp_request>
 8016e80:	4603      	mov	r3, r0
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d138      	bne.n	8016ef8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016e86:	79fa      	ldrb	r2, [r7, #7]
 8016e88:	4928      	ldr	r1, [pc, #160]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016e8a:	4613      	mov	r3, r2
 8016e8c:	005b      	lsls	r3, r3, #1
 8016e8e:	4413      	add	r3, r2
 8016e90:	00db      	lsls	r3, r3, #3
 8016e92:	440b      	add	r3, r1
 8016e94:	3314      	adds	r3, #20
 8016e96:	2203      	movs	r2, #3
 8016e98:	701a      	strb	r2, [r3, #0]
 8016e9a:	e02d      	b.n	8016ef8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016e9c:	79fa      	ldrb	r2, [r7, #7]
 8016e9e:	4923      	ldr	r1, [pc, #140]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016ea0:	4613      	mov	r3, r2
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	4413      	add	r3, r2
 8016ea6:	00db      	lsls	r3, r3, #3
 8016ea8:	440b      	add	r3, r1
 8016eaa:	3312      	adds	r3, #18
 8016eac:	881b      	ldrh	r3, [r3, #0]
 8016eae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016eb2:	d321      	bcc.n	8016ef8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016eb4:	79fa      	ldrb	r2, [r7, #7]
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	005b      	lsls	r3, r3, #1
 8016eba:	4413      	add	r3, r2
 8016ebc:	00db      	lsls	r3, r3, #3
 8016ebe:	4a1b      	ldr	r2, [pc, #108]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016ec0:	4413      	add	r3, r2
 8016ec2:	1d19      	adds	r1, r3, #4
 8016ec4:	79fa      	ldrb	r2, [r7, #7]
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	005b      	lsls	r3, r3, #1
 8016eca:	4413      	add	r3, r2
 8016ecc:	00db      	lsls	r3, r3, #3
 8016ece:	3308      	adds	r3, #8
 8016ed0:	4a16      	ldr	r2, [pc, #88]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016ed2:	4413      	add	r3, r2
 8016ed4:	3304      	adds	r3, #4
 8016ed6:	461a      	mov	r2, r3
 8016ed8:	68f8      	ldr	r0, [r7, #12]
 8016eda:	f000 fafb 	bl	80174d4 <etharp_request_dst>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d109      	bne.n	8016ef8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016ee4:	79fa      	ldrb	r2, [r7, #7]
 8016ee6:	4911      	ldr	r1, [pc, #68]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016ee8:	4613      	mov	r3, r2
 8016eea:	005b      	lsls	r3, r3, #1
 8016eec:	4413      	add	r3, r2
 8016eee:	00db      	lsls	r3, r3, #3
 8016ef0:	440b      	add	r3, r1
 8016ef2:	3314      	adds	r3, #20
 8016ef4:	2203      	movs	r2, #3
 8016ef6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016efe:	79fa      	ldrb	r2, [r7, #7]
 8016f00:	4613      	mov	r3, r2
 8016f02:	005b      	lsls	r3, r3, #1
 8016f04:	4413      	add	r3, r2
 8016f06:	00db      	lsls	r3, r3, #3
 8016f08:	3308      	adds	r3, #8
 8016f0a:	4a08      	ldr	r2, [pc, #32]	; (8016f2c <etharp_output_to_arp_index+0x124>)
 8016f0c:	4413      	add	r3, r2
 8016f0e:	3304      	adds	r3, #4
 8016f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016f14:	9200      	str	r2, [sp, #0]
 8016f16:	460a      	mov	r2, r1
 8016f18:	68b9      	ldr	r1, [r7, #8]
 8016f1a:	68f8      	ldr	r0, [r7, #12]
 8016f1c:	f001 fe5e 	bl	8018bdc <ethernet_output>
 8016f20:	4603      	mov	r3, r0
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	3710      	adds	r7, #16
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd80      	pop	{r7, pc}
 8016f2a:	bf00      	nop
 8016f2c:	20010f58 	.word	0x20010f58
 8016f30:	0801dbd0 	.word	0x0801dbd0
 8016f34:	0801dd40 	.word	0x0801dd40
 8016f38:	0801dc48 	.word	0x0801dc48

08016f3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b08a      	sub	sp, #40	; 0x28
 8016f40:	af02      	add	r7, sp, #8
 8016f42:	60f8      	str	r0, [r7, #12]
 8016f44:	60b9      	str	r1, [r7, #8]
 8016f46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d106      	bne.n	8016f60 <etharp_output+0x24>
 8016f52:	4b73      	ldr	r3, [pc, #460]	; (8017120 <etharp_output+0x1e4>)
 8016f54:	f240 321e 	movw	r2, #798	; 0x31e
 8016f58:	4972      	ldr	r1, [pc, #456]	; (8017124 <etharp_output+0x1e8>)
 8016f5a:	4873      	ldr	r0, [pc, #460]	; (8017128 <etharp_output+0x1ec>)
 8016f5c:	f002 f984 	bl	8019268 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d106      	bne.n	8016f74 <etharp_output+0x38>
 8016f66:	4b6e      	ldr	r3, [pc, #440]	; (8017120 <etharp_output+0x1e4>)
 8016f68:	f240 321f 	movw	r2, #799	; 0x31f
 8016f6c:	496f      	ldr	r1, [pc, #444]	; (801712c <etharp_output+0x1f0>)
 8016f6e:	486e      	ldr	r0, [pc, #440]	; (8017128 <etharp_output+0x1ec>)
 8016f70:	f002 f97a 	bl	8019268 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d106      	bne.n	8016f88 <etharp_output+0x4c>
 8016f7a:	4b69      	ldr	r3, [pc, #420]	; (8017120 <etharp_output+0x1e4>)
 8016f7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016f80:	496b      	ldr	r1, [pc, #428]	; (8017130 <etharp_output+0x1f4>)
 8016f82:	4869      	ldr	r0, [pc, #420]	; (8017128 <etharp_output+0x1ec>)
 8016f84:	f002 f970 	bl	8019268 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	68f9      	ldr	r1, [r7, #12]
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f000 ff16 	bl	8017dc0 <ip4_addr_isbroadcast_u32>
 8016f94:	4603      	mov	r3, r0
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d002      	beq.n	8016fa0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016f9a:	4b66      	ldr	r3, [pc, #408]	; (8017134 <etharp_output+0x1f8>)
 8016f9c:	61fb      	str	r3, [r7, #28]
 8016f9e:	e0af      	b.n	8017100 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016fa8:	2be0      	cmp	r3, #224	; 0xe0
 8016faa:	d118      	bne.n	8016fde <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016fac:	2301      	movs	r3, #1
 8016fae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016fb4:	235e      	movs	r3, #94	; 0x5e
 8016fb6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	3301      	adds	r3, #1
 8016fbc:	781b      	ldrb	r3, [r3, #0]
 8016fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016fc2:	b2db      	uxtb	r3, r3
 8016fc4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	3302      	adds	r3, #2
 8016fca:	781b      	ldrb	r3, [r3, #0]
 8016fcc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	3303      	adds	r3, #3
 8016fd2:	781b      	ldrb	r3, [r3, #0]
 8016fd4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016fd6:	f107 0310 	add.w	r3, r7, #16
 8016fda:	61fb      	str	r3, [r7, #28]
 8016fdc:	e090      	b.n	8017100 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	681a      	ldr	r2, [r3, #0]
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	3304      	adds	r3, #4
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	405a      	eors	r2, r3
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	3308      	adds	r3, #8
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	4013      	ands	r3, r2
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d012      	beq.n	801701c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016ffc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017000:	4293      	cmp	r3, r2
 8017002:	d00b      	beq.n	801701c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	330c      	adds	r3, #12
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d003      	beq.n	8017016 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	330c      	adds	r3, #12
 8017012:	61bb      	str	r3, [r7, #24]
 8017014:	e002      	b.n	801701c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017016:	f06f 0303 	mvn.w	r3, #3
 801701a:	e07d      	b.n	8017118 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801701c:	4b46      	ldr	r3, [pc, #280]	; (8017138 <etharp_output+0x1fc>)
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	4619      	mov	r1, r3
 8017022:	4a46      	ldr	r2, [pc, #280]	; (801713c <etharp_output+0x200>)
 8017024:	460b      	mov	r3, r1
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	440b      	add	r3, r1
 801702a:	00db      	lsls	r3, r3, #3
 801702c:	4413      	add	r3, r2
 801702e:	3314      	adds	r3, #20
 8017030:	781b      	ldrb	r3, [r3, #0]
 8017032:	2b01      	cmp	r3, #1
 8017034:	d925      	bls.n	8017082 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017036:	4b40      	ldr	r3, [pc, #256]	; (8017138 <etharp_output+0x1fc>)
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	4619      	mov	r1, r3
 801703c:	4a3f      	ldr	r2, [pc, #252]	; (801713c <etharp_output+0x200>)
 801703e:	460b      	mov	r3, r1
 8017040:	005b      	lsls	r3, r3, #1
 8017042:	440b      	add	r3, r1
 8017044:	00db      	lsls	r3, r3, #3
 8017046:	4413      	add	r3, r2
 8017048:	3308      	adds	r3, #8
 801704a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801704c:	68fa      	ldr	r2, [r7, #12]
 801704e:	429a      	cmp	r2, r3
 8017050:	d117      	bne.n	8017082 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017052:	69bb      	ldr	r3, [r7, #24]
 8017054:	681a      	ldr	r2, [r3, #0]
 8017056:	4b38      	ldr	r3, [pc, #224]	; (8017138 <etharp_output+0x1fc>)
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	4618      	mov	r0, r3
 801705c:	4937      	ldr	r1, [pc, #220]	; (801713c <etharp_output+0x200>)
 801705e:	4603      	mov	r3, r0
 8017060:	005b      	lsls	r3, r3, #1
 8017062:	4403      	add	r3, r0
 8017064:	00db      	lsls	r3, r3, #3
 8017066:	440b      	add	r3, r1
 8017068:	3304      	adds	r3, #4
 801706a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801706c:	429a      	cmp	r2, r3
 801706e:	d108      	bne.n	8017082 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017070:	4b31      	ldr	r3, [pc, #196]	; (8017138 <etharp_output+0x1fc>)
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	461a      	mov	r2, r3
 8017076:	68b9      	ldr	r1, [r7, #8]
 8017078:	68f8      	ldr	r0, [r7, #12]
 801707a:	f7ff fec5 	bl	8016e08 <etharp_output_to_arp_index>
 801707e:	4603      	mov	r3, r0
 8017080:	e04a      	b.n	8017118 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017082:	2300      	movs	r3, #0
 8017084:	75fb      	strb	r3, [r7, #23]
 8017086:	e031      	b.n	80170ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017088:	7dfa      	ldrb	r2, [r7, #23]
 801708a:	492c      	ldr	r1, [pc, #176]	; (801713c <etharp_output+0x200>)
 801708c:	4613      	mov	r3, r2
 801708e:	005b      	lsls	r3, r3, #1
 8017090:	4413      	add	r3, r2
 8017092:	00db      	lsls	r3, r3, #3
 8017094:	440b      	add	r3, r1
 8017096:	3314      	adds	r3, #20
 8017098:	781b      	ldrb	r3, [r3, #0]
 801709a:	2b01      	cmp	r3, #1
 801709c:	d923      	bls.n	80170e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801709e:	7dfa      	ldrb	r2, [r7, #23]
 80170a0:	4926      	ldr	r1, [pc, #152]	; (801713c <etharp_output+0x200>)
 80170a2:	4613      	mov	r3, r2
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	4413      	add	r3, r2
 80170a8:	00db      	lsls	r3, r3, #3
 80170aa:	440b      	add	r3, r1
 80170ac:	3308      	adds	r3, #8
 80170ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80170b0:	68fa      	ldr	r2, [r7, #12]
 80170b2:	429a      	cmp	r2, r3
 80170b4:	d117      	bne.n	80170e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80170b6:	69bb      	ldr	r3, [r7, #24]
 80170b8:	6819      	ldr	r1, [r3, #0]
 80170ba:	7dfa      	ldrb	r2, [r7, #23]
 80170bc:	481f      	ldr	r0, [pc, #124]	; (801713c <etharp_output+0x200>)
 80170be:	4613      	mov	r3, r2
 80170c0:	005b      	lsls	r3, r3, #1
 80170c2:	4413      	add	r3, r2
 80170c4:	00db      	lsls	r3, r3, #3
 80170c6:	4403      	add	r3, r0
 80170c8:	3304      	adds	r3, #4
 80170ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80170cc:	4299      	cmp	r1, r3
 80170ce:	d10a      	bne.n	80170e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80170d0:	4a19      	ldr	r2, [pc, #100]	; (8017138 <etharp_output+0x1fc>)
 80170d2:	7dfb      	ldrb	r3, [r7, #23]
 80170d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80170d6:	7dfb      	ldrb	r3, [r7, #23]
 80170d8:	461a      	mov	r2, r3
 80170da:	68b9      	ldr	r1, [r7, #8]
 80170dc:	68f8      	ldr	r0, [r7, #12]
 80170de:	f7ff fe93 	bl	8016e08 <etharp_output_to_arp_index>
 80170e2:	4603      	mov	r3, r0
 80170e4:	e018      	b.n	8017118 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80170e6:	7dfb      	ldrb	r3, [r7, #23]
 80170e8:	3301      	adds	r3, #1
 80170ea:	75fb      	strb	r3, [r7, #23]
 80170ec:	7dfb      	ldrb	r3, [r7, #23]
 80170ee:	2b09      	cmp	r3, #9
 80170f0:	d9ca      	bls.n	8017088 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80170f2:	68ba      	ldr	r2, [r7, #8]
 80170f4:	69b9      	ldr	r1, [r7, #24]
 80170f6:	68f8      	ldr	r0, [r7, #12]
 80170f8:	f000 f822 	bl	8017140 <etharp_query>
 80170fc:	4603      	mov	r3, r0
 80170fe:	e00b      	b.n	8017118 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017106:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801710a:	9300      	str	r3, [sp, #0]
 801710c:	69fb      	ldr	r3, [r7, #28]
 801710e:	68b9      	ldr	r1, [r7, #8]
 8017110:	68f8      	ldr	r0, [r7, #12]
 8017112:	f001 fd63 	bl	8018bdc <ethernet_output>
 8017116:	4603      	mov	r3, r0
}
 8017118:	4618      	mov	r0, r3
 801711a:	3720      	adds	r7, #32
 801711c:	46bd      	mov	sp, r7
 801711e:	bd80      	pop	{r7, pc}
 8017120:	0801dbd0 	.word	0x0801dbd0
 8017124:	0801dd20 	.word	0x0801dd20
 8017128:	0801dc48 	.word	0x0801dc48
 801712c:	0801dd70 	.word	0x0801dd70
 8017130:	0801dd10 	.word	0x0801dd10
 8017134:	0802851c 	.word	0x0802851c
 8017138:	20011048 	.word	0x20011048
 801713c:	20010f58 	.word	0x20010f58

08017140 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b08c      	sub	sp, #48	; 0x30
 8017144:	af02      	add	r7, sp, #8
 8017146:	60f8      	str	r0, [r7, #12]
 8017148:	60b9      	str	r1, [r7, #8]
 801714a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	332a      	adds	r3, #42	; 0x2a
 8017150:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017152:	23ff      	movs	r3, #255	; 0xff
 8017154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017158:	2300      	movs	r3, #0
 801715a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	68f9      	ldr	r1, [r7, #12]
 8017162:	4618      	mov	r0, r3
 8017164:	f000 fe2c 	bl	8017dc0 <ip4_addr_isbroadcast_u32>
 8017168:	4603      	mov	r3, r0
 801716a:	2b00      	cmp	r3, #0
 801716c:	d10c      	bne.n	8017188 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801716e:	68bb      	ldr	r3, [r7, #8]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017176:	2be0      	cmp	r3, #224	; 0xe0
 8017178:	d006      	beq.n	8017188 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801717a:	68bb      	ldr	r3, [r7, #8]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d003      	beq.n	8017188 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017180:	68bb      	ldr	r3, [r7, #8]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d102      	bne.n	801718e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017188:	f06f 030f 	mvn.w	r3, #15
 801718c:	e101      	b.n	8017392 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801718e:	68fa      	ldr	r2, [r7, #12]
 8017190:	2101      	movs	r1, #1
 8017192:	68b8      	ldr	r0, [r7, #8]
 8017194:	f7ff fb5c 	bl	8016850 <etharp_find_entry>
 8017198:	4603      	mov	r3, r0
 801719a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801719c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	da02      	bge.n	80171aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80171a4:	8a7b      	ldrh	r3, [r7, #18]
 80171a6:	b25b      	sxtb	r3, r3
 80171a8:	e0f3      	b.n	8017392 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80171aa:	8a7b      	ldrh	r3, [r7, #18]
 80171ac:	2b7e      	cmp	r3, #126	; 0x7e
 80171ae:	d906      	bls.n	80171be <etharp_query+0x7e>
 80171b0:	4b7a      	ldr	r3, [pc, #488]	; (801739c <etharp_query+0x25c>)
 80171b2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80171b6:	497a      	ldr	r1, [pc, #488]	; (80173a0 <etharp_query+0x260>)
 80171b8:	487a      	ldr	r0, [pc, #488]	; (80173a4 <etharp_query+0x264>)
 80171ba:	f002 f855 	bl	8019268 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80171be:	8a7b      	ldrh	r3, [r7, #18]
 80171c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80171c2:	7c7a      	ldrb	r2, [r7, #17]
 80171c4:	4978      	ldr	r1, [pc, #480]	; (80173a8 <etharp_query+0x268>)
 80171c6:	4613      	mov	r3, r2
 80171c8:	005b      	lsls	r3, r3, #1
 80171ca:	4413      	add	r3, r2
 80171cc:	00db      	lsls	r3, r3, #3
 80171ce:	440b      	add	r3, r1
 80171d0:	3314      	adds	r3, #20
 80171d2:	781b      	ldrb	r3, [r3, #0]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d115      	bne.n	8017204 <etharp_query+0xc4>
    is_new_entry = 1;
 80171d8:	2301      	movs	r3, #1
 80171da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80171dc:	7c7a      	ldrb	r2, [r7, #17]
 80171de:	4972      	ldr	r1, [pc, #456]	; (80173a8 <etharp_query+0x268>)
 80171e0:	4613      	mov	r3, r2
 80171e2:	005b      	lsls	r3, r3, #1
 80171e4:	4413      	add	r3, r2
 80171e6:	00db      	lsls	r3, r3, #3
 80171e8:	440b      	add	r3, r1
 80171ea:	3314      	adds	r3, #20
 80171ec:	2201      	movs	r2, #1
 80171ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80171f0:	7c7a      	ldrb	r2, [r7, #17]
 80171f2:	496d      	ldr	r1, [pc, #436]	; (80173a8 <etharp_query+0x268>)
 80171f4:	4613      	mov	r3, r2
 80171f6:	005b      	lsls	r3, r3, #1
 80171f8:	4413      	add	r3, r2
 80171fa:	00db      	lsls	r3, r3, #3
 80171fc:	440b      	add	r3, r1
 80171fe:	3308      	adds	r3, #8
 8017200:	68fa      	ldr	r2, [r7, #12]
 8017202:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017204:	7c7a      	ldrb	r2, [r7, #17]
 8017206:	4968      	ldr	r1, [pc, #416]	; (80173a8 <etharp_query+0x268>)
 8017208:	4613      	mov	r3, r2
 801720a:	005b      	lsls	r3, r3, #1
 801720c:	4413      	add	r3, r2
 801720e:	00db      	lsls	r3, r3, #3
 8017210:	440b      	add	r3, r1
 8017212:	3314      	adds	r3, #20
 8017214:	781b      	ldrb	r3, [r3, #0]
 8017216:	2b01      	cmp	r3, #1
 8017218:	d011      	beq.n	801723e <etharp_query+0xfe>
 801721a:	7c7a      	ldrb	r2, [r7, #17]
 801721c:	4962      	ldr	r1, [pc, #392]	; (80173a8 <etharp_query+0x268>)
 801721e:	4613      	mov	r3, r2
 8017220:	005b      	lsls	r3, r3, #1
 8017222:	4413      	add	r3, r2
 8017224:	00db      	lsls	r3, r3, #3
 8017226:	440b      	add	r3, r1
 8017228:	3314      	adds	r3, #20
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	2b01      	cmp	r3, #1
 801722e:	d806      	bhi.n	801723e <etharp_query+0xfe>
 8017230:	4b5a      	ldr	r3, [pc, #360]	; (801739c <etharp_query+0x25c>)
 8017232:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017236:	495d      	ldr	r1, [pc, #372]	; (80173ac <etharp_query+0x26c>)
 8017238:	485a      	ldr	r0, [pc, #360]	; (80173a4 <etharp_query+0x264>)
 801723a:	f002 f815 	bl	8019268 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801723e:	6a3b      	ldr	r3, [r7, #32]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d102      	bne.n	801724a <etharp_query+0x10a>
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d10c      	bne.n	8017264 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801724a:	68b9      	ldr	r1, [r7, #8]
 801724c:	68f8      	ldr	r0, [r7, #12]
 801724e:	f000 f963 	bl	8017518 <etharp_request>
 8017252:	4603      	mov	r3, r0
 8017254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d102      	bne.n	8017264 <etharp_query+0x124>
      return result;
 801725e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017262:	e096      	b.n	8017392 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d106      	bne.n	8017278 <etharp_query+0x138>
 801726a:	4b4c      	ldr	r3, [pc, #304]	; (801739c <etharp_query+0x25c>)
 801726c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017270:	494f      	ldr	r1, [pc, #316]	; (80173b0 <etharp_query+0x270>)
 8017272:	484c      	ldr	r0, [pc, #304]	; (80173a4 <etharp_query+0x264>)
 8017274:	f001 fff8 	bl	8019268 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017278:	7c7a      	ldrb	r2, [r7, #17]
 801727a:	494b      	ldr	r1, [pc, #300]	; (80173a8 <etharp_query+0x268>)
 801727c:	4613      	mov	r3, r2
 801727e:	005b      	lsls	r3, r3, #1
 8017280:	4413      	add	r3, r2
 8017282:	00db      	lsls	r3, r3, #3
 8017284:	440b      	add	r3, r1
 8017286:	3314      	adds	r3, #20
 8017288:	781b      	ldrb	r3, [r3, #0]
 801728a:	2b01      	cmp	r3, #1
 801728c:	d917      	bls.n	80172be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801728e:	4a49      	ldr	r2, [pc, #292]	; (80173b4 <etharp_query+0x274>)
 8017290:	7c7b      	ldrb	r3, [r7, #17]
 8017292:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017294:	7c7a      	ldrb	r2, [r7, #17]
 8017296:	4613      	mov	r3, r2
 8017298:	005b      	lsls	r3, r3, #1
 801729a:	4413      	add	r3, r2
 801729c:	00db      	lsls	r3, r3, #3
 801729e:	3308      	adds	r3, #8
 80172a0:	4a41      	ldr	r2, [pc, #260]	; (80173a8 <etharp_query+0x268>)
 80172a2:	4413      	add	r3, r2
 80172a4:	3304      	adds	r3, #4
 80172a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80172aa:	9200      	str	r2, [sp, #0]
 80172ac:	697a      	ldr	r2, [r7, #20]
 80172ae:	6879      	ldr	r1, [r7, #4]
 80172b0:	68f8      	ldr	r0, [r7, #12]
 80172b2:	f001 fc93 	bl	8018bdc <ethernet_output>
 80172b6:	4603      	mov	r3, r0
 80172b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80172bc:	e067      	b.n	801738e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80172be:	7c7a      	ldrb	r2, [r7, #17]
 80172c0:	4939      	ldr	r1, [pc, #228]	; (80173a8 <etharp_query+0x268>)
 80172c2:	4613      	mov	r3, r2
 80172c4:	005b      	lsls	r3, r3, #1
 80172c6:	4413      	add	r3, r2
 80172c8:	00db      	lsls	r3, r3, #3
 80172ca:	440b      	add	r3, r1
 80172cc:	3314      	adds	r3, #20
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	2b01      	cmp	r3, #1
 80172d2:	d15c      	bne.n	801738e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80172d4:	2300      	movs	r3, #0
 80172d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80172dc:	e01c      	b.n	8017318 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80172de:	69fb      	ldr	r3, [r7, #28]
 80172e0:	895a      	ldrh	r2, [r3, #10]
 80172e2:	69fb      	ldr	r3, [r7, #28]
 80172e4:	891b      	ldrh	r3, [r3, #8]
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d10a      	bne.n	8017300 <etharp_query+0x1c0>
 80172ea:	69fb      	ldr	r3, [r7, #28]
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d006      	beq.n	8017300 <etharp_query+0x1c0>
 80172f2:	4b2a      	ldr	r3, [pc, #168]	; (801739c <etharp_query+0x25c>)
 80172f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80172f8:	492f      	ldr	r1, [pc, #188]	; (80173b8 <etharp_query+0x278>)
 80172fa:	482a      	ldr	r0, [pc, #168]	; (80173a4 <etharp_query+0x264>)
 80172fc:	f001 ffb4 	bl	8019268 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017300:	69fb      	ldr	r3, [r7, #28]
 8017302:	7b1b      	ldrb	r3, [r3, #12]
 8017304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017308:	2b00      	cmp	r3, #0
 801730a:	d002      	beq.n	8017312 <etharp_query+0x1d2>
        copy_needed = 1;
 801730c:	2301      	movs	r3, #1
 801730e:	61bb      	str	r3, [r7, #24]
        break;
 8017310:	e005      	b.n	801731e <etharp_query+0x1de>
      }
      p = p->next;
 8017312:	69fb      	ldr	r3, [r7, #28]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017318:	69fb      	ldr	r3, [r7, #28]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d1df      	bne.n	80172de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801731e:	69bb      	ldr	r3, [r7, #24]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d007      	beq.n	8017334 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017324:	687a      	ldr	r2, [r7, #4]
 8017326:	f44f 7120 	mov.w	r1, #640	; 0x280
 801732a:	200e      	movs	r0, #14
 801732c:	f7f6 fae2 	bl	800d8f4 <pbuf_clone>
 8017330:	61f8      	str	r0, [r7, #28]
 8017332:	e004      	b.n	801733e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017338:	69f8      	ldr	r0, [r7, #28]
 801733a:	f7f6 f909 	bl	800d550 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801733e:	69fb      	ldr	r3, [r7, #28]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d021      	beq.n	8017388 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017344:	7c7a      	ldrb	r2, [r7, #17]
 8017346:	4918      	ldr	r1, [pc, #96]	; (80173a8 <etharp_query+0x268>)
 8017348:	4613      	mov	r3, r2
 801734a:	005b      	lsls	r3, r3, #1
 801734c:	4413      	add	r3, r2
 801734e:	00db      	lsls	r3, r3, #3
 8017350:	440b      	add	r3, r1
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d00a      	beq.n	801736e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017358:	7c7a      	ldrb	r2, [r7, #17]
 801735a:	4913      	ldr	r1, [pc, #76]	; (80173a8 <etharp_query+0x268>)
 801735c:	4613      	mov	r3, r2
 801735e:	005b      	lsls	r3, r3, #1
 8017360:	4413      	add	r3, r2
 8017362:	00db      	lsls	r3, r3, #3
 8017364:	440b      	add	r3, r1
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	4618      	mov	r0, r3
 801736a:	f7f6 f84b 	bl	800d404 <pbuf_free>
      }
      arp_table[i].q = p;
 801736e:	7c7a      	ldrb	r2, [r7, #17]
 8017370:	490d      	ldr	r1, [pc, #52]	; (80173a8 <etharp_query+0x268>)
 8017372:	4613      	mov	r3, r2
 8017374:	005b      	lsls	r3, r3, #1
 8017376:	4413      	add	r3, r2
 8017378:	00db      	lsls	r3, r3, #3
 801737a:	440b      	add	r3, r1
 801737c:	69fa      	ldr	r2, [r7, #28]
 801737e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017380:	2300      	movs	r3, #0
 8017382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017386:	e002      	b.n	801738e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017388:	23ff      	movs	r3, #255	; 0xff
 801738a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801738e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017392:	4618      	mov	r0, r3
 8017394:	3728      	adds	r7, #40	; 0x28
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}
 801739a:	bf00      	nop
 801739c:	0801dbd0 	.word	0x0801dbd0
 80173a0:	0801dd7c 	.word	0x0801dd7c
 80173a4:	0801dc48 	.word	0x0801dc48
 80173a8:	20010f58 	.word	0x20010f58
 80173ac:	0801dd8c 	.word	0x0801dd8c
 80173b0:	0801dd70 	.word	0x0801dd70
 80173b4:	20011048 	.word	0x20011048
 80173b8:	0801ddb4 	.word	0x0801ddb4

080173bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b08a      	sub	sp, #40	; 0x28
 80173c0:	af02      	add	r7, sp, #8
 80173c2:	60f8      	str	r0, [r7, #12]
 80173c4:	60b9      	str	r1, [r7, #8]
 80173c6:	607a      	str	r2, [r7, #4]
 80173c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80173ca:	2300      	movs	r3, #0
 80173cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d106      	bne.n	80173e2 <etharp_raw+0x26>
 80173d4:	4b3a      	ldr	r3, [pc, #232]	; (80174c0 <etharp_raw+0x104>)
 80173d6:	f240 4257 	movw	r2, #1111	; 0x457
 80173da:	493a      	ldr	r1, [pc, #232]	; (80174c4 <etharp_raw+0x108>)
 80173dc:	483a      	ldr	r0, [pc, #232]	; (80174c8 <etharp_raw+0x10c>)
 80173de:	f001 ff43 	bl	8019268 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80173e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173e6:	211c      	movs	r1, #28
 80173e8:	200e      	movs	r0, #14
 80173ea:	f7f5 fd27 	bl	800ce3c <pbuf_alloc>
 80173ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80173f0:	69bb      	ldr	r3, [r7, #24]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d102      	bne.n	80173fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80173f6:	f04f 33ff 	mov.w	r3, #4294967295
 80173fa:	e05d      	b.n	80174b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80173fc:	69bb      	ldr	r3, [r7, #24]
 80173fe:	895b      	ldrh	r3, [r3, #10]
 8017400:	2b1b      	cmp	r3, #27
 8017402:	d806      	bhi.n	8017412 <etharp_raw+0x56>
 8017404:	4b2e      	ldr	r3, [pc, #184]	; (80174c0 <etharp_raw+0x104>)
 8017406:	f240 4262 	movw	r2, #1122	; 0x462
 801740a:	4930      	ldr	r1, [pc, #192]	; (80174cc <etharp_raw+0x110>)
 801740c:	482e      	ldr	r0, [pc, #184]	; (80174c8 <etharp_raw+0x10c>)
 801740e:	f001 ff2b 	bl	8019268 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017412:	69bb      	ldr	r3, [r7, #24]
 8017414:	685b      	ldr	r3, [r3, #4]
 8017416:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017418:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801741a:	4618      	mov	r0, r3
 801741c:	f7f4 fbbe 	bl	800bb9c <lwip_htons>
 8017420:	4603      	mov	r3, r0
 8017422:	461a      	mov	r2, r3
 8017424:	697b      	ldr	r3, [r7, #20]
 8017426:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801742e:	2b06      	cmp	r3, #6
 8017430:	d006      	beq.n	8017440 <etharp_raw+0x84>
 8017432:	4b23      	ldr	r3, [pc, #140]	; (80174c0 <etharp_raw+0x104>)
 8017434:	f240 4269 	movw	r2, #1129	; 0x469
 8017438:	4925      	ldr	r1, [pc, #148]	; (80174d0 <etharp_raw+0x114>)
 801743a:	4823      	ldr	r0, [pc, #140]	; (80174c8 <etharp_raw+0x10c>)
 801743c:	f001 ff14 	bl	8019268 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017440:	697b      	ldr	r3, [r7, #20]
 8017442:	3308      	adds	r3, #8
 8017444:	2206      	movs	r2, #6
 8017446:	6839      	ldr	r1, [r7, #0]
 8017448:	4618      	mov	r0, r3
 801744a:	f002 f90d 	bl	8019668 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	3312      	adds	r3, #18
 8017452:	2206      	movs	r2, #6
 8017454:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017456:	4618      	mov	r0, r3
 8017458:	f002 f906 	bl	8019668 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801745c:	697b      	ldr	r3, [r7, #20]
 801745e:	330e      	adds	r3, #14
 8017460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017462:	6812      	ldr	r2, [r2, #0]
 8017464:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017466:	697b      	ldr	r3, [r7, #20]
 8017468:	3318      	adds	r3, #24
 801746a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801746c:	6812      	ldr	r2, [r2, #0]
 801746e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	2200      	movs	r2, #0
 8017474:	701a      	strb	r2, [r3, #0]
 8017476:	2200      	movs	r2, #0
 8017478:	f042 0201 	orr.w	r2, r2, #1
 801747c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	2200      	movs	r2, #0
 8017482:	f042 0208 	orr.w	r2, r2, #8
 8017486:	709a      	strb	r2, [r3, #2]
 8017488:	2200      	movs	r2, #0
 801748a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801748c:	697b      	ldr	r3, [r7, #20]
 801748e:	2206      	movs	r2, #6
 8017490:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	2204      	movs	r2, #4
 8017496:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017498:	f640 0306 	movw	r3, #2054	; 0x806
 801749c:	9300      	str	r3, [sp, #0]
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	68ba      	ldr	r2, [r7, #8]
 80174a2:	69b9      	ldr	r1, [r7, #24]
 80174a4:	68f8      	ldr	r0, [r7, #12]
 80174a6:	f001 fb99 	bl	8018bdc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80174aa:	69b8      	ldr	r0, [r7, #24]
 80174ac:	f7f5 ffaa 	bl	800d404 <pbuf_free>
  p = NULL;
 80174b0:	2300      	movs	r3, #0
 80174b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80174b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80174b8:	4618      	mov	r0, r3
 80174ba:	3720      	adds	r7, #32
 80174bc:	46bd      	mov	sp, r7
 80174be:	bd80      	pop	{r7, pc}
 80174c0:	0801dbd0 	.word	0x0801dbd0
 80174c4:	0801dd20 	.word	0x0801dd20
 80174c8:	0801dc48 	.word	0x0801dc48
 80174cc:	0801ddd0 	.word	0x0801ddd0
 80174d0:	0801de04 	.word	0x0801de04

080174d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b088      	sub	sp, #32
 80174d8:	af04      	add	r7, sp, #16
 80174da:	60f8      	str	r0, [r7, #12]
 80174dc:	60b9      	str	r1, [r7, #8]
 80174de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80174f0:	2201      	movs	r2, #1
 80174f2:	9203      	str	r2, [sp, #12]
 80174f4:	68ba      	ldr	r2, [r7, #8]
 80174f6:	9202      	str	r2, [sp, #8]
 80174f8:	4a06      	ldr	r2, [pc, #24]	; (8017514 <etharp_request_dst+0x40>)
 80174fa:	9201      	str	r2, [sp, #4]
 80174fc:	9300      	str	r3, [sp, #0]
 80174fe:	4603      	mov	r3, r0
 8017500:	687a      	ldr	r2, [r7, #4]
 8017502:	68f8      	ldr	r0, [r7, #12]
 8017504:	f7ff ff5a 	bl	80173bc <etharp_raw>
 8017508:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801750a:	4618      	mov	r0, r3
 801750c:	3710      	adds	r7, #16
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}
 8017512:	bf00      	nop
 8017514:	08028524 	.word	0x08028524

08017518 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b082      	sub	sp, #8
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
 8017520:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017522:	4a05      	ldr	r2, [pc, #20]	; (8017538 <etharp_request+0x20>)
 8017524:	6839      	ldr	r1, [r7, #0]
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f7ff ffd4 	bl	80174d4 <etharp_request_dst>
 801752c:	4603      	mov	r3, r0
}
 801752e:	4618      	mov	r0, r3
 8017530:	3708      	adds	r7, #8
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}
 8017536:	bf00      	nop
 8017538:	0802851c 	.word	0x0802851c

0801753c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b08e      	sub	sp, #56	; 0x38
 8017540:	af04      	add	r7, sp, #16
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017546:	4b79      	ldr	r3, [pc, #484]	; (801772c <icmp_input+0x1f0>)
 8017548:	689b      	ldr	r3, [r3, #8]
 801754a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801754e:	781b      	ldrb	r3, [r3, #0]
 8017550:	f003 030f 	and.w	r3, r3, #15
 8017554:	b2db      	uxtb	r3, r3
 8017556:	009b      	lsls	r3, r3, #2
 8017558:	b2db      	uxtb	r3, r3
 801755a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801755c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801755e:	2b13      	cmp	r3, #19
 8017560:	f240 80cd 	bls.w	80176fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	895b      	ldrh	r3, [r3, #10]
 8017568:	2b03      	cmp	r3, #3
 801756a:	f240 80ca 	bls.w	8017702 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	781b      	ldrb	r3, [r3, #0]
 8017574:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017578:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801757c:	2b00      	cmp	r3, #0
 801757e:	f000 80b7 	beq.w	80176f0 <icmp_input+0x1b4>
 8017582:	2b08      	cmp	r3, #8
 8017584:	f040 80b7 	bne.w	80176f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017588:	4b69      	ldr	r3, [pc, #420]	; (8017730 <icmp_input+0x1f4>)
 801758a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801758c:	4b67      	ldr	r3, [pc, #412]	; (801772c <icmp_input+0x1f0>)
 801758e:	695b      	ldr	r3, [r3, #20]
 8017590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017594:	2be0      	cmp	r3, #224	; 0xe0
 8017596:	f000 80bb 	beq.w	8017710 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801759a:	4b64      	ldr	r3, [pc, #400]	; (801772c <icmp_input+0x1f0>)
 801759c:	695b      	ldr	r3, [r3, #20]
 801759e:	4a63      	ldr	r2, [pc, #396]	; (801772c <icmp_input+0x1f0>)
 80175a0:	6812      	ldr	r2, [r2, #0]
 80175a2:	4611      	mov	r1, r2
 80175a4:	4618      	mov	r0, r3
 80175a6:	f000 fc0b 	bl	8017dc0 <ip4_addr_isbroadcast_u32>
 80175aa:	4603      	mov	r3, r0
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	f040 80b1 	bne.w	8017714 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	891b      	ldrh	r3, [r3, #8]
 80175b6:	2b07      	cmp	r3, #7
 80175b8:	f240 80a5 	bls.w	8017706 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80175bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80175be:	330e      	adds	r3, #14
 80175c0:	4619      	mov	r1, r3
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f7f5 fe88 	bl	800d2d8 <pbuf_add_header>
 80175c8:	4603      	mov	r3, r0
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d04b      	beq.n	8017666 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	891a      	ldrh	r2, [r3, #8]
 80175d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80175d4:	4413      	add	r3, r2
 80175d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	891b      	ldrh	r3, [r3, #8]
 80175dc:	8b7a      	ldrh	r2, [r7, #26]
 80175de:	429a      	cmp	r2, r3
 80175e0:	f0c0 809a 	bcc.w	8017718 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80175e4:	8b7b      	ldrh	r3, [r7, #26]
 80175e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175ea:	4619      	mov	r1, r3
 80175ec:	200e      	movs	r0, #14
 80175ee:	f7f5 fc25 	bl	800ce3c <pbuf_alloc>
 80175f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80175f4:	697b      	ldr	r3, [r7, #20]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	f000 8090 	beq.w	801771c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80175fc:	697b      	ldr	r3, [r7, #20]
 80175fe:	895b      	ldrh	r3, [r3, #10]
 8017600:	461a      	mov	r2, r3
 8017602:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017604:	3308      	adds	r3, #8
 8017606:	429a      	cmp	r2, r3
 8017608:	d203      	bcs.n	8017612 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801760a:	6978      	ldr	r0, [r7, #20]
 801760c:	f7f5 fefa 	bl	800d404 <pbuf_free>
          goto icmperr;
 8017610:	e085      	b.n	801771e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017612:	697b      	ldr	r3, [r7, #20]
 8017614:	685b      	ldr	r3, [r3, #4]
 8017616:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801761a:	4618      	mov	r0, r3
 801761c:	f002 f824 	bl	8019668 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017622:	4619      	mov	r1, r3
 8017624:	6978      	ldr	r0, [r7, #20]
 8017626:	f7f5 fe67 	bl	800d2f8 <pbuf_remove_header>
 801762a:	4603      	mov	r3, r0
 801762c:	2b00      	cmp	r3, #0
 801762e:	d009      	beq.n	8017644 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017630:	4b40      	ldr	r3, [pc, #256]	; (8017734 <icmp_input+0x1f8>)
 8017632:	22b6      	movs	r2, #182	; 0xb6
 8017634:	4940      	ldr	r1, [pc, #256]	; (8017738 <icmp_input+0x1fc>)
 8017636:	4841      	ldr	r0, [pc, #260]	; (801773c <icmp_input+0x200>)
 8017638:	f001 fe16 	bl	8019268 <iprintf>
          pbuf_free(r);
 801763c:	6978      	ldr	r0, [r7, #20]
 801763e:	f7f5 fee1 	bl	800d404 <pbuf_free>
          goto icmperr;
 8017642:	e06c      	b.n	801771e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017644:	6879      	ldr	r1, [r7, #4]
 8017646:	6978      	ldr	r0, [r7, #20]
 8017648:	f7f6 f810 	bl	800d66c <pbuf_copy>
 801764c:	4603      	mov	r3, r0
 801764e:	2b00      	cmp	r3, #0
 8017650:	d003      	beq.n	801765a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017652:	6978      	ldr	r0, [r7, #20]
 8017654:	f7f5 fed6 	bl	800d404 <pbuf_free>
          goto icmperr;
 8017658:	e061      	b.n	801771e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f7f5 fed2 	bl	800d404 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	607b      	str	r3, [r7, #4]
 8017664:	e00f      	b.n	8017686 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017666:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017668:	330e      	adds	r3, #14
 801766a:	4619      	mov	r1, r3
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f7f5 fe43 	bl	800d2f8 <pbuf_remove_header>
 8017672:	4603      	mov	r3, r0
 8017674:	2b00      	cmp	r3, #0
 8017676:	d006      	beq.n	8017686 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017678:	4b2e      	ldr	r3, [pc, #184]	; (8017734 <icmp_input+0x1f8>)
 801767a:	22c7      	movs	r2, #199	; 0xc7
 801767c:	4930      	ldr	r1, [pc, #192]	; (8017740 <icmp_input+0x204>)
 801767e:	482f      	ldr	r0, [pc, #188]	; (801773c <icmp_input+0x200>)
 8017680:	f001 fdf2 	bl	8019268 <iprintf>
          goto icmperr;
 8017684:	e04b      	b.n	801771e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	685b      	ldr	r3, [r3, #4]
 801768a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801768c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801768e:	4619      	mov	r1, r3
 8017690:	6878      	ldr	r0, [r7, #4]
 8017692:	f7f5 fe21 	bl	800d2d8 <pbuf_add_header>
 8017696:	4603      	mov	r3, r0
 8017698:	2b00      	cmp	r3, #0
 801769a:	d12b      	bne.n	80176f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	685b      	ldr	r3, [r3, #4]
 80176a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80176a2:	69fb      	ldr	r3, [r7, #28]
 80176a4:	681a      	ldr	r2, [r3, #0]
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80176aa:	4b20      	ldr	r3, [pc, #128]	; (801772c <icmp_input+0x1f0>)
 80176ac:	691a      	ldr	r2, [r3, #16]
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80176b2:	693b      	ldr	r3, [r7, #16]
 80176b4:	2200      	movs	r2, #0
 80176b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80176b8:	693b      	ldr	r3, [r7, #16]
 80176ba:	2200      	movs	r2, #0
 80176bc:	709a      	strb	r2, [r3, #2]
 80176be:	2200      	movs	r2, #0
 80176c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	22ff      	movs	r2, #255	; 0xff
 80176c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	2200      	movs	r2, #0
 80176cc:	729a      	strb	r2, [r3, #10]
 80176ce:	2200      	movs	r2, #0
 80176d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	9302      	str	r3, [sp, #8]
 80176d6:	2301      	movs	r3, #1
 80176d8:	9301      	str	r3, [sp, #4]
 80176da:	2300      	movs	r3, #0
 80176dc:	9300      	str	r3, [sp, #0]
 80176de:	23ff      	movs	r3, #255	; 0xff
 80176e0:	2200      	movs	r2, #0
 80176e2:	69f9      	ldr	r1, [r7, #28]
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f000 fa93 	bl	8017c10 <ip4_output_if>
 80176ea:	4603      	mov	r3, r0
 80176ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80176ee:	e001      	b.n	80176f4 <icmp_input+0x1b8>
      break;
 80176f0:	bf00      	nop
 80176f2:	e000      	b.n	80176f6 <icmp_input+0x1ba>
      break;
 80176f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f7f5 fe84 	bl	800d404 <pbuf_free>
  return;
 80176fc:	e013      	b.n	8017726 <icmp_input+0x1ea>
    goto lenerr;
 80176fe:	bf00      	nop
 8017700:	e002      	b.n	8017708 <icmp_input+0x1cc>
    goto lenerr;
 8017702:	bf00      	nop
 8017704:	e000      	b.n	8017708 <icmp_input+0x1cc>
        goto lenerr;
 8017706:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f7f5 fe7b 	bl	800d404 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801770e:	e00a      	b.n	8017726 <icmp_input+0x1ea>
        goto icmperr;
 8017710:	bf00      	nop
 8017712:	e004      	b.n	801771e <icmp_input+0x1e2>
        goto icmperr;
 8017714:	bf00      	nop
 8017716:	e002      	b.n	801771e <icmp_input+0x1e2>
          goto icmperr;
 8017718:	bf00      	nop
 801771a:	e000      	b.n	801771e <icmp_input+0x1e2>
          goto icmperr;
 801771c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801771e:	6878      	ldr	r0, [r7, #4]
 8017720:	f7f5 fe70 	bl	800d404 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017724:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017726:	3728      	adds	r7, #40	; 0x28
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}
 801772c:	2000d750 	.word	0x2000d750
 8017730:	2000d764 	.word	0x2000d764
 8017734:	0801de48 	.word	0x0801de48
 8017738:	0801de80 	.word	0x0801de80
 801773c:	0801deb8 	.word	0x0801deb8
 8017740:	0801dee0 	.word	0x0801dee0

08017744 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	460b      	mov	r3, r1
 801774e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017750:	78fb      	ldrb	r3, [r7, #3]
 8017752:	461a      	mov	r2, r3
 8017754:	2103      	movs	r1, #3
 8017756:	6878      	ldr	r0, [r7, #4]
 8017758:	f000 f814 	bl	8017784 <icmp_send_response>
}
 801775c:	bf00      	nop
 801775e:	3708      	adds	r7, #8
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}

08017764 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
 801776c:	460b      	mov	r3, r1
 801776e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017770:	78fb      	ldrb	r3, [r7, #3]
 8017772:	461a      	mov	r2, r3
 8017774:	210b      	movs	r1, #11
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f000 f804 	bl	8017784 <icmp_send_response>
}
 801777c:	bf00      	nop
 801777e:	3708      	adds	r7, #8
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}

08017784 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b08c      	sub	sp, #48	; 0x30
 8017788:	af04      	add	r7, sp, #16
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	460b      	mov	r3, r1
 801778e:	70fb      	strb	r3, [r7, #3]
 8017790:	4613      	mov	r3, r2
 8017792:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017794:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017798:	2124      	movs	r1, #36	; 0x24
 801779a:	2022      	movs	r0, #34	; 0x22
 801779c:	f7f5 fb4e 	bl	800ce3c <pbuf_alloc>
 80177a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80177a2:	69fb      	ldr	r3, [r7, #28]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d04c      	beq.n	8017842 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80177a8:	69fb      	ldr	r3, [r7, #28]
 80177aa:	895b      	ldrh	r3, [r3, #10]
 80177ac:	2b23      	cmp	r3, #35	; 0x23
 80177ae:	d806      	bhi.n	80177be <icmp_send_response+0x3a>
 80177b0:	4b26      	ldr	r3, [pc, #152]	; (801784c <icmp_send_response+0xc8>)
 80177b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80177b6:	4926      	ldr	r1, [pc, #152]	; (8017850 <icmp_send_response+0xcc>)
 80177b8:	4826      	ldr	r0, [pc, #152]	; (8017854 <icmp_send_response+0xd0>)
 80177ba:	f001 fd55 	bl	8019268 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80177c4:	69fb      	ldr	r3, [r7, #28]
 80177c6:	685b      	ldr	r3, [r3, #4]
 80177c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80177ca:	697b      	ldr	r3, [r7, #20]
 80177cc:	78fa      	ldrb	r2, [r7, #3]
 80177ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	78ba      	ldrb	r2, [r7, #2]
 80177d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80177d6:	697b      	ldr	r3, [r7, #20]
 80177d8:	2200      	movs	r2, #0
 80177da:	711a      	strb	r2, [r3, #4]
 80177dc:	2200      	movs	r2, #0
 80177de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80177e0:	697b      	ldr	r3, [r7, #20]
 80177e2:	2200      	movs	r2, #0
 80177e4:	719a      	strb	r2, [r3, #6]
 80177e6:	2200      	movs	r2, #0
 80177e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80177ea:	69fb      	ldr	r3, [r7, #28]
 80177ec:	685b      	ldr	r3, [r3, #4]
 80177ee:	f103 0008 	add.w	r0, r3, #8
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	685b      	ldr	r3, [r3, #4]
 80177f6:	221c      	movs	r2, #28
 80177f8:	4619      	mov	r1, r3
 80177fa:	f001 ff35 	bl	8019668 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80177fe:	69bb      	ldr	r3, [r7, #24]
 8017800:	68db      	ldr	r3, [r3, #12]
 8017802:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017804:	f107 030c 	add.w	r3, r7, #12
 8017808:	4618      	mov	r0, r3
 801780a:	f000 f825 	bl	8017858 <ip4_route>
 801780e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017810:	693b      	ldr	r3, [r7, #16]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d011      	beq.n	801783a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017816:	697b      	ldr	r3, [r7, #20]
 8017818:	2200      	movs	r2, #0
 801781a:	709a      	strb	r2, [r3, #2]
 801781c:	2200      	movs	r2, #0
 801781e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017820:	f107 020c 	add.w	r2, r7, #12
 8017824:	693b      	ldr	r3, [r7, #16]
 8017826:	9302      	str	r3, [sp, #8]
 8017828:	2301      	movs	r3, #1
 801782a:	9301      	str	r3, [sp, #4]
 801782c:	2300      	movs	r3, #0
 801782e:	9300      	str	r3, [sp, #0]
 8017830:	23ff      	movs	r3, #255	; 0xff
 8017832:	2100      	movs	r1, #0
 8017834:	69f8      	ldr	r0, [r7, #28]
 8017836:	f000 f9eb 	bl	8017c10 <ip4_output_if>
  }
  pbuf_free(q);
 801783a:	69f8      	ldr	r0, [r7, #28]
 801783c:	f7f5 fde2 	bl	800d404 <pbuf_free>
 8017840:	e000      	b.n	8017844 <icmp_send_response+0xc0>
    return;
 8017842:	bf00      	nop
}
 8017844:	3720      	adds	r7, #32
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}
 801784a:	bf00      	nop
 801784c:	0801de48 	.word	0x0801de48
 8017850:	0801df14 	.word	0x0801df14
 8017854:	0801deb8 	.word	0x0801deb8

08017858 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017858:	b480      	push	{r7}
 801785a:	b085      	sub	sp, #20
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017860:	4b33      	ldr	r3, [pc, #204]	; (8017930 <ip4_route+0xd8>)
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	60fb      	str	r3, [r7, #12]
 8017866:	e036      	b.n	80178d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801786e:	f003 0301 	and.w	r3, r3, #1
 8017872:	b2db      	uxtb	r3, r3
 8017874:	2b00      	cmp	r3, #0
 8017876:	d02b      	beq.n	80178d0 <ip4_route+0x78>
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801787e:	089b      	lsrs	r3, r3, #2
 8017880:	f003 0301 	and.w	r3, r3, #1
 8017884:	b2db      	uxtb	r3, r3
 8017886:	2b00      	cmp	r3, #0
 8017888:	d022      	beq.n	80178d0 <ip4_route+0x78>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	3304      	adds	r3, #4
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d01d      	beq.n	80178d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	681a      	ldr	r2, [r3, #0]
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	3304      	adds	r3, #4
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	405a      	eors	r2, r3
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	3308      	adds	r3, #8
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	4013      	ands	r3, r2
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d101      	bne.n	80178b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	e038      	b.n	8017922 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80178b6:	f003 0302 	and.w	r3, r3, #2
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d108      	bne.n	80178d0 <ip4_route+0x78>
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	330c      	adds	r3, #12
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	429a      	cmp	r2, r3
 80178ca:	d101      	bne.n	80178d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	e028      	b.n	8017922 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	60fb      	str	r3, [r7, #12]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d1c5      	bne.n	8017868 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80178dc:	4b15      	ldr	r3, [pc, #84]	; (8017934 <ip4_route+0xdc>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d01a      	beq.n	801791a <ip4_route+0xc2>
 80178e4:	4b13      	ldr	r3, [pc, #76]	; (8017934 <ip4_route+0xdc>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80178ec:	f003 0301 	and.w	r3, r3, #1
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d012      	beq.n	801791a <ip4_route+0xc2>
 80178f4:	4b0f      	ldr	r3, [pc, #60]	; (8017934 <ip4_route+0xdc>)
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80178fc:	f003 0304 	and.w	r3, r3, #4
 8017900:	2b00      	cmp	r3, #0
 8017902:	d00a      	beq.n	801791a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017904:	4b0b      	ldr	r3, [pc, #44]	; (8017934 <ip4_route+0xdc>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	3304      	adds	r3, #4
 801790a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801790c:	2b00      	cmp	r3, #0
 801790e:	d004      	beq.n	801791a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	b2db      	uxtb	r3, r3
 8017916:	2b7f      	cmp	r3, #127	; 0x7f
 8017918:	d101      	bne.n	801791e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801791a:	2300      	movs	r3, #0
 801791c:	e001      	b.n	8017922 <ip4_route+0xca>
  }

  return netif_default;
 801791e:	4b05      	ldr	r3, [pc, #20]	; (8017934 <ip4_route+0xdc>)
 8017920:	681b      	ldr	r3, [r3, #0]
}
 8017922:	4618      	mov	r0, r3
 8017924:	3714      	adds	r7, #20
 8017926:	46bd      	mov	sp, r7
 8017928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792c:	4770      	bx	lr
 801792e:	bf00      	nop
 8017930:	20010eb8 	.word	0x20010eb8
 8017934:	20010ebc 	.word	0x20010ebc

08017938 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017946:	f003 0301 	and.w	r3, r3, #1
 801794a:	b2db      	uxtb	r3, r3
 801794c:	2b00      	cmp	r3, #0
 801794e:	d016      	beq.n	801797e <ip4_input_accept+0x46>
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	3304      	adds	r3, #4
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d011      	beq.n	801797e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801795a:	4b0b      	ldr	r3, [pc, #44]	; (8017988 <ip4_input_accept+0x50>)
 801795c:	695a      	ldr	r2, [r3, #20]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	3304      	adds	r3, #4
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	429a      	cmp	r2, r3
 8017966:	d008      	beq.n	801797a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017968:	4b07      	ldr	r3, [pc, #28]	; (8017988 <ip4_input_accept+0x50>)
 801796a:	695b      	ldr	r3, [r3, #20]
 801796c:	6879      	ldr	r1, [r7, #4]
 801796e:	4618      	mov	r0, r3
 8017970:	f000 fa26 	bl	8017dc0 <ip4_addr_isbroadcast_u32>
 8017974:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017976:	2b00      	cmp	r3, #0
 8017978:	d001      	beq.n	801797e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801797a:	2301      	movs	r3, #1
 801797c:	e000      	b.n	8017980 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801797e:	2300      	movs	r3, #0
}
 8017980:	4618      	mov	r0, r3
 8017982:	3708      	adds	r7, #8
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}
 8017988:	2000d750 	.word	0x2000d750

0801798c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b088      	sub	sp, #32
 8017990:	af00      	add	r7, sp, #0
 8017992:	6078      	str	r0, [r7, #4]
 8017994:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017996:	2301      	movs	r3, #1
 8017998:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	685b      	ldr	r3, [r3, #4]
 801799e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80179a0:	69fb      	ldr	r3, [r7, #28]
 80179a2:	781b      	ldrb	r3, [r3, #0]
 80179a4:	091b      	lsrs	r3, r3, #4
 80179a6:	b2db      	uxtb	r3, r3
 80179a8:	2b04      	cmp	r3, #4
 80179aa:	d004      	beq.n	80179b6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7f5 fd29 	bl	800d404 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80179b2:	2300      	movs	r3, #0
 80179b4:	e123      	b.n	8017bfe <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80179b6:	69fb      	ldr	r3, [r7, #28]
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	f003 030f 	and.w	r3, r3, #15
 80179be:	b2db      	uxtb	r3, r3
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80179c6:	69fb      	ldr	r3, [r7, #28]
 80179c8:	885b      	ldrh	r3, [r3, #2]
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7f4 f8e5 	bl	800bb9c <lwip_htons>
 80179d2:	4603      	mov	r3, r0
 80179d4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	891b      	ldrh	r3, [r3, #8]
 80179da:	8a3a      	ldrh	r2, [r7, #16]
 80179dc:	429a      	cmp	r2, r3
 80179de:	d204      	bcs.n	80179ea <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80179e0:	8a3b      	ldrh	r3, [r7, #16]
 80179e2:	4619      	mov	r1, r3
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	f7f5 fb87 	bl	800d0f8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	895b      	ldrh	r3, [r3, #10]
 80179ee:	8a7a      	ldrh	r2, [r7, #18]
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d807      	bhi.n	8017a04 <ip4_input+0x78>
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	891b      	ldrh	r3, [r3, #8]
 80179f8:	8a3a      	ldrh	r2, [r7, #16]
 80179fa:	429a      	cmp	r2, r3
 80179fc:	d802      	bhi.n	8017a04 <ip4_input+0x78>
 80179fe:	8a7b      	ldrh	r3, [r7, #18]
 8017a00:	2b13      	cmp	r3, #19
 8017a02:	d804      	bhi.n	8017a0e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017a04:	6878      	ldr	r0, [r7, #4]
 8017a06:	f7f5 fcfd 	bl	800d404 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	e0f7      	b.n	8017bfe <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017a0e:	69fb      	ldr	r3, [r7, #28]
 8017a10:	691b      	ldr	r3, [r3, #16]
 8017a12:	4a7d      	ldr	r2, [pc, #500]	; (8017c08 <ip4_input+0x27c>)
 8017a14:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017a16:	69fb      	ldr	r3, [r7, #28]
 8017a18:	68db      	ldr	r3, [r3, #12]
 8017a1a:	4a7b      	ldr	r2, [pc, #492]	; (8017c08 <ip4_input+0x27c>)
 8017a1c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a1e:	4b7a      	ldr	r3, [pc, #488]	; (8017c08 <ip4_input+0x27c>)
 8017a20:	695b      	ldr	r3, [r3, #20]
 8017a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a26:	2be0      	cmp	r3, #224	; 0xe0
 8017a28:	d112      	bne.n	8017a50 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a30:	f003 0301 	and.w	r3, r3, #1
 8017a34:	b2db      	uxtb	r3, r3
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d007      	beq.n	8017a4a <ip4_input+0xbe>
 8017a3a:	683b      	ldr	r3, [r7, #0]
 8017a3c:	3304      	adds	r3, #4
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d002      	beq.n	8017a4a <ip4_input+0xbe>
      netif = inp;
 8017a44:	683b      	ldr	r3, [r7, #0]
 8017a46:	61bb      	str	r3, [r7, #24]
 8017a48:	e02a      	b.n	8017aa0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	61bb      	str	r3, [r7, #24]
 8017a4e:	e027      	b.n	8017aa0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017a50:	6838      	ldr	r0, [r7, #0]
 8017a52:	f7ff ff71 	bl	8017938 <ip4_input_accept>
 8017a56:	4603      	mov	r3, r0
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d002      	beq.n	8017a62 <ip4_input+0xd6>
      netif = inp;
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	61bb      	str	r3, [r7, #24]
 8017a60:	e01e      	b.n	8017aa0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017a62:	2300      	movs	r3, #0
 8017a64:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017a66:	4b68      	ldr	r3, [pc, #416]	; (8017c08 <ip4_input+0x27c>)
 8017a68:	695b      	ldr	r3, [r3, #20]
 8017a6a:	b2db      	uxtb	r3, r3
 8017a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8017a6e:	d017      	beq.n	8017aa0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017a70:	4b66      	ldr	r3, [pc, #408]	; (8017c0c <ip4_input+0x280>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	61bb      	str	r3, [r7, #24]
 8017a76:	e00e      	b.n	8017a96 <ip4_input+0x10a>
          if (netif == inp) {
 8017a78:	69ba      	ldr	r2, [r7, #24]
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d006      	beq.n	8017a8e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017a80:	69b8      	ldr	r0, [r7, #24]
 8017a82:	f7ff ff59 	bl	8017938 <ip4_input_accept>
 8017a86:	4603      	mov	r3, r0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d108      	bne.n	8017a9e <ip4_input+0x112>
 8017a8c:	e000      	b.n	8017a90 <ip4_input+0x104>
            continue;
 8017a8e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017a90:	69bb      	ldr	r3, [r7, #24]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	61bb      	str	r3, [r7, #24]
 8017a96:	69bb      	ldr	r3, [r7, #24]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d1ed      	bne.n	8017a78 <ip4_input+0xec>
 8017a9c:	e000      	b.n	8017aa0 <ip4_input+0x114>
            break;
 8017a9e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017aa0:	69bb      	ldr	r3, [r7, #24]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d111      	bne.n	8017aca <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017aa6:	69fb      	ldr	r3, [r7, #28]
 8017aa8:	7a5b      	ldrb	r3, [r3, #9]
 8017aaa:	2b11      	cmp	r3, #17
 8017aac:	d10d      	bne.n	8017aca <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017aae:	8a7b      	ldrh	r3, [r7, #18]
 8017ab0:	69fa      	ldr	r2, [r7, #28]
 8017ab2:	4413      	add	r3, r2
 8017ab4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	885b      	ldrh	r3, [r3, #2]
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017ac0:	d103      	bne.n	8017aca <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017ac2:	683b      	ldr	r3, [r7, #0]
 8017ac4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017aca:	697b      	ldr	r3, [r7, #20]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d017      	beq.n	8017b00 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017ad0:	4b4d      	ldr	r3, [pc, #308]	; (8017c08 <ip4_input+0x27c>)
 8017ad2:	691b      	ldr	r3, [r3, #16]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d013      	beq.n	8017b00 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017ad8:	4b4b      	ldr	r3, [pc, #300]	; (8017c08 <ip4_input+0x27c>)
 8017ada:	691b      	ldr	r3, [r3, #16]
 8017adc:	6839      	ldr	r1, [r7, #0]
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f000 f96e 	bl	8017dc0 <ip4_addr_isbroadcast_u32>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d105      	bne.n	8017af6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017aea:	4b47      	ldr	r3, [pc, #284]	; (8017c08 <ip4_input+0x27c>)
 8017aec:	691b      	ldr	r3, [r3, #16]
 8017aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017af2:	2be0      	cmp	r3, #224	; 0xe0
 8017af4:	d104      	bne.n	8017b00 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017af6:	6878      	ldr	r0, [r7, #4]
 8017af8:	f7f5 fc84 	bl	800d404 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017afc:	2300      	movs	r3, #0
 8017afe:	e07e      	b.n	8017bfe <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017b00:	69bb      	ldr	r3, [r7, #24]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d104      	bne.n	8017b10 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f7f5 fc7c 	bl	800d404 <pbuf_free>
    return ERR_OK;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	e076      	b.n	8017bfe <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017b10:	69fb      	ldr	r3, [r7, #28]
 8017b12:	88db      	ldrh	r3, [r3, #6]
 8017b14:	b29b      	uxth	r3, r3
 8017b16:	461a      	mov	r2, r3
 8017b18:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017b1c:	4013      	ands	r3, r2
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d00b      	beq.n	8017b3a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017b22:	6878      	ldr	r0, [r7, #4]
 8017b24:	f000 fc92 	bl	801844c <ip4_reass>
 8017b28:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d101      	bne.n	8017b34 <ip4_input+0x1a8>
      return ERR_OK;
 8017b30:	2300      	movs	r3, #0
 8017b32:	e064      	b.n	8017bfe <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	685b      	ldr	r3, [r3, #4]
 8017b38:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017b3a:	4a33      	ldr	r2, [pc, #204]	; (8017c08 <ip4_input+0x27c>)
 8017b3c:	69bb      	ldr	r3, [r7, #24]
 8017b3e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017b40:	4a31      	ldr	r2, [pc, #196]	; (8017c08 <ip4_input+0x27c>)
 8017b42:	683b      	ldr	r3, [r7, #0]
 8017b44:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017b46:	4a30      	ldr	r2, [pc, #192]	; (8017c08 <ip4_input+0x27c>)
 8017b48:	69fb      	ldr	r3, [r7, #28]
 8017b4a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017b4c:	69fb      	ldr	r3, [r7, #28]
 8017b4e:	781b      	ldrb	r3, [r3, #0]
 8017b50:	f003 030f 	and.w	r3, r3, #15
 8017b54:	b2db      	uxtb	r3, r3
 8017b56:	009b      	lsls	r3, r3, #2
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	b29a      	uxth	r2, r3
 8017b5c:	4b2a      	ldr	r3, [pc, #168]	; (8017c08 <ip4_input+0x27c>)
 8017b5e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017b60:	8a7b      	ldrh	r3, [r7, #18]
 8017b62:	4619      	mov	r1, r3
 8017b64:	6878      	ldr	r0, [r7, #4]
 8017b66:	f7f5 fbc7 	bl	800d2f8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017b6a:	69fb      	ldr	r3, [r7, #28]
 8017b6c:	7a5b      	ldrb	r3, [r3, #9]
 8017b6e:	2b11      	cmp	r3, #17
 8017b70:	d006      	beq.n	8017b80 <ip4_input+0x1f4>
 8017b72:	2b11      	cmp	r3, #17
 8017b74:	dc13      	bgt.n	8017b9e <ip4_input+0x212>
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	d00c      	beq.n	8017b94 <ip4_input+0x208>
 8017b7a:	2b06      	cmp	r3, #6
 8017b7c:	d005      	beq.n	8017b8a <ip4_input+0x1fe>
 8017b7e:	e00e      	b.n	8017b9e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017b80:	6839      	ldr	r1, [r7, #0]
 8017b82:	6878      	ldr	r0, [r7, #4]
 8017b84:	f7fc fade 	bl	8014144 <udp_input>
        break;
 8017b88:	e026      	b.n	8017bd8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017b8a:	6839      	ldr	r1, [r7, #0]
 8017b8c:	6878      	ldr	r0, [r7, #4]
 8017b8e:	f7f7 fe97 	bl	800f8c0 <tcp_input>
        break;
 8017b92:	e021      	b.n	8017bd8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017b94:	6839      	ldr	r1, [r7, #0]
 8017b96:	6878      	ldr	r0, [r7, #4]
 8017b98:	f7ff fcd0 	bl	801753c <icmp_input>
        break;
 8017b9c:	e01c      	b.n	8017bd8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017b9e:	4b1a      	ldr	r3, [pc, #104]	; (8017c08 <ip4_input+0x27c>)
 8017ba0:	695b      	ldr	r3, [r3, #20]
 8017ba2:	69b9      	ldr	r1, [r7, #24]
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f000 f90b 	bl	8017dc0 <ip4_addr_isbroadcast_u32>
 8017baa:	4603      	mov	r3, r0
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d10f      	bne.n	8017bd0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017bb0:	4b15      	ldr	r3, [pc, #84]	; (8017c08 <ip4_input+0x27c>)
 8017bb2:	695b      	ldr	r3, [r3, #20]
 8017bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017bb8:	2be0      	cmp	r3, #224	; 0xe0
 8017bba:	d009      	beq.n	8017bd0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017bbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017bc0:	4619      	mov	r1, r3
 8017bc2:	6878      	ldr	r0, [r7, #4]
 8017bc4:	f7f5 fc0b 	bl	800d3de <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017bc8:	2102      	movs	r1, #2
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	f7ff fdba 	bl	8017744 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017bd0:	6878      	ldr	r0, [r7, #4]
 8017bd2:	f7f5 fc17 	bl	800d404 <pbuf_free>
        break;
 8017bd6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017bd8:	4b0b      	ldr	r3, [pc, #44]	; (8017c08 <ip4_input+0x27c>)
 8017bda:	2200      	movs	r2, #0
 8017bdc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017bde:	4b0a      	ldr	r3, [pc, #40]	; (8017c08 <ip4_input+0x27c>)
 8017be0:	2200      	movs	r2, #0
 8017be2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017be4:	4b08      	ldr	r3, [pc, #32]	; (8017c08 <ip4_input+0x27c>)
 8017be6:	2200      	movs	r2, #0
 8017be8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017bea:	4b07      	ldr	r3, [pc, #28]	; (8017c08 <ip4_input+0x27c>)
 8017bec:	2200      	movs	r2, #0
 8017bee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017bf0:	4b05      	ldr	r3, [pc, #20]	; (8017c08 <ip4_input+0x27c>)
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017bf6:	4b04      	ldr	r3, [pc, #16]	; (8017c08 <ip4_input+0x27c>)
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017bfc:	2300      	movs	r3, #0
}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3720      	adds	r7, #32
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}
 8017c06:	bf00      	nop
 8017c08:	2000d750 	.word	0x2000d750
 8017c0c:	20010eb8 	.word	0x20010eb8

08017c10 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b08a      	sub	sp, #40	; 0x28
 8017c14:	af04      	add	r7, sp, #16
 8017c16:	60f8      	str	r0, [r7, #12]
 8017c18:	60b9      	str	r1, [r7, #8]
 8017c1a:	607a      	str	r2, [r7, #4]
 8017c1c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d009      	beq.n	8017c3c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d003      	beq.n	8017c36 <ip4_output_if+0x26>
 8017c2e:	68bb      	ldr	r3, [r7, #8]
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d102      	bne.n	8017c3c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c38:	3304      	adds	r3, #4
 8017c3a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017c3c:	78fa      	ldrb	r2, [r7, #3]
 8017c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c40:	9302      	str	r3, [sp, #8]
 8017c42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017c46:	9301      	str	r3, [sp, #4]
 8017c48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017c4c:	9300      	str	r3, [sp, #0]
 8017c4e:	4613      	mov	r3, r2
 8017c50:	687a      	ldr	r2, [r7, #4]
 8017c52:	6979      	ldr	r1, [r7, #20]
 8017c54:	68f8      	ldr	r0, [r7, #12]
 8017c56:	f000 f805 	bl	8017c64 <ip4_output_if_src>
 8017c5a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	3718      	adds	r7, #24
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd80      	pop	{r7, pc}

08017c64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b088      	sub	sp, #32
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	60f8      	str	r0, [r7, #12]
 8017c6c:	60b9      	str	r1, [r7, #8]
 8017c6e:	607a      	str	r2, [r7, #4]
 8017c70:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	7b9b      	ldrb	r3, [r3, #14]
 8017c76:	2b01      	cmp	r3, #1
 8017c78:	d006      	beq.n	8017c88 <ip4_output_if_src+0x24>
 8017c7a:	4b4b      	ldr	r3, [pc, #300]	; (8017da8 <ip4_output_if_src+0x144>)
 8017c7c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017c80:	494a      	ldr	r1, [pc, #296]	; (8017dac <ip4_output_if_src+0x148>)
 8017c82:	484b      	ldr	r0, [pc, #300]	; (8017db0 <ip4_output_if_src+0x14c>)
 8017c84:	f001 faf0 	bl	8019268 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d060      	beq.n	8017d50 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017c8e:	2314      	movs	r3, #20
 8017c90:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017c92:	2114      	movs	r1, #20
 8017c94:	68f8      	ldr	r0, [r7, #12]
 8017c96:	f7f5 fb1f 	bl	800d2d8 <pbuf_add_header>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d002      	beq.n	8017ca6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017ca0:	f06f 0301 	mvn.w	r3, #1
 8017ca4:	e07c      	b.n	8017da0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	685b      	ldr	r3, [r3, #4]
 8017caa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	895b      	ldrh	r3, [r3, #10]
 8017cb0:	2b13      	cmp	r3, #19
 8017cb2:	d806      	bhi.n	8017cc2 <ip4_output_if_src+0x5e>
 8017cb4:	4b3c      	ldr	r3, [pc, #240]	; (8017da8 <ip4_output_if_src+0x144>)
 8017cb6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017cba:	493e      	ldr	r1, [pc, #248]	; (8017db4 <ip4_output_if_src+0x150>)
 8017cbc:	483c      	ldr	r0, [pc, #240]	; (8017db0 <ip4_output_if_src+0x14c>)
 8017cbe:	f001 fad3 	bl	8019268 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017cc2:	69fb      	ldr	r3, [r7, #28]
 8017cc4:	78fa      	ldrb	r2, [r7, #3]
 8017cc6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017cc8:	69fb      	ldr	r3, [r7, #28]
 8017cca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017cce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	681a      	ldr	r2, [r3, #0]
 8017cd4:	69fb      	ldr	r3, [r7, #28]
 8017cd6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017cd8:	8b7b      	ldrh	r3, [r7, #26]
 8017cda:	089b      	lsrs	r3, r3, #2
 8017cdc:	b29b      	uxth	r3, r3
 8017cde:	b2db      	uxtb	r3, r3
 8017ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ce4:	b2da      	uxtb	r2, r3
 8017ce6:	69fb      	ldr	r3, [r7, #28]
 8017ce8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017cea:	69fb      	ldr	r3, [r7, #28]
 8017cec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017cf0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	891b      	ldrh	r3, [r3, #8]
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7f3 ff50 	bl	800bb9c <lwip_htons>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	461a      	mov	r2, r3
 8017d00:	69fb      	ldr	r3, [r7, #28]
 8017d02:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017d04:	69fb      	ldr	r3, [r7, #28]
 8017d06:	2200      	movs	r2, #0
 8017d08:	719a      	strb	r2, [r3, #6]
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017d0e:	4b2a      	ldr	r3, [pc, #168]	; (8017db8 <ip4_output_if_src+0x154>)
 8017d10:	881b      	ldrh	r3, [r3, #0]
 8017d12:	4618      	mov	r0, r3
 8017d14:	f7f3 ff42 	bl	800bb9c <lwip_htons>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	461a      	mov	r2, r3
 8017d1c:	69fb      	ldr	r3, [r7, #28]
 8017d1e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017d20:	4b25      	ldr	r3, [pc, #148]	; (8017db8 <ip4_output_if_src+0x154>)
 8017d22:	881b      	ldrh	r3, [r3, #0]
 8017d24:	3301      	adds	r3, #1
 8017d26:	b29a      	uxth	r2, r3
 8017d28:	4b23      	ldr	r3, [pc, #140]	; (8017db8 <ip4_output_if_src+0x154>)
 8017d2a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017d2c:	68bb      	ldr	r3, [r7, #8]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d104      	bne.n	8017d3c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017d32:	4b22      	ldr	r3, [pc, #136]	; (8017dbc <ip4_output_if_src+0x158>)
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	69fb      	ldr	r3, [r7, #28]
 8017d38:	60da      	str	r2, [r3, #12]
 8017d3a:	e003      	b.n	8017d44 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	681a      	ldr	r2, [r3, #0]
 8017d40:	69fb      	ldr	r3, [r7, #28]
 8017d42:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017d44:	69fb      	ldr	r3, [r7, #28]
 8017d46:	2200      	movs	r2, #0
 8017d48:	729a      	strb	r2, [r3, #10]
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	72da      	strb	r2, [r3, #11]
 8017d4e:	e00f      	b.n	8017d70 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	895b      	ldrh	r3, [r3, #10]
 8017d54:	2b13      	cmp	r3, #19
 8017d56:	d802      	bhi.n	8017d5e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017d58:	f06f 0301 	mvn.w	r3, #1
 8017d5c:	e020      	b.n	8017da0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	685b      	ldr	r3, [r3, #4]
 8017d62:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017d64:	69fb      	ldr	r3, [r7, #28]
 8017d66:	691b      	ldr	r3, [r3, #16]
 8017d68:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017d6a:	f107 0314 	add.w	r3, r7, #20
 8017d6e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d00c      	beq.n	8017d92 <ip4_output_if_src+0x12e>
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	891a      	ldrh	r2, [r3, #8]
 8017d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d906      	bls.n	8017d92 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017d84:	687a      	ldr	r2, [r7, #4]
 8017d86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017d88:	68f8      	ldr	r0, [r7, #12]
 8017d8a:	f000 fd53 	bl	8018834 <ip4_frag>
 8017d8e:	4603      	mov	r3, r0
 8017d90:	e006      	b.n	8017da0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d94:	695b      	ldr	r3, [r3, #20]
 8017d96:	687a      	ldr	r2, [r7, #4]
 8017d98:	68f9      	ldr	r1, [r7, #12]
 8017d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d9c:	4798      	blx	r3
 8017d9e:	4603      	mov	r3, r0
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	3720      	adds	r7, #32
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	0801df40 	.word	0x0801df40
 8017dac:	0801df74 	.word	0x0801df74
 8017db0:	0801df80 	.word	0x0801df80
 8017db4:	0801dfa8 	.word	0x0801dfa8
 8017db8:	2001104a 	.word	0x2001104a
 8017dbc:	08028514 	.word	0x08028514

08017dc0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017dc0:	b480      	push	{r7}
 8017dc2:	b085      	sub	sp, #20
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dd4:	d002      	beq.n	8017ddc <ip4_addr_isbroadcast_u32+0x1c>
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d101      	bne.n	8017de0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017ddc:	2301      	movs	r3, #1
 8017dde:	e02a      	b.n	8017e36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017de0:	683b      	ldr	r3, [r7, #0]
 8017de2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017de6:	f003 0302 	and.w	r3, r3, #2
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d101      	bne.n	8017df2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017dee:	2300      	movs	r3, #0
 8017df0:	e021      	b.n	8017e36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	3304      	adds	r3, #4
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	687a      	ldr	r2, [r7, #4]
 8017dfa:	429a      	cmp	r2, r3
 8017dfc:	d101      	bne.n	8017e02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	e019      	b.n	8017e36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017e02:	68fa      	ldr	r2, [r7, #12]
 8017e04:	683b      	ldr	r3, [r7, #0]
 8017e06:	3304      	adds	r3, #4
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	405a      	eors	r2, r3
 8017e0c:	683b      	ldr	r3, [r7, #0]
 8017e0e:	3308      	adds	r3, #8
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	4013      	ands	r3, r2
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d10d      	bne.n	8017e34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017e18:	683b      	ldr	r3, [r7, #0]
 8017e1a:	3308      	adds	r3, #8
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	43da      	mvns	r2, r3
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017e24:	683b      	ldr	r3, [r7, #0]
 8017e26:	3308      	adds	r3, #8
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	d101      	bne.n	8017e34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017e30:	2301      	movs	r3, #1
 8017e32:	e000      	b.n	8017e36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017e34:	2300      	movs	r3, #0
  }
}
 8017e36:	4618      	mov	r0, r3
 8017e38:	3714      	adds	r7, #20
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e40:	4770      	bx	lr
	...

08017e44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b084      	sub	sp, #16
 8017e48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017e4e:	4b12      	ldr	r3, [pc, #72]	; (8017e98 <ip_reass_tmr+0x54>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017e54:	e018      	b.n	8017e88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	7fdb      	ldrb	r3, [r3, #31]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d00b      	beq.n	8017e76 <ip_reass_tmr+0x32>
      r->timer--;
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	7fdb      	ldrb	r3, [r3, #31]
 8017e62:	3b01      	subs	r3, #1
 8017e64:	b2da      	uxtb	r2, r3
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	60fb      	str	r3, [r7, #12]
 8017e74:	e008      	b.n	8017e88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017e80:	68b9      	ldr	r1, [r7, #8]
 8017e82:	6878      	ldr	r0, [r7, #4]
 8017e84:	f000 f80a 	bl	8017e9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d1e3      	bne.n	8017e56 <ip_reass_tmr+0x12>
    }
  }
}
 8017e8e:	bf00      	nop
 8017e90:	bf00      	nop
 8017e92:	3710      	adds	r7, #16
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bd80      	pop	{r7, pc}
 8017e98:	2001104c 	.word	0x2001104c

08017e9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b088      	sub	sp, #32
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
 8017ea4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017eaa:	683a      	ldr	r2, [r7, #0]
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d105      	bne.n	8017ebe <ip_reass_free_complete_datagram+0x22>
 8017eb2:	4b45      	ldr	r3, [pc, #276]	; (8017fc8 <ip_reass_free_complete_datagram+0x12c>)
 8017eb4:	22ab      	movs	r2, #171	; 0xab
 8017eb6:	4945      	ldr	r1, [pc, #276]	; (8017fcc <ip_reass_free_complete_datagram+0x130>)
 8017eb8:	4845      	ldr	r0, [pc, #276]	; (8017fd0 <ip_reass_free_complete_datagram+0x134>)
 8017eba:	f001 f9d5 	bl	8019268 <iprintf>
  if (prev != NULL) {
 8017ebe:	683b      	ldr	r3, [r7, #0]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d00a      	beq.n	8017eda <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017ec4:	683b      	ldr	r3, [r7, #0]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	687a      	ldr	r2, [r7, #4]
 8017eca:	429a      	cmp	r2, r3
 8017ecc:	d005      	beq.n	8017eda <ip_reass_free_complete_datagram+0x3e>
 8017ece:	4b3e      	ldr	r3, [pc, #248]	; (8017fc8 <ip_reass_free_complete_datagram+0x12c>)
 8017ed0:	22ad      	movs	r2, #173	; 0xad
 8017ed2:	4940      	ldr	r1, [pc, #256]	; (8017fd4 <ip_reass_free_complete_datagram+0x138>)
 8017ed4:	483e      	ldr	r0, [pc, #248]	; (8017fd0 <ip_reass_free_complete_datagram+0x134>)
 8017ed6:	f001 f9c7 	bl	8019268 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	685b      	ldr	r3, [r3, #4]
 8017ede:	685b      	ldr	r3, [r3, #4]
 8017ee0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017ee2:	697b      	ldr	r3, [r7, #20]
 8017ee4:	889b      	ldrh	r3, [r3, #4]
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d12a      	bne.n	8017f42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	685b      	ldr	r3, [r3, #4]
 8017ef0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	681a      	ldr	r2, [r3, #0]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017efa:	69bb      	ldr	r3, [r7, #24]
 8017efc:	6858      	ldr	r0, [r3, #4]
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	3308      	adds	r3, #8
 8017f02:	2214      	movs	r2, #20
 8017f04:	4619      	mov	r1, r3
 8017f06:	f001 fbaf 	bl	8019668 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017f0a:	2101      	movs	r1, #1
 8017f0c:	69b8      	ldr	r0, [r7, #24]
 8017f0e:	f7ff fc29 	bl	8017764 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017f12:	69b8      	ldr	r0, [r7, #24]
 8017f14:	f7f5 fb04 	bl	800d520 <pbuf_clen>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017f1c:	8bfa      	ldrh	r2, [r7, #30]
 8017f1e:	8a7b      	ldrh	r3, [r7, #18]
 8017f20:	4413      	add	r3, r2
 8017f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017f26:	db05      	blt.n	8017f34 <ip_reass_free_complete_datagram+0x98>
 8017f28:	4b27      	ldr	r3, [pc, #156]	; (8017fc8 <ip_reass_free_complete_datagram+0x12c>)
 8017f2a:	22bc      	movs	r2, #188	; 0xbc
 8017f2c:	492a      	ldr	r1, [pc, #168]	; (8017fd8 <ip_reass_free_complete_datagram+0x13c>)
 8017f2e:	4828      	ldr	r0, [pc, #160]	; (8017fd0 <ip_reass_free_complete_datagram+0x134>)
 8017f30:	f001 f99a 	bl	8019268 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017f34:	8bfa      	ldrh	r2, [r7, #30]
 8017f36:	8a7b      	ldrh	r3, [r7, #18]
 8017f38:	4413      	add	r3, r2
 8017f3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017f3c:	69b8      	ldr	r0, [r7, #24]
 8017f3e:	f7f5 fa61 	bl	800d404 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	685b      	ldr	r3, [r3, #4]
 8017f46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017f48:	e01f      	b.n	8017f8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017f4a:	69bb      	ldr	r3, [r7, #24]
 8017f4c:	685b      	ldr	r3, [r3, #4]
 8017f4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017f50:	69bb      	ldr	r3, [r7, #24]
 8017f52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017f5a:	68f8      	ldr	r0, [r7, #12]
 8017f5c:	f7f5 fae0 	bl	800d520 <pbuf_clen>
 8017f60:	4603      	mov	r3, r0
 8017f62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017f64:	8bfa      	ldrh	r2, [r7, #30]
 8017f66:	8a7b      	ldrh	r3, [r7, #18]
 8017f68:	4413      	add	r3, r2
 8017f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017f6e:	db05      	blt.n	8017f7c <ip_reass_free_complete_datagram+0xe0>
 8017f70:	4b15      	ldr	r3, [pc, #84]	; (8017fc8 <ip_reass_free_complete_datagram+0x12c>)
 8017f72:	22cc      	movs	r2, #204	; 0xcc
 8017f74:	4918      	ldr	r1, [pc, #96]	; (8017fd8 <ip_reass_free_complete_datagram+0x13c>)
 8017f76:	4816      	ldr	r0, [pc, #88]	; (8017fd0 <ip_reass_free_complete_datagram+0x134>)
 8017f78:	f001 f976 	bl	8019268 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017f7c:	8bfa      	ldrh	r2, [r7, #30]
 8017f7e:	8a7b      	ldrh	r3, [r7, #18]
 8017f80:	4413      	add	r3, r2
 8017f82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017f84:	68f8      	ldr	r0, [r7, #12]
 8017f86:	f7f5 fa3d 	bl	800d404 <pbuf_free>
  while (p != NULL) {
 8017f8a:	69bb      	ldr	r3, [r7, #24]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d1dc      	bne.n	8017f4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017f90:	6839      	ldr	r1, [r7, #0]
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	f000 f8c2 	bl	801811c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017f98:	4b10      	ldr	r3, [pc, #64]	; (8017fdc <ip_reass_free_complete_datagram+0x140>)
 8017f9a:	881b      	ldrh	r3, [r3, #0]
 8017f9c:	8bfa      	ldrh	r2, [r7, #30]
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	d905      	bls.n	8017fae <ip_reass_free_complete_datagram+0x112>
 8017fa2:	4b09      	ldr	r3, [pc, #36]	; (8017fc8 <ip_reass_free_complete_datagram+0x12c>)
 8017fa4:	22d2      	movs	r2, #210	; 0xd2
 8017fa6:	490e      	ldr	r1, [pc, #56]	; (8017fe0 <ip_reass_free_complete_datagram+0x144>)
 8017fa8:	4809      	ldr	r0, [pc, #36]	; (8017fd0 <ip_reass_free_complete_datagram+0x134>)
 8017faa:	f001 f95d 	bl	8019268 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017fae:	4b0b      	ldr	r3, [pc, #44]	; (8017fdc <ip_reass_free_complete_datagram+0x140>)
 8017fb0:	881a      	ldrh	r2, [r3, #0]
 8017fb2:	8bfb      	ldrh	r3, [r7, #30]
 8017fb4:	1ad3      	subs	r3, r2, r3
 8017fb6:	b29a      	uxth	r2, r3
 8017fb8:	4b08      	ldr	r3, [pc, #32]	; (8017fdc <ip_reass_free_complete_datagram+0x140>)
 8017fba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017fbc:	8bfb      	ldrh	r3, [r7, #30]
}
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	3720      	adds	r7, #32
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}
 8017fc6:	bf00      	nop
 8017fc8:	0801dfd8 	.word	0x0801dfd8
 8017fcc:	0801e014 	.word	0x0801e014
 8017fd0:	0801e020 	.word	0x0801e020
 8017fd4:	0801e048 	.word	0x0801e048
 8017fd8:	0801e05c 	.word	0x0801e05c
 8017fdc:	20011050 	.word	0x20011050
 8017fe0:	0801e07c 	.word	0x0801e07c

08017fe4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b08a      	sub	sp, #40	; 0x28
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
 8017fec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017fee:	2300      	movs	r3, #0
 8017ff0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017ffe:	2300      	movs	r3, #0
 8018000:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018002:	4b28      	ldr	r3, [pc, #160]	; (80180a4 <ip_reass_remove_oldest_datagram+0xc0>)
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018008:	e030      	b.n	801806c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800c:	695a      	ldr	r2, [r3, #20]
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	68db      	ldr	r3, [r3, #12]
 8018012:	429a      	cmp	r2, r3
 8018014:	d10c      	bne.n	8018030 <ip_reass_remove_oldest_datagram+0x4c>
 8018016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018018:	699a      	ldr	r2, [r3, #24]
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	691b      	ldr	r3, [r3, #16]
 801801e:	429a      	cmp	r2, r3
 8018020:	d106      	bne.n	8018030 <ip_reass_remove_oldest_datagram+0x4c>
 8018022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018024:	899a      	ldrh	r2, [r3, #12]
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	889b      	ldrh	r3, [r3, #4]
 801802a:	b29b      	uxth	r3, r3
 801802c:	429a      	cmp	r2, r3
 801802e:	d014      	beq.n	801805a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018030:	693b      	ldr	r3, [r7, #16]
 8018032:	3301      	adds	r3, #1
 8018034:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018036:	6a3b      	ldr	r3, [r7, #32]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d104      	bne.n	8018046 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801803e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018040:	69fb      	ldr	r3, [r7, #28]
 8018042:	61bb      	str	r3, [r7, #24]
 8018044:	e009      	b.n	801805a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018048:	7fda      	ldrb	r2, [r3, #31]
 801804a:	6a3b      	ldr	r3, [r7, #32]
 801804c:	7fdb      	ldrb	r3, [r3, #31]
 801804e:	429a      	cmp	r2, r3
 8018050:	d803      	bhi.n	801805a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018054:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d001      	beq.n	8018066 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018064:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806e:	2b00      	cmp	r3, #0
 8018070:	d1cb      	bne.n	801800a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018072:	6a3b      	ldr	r3, [r7, #32]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d008      	beq.n	801808a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018078:	69b9      	ldr	r1, [r7, #24]
 801807a:	6a38      	ldr	r0, [r7, #32]
 801807c:	f7ff ff0e 	bl	8017e9c <ip_reass_free_complete_datagram>
 8018080:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018082:	697a      	ldr	r2, [r7, #20]
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	4413      	add	r3, r2
 8018088:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801808a:	697a      	ldr	r2, [r7, #20]
 801808c:	683b      	ldr	r3, [r7, #0]
 801808e:	429a      	cmp	r2, r3
 8018090:	da02      	bge.n	8018098 <ip_reass_remove_oldest_datagram+0xb4>
 8018092:	693b      	ldr	r3, [r7, #16]
 8018094:	2b01      	cmp	r3, #1
 8018096:	dcac      	bgt.n	8017ff2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018098:	697b      	ldr	r3, [r7, #20]
}
 801809a:	4618      	mov	r0, r3
 801809c:	3728      	adds	r7, #40	; 0x28
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd80      	pop	{r7, pc}
 80180a2:	bf00      	nop
 80180a4:	2001104c 	.word	0x2001104c

080180a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b084      	sub	sp, #16
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
 80180b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80180b2:	2004      	movs	r0, #4
 80180b4:	f7f4 fa80 	bl	800c5b8 <memp_malloc>
 80180b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d110      	bne.n	80180e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80180c0:	6839      	ldr	r1, [r7, #0]
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f7ff ff8e 	bl	8017fe4 <ip_reass_remove_oldest_datagram>
 80180c8:	4602      	mov	r2, r0
 80180ca:	683b      	ldr	r3, [r7, #0]
 80180cc:	4293      	cmp	r3, r2
 80180ce:	dc03      	bgt.n	80180d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80180d0:	2004      	movs	r0, #4
 80180d2:	f7f4 fa71 	bl	800c5b8 <memp_malloc>
 80180d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d101      	bne.n	80180e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80180de:	2300      	movs	r3, #0
 80180e0:	e016      	b.n	8018110 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80180e2:	2220      	movs	r2, #32
 80180e4:	2100      	movs	r1, #0
 80180e6:	68f8      	ldr	r0, [r7, #12]
 80180e8:	f001 f95d 	bl	80193a6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	220f      	movs	r2, #15
 80180f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80180f2:	4b09      	ldr	r3, [pc, #36]	; (8018118 <ip_reass_enqueue_new_datagram+0x70>)
 80180f4:	681a      	ldr	r2, [r3, #0]
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80180fa:	4a07      	ldr	r2, [pc, #28]	; (8018118 <ip_reass_enqueue_new_datagram+0x70>)
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	3308      	adds	r3, #8
 8018104:	2214      	movs	r2, #20
 8018106:	6879      	ldr	r1, [r7, #4]
 8018108:	4618      	mov	r0, r3
 801810a:	f001 faad 	bl	8019668 <memcpy>
  return ipr;
 801810e:	68fb      	ldr	r3, [r7, #12]
}
 8018110:	4618      	mov	r0, r3
 8018112:	3710      	adds	r7, #16
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}
 8018118:	2001104c 	.word	0x2001104c

0801811c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b082      	sub	sp, #8
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
 8018124:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018126:	4b10      	ldr	r3, [pc, #64]	; (8018168 <ip_reass_dequeue_datagram+0x4c>)
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	687a      	ldr	r2, [r7, #4]
 801812c:	429a      	cmp	r2, r3
 801812e:	d104      	bne.n	801813a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	4a0c      	ldr	r2, [pc, #48]	; (8018168 <ip_reass_dequeue_datagram+0x4c>)
 8018136:	6013      	str	r3, [r2, #0]
 8018138:	e00d      	b.n	8018156 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d106      	bne.n	801814e <ip_reass_dequeue_datagram+0x32>
 8018140:	4b0a      	ldr	r3, [pc, #40]	; (801816c <ip_reass_dequeue_datagram+0x50>)
 8018142:	f240 1245 	movw	r2, #325	; 0x145
 8018146:	490a      	ldr	r1, [pc, #40]	; (8018170 <ip_reass_dequeue_datagram+0x54>)
 8018148:	480a      	ldr	r0, [pc, #40]	; (8018174 <ip_reass_dequeue_datagram+0x58>)
 801814a:	f001 f88d 	bl	8019268 <iprintf>
    prev->next = ipr->next;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	681a      	ldr	r2, [r3, #0]
 8018152:	683b      	ldr	r3, [r7, #0]
 8018154:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018156:	6879      	ldr	r1, [r7, #4]
 8018158:	2004      	movs	r0, #4
 801815a:	f7f4 faa3 	bl	800c6a4 <memp_free>
}
 801815e:	bf00      	nop
 8018160:	3708      	adds	r7, #8
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
 8018166:	bf00      	nop
 8018168:	2001104c 	.word	0x2001104c
 801816c:	0801dfd8 	.word	0x0801dfd8
 8018170:	0801e0a0 	.word	0x0801e0a0
 8018174:	0801e020 	.word	0x0801e020

08018178 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b08c      	sub	sp, #48	; 0x30
 801817c:	af00      	add	r7, sp, #0
 801817e:	60f8      	str	r0, [r7, #12]
 8018180:	60b9      	str	r1, [r7, #8]
 8018182:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018184:	2300      	movs	r3, #0
 8018186:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018188:	2301      	movs	r3, #1
 801818a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801818c:	68bb      	ldr	r3, [r7, #8]
 801818e:	685b      	ldr	r3, [r3, #4]
 8018190:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018192:	69fb      	ldr	r3, [r7, #28]
 8018194:	885b      	ldrh	r3, [r3, #2]
 8018196:	b29b      	uxth	r3, r3
 8018198:	4618      	mov	r0, r3
 801819a:	f7f3 fcff 	bl	800bb9c <lwip_htons>
 801819e:	4603      	mov	r3, r0
 80181a0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80181a2:	69fb      	ldr	r3, [r7, #28]
 80181a4:	781b      	ldrb	r3, [r3, #0]
 80181a6:	f003 030f 	and.w	r3, r3, #15
 80181aa:	b2db      	uxtb	r3, r3
 80181ac:	009b      	lsls	r3, r3, #2
 80181ae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80181b0:	7e7b      	ldrb	r3, [r7, #25]
 80181b2:	b29b      	uxth	r3, r3
 80181b4:	8b7a      	ldrh	r2, [r7, #26]
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d202      	bcs.n	80181c0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80181ba:	f04f 33ff 	mov.w	r3, #4294967295
 80181be:	e135      	b.n	801842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80181c0:	7e7b      	ldrb	r3, [r7, #25]
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	8b7a      	ldrh	r2, [r7, #26]
 80181c6:	1ad3      	subs	r3, r2, r3
 80181c8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80181ca:	69fb      	ldr	r3, [r7, #28]
 80181cc:	88db      	ldrh	r3, [r3, #6]
 80181ce:	b29b      	uxth	r3, r3
 80181d0:	4618      	mov	r0, r3
 80181d2:	f7f3 fce3 	bl	800bb9c <lwip_htons>
 80181d6:	4603      	mov	r3, r0
 80181d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181dc:	b29b      	uxth	r3, r3
 80181de:	00db      	lsls	r3, r3, #3
 80181e0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80181e2:	68bb      	ldr	r3, [r7, #8]
 80181e4:	685b      	ldr	r3, [r3, #4]
 80181e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80181e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ea:	2200      	movs	r2, #0
 80181ec:	701a      	strb	r2, [r3, #0]
 80181ee:	2200      	movs	r2, #0
 80181f0:	705a      	strb	r2, [r3, #1]
 80181f2:	2200      	movs	r2, #0
 80181f4:	709a      	strb	r2, [r3, #2]
 80181f6:	2200      	movs	r2, #0
 80181f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80181fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181fc:	8afa      	ldrh	r2, [r7, #22]
 80181fe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018200:	8afa      	ldrh	r2, [r7, #22]
 8018202:	8b7b      	ldrh	r3, [r7, #26]
 8018204:	4413      	add	r3, r2
 8018206:	b29a      	uxth	r2, r3
 8018208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820e:	88db      	ldrh	r3, [r3, #6]
 8018210:	b29b      	uxth	r3, r3
 8018212:	8afa      	ldrh	r2, [r7, #22]
 8018214:	429a      	cmp	r2, r3
 8018216:	d902      	bls.n	801821e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018218:	f04f 33ff 	mov.w	r3, #4294967295
 801821c:	e106      	b.n	801842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	685b      	ldr	r3, [r3, #4]
 8018222:	627b      	str	r3, [r7, #36]	; 0x24
 8018224:	e068      	b.n	80182f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018228:	685b      	ldr	r3, [r3, #4]
 801822a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801822c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801822e:	889b      	ldrh	r3, [r3, #4]
 8018230:	b29a      	uxth	r2, r3
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	889b      	ldrh	r3, [r3, #4]
 8018236:	b29b      	uxth	r3, r3
 8018238:	429a      	cmp	r2, r3
 801823a:	d235      	bcs.n	80182a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801823e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018240:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018244:	2b00      	cmp	r3, #0
 8018246:	d020      	beq.n	801828a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801824a:	889b      	ldrh	r3, [r3, #4]
 801824c:	b29a      	uxth	r2, r3
 801824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018250:	88db      	ldrh	r3, [r3, #6]
 8018252:	b29b      	uxth	r3, r3
 8018254:	429a      	cmp	r2, r3
 8018256:	d307      	bcc.n	8018268 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801825a:	88db      	ldrh	r3, [r3, #6]
 801825c:	b29a      	uxth	r2, r3
 801825e:	693b      	ldr	r3, [r7, #16]
 8018260:	889b      	ldrh	r3, [r3, #4]
 8018262:	b29b      	uxth	r3, r3
 8018264:	429a      	cmp	r2, r3
 8018266:	d902      	bls.n	801826e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018268:	f04f 33ff 	mov.w	r3, #4294967295
 801826c:	e0de      	b.n	801842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018270:	68ba      	ldr	r2, [r7, #8]
 8018272:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018276:	88db      	ldrh	r3, [r3, #6]
 8018278:	b29a      	uxth	r2, r3
 801827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801827c:	889b      	ldrh	r3, [r3, #4]
 801827e:	b29b      	uxth	r3, r3
 8018280:	429a      	cmp	r2, r3
 8018282:	d03d      	beq.n	8018300 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018284:	2300      	movs	r3, #0
 8018286:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018288:	e03a      	b.n	8018300 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801828c:	88db      	ldrh	r3, [r3, #6]
 801828e:	b29a      	uxth	r2, r3
 8018290:	693b      	ldr	r3, [r7, #16]
 8018292:	889b      	ldrh	r3, [r3, #4]
 8018294:	b29b      	uxth	r3, r3
 8018296:	429a      	cmp	r2, r3
 8018298:	d902      	bls.n	80182a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801829a:	f04f 33ff 	mov.w	r3, #4294967295
 801829e:	e0c5      	b.n	801842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	68ba      	ldr	r2, [r7, #8]
 80182a4:	605a      	str	r2, [r3, #4]
      break;
 80182a6:	e02b      	b.n	8018300 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80182a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182aa:	889b      	ldrh	r3, [r3, #4]
 80182ac:	b29a      	uxth	r2, r3
 80182ae:	693b      	ldr	r3, [r7, #16]
 80182b0:	889b      	ldrh	r3, [r3, #4]
 80182b2:	b29b      	uxth	r3, r3
 80182b4:	429a      	cmp	r2, r3
 80182b6:	d102      	bne.n	80182be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80182b8:	f04f 33ff 	mov.w	r3, #4294967295
 80182bc:	e0b6      	b.n	801842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80182be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182c0:	889b      	ldrh	r3, [r3, #4]
 80182c2:	b29a      	uxth	r2, r3
 80182c4:	693b      	ldr	r3, [r7, #16]
 80182c6:	88db      	ldrh	r3, [r3, #6]
 80182c8:	b29b      	uxth	r3, r3
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d202      	bcs.n	80182d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80182ce:	f04f 33ff 	mov.w	r3, #4294967295
 80182d2:	e0ab      	b.n	801842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80182d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d009      	beq.n	80182ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80182da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182dc:	88db      	ldrh	r3, [r3, #6]
 80182de:	b29a      	uxth	r2, r3
 80182e0:	693b      	ldr	r3, [r7, #16]
 80182e2:	889b      	ldrh	r3, [r3, #4]
 80182e4:	b29b      	uxth	r3, r3
 80182e6:	429a      	cmp	r2, r3
 80182e8:	d001      	beq.n	80182ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80182ea:	2300      	movs	r3, #0
 80182ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80182ee:	693b      	ldr	r3, [r7, #16]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80182f4:	693b      	ldr	r3, [r7, #16]
 80182f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80182f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d193      	bne.n	8018226 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80182fe:	e000      	b.n	8018302 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018300:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018304:	2b00      	cmp	r3, #0
 8018306:	d12d      	bne.n	8018364 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801830a:	2b00      	cmp	r3, #0
 801830c:	d01c      	beq.n	8018348 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018310:	88db      	ldrh	r3, [r3, #6]
 8018312:	b29a      	uxth	r2, r3
 8018314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018316:	889b      	ldrh	r3, [r3, #4]
 8018318:	b29b      	uxth	r3, r3
 801831a:	429a      	cmp	r2, r3
 801831c:	d906      	bls.n	801832c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801831e:	4b45      	ldr	r3, [pc, #276]	; (8018434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018320:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018324:	4944      	ldr	r1, [pc, #272]	; (8018438 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018326:	4845      	ldr	r0, [pc, #276]	; (801843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018328:	f000 ff9e 	bl	8019268 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801832e:	68ba      	ldr	r2, [r7, #8]
 8018330:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018334:	88db      	ldrh	r3, [r3, #6]
 8018336:	b29a      	uxth	r2, r3
 8018338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801833a:	889b      	ldrh	r3, [r3, #4]
 801833c:	b29b      	uxth	r3, r3
 801833e:	429a      	cmp	r2, r3
 8018340:	d010      	beq.n	8018364 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018342:	2300      	movs	r3, #0
 8018344:	623b      	str	r3, [r7, #32]
 8018346:	e00d      	b.n	8018364 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	685b      	ldr	r3, [r3, #4]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d006      	beq.n	801835e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018350:	4b38      	ldr	r3, [pc, #224]	; (8018434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018352:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018356:	493a      	ldr	r1, [pc, #232]	; (8018440 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018358:	4838      	ldr	r0, [pc, #224]	; (801843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801835a:	f000 ff85 	bl	8019268 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	68ba      	ldr	r2, [r7, #8]
 8018362:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d105      	bne.n	8018376 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	7f9b      	ldrb	r3, [r3, #30]
 801836e:	f003 0301 	and.w	r3, r3, #1
 8018372:	2b00      	cmp	r3, #0
 8018374:	d059      	beq.n	801842a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018376:	6a3b      	ldr	r3, [r7, #32]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d04f      	beq.n	801841c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	685b      	ldr	r3, [r3, #4]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d006      	beq.n	8018392 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	685b      	ldr	r3, [r3, #4]
 8018388:	685b      	ldr	r3, [r3, #4]
 801838a:	889b      	ldrh	r3, [r3, #4]
 801838c:	b29b      	uxth	r3, r3
 801838e:	2b00      	cmp	r3, #0
 8018390:	d002      	beq.n	8018398 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018392:	2300      	movs	r3, #0
 8018394:	623b      	str	r3, [r7, #32]
 8018396:	e041      	b.n	801841c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801839a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80183a2:	e012      	b.n	80183ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80183a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183a6:	685b      	ldr	r3, [r3, #4]
 80183a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80183aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ac:	88db      	ldrh	r3, [r3, #6]
 80183ae:	b29a      	uxth	r2, r3
 80183b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183b2:	889b      	ldrh	r3, [r3, #4]
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	429a      	cmp	r2, r3
 80183b8:	d002      	beq.n	80183c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80183ba:	2300      	movs	r3, #0
 80183bc:	623b      	str	r3, [r7, #32]
            break;
 80183be:	e007      	b.n	80183d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80183c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80183c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80183ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d1e9      	bne.n	80183a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80183d0:	6a3b      	ldr	r3, [r7, #32]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d022      	beq.n	801841c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	685b      	ldr	r3, [r3, #4]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d106      	bne.n	80183ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80183de:	4b15      	ldr	r3, [pc, #84]	; (8018434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80183e0:	f240 12df 	movw	r2, #479	; 0x1df
 80183e4:	4917      	ldr	r1, [pc, #92]	; (8018444 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80183e6:	4815      	ldr	r0, [pc, #84]	; (801843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80183e8:	f000 ff3e 	bl	8019268 <iprintf>
          LWIP_ASSERT("sanity check",
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	685b      	ldr	r3, [r3, #4]
 80183f0:	685b      	ldr	r3, [r3, #4]
 80183f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d106      	bne.n	8018406 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80183f8:	4b0e      	ldr	r3, [pc, #56]	; (8018434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80183fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80183fe:	4911      	ldr	r1, [pc, #68]	; (8018444 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018400:	480e      	ldr	r0, [pc, #56]	; (801843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018402:	f000 ff31 	bl	8019268 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d006      	beq.n	801841c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801840e:	4b09      	ldr	r3, [pc, #36]	; (8018434 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018410:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018414:	490c      	ldr	r1, [pc, #48]	; (8018448 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018416:	4809      	ldr	r0, [pc, #36]	; (801843c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018418:	f000 ff26 	bl	8019268 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801841c:	6a3b      	ldr	r3, [r7, #32]
 801841e:	2b00      	cmp	r3, #0
 8018420:	bf14      	ite	ne
 8018422:	2301      	movne	r3, #1
 8018424:	2300      	moveq	r3, #0
 8018426:	b2db      	uxtb	r3, r3
 8018428:	e000      	b.n	801842c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801842a:	2300      	movs	r3, #0
}
 801842c:	4618      	mov	r0, r3
 801842e:	3730      	adds	r7, #48	; 0x30
 8018430:	46bd      	mov	sp, r7
 8018432:	bd80      	pop	{r7, pc}
 8018434:	0801dfd8 	.word	0x0801dfd8
 8018438:	0801e0bc 	.word	0x0801e0bc
 801843c:	0801e020 	.word	0x0801e020
 8018440:	0801e0dc 	.word	0x0801e0dc
 8018444:	0801e114 	.word	0x0801e114
 8018448:	0801e124 	.word	0x0801e124

0801844c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b08e      	sub	sp, #56	; 0x38
 8018450:	af00      	add	r7, sp, #0
 8018452:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	685b      	ldr	r3, [r3, #4]
 8018458:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801845c:	781b      	ldrb	r3, [r3, #0]
 801845e:	f003 030f 	and.w	r3, r3, #15
 8018462:	b2db      	uxtb	r3, r3
 8018464:	009b      	lsls	r3, r3, #2
 8018466:	b2db      	uxtb	r3, r3
 8018468:	2b14      	cmp	r3, #20
 801846a:	f040 8171 	bne.w	8018750 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018470:	88db      	ldrh	r3, [r3, #6]
 8018472:	b29b      	uxth	r3, r3
 8018474:	4618      	mov	r0, r3
 8018476:	f7f3 fb91 	bl	800bb9c <lwip_htons>
 801847a:	4603      	mov	r3, r0
 801847c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018480:	b29b      	uxth	r3, r3
 8018482:	00db      	lsls	r3, r3, #3
 8018484:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018488:	885b      	ldrh	r3, [r3, #2]
 801848a:	b29b      	uxth	r3, r3
 801848c:	4618      	mov	r0, r3
 801848e:	f7f3 fb85 	bl	800bb9c <lwip_htons>
 8018492:	4603      	mov	r3, r0
 8018494:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018498:	781b      	ldrb	r3, [r3, #0]
 801849a:	f003 030f 	and.w	r3, r3, #15
 801849e:	b2db      	uxtb	r3, r3
 80184a0:	009b      	lsls	r3, r3, #2
 80184a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80184a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80184aa:	b29b      	uxth	r3, r3
 80184ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80184ae:	429a      	cmp	r2, r3
 80184b0:	f0c0 8150 	bcc.w	8018754 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80184b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80184bc:	1ad3      	subs	r3, r2, r3
 80184be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f7f5 f82d 	bl	800d520 <pbuf_clen>
 80184c6:	4603      	mov	r3, r0
 80184c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80184ca:	4b8c      	ldr	r3, [pc, #560]	; (80186fc <ip4_reass+0x2b0>)
 80184cc:	881b      	ldrh	r3, [r3, #0]
 80184ce:	461a      	mov	r2, r3
 80184d0:	8c3b      	ldrh	r3, [r7, #32]
 80184d2:	4413      	add	r3, r2
 80184d4:	2b0a      	cmp	r3, #10
 80184d6:	dd10      	ble.n	80184fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80184d8:	8c3b      	ldrh	r3, [r7, #32]
 80184da:	4619      	mov	r1, r3
 80184dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184de:	f7ff fd81 	bl	8017fe4 <ip_reass_remove_oldest_datagram>
 80184e2:	4603      	mov	r3, r0
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	f000 8137 	beq.w	8018758 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80184ea:	4b84      	ldr	r3, [pc, #528]	; (80186fc <ip4_reass+0x2b0>)
 80184ec:	881b      	ldrh	r3, [r3, #0]
 80184ee:	461a      	mov	r2, r3
 80184f0:	8c3b      	ldrh	r3, [r7, #32]
 80184f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80184f4:	2b0a      	cmp	r3, #10
 80184f6:	f300 812f 	bgt.w	8018758 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80184fa:	4b81      	ldr	r3, [pc, #516]	; (8018700 <ip4_reass+0x2b4>)
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	633b      	str	r3, [r7, #48]	; 0x30
 8018500:	e015      	b.n	801852e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018504:	695a      	ldr	r2, [r3, #20]
 8018506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018508:	68db      	ldr	r3, [r3, #12]
 801850a:	429a      	cmp	r2, r3
 801850c:	d10c      	bne.n	8018528 <ip4_reass+0xdc>
 801850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018510:	699a      	ldr	r2, [r3, #24]
 8018512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018514:	691b      	ldr	r3, [r3, #16]
 8018516:	429a      	cmp	r2, r3
 8018518:	d106      	bne.n	8018528 <ip4_reass+0xdc>
 801851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801851c:	899a      	ldrh	r2, [r3, #12]
 801851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018520:	889b      	ldrh	r3, [r3, #4]
 8018522:	b29b      	uxth	r3, r3
 8018524:	429a      	cmp	r2, r3
 8018526:	d006      	beq.n	8018536 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	633b      	str	r3, [r7, #48]	; 0x30
 801852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018530:	2b00      	cmp	r3, #0
 8018532:	d1e6      	bne.n	8018502 <ip4_reass+0xb6>
 8018534:	e000      	b.n	8018538 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018536:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801853a:	2b00      	cmp	r3, #0
 801853c:	d109      	bne.n	8018552 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801853e:	8c3b      	ldrh	r3, [r7, #32]
 8018540:	4619      	mov	r1, r3
 8018542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018544:	f7ff fdb0 	bl	80180a8 <ip_reass_enqueue_new_datagram>
 8018548:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801854c:	2b00      	cmp	r3, #0
 801854e:	d11c      	bne.n	801858a <ip4_reass+0x13e>
      goto nullreturn;
 8018550:	e105      	b.n	801875e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018554:	88db      	ldrh	r3, [r3, #6]
 8018556:	b29b      	uxth	r3, r3
 8018558:	4618      	mov	r0, r3
 801855a:	f7f3 fb1f 	bl	800bb9c <lwip_htons>
 801855e:	4603      	mov	r3, r0
 8018560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018564:	2b00      	cmp	r3, #0
 8018566:	d110      	bne.n	801858a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801856a:	89db      	ldrh	r3, [r3, #14]
 801856c:	4618      	mov	r0, r3
 801856e:	f7f3 fb15 	bl	800bb9c <lwip_htons>
 8018572:	4603      	mov	r3, r0
 8018574:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018578:	2b00      	cmp	r3, #0
 801857a:	d006      	beq.n	801858a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801857e:	3308      	adds	r3, #8
 8018580:	2214      	movs	r2, #20
 8018582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018584:	4618      	mov	r0, r3
 8018586:	f001 f86f 	bl	8019668 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801858c:	88db      	ldrh	r3, [r3, #6]
 801858e:	b29b      	uxth	r3, r3
 8018590:	f003 0320 	and.w	r3, r3, #32
 8018594:	2b00      	cmp	r3, #0
 8018596:	bf0c      	ite	eq
 8018598:	2301      	moveq	r3, #1
 801859a:	2300      	movne	r3, #0
 801859c:	b2db      	uxtb	r3, r3
 801859e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80185a0:	69fb      	ldr	r3, [r7, #28]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d00e      	beq.n	80185c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80185a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80185a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80185aa:	4413      	add	r3, r2
 80185ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80185ae:	8b7a      	ldrh	r2, [r7, #26]
 80185b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80185b2:	429a      	cmp	r2, r3
 80185b4:	f0c0 80a0 	bcc.w	80186f8 <ip4_reass+0x2ac>
 80185b8:	8b7b      	ldrh	r3, [r7, #26]
 80185ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80185be:	4293      	cmp	r3, r2
 80185c0:	f200 809a 	bhi.w	80186f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80185c4:	69fa      	ldr	r2, [r7, #28]
 80185c6:	6879      	ldr	r1, [r7, #4]
 80185c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185ca:	f7ff fdd5 	bl	8018178 <ip_reass_chain_frag_into_datagram_and_validate>
 80185ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185d6:	f000 809b 	beq.w	8018710 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80185da:	4b48      	ldr	r3, [pc, #288]	; (80186fc <ip4_reass+0x2b0>)
 80185dc:	881a      	ldrh	r2, [r3, #0]
 80185de:	8c3b      	ldrh	r3, [r7, #32]
 80185e0:	4413      	add	r3, r2
 80185e2:	b29a      	uxth	r2, r3
 80185e4:	4b45      	ldr	r3, [pc, #276]	; (80186fc <ip4_reass+0x2b0>)
 80185e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80185e8:	69fb      	ldr	r3, [r7, #28]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d00d      	beq.n	801860a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80185ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80185f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80185f2:	4413      	add	r3, r2
 80185f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80185f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f8:	8a7a      	ldrh	r2, [r7, #18]
 80185fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80185fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185fe:	7f9b      	ldrb	r3, [r3, #30]
 8018600:	f043 0301 	orr.w	r3, r3, #1
 8018604:	b2da      	uxtb	r2, r3
 8018606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018608:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	2b01      	cmp	r3, #1
 801860e:	d171      	bne.n	80186f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018612:	8b9b      	ldrh	r3, [r3, #28]
 8018614:	3314      	adds	r3, #20
 8018616:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801861a:	685b      	ldr	r3, [r3, #4]
 801861c:	685b      	ldr	r3, [r3, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018624:	685b      	ldr	r3, [r3, #4]
 8018626:	685b      	ldr	r3, [r3, #4]
 8018628:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801862c:	3308      	adds	r3, #8
 801862e:	2214      	movs	r2, #20
 8018630:	4619      	mov	r1, r3
 8018632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018634:	f001 f818 	bl	8019668 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018638:	8a3b      	ldrh	r3, [r7, #16]
 801863a:	4618      	mov	r0, r3
 801863c:	f7f3 faae 	bl	800bb9c <lwip_htons>
 8018640:	4603      	mov	r3, r0
 8018642:	461a      	mov	r2, r3
 8018644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018646:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801864a:	2200      	movs	r2, #0
 801864c:	719a      	strb	r2, [r3, #6]
 801864e:	2200      	movs	r2, #0
 8018650:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018654:	2200      	movs	r2, #0
 8018656:	729a      	strb	r2, [r3, #10]
 8018658:	2200      	movs	r2, #0
 801865a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801865e:	685b      	ldr	r3, [r3, #4]
 8018660:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018662:	e00d      	b.n	8018680 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801866a:	2114      	movs	r1, #20
 801866c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801866e:	f7f4 fe43 	bl	800d2f8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018672:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018674:	6878      	ldr	r0, [r7, #4]
 8018676:	f7f4 ff93 	bl	800d5a0 <pbuf_cat>
      r = iprh->next_pbuf;
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018682:	2b00      	cmp	r3, #0
 8018684:	d1ee      	bne.n	8018664 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018686:	4b1e      	ldr	r3, [pc, #120]	; (8018700 <ip4_reass+0x2b4>)
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801868c:	429a      	cmp	r2, r3
 801868e:	d102      	bne.n	8018696 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018690:	2300      	movs	r3, #0
 8018692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018694:	e010      	b.n	80186b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018696:	4b1a      	ldr	r3, [pc, #104]	; (8018700 <ip4_reass+0x2b4>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801869c:	e007      	b.n	80186ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80186a4:	429a      	cmp	r2, r3
 80186a6:	d006      	beq.n	80186b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80186a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80186ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d1f4      	bne.n	801869e <ip4_reass+0x252>
 80186b4:	e000      	b.n	80186b8 <ip4_reass+0x26c>
          break;
 80186b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80186b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80186ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80186bc:	f7ff fd2e 	bl	801811c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	f7f4 ff2d 	bl	800d520 <pbuf_clen>
 80186c6:	4603      	mov	r3, r0
 80186c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80186ca:	4b0c      	ldr	r3, [pc, #48]	; (80186fc <ip4_reass+0x2b0>)
 80186cc:	881b      	ldrh	r3, [r3, #0]
 80186ce:	8c3a      	ldrh	r2, [r7, #32]
 80186d0:	429a      	cmp	r2, r3
 80186d2:	d906      	bls.n	80186e2 <ip4_reass+0x296>
 80186d4:	4b0b      	ldr	r3, [pc, #44]	; (8018704 <ip4_reass+0x2b8>)
 80186d6:	f240 229b 	movw	r2, #667	; 0x29b
 80186da:	490b      	ldr	r1, [pc, #44]	; (8018708 <ip4_reass+0x2bc>)
 80186dc:	480b      	ldr	r0, [pc, #44]	; (801870c <ip4_reass+0x2c0>)
 80186de:	f000 fdc3 	bl	8019268 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80186e2:	4b06      	ldr	r3, [pc, #24]	; (80186fc <ip4_reass+0x2b0>)
 80186e4:	881a      	ldrh	r2, [r3, #0]
 80186e6:	8c3b      	ldrh	r3, [r7, #32]
 80186e8:	1ad3      	subs	r3, r2, r3
 80186ea:	b29a      	uxth	r2, r3
 80186ec:	4b03      	ldr	r3, [pc, #12]	; (80186fc <ip4_reass+0x2b0>)
 80186ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	e038      	b.n	8018766 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80186f4:	2300      	movs	r3, #0
 80186f6:	e036      	b.n	8018766 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80186f8:	bf00      	nop
 80186fa:	e00a      	b.n	8018712 <ip4_reass+0x2c6>
 80186fc:	20011050 	.word	0x20011050
 8018700:	2001104c 	.word	0x2001104c
 8018704:	0801dfd8 	.word	0x0801dfd8
 8018708:	0801e148 	.word	0x0801e148
 801870c:	0801e020 	.word	0x0801e020
    goto nullreturn_ipr;
 8018710:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018714:	2b00      	cmp	r3, #0
 8018716:	d106      	bne.n	8018726 <ip4_reass+0x2da>
 8018718:	4b15      	ldr	r3, [pc, #84]	; (8018770 <ip4_reass+0x324>)
 801871a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801871e:	4915      	ldr	r1, [pc, #84]	; (8018774 <ip4_reass+0x328>)
 8018720:	4815      	ldr	r0, [pc, #84]	; (8018778 <ip4_reass+0x32c>)
 8018722:	f000 fda1 	bl	8019268 <iprintf>
  if (ipr->p == NULL) {
 8018726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018728:	685b      	ldr	r3, [r3, #4]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d116      	bne.n	801875c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801872e:	4b13      	ldr	r3, [pc, #76]	; (801877c <ip4_reass+0x330>)
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018734:	429a      	cmp	r2, r3
 8018736:	d006      	beq.n	8018746 <ip4_reass+0x2fa>
 8018738:	4b0d      	ldr	r3, [pc, #52]	; (8018770 <ip4_reass+0x324>)
 801873a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801873e:	4910      	ldr	r1, [pc, #64]	; (8018780 <ip4_reass+0x334>)
 8018740:	480d      	ldr	r0, [pc, #52]	; (8018778 <ip4_reass+0x32c>)
 8018742:	f000 fd91 	bl	8019268 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018746:	2100      	movs	r1, #0
 8018748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801874a:	f7ff fce7 	bl	801811c <ip_reass_dequeue_datagram>
 801874e:	e006      	b.n	801875e <ip4_reass+0x312>
    goto nullreturn;
 8018750:	bf00      	nop
 8018752:	e004      	b.n	801875e <ip4_reass+0x312>
    goto nullreturn;
 8018754:	bf00      	nop
 8018756:	e002      	b.n	801875e <ip4_reass+0x312>
      goto nullreturn;
 8018758:	bf00      	nop
 801875a:	e000      	b.n	801875e <ip4_reass+0x312>
  }

nullreturn:
 801875c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801875e:	6878      	ldr	r0, [r7, #4]
 8018760:	f7f4 fe50 	bl	800d404 <pbuf_free>
  return NULL;
 8018764:	2300      	movs	r3, #0
}
 8018766:	4618      	mov	r0, r3
 8018768:	3738      	adds	r7, #56	; 0x38
 801876a:	46bd      	mov	sp, r7
 801876c:	bd80      	pop	{r7, pc}
 801876e:	bf00      	nop
 8018770:	0801dfd8 	.word	0x0801dfd8
 8018774:	0801e164 	.word	0x0801e164
 8018778:	0801e020 	.word	0x0801e020
 801877c:	2001104c 	.word	0x2001104c
 8018780:	0801e170 	.word	0x0801e170

08018784 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018788:	2005      	movs	r0, #5
 801878a:	f7f3 ff15 	bl	800c5b8 <memp_malloc>
 801878e:	4603      	mov	r3, r0
}
 8018790:	4618      	mov	r0, r3
 8018792:	bd80      	pop	{r7, pc}

08018794 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b082      	sub	sp, #8
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d106      	bne.n	80187b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80187a2:	4b07      	ldr	r3, [pc, #28]	; (80187c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80187a4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80187a8:	4906      	ldr	r1, [pc, #24]	; (80187c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80187aa:	4807      	ldr	r0, [pc, #28]	; (80187c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80187ac:	f000 fd5c 	bl	8019268 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80187b0:	6879      	ldr	r1, [r7, #4]
 80187b2:	2005      	movs	r0, #5
 80187b4:	f7f3 ff76 	bl	800c6a4 <memp_free>
}
 80187b8:	bf00      	nop
 80187ba:	3708      	adds	r7, #8
 80187bc:	46bd      	mov	sp, r7
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	0801dfd8 	.word	0x0801dfd8
 80187c4:	0801e190 	.word	0x0801e190
 80187c8:	0801e020 	.word	0x0801e020

080187cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b084      	sub	sp, #16
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d106      	bne.n	80187ec <ipfrag_free_pbuf_custom+0x20>
 80187de:	4b11      	ldr	r3, [pc, #68]	; (8018824 <ipfrag_free_pbuf_custom+0x58>)
 80187e0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80187e4:	4910      	ldr	r1, [pc, #64]	; (8018828 <ipfrag_free_pbuf_custom+0x5c>)
 80187e6:	4811      	ldr	r0, [pc, #68]	; (801882c <ipfrag_free_pbuf_custom+0x60>)
 80187e8:	f000 fd3e 	bl	8019268 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80187ec:	68fa      	ldr	r2, [r7, #12]
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d006      	beq.n	8018802 <ipfrag_free_pbuf_custom+0x36>
 80187f4:	4b0b      	ldr	r3, [pc, #44]	; (8018824 <ipfrag_free_pbuf_custom+0x58>)
 80187f6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80187fa:	490d      	ldr	r1, [pc, #52]	; (8018830 <ipfrag_free_pbuf_custom+0x64>)
 80187fc:	480b      	ldr	r0, [pc, #44]	; (801882c <ipfrag_free_pbuf_custom+0x60>)
 80187fe:	f000 fd33 	bl	8019268 <iprintf>
  if (pcr->original != NULL) {
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	695b      	ldr	r3, [r3, #20]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d004      	beq.n	8018814 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	695b      	ldr	r3, [r3, #20]
 801880e:	4618      	mov	r0, r3
 8018810:	f7f4 fdf8 	bl	800d404 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018814:	68f8      	ldr	r0, [r7, #12]
 8018816:	f7ff ffbd 	bl	8018794 <ip_frag_free_pbuf_custom_ref>
}
 801881a:	bf00      	nop
 801881c:	3710      	adds	r7, #16
 801881e:	46bd      	mov	sp, r7
 8018820:	bd80      	pop	{r7, pc}
 8018822:	bf00      	nop
 8018824:	0801dfd8 	.word	0x0801dfd8
 8018828:	0801e19c 	.word	0x0801e19c
 801882c:	0801e020 	.word	0x0801e020
 8018830:	0801e1a8 	.word	0x0801e1a8

08018834 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b094      	sub	sp, #80	; 0x50
 8018838:	af02      	add	r7, sp, #8
 801883a:	60f8      	str	r0, [r7, #12]
 801883c:	60b9      	str	r1, [r7, #8]
 801883e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018840:	2300      	movs	r3, #0
 8018842:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018846:	68bb      	ldr	r3, [r7, #8]
 8018848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801884a:	3b14      	subs	r3, #20
 801884c:	2b00      	cmp	r3, #0
 801884e:	da00      	bge.n	8018852 <ip4_frag+0x1e>
 8018850:	3307      	adds	r3, #7
 8018852:	10db      	asrs	r3, r3, #3
 8018854:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018856:	2314      	movs	r3, #20
 8018858:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	685b      	ldr	r3, [r3, #4]
 801885e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018862:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018866:	781b      	ldrb	r3, [r3, #0]
 8018868:	f003 030f 	and.w	r3, r3, #15
 801886c:	b2db      	uxtb	r3, r3
 801886e:	009b      	lsls	r3, r3, #2
 8018870:	b2db      	uxtb	r3, r3
 8018872:	2b14      	cmp	r3, #20
 8018874:	d002      	beq.n	801887c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018876:	f06f 0305 	mvn.w	r3, #5
 801887a:	e110      	b.n	8018a9e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	895b      	ldrh	r3, [r3, #10]
 8018880:	2b13      	cmp	r3, #19
 8018882:	d809      	bhi.n	8018898 <ip4_frag+0x64>
 8018884:	4b88      	ldr	r3, [pc, #544]	; (8018aa8 <ip4_frag+0x274>)
 8018886:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801888a:	4988      	ldr	r1, [pc, #544]	; (8018aac <ip4_frag+0x278>)
 801888c:	4888      	ldr	r0, [pc, #544]	; (8018ab0 <ip4_frag+0x27c>)
 801888e:	f000 fceb 	bl	8019268 <iprintf>
 8018892:	f06f 0305 	mvn.w	r3, #5
 8018896:	e102      	b.n	8018a9e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801889a:	88db      	ldrh	r3, [r3, #6]
 801889c:	b29b      	uxth	r3, r3
 801889e:	4618      	mov	r0, r3
 80188a0:	f7f3 f97c 	bl	800bb9c <lwip_htons>
 80188a4:	4603      	mov	r3, r0
 80188a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80188a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80188aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80188ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80188b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80188b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80188b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	891b      	ldrh	r3, [r3, #8]
 80188be:	3b14      	subs	r3, #20
 80188c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80188c4:	e0e1      	b.n	8018a8a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80188c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80188c8:	00db      	lsls	r3, r3, #3
 80188ca:	b29b      	uxth	r3, r3
 80188cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80188d0:	4293      	cmp	r3, r2
 80188d2:	bf28      	it	cs
 80188d4:	4613      	movcs	r3, r2
 80188d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80188d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80188dc:	2114      	movs	r1, #20
 80188de:	200e      	movs	r0, #14
 80188e0:	f7f4 faac 	bl	800ce3c <pbuf_alloc>
 80188e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80188e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	f000 80d5 	beq.w	8018a98 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80188ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f0:	895b      	ldrh	r3, [r3, #10]
 80188f2:	2b13      	cmp	r3, #19
 80188f4:	d806      	bhi.n	8018904 <ip4_frag+0xd0>
 80188f6:	4b6c      	ldr	r3, [pc, #432]	; (8018aa8 <ip4_frag+0x274>)
 80188f8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80188fc:	496d      	ldr	r1, [pc, #436]	; (8018ab4 <ip4_frag+0x280>)
 80188fe:	486c      	ldr	r0, [pc, #432]	; (8018ab0 <ip4_frag+0x27c>)
 8018900:	f000 fcb2 	bl	8019268 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	2214      	movs	r2, #20
 801890a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801890c:	4618      	mov	r0, r3
 801890e:	f000 feab 	bl	8019668 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018914:	685b      	ldr	r3, [r3, #4]
 8018916:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018918:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801891a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801891e:	e064      	b.n	80189ea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	895a      	ldrh	r2, [r3, #10]
 8018924:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018926:	1ad3      	subs	r3, r2, r3
 8018928:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	895b      	ldrh	r3, [r3, #10]
 801892e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018930:	429a      	cmp	r2, r3
 8018932:	d906      	bls.n	8018942 <ip4_frag+0x10e>
 8018934:	4b5c      	ldr	r3, [pc, #368]	; (8018aa8 <ip4_frag+0x274>)
 8018936:	f240 322d 	movw	r2, #813	; 0x32d
 801893a:	495f      	ldr	r1, [pc, #380]	; (8018ab8 <ip4_frag+0x284>)
 801893c:	485c      	ldr	r0, [pc, #368]	; (8018ab0 <ip4_frag+0x27c>)
 801893e:	f000 fc93 	bl	8019268 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018942:	8bfa      	ldrh	r2, [r7, #30]
 8018944:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018948:	4293      	cmp	r3, r2
 801894a:	bf28      	it	cs
 801894c:	4613      	movcs	r3, r2
 801894e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018952:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018956:	2b00      	cmp	r3, #0
 8018958:	d105      	bne.n	8018966 <ip4_frag+0x132>
        poff = 0;
 801895a:	2300      	movs	r3, #0
 801895c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	60fb      	str	r3, [r7, #12]
        continue;
 8018964:	e041      	b.n	80189ea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018966:	f7ff ff0d 	bl	8018784 <ip_frag_alloc_pbuf_custom_ref>
 801896a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801896c:	69bb      	ldr	r3, [r7, #24]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d103      	bne.n	801897a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018974:	f7f4 fd46 	bl	800d404 <pbuf_free>
        goto memerr;
 8018978:	e08f      	b.n	8018a9a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801897a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018982:	4413      	add	r3, r2
 8018984:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018988:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801898c:	9201      	str	r2, [sp, #4]
 801898e:	9300      	str	r3, [sp, #0]
 8018990:	4603      	mov	r3, r0
 8018992:	2241      	movs	r2, #65	; 0x41
 8018994:	2000      	movs	r0, #0
 8018996:	f7f4 fb7b 	bl	800d090 <pbuf_alloced_custom>
 801899a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801899c:	697b      	ldr	r3, [r7, #20]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d106      	bne.n	80189b0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80189a2:	69b8      	ldr	r0, [r7, #24]
 80189a4:	f7ff fef6 	bl	8018794 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80189a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189aa:	f7f4 fd2b 	bl	800d404 <pbuf_free>
        goto memerr;
 80189ae:	e074      	b.n	8018a9a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80189b0:	68f8      	ldr	r0, [r7, #12]
 80189b2:	f7f4 fdcd 	bl	800d550 <pbuf_ref>
      pcr->original = p;
 80189b6:	69bb      	ldr	r3, [r7, #24]
 80189b8:	68fa      	ldr	r2, [r7, #12]
 80189ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80189bc:	69bb      	ldr	r3, [r7, #24]
 80189be:	4a3f      	ldr	r2, [pc, #252]	; (8018abc <ip4_frag+0x288>)
 80189c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80189c2:	6979      	ldr	r1, [r7, #20]
 80189c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189c6:	f7f4 fdeb 	bl	800d5a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80189ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80189ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80189d2:	1ad3      	subs	r3, r2, r3
 80189d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80189d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d004      	beq.n	80189ea <ip4_frag+0x1b6>
        poff = 0;
 80189e0:	2300      	movs	r3, #0
 80189e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80189ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d196      	bne.n	8018920 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80189f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80189f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80189f8:	4413      	add	r3, r2
 80189fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80189fc:	68bb      	ldr	r3, [r7, #8]
 80189fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a00:	f1a3 0213 	sub.w	r2, r3, #19
 8018a04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	bfcc      	ite	gt
 8018a0c:	2301      	movgt	r3, #1
 8018a0e:	2300      	movle	r3, #0
 8018a10:	b2db      	uxtb	r3, r3
 8018a12:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018a14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018a1e:	6a3b      	ldr	r3, [r7, #32]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d002      	beq.n	8018a2a <ip4_frag+0x1f6>
 8018a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d003      	beq.n	8018a32 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018a2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018a30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018a32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a34:	4618      	mov	r0, r3
 8018a36:	f7f3 f8b1 	bl	800bb9c <lwip_htons>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	461a      	mov	r2, r3
 8018a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a40:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018a42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018a44:	3314      	adds	r3, #20
 8018a46:	b29b      	uxth	r3, r3
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f7f3 f8a7 	bl	800bb9c <lwip_htons>
 8018a4e:	4603      	mov	r3, r0
 8018a50:	461a      	mov	r2, r3
 8018a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a54:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a58:	2200      	movs	r2, #0
 8018a5a:	729a      	strb	r2, [r3, #10]
 8018a5c:	2200      	movs	r2, #0
 8018a5e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018a60:	68bb      	ldr	r3, [r7, #8]
 8018a62:	695b      	ldr	r3, [r3, #20]
 8018a64:	687a      	ldr	r2, [r7, #4]
 8018a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018a68:	68b8      	ldr	r0, [r7, #8]
 8018a6a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a6e:	f7f4 fcc9 	bl	800d404 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018a72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018a78:	1ad3      	subs	r3, r2, r3
 8018a7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018a7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018a82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a84:	4413      	add	r3, r2
 8018a86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018a8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	f47f af19 	bne.w	80188c6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018a94:	2300      	movs	r3, #0
 8018a96:	e002      	b.n	8018a9e <ip4_frag+0x26a>
      goto memerr;
 8018a98:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	3748      	adds	r7, #72	; 0x48
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}
 8018aa6:	bf00      	nop
 8018aa8:	0801dfd8 	.word	0x0801dfd8
 8018aac:	0801e1b4 	.word	0x0801e1b4
 8018ab0:	0801e020 	.word	0x0801e020
 8018ab4:	0801e1d0 	.word	0x0801e1d0
 8018ab8:	0801e1f0 	.word	0x0801e1f0
 8018abc:	080187cd 	.word	0x080187cd

08018ac0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b086      	sub	sp, #24
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
 8018ac8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018aca:	230e      	movs	r3, #14
 8018acc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	895b      	ldrh	r3, [r3, #10]
 8018ad2:	2b0e      	cmp	r3, #14
 8018ad4:	d96e      	bls.n	8018bb4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	7bdb      	ldrb	r3, [r3, #15]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d106      	bne.n	8018aec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018ade:	683b      	ldr	r3, [r7, #0]
 8018ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018ae4:	3301      	adds	r3, #1
 8018ae6:	b2da      	uxtb	r2, r3
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	685b      	ldr	r3, [r3, #4]
 8018af0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018af2:	693b      	ldr	r3, [r7, #16]
 8018af4:	7b1a      	ldrb	r2, [r3, #12]
 8018af6:	7b5b      	ldrb	r3, [r3, #13]
 8018af8:	021b      	lsls	r3, r3, #8
 8018afa:	4313      	orrs	r3, r2
 8018afc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018afe:	693b      	ldr	r3, [r7, #16]
 8018b00:	781b      	ldrb	r3, [r3, #0]
 8018b02:	f003 0301 	and.w	r3, r3, #1
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d023      	beq.n	8018b52 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018b0a:	693b      	ldr	r3, [r7, #16]
 8018b0c:	781b      	ldrb	r3, [r3, #0]
 8018b0e:	2b01      	cmp	r3, #1
 8018b10:	d10f      	bne.n	8018b32 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018b12:	693b      	ldr	r3, [r7, #16]
 8018b14:	785b      	ldrb	r3, [r3, #1]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d11b      	bne.n	8018b52 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018b1a:	693b      	ldr	r3, [r7, #16]
 8018b1c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018b1e:	2b5e      	cmp	r3, #94	; 0x5e
 8018b20:	d117      	bne.n	8018b52 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	7b5b      	ldrb	r3, [r3, #13]
 8018b26:	f043 0310 	orr.w	r3, r3, #16
 8018b2a:	b2da      	uxtb	r2, r3
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	735a      	strb	r2, [r3, #13]
 8018b30:	e00f      	b.n	8018b52 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018b32:	693b      	ldr	r3, [r7, #16]
 8018b34:	2206      	movs	r2, #6
 8018b36:	4928      	ldr	r1, [pc, #160]	; (8018bd8 <ethernet_input+0x118>)
 8018b38:	4618      	mov	r0, r3
 8018b3a:	f000 fc0a 	bl	8019352 <memcmp>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d106      	bne.n	8018b52 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	7b5b      	ldrb	r3, [r3, #13]
 8018b48:	f043 0308 	orr.w	r3, r3, #8
 8018b4c:	b2da      	uxtb	r2, r3
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018b52:	89fb      	ldrh	r3, [r7, #14]
 8018b54:	2b08      	cmp	r3, #8
 8018b56:	d003      	beq.n	8018b60 <ethernet_input+0xa0>
 8018b58:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018b5c:	d014      	beq.n	8018b88 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018b5e:	e032      	b.n	8018bc6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018b66:	f003 0308 	and.w	r3, r3, #8
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d024      	beq.n	8018bb8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018b6e:	8afb      	ldrh	r3, [r7, #22]
 8018b70:	4619      	mov	r1, r3
 8018b72:	6878      	ldr	r0, [r7, #4]
 8018b74:	f7f4 fbc0 	bl	800d2f8 <pbuf_remove_header>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d11e      	bne.n	8018bbc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018b7e:	6839      	ldr	r1, [r7, #0]
 8018b80:	6878      	ldr	r0, [r7, #4]
 8018b82:	f7fe ff03 	bl	801798c <ip4_input>
      break;
 8018b86:	e013      	b.n	8018bb0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018b88:	683b      	ldr	r3, [r7, #0]
 8018b8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018b8e:	f003 0308 	and.w	r3, r3, #8
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d014      	beq.n	8018bc0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018b96:	8afb      	ldrh	r3, [r7, #22]
 8018b98:	4619      	mov	r1, r3
 8018b9a:	6878      	ldr	r0, [r7, #4]
 8018b9c:	f7f4 fbac 	bl	800d2f8 <pbuf_remove_header>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d10e      	bne.n	8018bc4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018ba6:	6839      	ldr	r1, [r7, #0]
 8018ba8:	6878      	ldr	r0, [r7, #4]
 8018baa:	f7fe f89f 	bl	8016cec <etharp_input>
      break;
 8018bae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	e00c      	b.n	8018bce <ethernet_input+0x10e>
    goto free_and_return;
 8018bb4:	bf00      	nop
 8018bb6:	e006      	b.n	8018bc6 <ethernet_input+0x106>
        goto free_and_return;
 8018bb8:	bf00      	nop
 8018bba:	e004      	b.n	8018bc6 <ethernet_input+0x106>
        goto free_and_return;
 8018bbc:	bf00      	nop
 8018bbe:	e002      	b.n	8018bc6 <ethernet_input+0x106>
        goto free_and_return;
 8018bc0:	bf00      	nop
 8018bc2:	e000      	b.n	8018bc6 <ethernet_input+0x106>
        goto free_and_return;
 8018bc4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f7f4 fc1c 	bl	800d404 <pbuf_free>
  return ERR_OK;
 8018bcc:	2300      	movs	r3, #0
}
 8018bce:	4618      	mov	r0, r3
 8018bd0:	3718      	adds	r7, #24
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	bd80      	pop	{r7, pc}
 8018bd6:	bf00      	nop
 8018bd8:	0802851c 	.word	0x0802851c

08018bdc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b086      	sub	sp, #24
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	60f8      	str	r0, [r7, #12]
 8018be4:	60b9      	str	r1, [r7, #8]
 8018be6:	607a      	str	r2, [r7, #4]
 8018be8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018bea:	8c3b      	ldrh	r3, [r7, #32]
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7f2 ffd5 	bl	800bb9c <lwip_htons>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018bf6:	210e      	movs	r1, #14
 8018bf8:	68b8      	ldr	r0, [r7, #8]
 8018bfa:	f7f4 fb6d 	bl	800d2d8 <pbuf_add_header>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d125      	bne.n	8018c50 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018c04:	68bb      	ldr	r3, [r7, #8]
 8018c06:	685b      	ldr	r3, [r3, #4]
 8018c08:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018c0a:	693b      	ldr	r3, [r7, #16]
 8018c0c:	8afa      	ldrh	r2, [r7, #22]
 8018c0e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018c10:	693b      	ldr	r3, [r7, #16]
 8018c12:	2206      	movs	r2, #6
 8018c14:	6839      	ldr	r1, [r7, #0]
 8018c16:	4618      	mov	r0, r3
 8018c18:	f000 fd26 	bl	8019668 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018c1c:	693b      	ldr	r3, [r7, #16]
 8018c1e:	3306      	adds	r3, #6
 8018c20:	2206      	movs	r2, #6
 8018c22:	6879      	ldr	r1, [r7, #4]
 8018c24:	4618      	mov	r0, r3
 8018c26:	f000 fd1f 	bl	8019668 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018c30:	2b06      	cmp	r3, #6
 8018c32:	d006      	beq.n	8018c42 <ethernet_output+0x66>
 8018c34:	4b0a      	ldr	r3, [pc, #40]	; (8018c60 <ethernet_output+0x84>)
 8018c36:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018c3a:	490a      	ldr	r1, [pc, #40]	; (8018c64 <ethernet_output+0x88>)
 8018c3c:	480a      	ldr	r0, [pc, #40]	; (8018c68 <ethernet_output+0x8c>)
 8018c3e:	f000 fb13 	bl	8019268 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	699b      	ldr	r3, [r3, #24]
 8018c46:	68b9      	ldr	r1, [r7, #8]
 8018c48:	68f8      	ldr	r0, [r7, #12]
 8018c4a:	4798      	blx	r3
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	e002      	b.n	8018c56 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018c50:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018c52:	f06f 0301 	mvn.w	r3, #1
}
 8018c56:	4618      	mov	r0, r3
 8018c58:	3718      	adds	r7, #24
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}
 8018c5e:	bf00      	nop
 8018c60:	0801e200 	.word	0x0801e200
 8018c64:	0801e238 	.word	0x0801e238
 8018c68:	0801e26c 	.word	0x0801e26c

08018c6c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b086      	sub	sp, #24
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
 8018c74:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018c76:	683b      	ldr	r3, [r7, #0]
 8018c78:	60bb      	str	r3, [r7, #8]
 8018c7a:	2304      	movs	r3, #4
 8018c7c:	60fb      	str	r3, [r7, #12]
 8018c7e:	2300      	movs	r3, #0
 8018c80:	613b      	str	r3, [r7, #16]
 8018c82:	2300      	movs	r3, #0
 8018c84:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018c86:	f107 0308 	add.w	r3, r7, #8
 8018c8a:	2100      	movs	r1, #0
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f7ec fee0 	bl	8005a52 <osMessageCreate>
 8018c92:	4602      	mov	r2, r0
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d102      	bne.n	8018ca6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ca4:	e000      	b.n	8018ca8 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018ca6:	2300      	movs	r3, #0
}
 8018ca8:	4618      	mov	r0, r3
 8018caa:	3718      	adds	r7, #24
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}

08018cb0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b082      	sub	sp, #8
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f7ec ffa5 	bl	8005c0c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7ec ffb6 	bl	8005c38 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018ccc:	bf00      	nop
 8018cce:	3708      	adds	r7, #8
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	bd80      	pop	{r7, pc}

08018cd4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b084      	sub	sp, #16
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
 8018cdc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	6839      	ldr	r1, [r7, #0]
 8018ce4:	2200      	movs	r2, #0
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	f7ec fedc 	bl	8005aa4 <osMessagePut>
 8018cec:	4603      	mov	r3, r0
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d102      	bne.n	8018cf8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	73fb      	strb	r3, [r7, #15]
 8018cf6:	e001      	b.n	8018cfc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018cf8:	23ff      	movs	r3, #255	; 0xff
 8018cfa:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018d00:	4618      	mov	r0, r3
 8018d02:	3710      	adds	r7, #16
 8018d04:	46bd      	mov	sp, r7
 8018d06:	bd80      	pop	{r7, pc}

08018d08 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b08c      	sub	sp, #48	; 0x30
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	61f8      	str	r0, [r7, #28]
 8018d10:	61b9      	str	r1, [r7, #24]
 8018d12:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018d14:	f7ec fcc8 	bl	80056a8 <osKernelSysTick>
 8018d18:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018d1a:	697b      	ldr	r3, [r7, #20]
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d017      	beq.n	8018d50 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018d20:	69fb      	ldr	r3, [r7, #28]
 8018d22:	6819      	ldr	r1, [r3, #0]
 8018d24:	f107 0320 	add.w	r3, r7, #32
 8018d28:	697a      	ldr	r2, [r7, #20]
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f7ec fefa 	bl	8005b24 <osMessageGet>

    if(event.status == osEventMessage)
 8018d30:	6a3b      	ldr	r3, [r7, #32]
 8018d32:	2b10      	cmp	r3, #16
 8018d34:	d109      	bne.n	8018d4a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d38:	461a      	mov	r2, r3
 8018d3a:	69bb      	ldr	r3, [r7, #24]
 8018d3c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018d3e:	f7ec fcb3 	bl	80056a8 <osKernelSysTick>
 8018d42:	4602      	mov	r2, r0
 8018d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d46:	1ad3      	subs	r3, r2, r3
 8018d48:	e019      	b.n	8018d7e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d4e:	e016      	b.n	8018d7e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018d50:	69fb      	ldr	r3, [r7, #28]
 8018d52:	6819      	ldr	r1, [r3, #0]
 8018d54:	463b      	mov	r3, r7
 8018d56:	f04f 32ff 	mov.w	r2, #4294967295
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f7ec fee2 	bl	8005b24 <osMessageGet>
 8018d60:	f107 0320 	add.w	r3, r7, #32
 8018d64:	463a      	mov	r2, r7
 8018d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8018d68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d6e:	461a      	mov	r2, r3
 8018d70:	69bb      	ldr	r3, [r7, #24]
 8018d72:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018d74:	f7ec fc98 	bl	80056a8 <osKernelSysTick>
 8018d78:	4602      	mov	r2, r0
 8018d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d7c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018d7e:	4618      	mov	r0, r3
 8018d80:	3730      	adds	r7, #48	; 0x30
 8018d82:	46bd      	mov	sp, r7
 8018d84:	bd80      	pop	{r7, pc}

08018d86 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018d86:	b580      	push	{r7, lr}
 8018d88:	b086      	sub	sp, #24
 8018d8a:	af00      	add	r7, sp, #0
 8018d8c:	6078      	str	r0, [r7, #4]
 8018d8e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	6819      	ldr	r1, [r3, #0]
 8018d94:	f107 030c 	add.w	r3, r7, #12
 8018d98:	2200      	movs	r2, #0
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7ec fec2 	bl	8005b24 <osMessageGet>

  if(event.status == osEventMessage)
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	2b10      	cmp	r3, #16
 8018da4:	d105      	bne.n	8018db2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018da6:	693b      	ldr	r3, [r7, #16]
 8018da8:	461a      	mov	r2, r3
 8018daa:	683b      	ldr	r3, [r7, #0]
 8018dac:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018dae:	2300      	movs	r3, #0
 8018db0:	e001      	b.n	8018db6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018db2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018db6:	4618      	mov	r0, r3
 8018db8:	3718      	adds	r7, #24
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bd80      	pop	{r7, pc}

08018dbe <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018dbe:	b480      	push	{r7}
 8018dc0:	b083      	sub	sp, #12
 8018dc2:	af00      	add	r7, sp, #0
 8018dc4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d101      	bne.n	8018dd2 <sys_mbox_valid+0x14>
    return 0;
 8018dce:	2300      	movs	r3, #0
 8018dd0:	e000      	b.n	8018dd4 <sys_mbox_valid+0x16>
  else
    return 1;
 8018dd2:	2301      	movs	r3, #1
}
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	370c      	adds	r7, #12
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dde:	4770      	bx	lr

08018de0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018de0:	b480      	push	{r7}
 8018de2:	b083      	sub	sp, #12
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	2200      	movs	r2, #0
 8018dec:	601a      	str	r2, [r3, #0]
}
 8018dee:	bf00      	nop
 8018df0:	370c      	adds	r7, #12
 8018df2:	46bd      	mov	sp, r7
 8018df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df8:	4770      	bx	lr

08018dfa <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018dfa:	b580      	push	{r7, lr}
 8018dfc:	b084      	sub	sp, #16
 8018dfe:	af00      	add	r7, sp, #0
 8018e00:	6078      	str	r0, [r7, #4]
 8018e02:	460b      	mov	r3, r1
 8018e04:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018e06:	2300      	movs	r3, #0
 8018e08:	60bb      	str	r3, [r7, #8]
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018e0e:	f107 0308 	add.w	r3, r7, #8
 8018e12:	2101      	movs	r1, #1
 8018e14:	4618      	mov	r0, r3
 8018e16:	f7ec fd53 	bl	80058c0 <osSemaphoreCreate>
 8018e1a:	4602      	mov	r2, r0
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d102      	bne.n	8018e2e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018e28:	f04f 33ff 	mov.w	r3, #4294967295
 8018e2c:	e009      	b.n	8018e42 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018e2e:	78fb      	ldrb	r3, [r7, #3]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d105      	bne.n	8018e40 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	2100      	movs	r1, #0
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	f7ec fd72 	bl	8005924 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018e40:	2300      	movs	r3, #0
}
 8018e42:	4618      	mov	r0, r3
 8018e44:	3710      	adds	r7, #16
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}

08018e4a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018e4a:	b580      	push	{r7, lr}
 8018e4c:	b084      	sub	sp, #16
 8018e4e:	af00      	add	r7, sp, #0
 8018e50:	6078      	str	r0, [r7, #4]
 8018e52:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018e54:	f7ec fc28 	bl	80056a8 <osKernelSysTick>
 8018e58:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018e5a:	683b      	ldr	r3, [r7, #0]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d011      	beq.n	8018e84 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	6839      	ldr	r1, [r7, #0]
 8018e66:	4618      	mov	r0, r3
 8018e68:	f7ec fd5c 	bl	8005924 <osSemaphoreWait>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d105      	bne.n	8018e7e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018e72:	f7ec fc19 	bl	80056a8 <osKernelSysTick>
 8018e76:	4602      	mov	r2, r0
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	1ad3      	subs	r3, r2, r3
 8018e7c:	e012      	b.n	8018ea4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8018e82:	e00f      	b.n	8018ea4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018e84:	bf00      	nop
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7ec fd48 	bl	8005924 <osSemaphoreWait>
 8018e94:	4603      	mov	r3, r0
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d1f5      	bne.n	8018e86 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018e9a:	f7ec fc05 	bl	80056a8 <osKernelSysTick>
 8018e9e:	4602      	mov	r2, r0
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3710      	adds	r7, #16
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}

08018eac <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b082      	sub	sp, #8
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	4618      	mov	r0, r3
 8018eba:	f7ec fd81 	bl	80059c0 <osSemaphoreRelease>
}
 8018ebe:	bf00      	nop
 8018ec0:	3708      	adds	r7, #8
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	bd80      	pop	{r7, pc}

08018ec6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018ec6:	b580      	push	{r7, lr}
 8018ec8:	b082      	sub	sp, #8
 8018eca:	af00      	add	r7, sp, #0
 8018ecc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f7ec fdaa 	bl	8005a2c <osSemaphoreDelete>
}
 8018ed8:	bf00      	nop
 8018eda:	3708      	adds	r7, #8
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}

08018ee0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018ee0:	b480      	push	{r7}
 8018ee2:	b083      	sub	sp, #12
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d101      	bne.n	8018ef4 <sys_sem_valid+0x14>
    return 0;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	e000      	b.n	8018ef6 <sys_sem_valid+0x16>
  else
    return 1;
 8018ef4:	2301      	movs	r3, #1
}
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	370c      	adds	r7, #12
 8018efa:	46bd      	mov	sp, r7
 8018efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f00:	4770      	bx	lr

08018f02 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018f02:	b480      	push	{r7}
 8018f04:	b083      	sub	sp, #12
 8018f06:	af00      	add	r7, sp, #0
 8018f08:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	601a      	str	r2, [r3, #0]
}
 8018f10:	bf00      	nop
 8018f12:	370c      	adds	r7, #12
 8018f14:	46bd      	mov	sp, r7
 8018f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1a:	4770      	bx	lr

08018f1c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018f20:	4803      	ldr	r0, [pc, #12]	; (8018f30 <sys_init+0x14>)
 8018f22:	f7ec fc31 	bl	8005788 <osMutexCreate>
 8018f26:	4603      	mov	r3, r0
 8018f28:	4a02      	ldr	r2, [pc, #8]	; (8018f34 <sys_init+0x18>)
 8018f2a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018f2c:	bf00      	nop
 8018f2e:	bd80      	pop	{r7, pc}
 8018f30:	0802852c 	.word	0x0802852c
 8018f34:	20011054 	.word	0x20011054

08018f38 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b084      	sub	sp, #16
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018f40:	2300      	movs	r3, #0
 8018f42:	60bb      	str	r3, [r7, #8]
 8018f44:	2300      	movs	r3, #0
 8018f46:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018f48:	f107 0308 	add.w	r3, r7, #8
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f7ec fc1b 	bl	8005788 <osMutexCreate>
 8018f52:	4602      	mov	r2, r0
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d102      	bne.n	8018f66 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018f60:	f04f 33ff 	mov.w	r3, #4294967295
 8018f64:	e000      	b.n	8018f68 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018f66:	2300      	movs	r3, #0
}
 8018f68:	4618      	mov	r0, r3
 8018f6a:	3710      	adds	r7, #16
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}

08018f70 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b082      	sub	sp, #8
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8018f80:	4618      	mov	r0, r3
 8018f82:	f7ec fc19 	bl	80057b8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018f86:	bf00      	nop
 8018f88:	3708      	adds	r7, #8
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}

08018f8e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018f8e:	b580      	push	{r7, lr}
 8018f90:	b082      	sub	sp, #8
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f7ec fc5a 	bl	8005854 <osMutexRelease>
}
 8018fa0:	bf00      	nop
 8018fa2:	3708      	adds	r7, #8
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b08c      	sub	sp, #48	; 0x30
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	60f8      	str	r0, [r7, #12]
 8018fb0:	60b9      	str	r1, [r7, #8]
 8018fb2:	607a      	str	r2, [r7, #4]
 8018fb4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018fb6:	f107 0314 	add.w	r3, r7, #20
 8018fba:	2200      	movs	r2, #0
 8018fbc:	601a      	str	r2, [r3, #0]
 8018fbe:	605a      	str	r2, [r3, #4]
 8018fc0:	609a      	str	r2, [r3, #8]
 8018fc2:	60da      	str	r2, [r3, #12]
 8018fc4:	611a      	str	r2, [r3, #16]
 8018fc6:	615a      	str	r2, [r3, #20]
 8018fc8:	619a      	str	r2, [r3, #24]
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	617b      	str	r3, [r7, #20]
 8018fce:	68bb      	ldr	r3, [r7, #8]
 8018fd0:	61bb      	str	r3, [r7, #24]
 8018fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fd4:	b21b      	sxth	r3, r3
 8018fd6:	83bb      	strh	r3, [r7, #28]
 8018fd8:	683b      	ldr	r3, [r7, #0]
 8018fda:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018fdc:	f107 0314 	add.w	r3, r7, #20
 8018fe0:	6879      	ldr	r1, [r7, #4]
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f7ec fb70 	bl	80056c8 <osThreadCreate>
 8018fe8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018fea:	4618      	mov	r0, r3
 8018fec:	3730      	adds	r7, #48	; 0x30
 8018fee:	46bd      	mov	sp, r7
 8018ff0:	bd80      	pop	{r7, pc}
	...

08018ff4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018ff8:	4b04      	ldr	r3, [pc, #16]	; (801900c <sys_arch_protect+0x18>)
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8019000:	4618      	mov	r0, r3
 8019002:	f7ec fbd9 	bl	80057b8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019006:	2301      	movs	r3, #1
}
 8019008:	4618      	mov	r0, r3
 801900a:	bd80      	pop	{r7, pc}
 801900c:	20011054 	.word	0x20011054

08019010 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b082      	sub	sp, #8
 8019014:	af00      	add	r7, sp, #0
 8019016:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019018:	4b04      	ldr	r3, [pc, #16]	; (801902c <sys_arch_unprotect+0x1c>)
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	4618      	mov	r0, r3
 801901e:	f7ec fc19 	bl	8005854 <osMutexRelease>
}
 8019022:	bf00      	nop
 8019024:	3708      	adds	r7, #8
 8019026:	46bd      	mov	sp, r7
 8019028:	bd80      	pop	{r7, pc}
 801902a:	bf00      	nop
 801902c:	20011054 	.word	0x20011054

08019030 <srand>:
 8019030:	b538      	push	{r3, r4, r5, lr}
 8019032:	4b10      	ldr	r3, [pc, #64]	; (8019074 <srand+0x44>)
 8019034:	681d      	ldr	r5, [r3, #0]
 8019036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019038:	4604      	mov	r4, r0
 801903a:	b9b3      	cbnz	r3, 801906a <srand+0x3a>
 801903c:	2018      	movs	r0, #24
 801903e:	f000 fb8b 	bl	8019758 <malloc>
 8019042:	4602      	mov	r2, r0
 8019044:	6328      	str	r0, [r5, #48]	; 0x30
 8019046:	b920      	cbnz	r0, 8019052 <srand+0x22>
 8019048:	4b0b      	ldr	r3, [pc, #44]	; (8019078 <srand+0x48>)
 801904a:	480c      	ldr	r0, [pc, #48]	; (801907c <srand+0x4c>)
 801904c:	2146      	movs	r1, #70	; 0x46
 801904e:	f000 fb19 	bl	8019684 <__assert_func>
 8019052:	490b      	ldr	r1, [pc, #44]	; (8019080 <srand+0x50>)
 8019054:	4b0b      	ldr	r3, [pc, #44]	; (8019084 <srand+0x54>)
 8019056:	e9c0 1300 	strd	r1, r3, [r0]
 801905a:	4b0b      	ldr	r3, [pc, #44]	; (8019088 <srand+0x58>)
 801905c:	6083      	str	r3, [r0, #8]
 801905e:	230b      	movs	r3, #11
 8019060:	8183      	strh	r3, [r0, #12]
 8019062:	2100      	movs	r1, #0
 8019064:	2001      	movs	r0, #1
 8019066:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801906a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801906c:	2200      	movs	r2, #0
 801906e:	611c      	str	r4, [r3, #16]
 8019070:	615a      	str	r2, [r3, #20]
 8019072:	bd38      	pop	{r3, r4, r5, pc}
 8019074:	2000008c 	.word	0x2000008c
 8019078:	08028534 	.word	0x08028534
 801907c:	0802854b 	.word	0x0802854b
 8019080:	abcd330e 	.word	0xabcd330e
 8019084:	e66d1234 	.word	0xe66d1234
 8019088:	0005deec 	.word	0x0005deec

0801908c <rand>:
 801908c:	4b16      	ldr	r3, [pc, #88]	; (80190e8 <rand+0x5c>)
 801908e:	b510      	push	{r4, lr}
 8019090:	681c      	ldr	r4, [r3, #0]
 8019092:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019094:	b9b3      	cbnz	r3, 80190c4 <rand+0x38>
 8019096:	2018      	movs	r0, #24
 8019098:	f000 fb5e 	bl	8019758 <malloc>
 801909c:	4602      	mov	r2, r0
 801909e:	6320      	str	r0, [r4, #48]	; 0x30
 80190a0:	b920      	cbnz	r0, 80190ac <rand+0x20>
 80190a2:	4b12      	ldr	r3, [pc, #72]	; (80190ec <rand+0x60>)
 80190a4:	4812      	ldr	r0, [pc, #72]	; (80190f0 <rand+0x64>)
 80190a6:	2152      	movs	r1, #82	; 0x52
 80190a8:	f000 faec 	bl	8019684 <__assert_func>
 80190ac:	4911      	ldr	r1, [pc, #68]	; (80190f4 <rand+0x68>)
 80190ae:	4b12      	ldr	r3, [pc, #72]	; (80190f8 <rand+0x6c>)
 80190b0:	e9c0 1300 	strd	r1, r3, [r0]
 80190b4:	4b11      	ldr	r3, [pc, #68]	; (80190fc <rand+0x70>)
 80190b6:	6083      	str	r3, [r0, #8]
 80190b8:	230b      	movs	r3, #11
 80190ba:	8183      	strh	r3, [r0, #12]
 80190bc:	2100      	movs	r1, #0
 80190be:	2001      	movs	r0, #1
 80190c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80190c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80190c6:	480e      	ldr	r0, [pc, #56]	; (8019100 <rand+0x74>)
 80190c8:	690b      	ldr	r3, [r1, #16]
 80190ca:	694c      	ldr	r4, [r1, #20]
 80190cc:	4a0d      	ldr	r2, [pc, #52]	; (8019104 <rand+0x78>)
 80190ce:	4358      	muls	r0, r3
 80190d0:	fb02 0004 	mla	r0, r2, r4, r0
 80190d4:	fba3 3202 	umull	r3, r2, r3, r2
 80190d8:	3301      	adds	r3, #1
 80190da:	eb40 0002 	adc.w	r0, r0, r2
 80190de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80190e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80190e6:	bd10      	pop	{r4, pc}
 80190e8:	2000008c 	.word	0x2000008c
 80190ec:	08028534 	.word	0x08028534
 80190f0:	0802854b 	.word	0x0802854b
 80190f4:	abcd330e 	.word	0xabcd330e
 80190f8:	e66d1234 	.word	0xe66d1234
 80190fc:	0005deec 	.word	0x0005deec
 8019100:	5851f42d 	.word	0x5851f42d
 8019104:	4c957f2d 	.word	0x4c957f2d

08019108 <std>:
 8019108:	2300      	movs	r3, #0
 801910a:	b510      	push	{r4, lr}
 801910c:	4604      	mov	r4, r0
 801910e:	e9c0 3300 	strd	r3, r3, [r0]
 8019112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019116:	6083      	str	r3, [r0, #8]
 8019118:	8181      	strh	r1, [r0, #12]
 801911a:	6643      	str	r3, [r0, #100]	; 0x64
 801911c:	81c2      	strh	r2, [r0, #14]
 801911e:	6183      	str	r3, [r0, #24]
 8019120:	4619      	mov	r1, r3
 8019122:	2208      	movs	r2, #8
 8019124:	305c      	adds	r0, #92	; 0x5c
 8019126:	f000 f93e 	bl	80193a6 <memset>
 801912a:	4b05      	ldr	r3, [pc, #20]	; (8019140 <std+0x38>)
 801912c:	6263      	str	r3, [r4, #36]	; 0x24
 801912e:	4b05      	ldr	r3, [pc, #20]	; (8019144 <std+0x3c>)
 8019130:	62a3      	str	r3, [r4, #40]	; 0x28
 8019132:	4b05      	ldr	r3, [pc, #20]	; (8019148 <std+0x40>)
 8019134:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019136:	4b05      	ldr	r3, [pc, #20]	; (801914c <std+0x44>)
 8019138:	6224      	str	r4, [r4, #32]
 801913a:	6323      	str	r3, [r4, #48]	; 0x30
 801913c:	bd10      	pop	{r4, pc}
 801913e:	bf00      	nop
 8019140:	080192cd 	.word	0x080192cd
 8019144:	080192ef 	.word	0x080192ef
 8019148:	08019327 	.word	0x08019327
 801914c:	0801934b 	.word	0x0801934b

08019150 <stdio_exit_handler>:
 8019150:	4a02      	ldr	r2, [pc, #8]	; (801915c <stdio_exit_handler+0xc>)
 8019152:	4903      	ldr	r1, [pc, #12]	; (8019160 <stdio_exit_handler+0x10>)
 8019154:	4803      	ldr	r0, [pc, #12]	; (8019164 <stdio_exit_handler+0x14>)
 8019156:	f000 b869 	b.w	801922c <_fwalk_sglue>
 801915a:	bf00      	nop
 801915c:	20000034 	.word	0x20000034
 8019160:	0801a225 	.word	0x0801a225
 8019164:	20000040 	.word	0x20000040

08019168 <cleanup_stdio>:
 8019168:	6841      	ldr	r1, [r0, #4]
 801916a:	4b0c      	ldr	r3, [pc, #48]	; (801919c <cleanup_stdio+0x34>)
 801916c:	4299      	cmp	r1, r3
 801916e:	b510      	push	{r4, lr}
 8019170:	4604      	mov	r4, r0
 8019172:	d001      	beq.n	8019178 <cleanup_stdio+0x10>
 8019174:	f001 f856 	bl	801a224 <_fflush_r>
 8019178:	68a1      	ldr	r1, [r4, #8]
 801917a:	4b09      	ldr	r3, [pc, #36]	; (80191a0 <cleanup_stdio+0x38>)
 801917c:	4299      	cmp	r1, r3
 801917e:	d002      	beq.n	8019186 <cleanup_stdio+0x1e>
 8019180:	4620      	mov	r0, r4
 8019182:	f001 f84f 	bl	801a224 <_fflush_r>
 8019186:	68e1      	ldr	r1, [r4, #12]
 8019188:	4b06      	ldr	r3, [pc, #24]	; (80191a4 <cleanup_stdio+0x3c>)
 801918a:	4299      	cmp	r1, r3
 801918c:	d004      	beq.n	8019198 <cleanup_stdio+0x30>
 801918e:	4620      	mov	r0, r4
 8019190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019194:	f001 b846 	b.w	801a224 <_fflush_r>
 8019198:	bd10      	pop	{r4, pc}
 801919a:	bf00      	nop
 801919c:	20011058 	.word	0x20011058
 80191a0:	200110c0 	.word	0x200110c0
 80191a4:	20011128 	.word	0x20011128

080191a8 <global_stdio_init.part.0>:
 80191a8:	b510      	push	{r4, lr}
 80191aa:	4b0b      	ldr	r3, [pc, #44]	; (80191d8 <global_stdio_init.part.0+0x30>)
 80191ac:	4c0b      	ldr	r4, [pc, #44]	; (80191dc <global_stdio_init.part.0+0x34>)
 80191ae:	4a0c      	ldr	r2, [pc, #48]	; (80191e0 <global_stdio_init.part.0+0x38>)
 80191b0:	601a      	str	r2, [r3, #0]
 80191b2:	4620      	mov	r0, r4
 80191b4:	2200      	movs	r2, #0
 80191b6:	2104      	movs	r1, #4
 80191b8:	f7ff ffa6 	bl	8019108 <std>
 80191bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80191c0:	2201      	movs	r2, #1
 80191c2:	2109      	movs	r1, #9
 80191c4:	f7ff ffa0 	bl	8019108 <std>
 80191c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80191cc:	2202      	movs	r2, #2
 80191ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191d2:	2112      	movs	r1, #18
 80191d4:	f7ff bf98 	b.w	8019108 <std>
 80191d8:	20011190 	.word	0x20011190
 80191dc:	20011058 	.word	0x20011058
 80191e0:	08019151 	.word	0x08019151

080191e4 <__sfp_lock_acquire>:
 80191e4:	4801      	ldr	r0, [pc, #4]	; (80191ec <__sfp_lock_acquire+0x8>)
 80191e6:	f000 ba3d 	b.w	8019664 <__retarget_lock_acquire_recursive>
 80191ea:	bf00      	nop
 80191ec:	20011199 	.word	0x20011199

080191f0 <__sfp_lock_release>:
 80191f0:	4801      	ldr	r0, [pc, #4]	; (80191f8 <__sfp_lock_release+0x8>)
 80191f2:	f000 ba38 	b.w	8019666 <__retarget_lock_release_recursive>
 80191f6:	bf00      	nop
 80191f8:	20011199 	.word	0x20011199

080191fc <__sinit>:
 80191fc:	b510      	push	{r4, lr}
 80191fe:	4604      	mov	r4, r0
 8019200:	f7ff fff0 	bl	80191e4 <__sfp_lock_acquire>
 8019204:	6a23      	ldr	r3, [r4, #32]
 8019206:	b11b      	cbz	r3, 8019210 <__sinit+0x14>
 8019208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801920c:	f7ff bff0 	b.w	80191f0 <__sfp_lock_release>
 8019210:	4b04      	ldr	r3, [pc, #16]	; (8019224 <__sinit+0x28>)
 8019212:	6223      	str	r3, [r4, #32]
 8019214:	4b04      	ldr	r3, [pc, #16]	; (8019228 <__sinit+0x2c>)
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d1f5      	bne.n	8019208 <__sinit+0xc>
 801921c:	f7ff ffc4 	bl	80191a8 <global_stdio_init.part.0>
 8019220:	e7f2      	b.n	8019208 <__sinit+0xc>
 8019222:	bf00      	nop
 8019224:	08019169 	.word	0x08019169
 8019228:	20011190 	.word	0x20011190

0801922c <_fwalk_sglue>:
 801922c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019230:	4607      	mov	r7, r0
 8019232:	4688      	mov	r8, r1
 8019234:	4614      	mov	r4, r2
 8019236:	2600      	movs	r6, #0
 8019238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801923c:	f1b9 0901 	subs.w	r9, r9, #1
 8019240:	d505      	bpl.n	801924e <_fwalk_sglue+0x22>
 8019242:	6824      	ldr	r4, [r4, #0]
 8019244:	2c00      	cmp	r4, #0
 8019246:	d1f7      	bne.n	8019238 <_fwalk_sglue+0xc>
 8019248:	4630      	mov	r0, r6
 801924a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801924e:	89ab      	ldrh	r3, [r5, #12]
 8019250:	2b01      	cmp	r3, #1
 8019252:	d907      	bls.n	8019264 <_fwalk_sglue+0x38>
 8019254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019258:	3301      	adds	r3, #1
 801925a:	d003      	beq.n	8019264 <_fwalk_sglue+0x38>
 801925c:	4629      	mov	r1, r5
 801925e:	4638      	mov	r0, r7
 8019260:	47c0      	blx	r8
 8019262:	4306      	orrs	r6, r0
 8019264:	3568      	adds	r5, #104	; 0x68
 8019266:	e7e9      	b.n	801923c <_fwalk_sglue+0x10>

08019268 <iprintf>:
 8019268:	b40f      	push	{r0, r1, r2, r3}
 801926a:	b507      	push	{r0, r1, r2, lr}
 801926c:	4906      	ldr	r1, [pc, #24]	; (8019288 <iprintf+0x20>)
 801926e:	ab04      	add	r3, sp, #16
 8019270:	6808      	ldr	r0, [r1, #0]
 8019272:	f853 2b04 	ldr.w	r2, [r3], #4
 8019276:	6881      	ldr	r1, [r0, #8]
 8019278:	9301      	str	r3, [sp, #4]
 801927a:	f000 fca3 	bl	8019bc4 <_vfiprintf_r>
 801927e:	b003      	add	sp, #12
 8019280:	f85d eb04 	ldr.w	lr, [sp], #4
 8019284:	b004      	add	sp, #16
 8019286:	4770      	bx	lr
 8019288:	2000008c 	.word	0x2000008c

0801928c <siprintf>:
 801928c:	b40e      	push	{r1, r2, r3}
 801928e:	b500      	push	{lr}
 8019290:	b09c      	sub	sp, #112	; 0x70
 8019292:	ab1d      	add	r3, sp, #116	; 0x74
 8019294:	9002      	str	r0, [sp, #8]
 8019296:	9006      	str	r0, [sp, #24]
 8019298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801929c:	4809      	ldr	r0, [pc, #36]	; (80192c4 <siprintf+0x38>)
 801929e:	9107      	str	r1, [sp, #28]
 80192a0:	9104      	str	r1, [sp, #16]
 80192a2:	4909      	ldr	r1, [pc, #36]	; (80192c8 <siprintf+0x3c>)
 80192a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80192a8:	9105      	str	r1, [sp, #20]
 80192aa:	6800      	ldr	r0, [r0, #0]
 80192ac:	9301      	str	r3, [sp, #4]
 80192ae:	a902      	add	r1, sp, #8
 80192b0:	f000 fb60 	bl	8019974 <_svfiprintf_r>
 80192b4:	9b02      	ldr	r3, [sp, #8]
 80192b6:	2200      	movs	r2, #0
 80192b8:	701a      	strb	r2, [r3, #0]
 80192ba:	b01c      	add	sp, #112	; 0x70
 80192bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80192c0:	b003      	add	sp, #12
 80192c2:	4770      	bx	lr
 80192c4:	2000008c 	.word	0x2000008c
 80192c8:	ffff0208 	.word	0xffff0208

080192cc <__sread>:
 80192cc:	b510      	push	{r4, lr}
 80192ce:	460c      	mov	r4, r1
 80192d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192d4:	f000 f97e 	bl	80195d4 <_read_r>
 80192d8:	2800      	cmp	r0, #0
 80192da:	bfab      	itete	ge
 80192dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80192de:	89a3      	ldrhlt	r3, [r4, #12]
 80192e0:	181b      	addge	r3, r3, r0
 80192e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80192e6:	bfac      	ite	ge
 80192e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80192ea:	81a3      	strhlt	r3, [r4, #12]
 80192ec:	bd10      	pop	{r4, pc}

080192ee <__swrite>:
 80192ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192f2:	461f      	mov	r7, r3
 80192f4:	898b      	ldrh	r3, [r1, #12]
 80192f6:	05db      	lsls	r3, r3, #23
 80192f8:	4605      	mov	r5, r0
 80192fa:	460c      	mov	r4, r1
 80192fc:	4616      	mov	r6, r2
 80192fe:	d505      	bpl.n	801930c <__swrite+0x1e>
 8019300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019304:	2302      	movs	r3, #2
 8019306:	2200      	movs	r2, #0
 8019308:	f000 f952 	bl	80195b0 <_lseek_r>
 801930c:	89a3      	ldrh	r3, [r4, #12]
 801930e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019316:	81a3      	strh	r3, [r4, #12]
 8019318:	4632      	mov	r2, r6
 801931a:	463b      	mov	r3, r7
 801931c:	4628      	mov	r0, r5
 801931e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019322:	f000 b969 	b.w	80195f8 <_write_r>

08019326 <__sseek>:
 8019326:	b510      	push	{r4, lr}
 8019328:	460c      	mov	r4, r1
 801932a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801932e:	f000 f93f 	bl	80195b0 <_lseek_r>
 8019332:	1c43      	adds	r3, r0, #1
 8019334:	89a3      	ldrh	r3, [r4, #12]
 8019336:	bf15      	itete	ne
 8019338:	6560      	strne	r0, [r4, #84]	; 0x54
 801933a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801933e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019342:	81a3      	strheq	r3, [r4, #12]
 8019344:	bf18      	it	ne
 8019346:	81a3      	strhne	r3, [r4, #12]
 8019348:	bd10      	pop	{r4, pc}

0801934a <__sclose>:
 801934a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801934e:	f000 b8c9 	b.w	80194e4 <_close_r>

08019352 <memcmp>:
 8019352:	b510      	push	{r4, lr}
 8019354:	3901      	subs	r1, #1
 8019356:	4402      	add	r2, r0
 8019358:	4290      	cmp	r0, r2
 801935a:	d101      	bne.n	8019360 <memcmp+0xe>
 801935c:	2000      	movs	r0, #0
 801935e:	e005      	b.n	801936c <memcmp+0x1a>
 8019360:	7803      	ldrb	r3, [r0, #0]
 8019362:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019366:	42a3      	cmp	r3, r4
 8019368:	d001      	beq.n	801936e <memcmp+0x1c>
 801936a:	1b18      	subs	r0, r3, r4
 801936c:	bd10      	pop	{r4, pc}
 801936e:	3001      	adds	r0, #1
 8019370:	e7f2      	b.n	8019358 <memcmp+0x6>

08019372 <memmove>:
 8019372:	4288      	cmp	r0, r1
 8019374:	b510      	push	{r4, lr}
 8019376:	eb01 0402 	add.w	r4, r1, r2
 801937a:	d902      	bls.n	8019382 <memmove+0x10>
 801937c:	4284      	cmp	r4, r0
 801937e:	4623      	mov	r3, r4
 8019380:	d807      	bhi.n	8019392 <memmove+0x20>
 8019382:	1e43      	subs	r3, r0, #1
 8019384:	42a1      	cmp	r1, r4
 8019386:	d008      	beq.n	801939a <memmove+0x28>
 8019388:	f811 2b01 	ldrb.w	r2, [r1], #1
 801938c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019390:	e7f8      	b.n	8019384 <memmove+0x12>
 8019392:	4402      	add	r2, r0
 8019394:	4601      	mov	r1, r0
 8019396:	428a      	cmp	r2, r1
 8019398:	d100      	bne.n	801939c <memmove+0x2a>
 801939a:	bd10      	pop	{r4, pc}
 801939c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80193a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80193a4:	e7f7      	b.n	8019396 <memmove+0x24>

080193a6 <memset>:
 80193a6:	4402      	add	r2, r0
 80193a8:	4603      	mov	r3, r0
 80193aa:	4293      	cmp	r3, r2
 80193ac:	d100      	bne.n	80193b0 <memset+0xa>
 80193ae:	4770      	bx	lr
 80193b0:	f803 1b01 	strb.w	r1, [r3], #1
 80193b4:	e7f9      	b.n	80193aa <memset+0x4>
	...

080193b8 <strcasecmp>:
 80193b8:	b530      	push	{r4, r5, lr}
 80193ba:	4d0b      	ldr	r5, [pc, #44]	; (80193e8 <strcasecmp+0x30>)
 80193bc:	4604      	mov	r4, r0
 80193be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80193c2:	5cea      	ldrb	r2, [r5, r3]
 80193c4:	f002 0203 	and.w	r2, r2, #3
 80193c8:	2a01      	cmp	r2, #1
 80193ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80193ce:	5ca8      	ldrb	r0, [r5, r2]
 80193d0:	f000 0003 	and.w	r0, r0, #3
 80193d4:	bf08      	it	eq
 80193d6:	3320      	addeq	r3, #32
 80193d8:	2801      	cmp	r0, #1
 80193da:	bf08      	it	eq
 80193dc:	3220      	addeq	r2, #32
 80193de:	1a98      	subs	r0, r3, r2
 80193e0:	d101      	bne.n	80193e6 <strcasecmp+0x2e>
 80193e2:	2a00      	cmp	r2, #0
 80193e4:	d1eb      	bne.n	80193be <strcasecmp+0x6>
 80193e6:	bd30      	pop	{r4, r5, pc}
 80193e8:	080285a4 	.word	0x080285a4

080193ec <strchr>:
 80193ec:	b2c9      	uxtb	r1, r1
 80193ee:	4603      	mov	r3, r0
 80193f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193f4:	b11a      	cbz	r2, 80193fe <strchr+0x12>
 80193f6:	428a      	cmp	r2, r1
 80193f8:	d1f9      	bne.n	80193ee <strchr+0x2>
 80193fa:	4618      	mov	r0, r3
 80193fc:	4770      	bx	lr
 80193fe:	2900      	cmp	r1, #0
 8019400:	bf18      	it	ne
 8019402:	2300      	movne	r3, #0
 8019404:	e7f9      	b.n	80193fa <strchr+0xe>

08019406 <strncmp>:
 8019406:	b510      	push	{r4, lr}
 8019408:	b16a      	cbz	r2, 8019426 <strncmp+0x20>
 801940a:	3901      	subs	r1, #1
 801940c:	1884      	adds	r4, r0, r2
 801940e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019412:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019416:	429a      	cmp	r2, r3
 8019418:	d103      	bne.n	8019422 <strncmp+0x1c>
 801941a:	42a0      	cmp	r0, r4
 801941c:	d001      	beq.n	8019422 <strncmp+0x1c>
 801941e:	2a00      	cmp	r2, #0
 8019420:	d1f5      	bne.n	801940e <strncmp+0x8>
 8019422:	1ad0      	subs	r0, r2, r3
 8019424:	bd10      	pop	{r4, pc}
 8019426:	4610      	mov	r0, r2
 8019428:	e7fc      	b.n	8019424 <strncmp+0x1e>
	...

0801942c <strtok>:
 801942c:	4b16      	ldr	r3, [pc, #88]	; (8019488 <strtok+0x5c>)
 801942e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019430:	681e      	ldr	r6, [r3, #0]
 8019432:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8019434:	4605      	mov	r5, r0
 8019436:	b9fc      	cbnz	r4, 8019478 <strtok+0x4c>
 8019438:	2050      	movs	r0, #80	; 0x50
 801943a:	9101      	str	r1, [sp, #4]
 801943c:	f000 f98c 	bl	8019758 <malloc>
 8019440:	9901      	ldr	r1, [sp, #4]
 8019442:	6470      	str	r0, [r6, #68]	; 0x44
 8019444:	4602      	mov	r2, r0
 8019446:	b920      	cbnz	r0, 8019452 <strtok+0x26>
 8019448:	4b10      	ldr	r3, [pc, #64]	; (801948c <strtok+0x60>)
 801944a:	4811      	ldr	r0, [pc, #68]	; (8019490 <strtok+0x64>)
 801944c:	215b      	movs	r1, #91	; 0x5b
 801944e:	f000 f919 	bl	8019684 <__assert_func>
 8019452:	e9c0 4400 	strd	r4, r4, [r0]
 8019456:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801945a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801945e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8019462:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8019466:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801946a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801946e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8019472:	6184      	str	r4, [r0, #24]
 8019474:	7704      	strb	r4, [r0, #28]
 8019476:	6244      	str	r4, [r0, #36]	; 0x24
 8019478:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801947a:	2301      	movs	r3, #1
 801947c:	4628      	mov	r0, r5
 801947e:	b002      	add	sp, #8
 8019480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019484:	f000 b806 	b.w	8019494 <__strtok_r>
 8019488:	2000008c 	.word	0x2000008c
 801948c:	08028534 	.word	0x08028534
 8019490:	080286a4 	.word	0x080286a4

08019494 <__strtok_r>:
 8019494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019496:	b908      	cbnz	r0, 801949c <__strtok_r+0x8>
 8019498:	6810      	ldr	r0, [r2, #0]
 801949a:	b188      	cbz	r0, 80194c0 <__strtok_r+0x2c>
 801949c:	4604      	mov	r4, r0
 801949e:	4620      	mov	r0, r4
 80194a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80194a4:	460f      	mov	r7, r1
 80194a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80194aa:	b91e      	cbnz	r6, 80194b4 <__strtok_r+0x20>
 80194ac:	b965      	cbnz	r5, 80194c8 <__strtok_r+0x34>
 80194ae:	6015      	str	r5, [r2, #0]
 80194b0:	4628      	mov	r0, r5
 80194b2:	e005      	b.n	80194c0 <__strtok_r+0x2c>
 80194b4:	42b5      	cmp	r5, r6
 80194b6:	d1f6      	bne.n	80194a6 <__strtok_r+0x12>
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d1f0      	bne.n	801949e <__strtok_r+0xa>
 80194bc:	6014      	str	r4, [r2, #0]
 80194be:	7003      	strb	r3, [r0, #0]
 80194c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194c2:	461c      	mov	r4, r3
 80194c4:	e00c      	b.n	80194e0 <__strtok_r+0x4c>
 80194c6:	b915      	cbnz	r5, 80194ce <__strtok_r+0x3a>
 80194c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80194cc:	460e      	mov	r6, r1
 80194ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80194d2:	42ab      	cmp	r3, r5
 80194d4:	d1f7      	bne.n	80194c6 <__strtok_r+0x32>
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d0f3      	beq.n	80194c2 <__strtok_r+0x2e>
 80194da:	2300      	movs	r3, #0
 80194dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80194e0:	6014      	str	r4, [r2, #0]
 80194e2:	e7ed      	b.n	80194c0 <__strtok_r+0x2c>

080194e4 <_close_r>:
 80194e4:	b538      	push	{r3, r4, r5, lr}
 80194e6:	4d06      	ldr	r5, [pc, #24]	; (8019500 <_close_r+0x1c>)
 80194e8:	2300      	movs	r3, #0
 80194ea:	4604      	mov	r4, r0
 80194ec:	4608      	mov	r0, r1
 80194ee:	602b      	str	r3, [r5, #0]
 80194f0:	f7e7 fc71 	bl	8000dd6 <_close>
 80194f4:	1c43      	adds	r3, r0, #1
 80194f6:	d102      	bne.n	80194fe <_close_r+0x1a>
 80194f8:	682b      	ldr	r3, [r5, #0]
 80194fa:	b103      	cbz	r3, 80194fe <_close_r+0x1a>
 80194fc:	6023      	str	r3, [r4, #0]
 80194fe:	bd38      	pop	{r3, r4, r5, pc}
 8019500:	20011194 	.word	0x20011194

08019504 <_reclaim_reent>:
 8019504:	4b29      	ldr	r3, [pc, #164]	; (80195ac <_reclaim_reent+0xa8>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	4283      	cmp	r3, r0
 801950a:	b570      	push	{r4, r5, r6, lr}
 801950c:	4604      	mov	r4, r0
 801950e:	d04b      	beq.n	80195a8 <_reclaim_reent+0xa4>
 8019510:	69c3      	ldr	r3, [r0, #28]
 8019512:	b143      	cbz	r3, 8019526 <_reclaim_reent+0x22>
 8019514:	68db      	ldr	r3, [r3, #12]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d144      	bne.n	80195a4 <_reclaim_reent+0xa0>
 801951a:	69e3      	ldr	r3, [r4, #28]
 801951c:	6819      	ldr	r1, [r3, #0]
 801951e:	b111      	cbz	r1, 8019526 <_reclaim_reent+0x22>
 8019520:	4620      	mov	r0, r4
 8019522:	f000 f8cd 	bl	80196c0 <_free_r>
 8019526:	6961      	ldr	r1, [r4, #20]
 8019528:	b111      	cbz	r1, 8019530 <_reclaim_reent+0x2c>
 801952a:	4620      	mov	r0, r4
 801952c:	f000 f8c8 	bl	80196c0 <_free_r>
 8019530:	69e1      	ldr	r1, [r4, #28]
 8019532:	b111      	cbz	r1, 801953a <_reclaim_reent+0x36>
 8019534:	4620      	mov	r0, r4
 8019536:	f000 f8c3 	bl	80196c0 <_free_r>
 801953a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801953c:	b111      	cbz	r1, 8019544 <_reclaim_reent+0x40>
 801953e:	4620      	mov	r0, r4
 8019540:	f000 f8be 	bl	80196c0 <_free_r>
 8019544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019546:	b111      	cbz	r1, 801954e <_reclaim_reent+0x4a>
 8019548:	4620      	mov	r0, r4
 801954a:	f000 f8b9 	bl	80196c0 <_free_r>
 801954e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019550:	b111      	cbz	r1, 8019558 <_reclaim_reent+0x54>
 8019552:	4620      	mov	r0, r4
 8019554:	f000 f8b4 	bl	80196c0 <_free_r>
 8019558:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801955a:	b111      	cbz	r1, 8019562 <_reclaim_reent+0x5e>
 801955c:	4620      	mov	r0, r4
 801955e:	f000 f8af 	bl	80196c0 <_free_r>
 8019562:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019564:	b111      	cbz	r1, 801956c <_reclaim_reent+0x68>
 8019566:	4620      	mov	r0, r4
 8019568:	f000 f8aa 	bl	80196c0 <_free_r>
 801956c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801956e:	b111      	cbz	r1, 8019576 <_reclaim_reent+0x72>
 8019570:	4620      	mov	r0, r4
 8019572:	f000 f8a5 	bl	80196c0 <_free_r>
 8019576:	6a23      	ldr	r3, [r4, #32]
 8019578:	b1b3      	cbz	r3, 80195a8 <_reclaim_reent+0xa4>
 801957a:	4620      	mov	r0, r4
 801957c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019580:	4718      	bx	r3
 8019582:	5949      	ldr	r1, [r1, r5]
 8019584:	b941      	cbnz	r1, 8019598 <_reclaim_reent+0x94>
 8019586:	3504      	adds	r5, #4
 8019588:	69e3      	ldr	r3, [r4, #28]
 801958a:	2d80      	cmp	r5, #128	; 0x80
 801958c:	68d9      	ldr	r1, [r3, #12]
 801958e:	d1f8      	bne.n	8019582 <_reclaim_reent+0x7e>
 8019590:	4620      	mov	r0, r4
 8019592:	f000 f895 	bl	80196c0 <_free_r>
 8019596:	e7c0      	b.n	801951a <_reclaim_reent+0x16>
 8019598:	680e      	ldr	r6, [r1, #0]
 801959a:	4620      	mov	r0, r4
 801959c:	f000 f890 	bl	80196c0 <_free_r>
 80195a0:	4631      	mov	r1, r6
 80195a2:	e7ef      	b.n	8019584 <_reclaim_reent+0x80>
 80195a4:	2500      	movs	r5, #0
 80195a6:	e7ef      	b.n	8019588 <_reclaim_reent+0x84>
 80195a8:	bd70      	pop	{r4, r5, r6, pc}
 80195aa:	bf00      	nop
 80195ac:	2000008c 	.word	0x2000008c

080195b0 <_lseek_r>:
 80195b0:	b538      	push	{r3, r4, r5, lr}
 80195b2:	4d07      	ldr	r5, [pc, #28]	; (80195d0 <_lseek_r+0x20>)
 80195b4:	4604      	mov	r4, r0
 80195b6:	4608      	mov	r0, r1
 80195b8:	4611      	mov	r1, r2
 80195ba:	2200      	movs	r2, #0
 80195bc:	602a      	str	r2, [r5, #0]
 80195be:	461a      	mov	r2, r3
 80195c0:	f7e7 fc30 	bl	8000e24 <_lseek>
 80195c4:	1c43      	adds	r3, r0, #1
 80195c6:	d102      	bne.n	80195ce <_lseek_r+0x1e>
 80195c8:	682b      	ldr	r3, [r5, #0]
 80195ca:	b103      	cbz	r3, 80195ce <_lseek_r+0x1e>
 80195cc:	6023      	str	r3, [r4, #0]
 80195ce:	bd38      	pop	{r3, r4, r5, pc}
 80195d0:	20011194 	.word	0x20011194

080195d4 <_read_r>:
 80195d4:	b538      	push	{r3, r4, r5, lr}
 80195d6:	4d07      	ldr	r5, [pc, #28]	; (80195f4 <_read_r+0x20>)
 80195d8:	4604      	mov	r4, r0
 80195da:	4608      	mov	r0, r1
 80195dc:	4611      	mov	r1, r2
 80195de:	2200      	movs	r2, #0
 80195e0:	602a      	str	r2, [r5, #0]
 80195e2:	461a      	mov	r2, r3
 80195e4:	f7e7 fbbe 	bl	8000d64 <_read>
 80195e8:	1c43      	adds	r3, r0, #1
 80195ea:	d102      	bne.n	80195f2 <_read_r+0x1e>
 80195ec:	682b      	ldr	r3, [r5, #0]
 80195ee:	b103      	cbz	r3, 80195f2 <_read_r+0x1e>
 80195f0:	6023      	str	r3, [r4, #0]
 80195f2:	bd38      	pop	{r3, r4, r5, pc}
 80195f4:	20011194 	.word	0x20011194

080195f8 <_write_r>:
 80195f8:	b538      	push	{r3, r4, r5, lr}
 80195fa:	4d07      	ldr	r5, [pc, #28]	; (8019618 <_write_r+0x20>)
 80195fc:	4604      	mov	r4, r0
 80195fe:	4608      	mov	r0, r1
 8019600:	4611      	mov	r1, r2
 8019602:	2200      	movs	r2, #0
 8019604:	602a      	str	r2, [r5, #0]
 8019606:	461a      	mov	r2, r3
 8019608:	f7e7 fbc9 	bl	8000d9e <_write>
 801960c:	1c43      	adds	r3, r0, #1
 801960e:	d102      	bne.n	8019616 <_write_r+0x1e>
 8019610:	682b      	ldr	r3, [r5, #0]
 8019612:	b103      	cbz	r3, 8019616 <_write_r+0x1e>
 8019614:	6023      	str	r3, [r4, #0]
 8019616:	bd38      	pop	{r3, r4, r5, pc}
 8019618:	20011194 	.word	0x20011194

0801961c <__libc_init_array>:
 801961c:	b570      	push	{r4, r5, r6, lr}
 801961e:	4d0d      	ldr	r5, [pc, #52]	; (8019654 <__libc_init_array+0x38>)
 8019620:	4c0d      	ldr	r4, [pc, #52]	; (8019658 <__libc_init_array+0x3c>)
 8019622:	1b64      	subs	r4, r4, r5
 8019624:	10a4      	asrs	r4, r4, #2
 8019626:	2600      	movs	r6, #0
 8019628:	42a6      	cmp	r6, r4
 801962a:	d109      	bne.n	8019640 <__libc_init_array+0x24>
 801962c:	4d0b      	ldr	r5, [pc, #44]	; (801965c <__libc_init_array+0x40>)
 801962e:	4c0c      	ldr	r4, [pc, #48]	; (8019660 <__libc_init_array+0x44>)
 8019630:	f000 ffde 	bl	801a5f0 <_init>
 8019634:	1b64      	subs	r4, r4, r5
 8019636:	10a4      	asrs	r4, r4, #2
 8019638:	2600      	movs	r6, #0
 801963a:	42a6      	cmp	r6, r4
 801963c:	d105      	bne.n	801964a <__libc_init_array+0x2e>
 801963e:	bd70      	pop	{r4, r5, r6, pc}
 8019640:	f855 3b04 	ldr.w	r3, [r5], #4
 8019644:	4798      	blx	r3
 8019646:	3601      	adds	r6, #1
 8019648:	e7ee      	b.n	8019628 <__libc_init_array+0xc>
 801964a:	f855 3b04 	ldr.w	r3, [r5], #4
 801964e:	4798      	blx	r3
 8019650:	3601      	adds	r6, #1
 8019652:	e7f2      	b.n	801963a <__libc_init_array+0x1e>
 8019654:	08028778 	.word	0x08028778
 8019658:	08028778 	.word	0x08028778
 801965c:	08028778 	.word	0x08028778
 8019660:	0802877c 	.word	0x0802877c

08019664 <__retarget_lock_acquire_recursive>:
 8019664:	4770      	bx	lr

08019666 <__retarget_lock_release_recursive>:
 8019666:	4770      	bx	lr

08019668 <memcpy>:
 8019668:	440a      	add	r2, r1
 801966a:	4291      	cmp	r1, r2
 801966c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019670:	d100      	bne.n	8019674 <memcpy+0xc>
 8019672:	4770      	bx	lr
 8019674:	b510      	push	{r4, lr}
 8019676:	f811 4b01 	ldrb.w	r4, [r1], #1
 801967a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801967e:	4291      	cmp	r1, r2
 8019680:	d1f9      	bne.n	8019676 <memcpy+0xe>
 8019682:	bd10      	pop	{r4, pc}

08019684 <__assert_func>:
 8019684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019686:	4614      	mov	r4, r2
 8019688:	461a      	mov	r2, r3
 801968a:	4b09      	ldr	r3, [pc, #36]	; (80196b0 <__assert_func+0x2c>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	4605      	mov	r5, r0
 8019690:	68d8      	ldr	r0, [r3, #12]
 8019692:	b14c      	cbz	r4, 80196a8 <__assert_func+0x24>
 8019694:	4b07      	ldr	r3, [pc, #28]	; (80196b4 <__assert_func+0x30>)
 8019696:	9100      	str	r1, [sp, #0]
 8019698:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801969c:	4906      	ldr	r1, [pc, #24]	; (80196b8 <__assert_func+0x34>)
 801969e:	462b      	mov	r3, r5
 80196a0:	f000 fde8 	bl	801a274 <fiprintf>
 80196a4:	f000 fe9e 	bl	801a3e4 <abort>
 80196a8:	4b04      	ldr	r3, [pc, #16]	; (80196bc <__assert_func+0x38>)
 80196aa:	461c      	mov	r4, r3
 80196ac:	e7f3      	b.n	8019696 <__assert_func+0x12>
 80196ae:	bf00      	nop
 80196b0:	2000008c 	.word	0x2000008c
 80196b4:	080286fe 	.word	0x080286fe
 80196b8:	0802870b 	.word	0x0802870b
 80196bc:	08028739 	.word	0x08028739

080196c0 <_free_r>:
 80196c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196c2:	2900      	cmp	r1, #0
 80196c4:	d044      	beq.n	8019750 <_free_r+0x90>
 80196c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196ca:	9001      	str	r0, [sp, #4]
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	f1a1 0404 	sub.w	r4, r1, #4
 80196d2:	bfb8      	it	lt
 80196d4:	18e4      	addlt	r4, r4, r3
 80196d6:	f000 f8e7 	bl	80198a8 <__malloc_lock>
 80196da:	4a1e      	ldr	r2, [pc, #120]	; (8019754 <_free_r+0x94>)
 80196dc:	9801      	ldr	r0, [sp, #4]
 80196de:	6813      	ldr	r3, [r2, #0]
 80196e0:	b933      	cbnz	r3, 80196f0 <_free_r+0x30>
 80196e2:	6063      	str	r3, [r4, #4]
 80196e4:	6014      	str	r4, [r2, #0]
 80196e6:	b003      	add	sp, #12
 80196e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80196ec:	f000 b8e2 	b.w	80198b4 <__malloc_unlock>
 80196f0:	42a3      	cmp	r3, r4
 80196f2:	d908      	bls.n	8019706 <_free_r+0x46>
 80196f4:	6825      	ldr	r5, [r4, #0]
 80196f6:	1961      	adds	r1, r4, r5
 80196f8:	428b      	cmp	r3, r1
 80196fa:	bf01      	itttt	eq
 80196fc:	6819      	ldreq	r1, [r3, #0]
 80196fe:	685b      	ldreq	r3, [r3, #4]
 8019700:	1949      	addeq	r1, r1, r5
 8019702:	6021      	streq	r1, [r4, #0]
 8019704:	e7ed      	b.n	80196e2 <_free_r+0x22>
 8019706:	461a      	mov	r2, r3
 8019708:	685b      	ldr	r3, [r3, #4]
 801970a:	b10b      	cbz	r3, 8019710 <_free_r+0x50>
 801970c:	42a3      	cmp	r3, r4
 801970e:	d9fa      	bls.n	8019706 <_free_r+0x46>
 8019710:	6811      	ldr	r1, [r2, #0]
 8019712:	1855      	adds	r5, r2, r1
 8019714:	42a5      	cmp	r5, r4
 8019716:	d10b      	bne.n	8019730 <_free_r+0x70>
 8019718:	6824      	ldr	r4, [r4, #0]
 801971a:	4421      	add	r1, r4
 801971c:	1854      	adds	r4, r2, r1
 801971e:	42a3      	cmp	r3, r4
 8019720:	6011      	str	r1, [r2, #0]
 8019722:	d1e0      	bne.n	80196e6 <_free_r+0x26>
 8019724:	681c      	ldr	r4, [r3, #0]
 8019726:	685b      	ldr	r3, [r3, #4]
 8019728:	6053      	str	r3, [r2, #4]
 801972a:	440c      	add	r4, r1
 801972c:	6014      	str	r4, [r2, #0]
 801972e:	e7da      	b.n	80196e6 <_free_r+0x26>
 8019730:	d902      	bls.n	8019738 <_free_r+0x78>
 8019732:	230c      	movs	r3, #12
 8019734:	6003      	str	r3, [r0, #0]
 8019736:	e7d6      	b.n	80196e6 <_free_r+0x26>
 8019738:	6825      	ldr	r5, [r4, #0]
 801973a:	1961      	adds	r1, r4, r5
 801973c:	428b      	cmp	r3, r1
 801973e:	bf04      	itt	eq
 8019740:	6819      	ldreq	r1, [r3, #0]
 8019742:	685b      	ldreq	r3, [r3, #4]
 8019744:	6063      	str	r3, [r4, #4]
 8019746:	bf04      	itt	eq
 8019748:	1949      	addeq	r1, r1, r5
 801974a:	6021      	streq	r1, [r4, #0]
 801974c:	6054      	str	r4, [r2, #4]
 801974e:	e7ca      	b.n	80196e6 <_free_r+0x26>
 8019750:	b003      	add	sp, #12
 8019752:	bd30      	pop	{r4, r5, pc}
 8019754:	2001119c 	.word	0x2001119c

08019758 <malloc>:
 8019758:	4b02      	ldr	r3, [pc, #8]	; (8019764 <malloc+0xc>)
 801975a:	4601      	mov	r1, r0
 801975c:	6818      	ldr	r0, [r3, #0]
 801975e:	f000 b823 	b.w	80197a8 <_malloc_r>
 8019762:	bf00      	nop
 8019764:	2000008c 	.word	0x2000008c

08019768 <sbrk_aligned>:
 8019768:	b570      	push	{r4, r5, r6, lr}
 801976a:	4e0e      	ldr	r6, [pc, #56]	; (80197a4 <sbrk_aligned+0x3c>)
 801976c:	460c      	mov	r4, r1
 801976e:	6831      	ldr	r1, [r6, #0]
 8019770:	4605      	mov	r5, r0
 8019772:	b911      	cbnz	r1, 801977a <sbrk_aligned+0x12>
 8019774:	f000 fe26 	bl	801a3c4 <_sbrk_r>
 8019778:	6030      	str	r0, [r6, #0]
 801977a:	4621      	mov	r1, r4
 801977c:	4628      	mov	r0, r5
 801977e:	f000 fe21 	bl	801a3c4 <_sbrk_r>
 8019782:	1c43      	adds	r3, r0, #1
 8019784:	d00a      	beq.n	801979c <sbrk_aligned+0x34>
 8019786:	1cc4      	adds	r4, r0, #3
 8019788:	f024 0403 	bic.w	r4, r4, #3
 801978c:	42a0      	cmp	r0, r4
 801978e:	d007      	beq.n	80197a0 <sbrk_aligned+0x38>
 8019790:	1a21      	subs	r1, r4, r0
 8019792:	4628      	mov	r0, r5
 8019794:	f000 fe16 	bl	801a3c4 <_sbrk_r>
 8019798:	3001      	adds	r0, #1
 801979a:	d101      	bne.n	80197a0 <sbrk_aligned+0x38>
 801979c:	f04f 34ff 	mov.w	r4, #4294967295
 80197a0:	4620      	mov	r0, r4
 80197a2:	bd70      	pop	{r4, r5, r6, pc}
 80197a4:	200111a0 	.word	0x200111a0

080197a8 <_malloc_r>:
 80197a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197ac:	1ccd      	adds	r5, r1, #3
 80197ae:	f025 0503 	bic.w	r5, r5, #3
 80197b2:	3508      	adds	r5, #8
 80197b4:	2d0c      	cmp	r5, #12
 80197b6:	bf38      	it	cc
 80197b8:	250c      	movcc	r5, #12
 80197ba:	2d00      	cmp	r5, #0
 80197bc:	4607      	mov	r7, r0
 80197be:	db01      	blt.n	80197c4 <_malloc_r+0x1c>
 80197c0:	42a9      	cmp	r1, r5
 80197c2:	d905      	bls.n	80197d0 <_malloc_r+0x28>
 80197c4:	230c      	movs	r3, #12
 80197c6:	603b      	str	r3, [r7, #0]
 80197c8:	2600      	movs	r6, #0
 80197ca:	4630      	mov	r0, r6
 80197cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80198a4 <_malloc_r+0xfc>
 80197d4:	f000 f868 	bl	80198a8 <__malloc_lock>
 80197d8:	f8d8 3000 	ldr.w	r3, [r8]
 80197dc:	461c      	mov	r4, r3
 80197de:	bb5c      	cbnz	r4, 8019838 <_malloc_r+0x90>
 80197e0:	4629      	mov	r1, r5
 80197e2:	4638      	mov	r0, r7
 80197e4:	f7ff ffc0 	bl	8019768 <sbrk_aligned>
 80197e8:	1c43      	adds	r3, r0, #1
 80197ea:	4604      	mov	r4, r0
 80197ec:	d155      	bne.n	801989a <_malloc_r+0xf2>
 80197ee:	f8d8 4000 	ldr.w	r4, [r8]
 80197f2:	4626      	mov	r6, r4
 80197f4:	2e00      	cmp	r6, #0
 80197f6:	d145      	bne.n	8019884 <_malloc_r+0xdc>
 80197f8:	2c00      	cmp	r4, #0
 80197fa:	d048      	beq.n	801988e <_malloc_r+0xe6>
 80197fc:	6823      	ldr	r3, [r4, #0]
 80197fe:	4631      	mov	r1, r6
 8019800:	4638      	mov	r0, r7
 8019802:	eb04 0903 	add.w	r9, r4, r3
 8019806:	f000 fddd 	bl	801a3c4 <_sbrk_r>
 801980a:	4581      	cmp	r9, r0
 801980c:	d13f      	bne.n	801988e <_malloc_r+0xe6>
 801980e:	6821      	ldr	r1, [r4, #0]
 8019810:	1a6d      	subs	r5, r5, r1
 8019812:	4629      	mov	r1, r5
 8019814:	4638      	mov	r0, r7
 8019816:	f7ff ffa7 	bl	8019768 <sbrk_aligned>
 801981a:	3001      	adds	r0, #1
 801981c:	d037      	beq.n	801988e <_malloc_r+0xe6>
 801981e:	6823      	ldr	r3, [r4, #0]
 8019820:	442b      	add	r3, r5
 8019822:	6023      	str	r3, [r4, #0]
 8019824:	f8d8 3000 	ldr.w	r3, [r8]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d038      	beq.n	801989e <_malloc_r+0xf6>
 801982c:	685a      	ldr	r2, [r3, #4]
 801982e:	42a2      	cmp	r2, r4
 8019830:	d12b      	bne.n	801988a <_malloc_r+0xe2>
 8019832:	2200      	movs	r2, #0
 8019834:	605a      	str	r2, [r3, #4]
 8019836:	e00f      	b.n	8019858 <_malloc_r+0xb0>
 8019838:	6822      	ldr	r2, [r4, #0]
 801983a:	1b52      	subs	r2, r2, r5
 801983c:	d41f      	bmi.n	801987e <_malloc_r+0xd6>
 801983e:	2a0b      	cmp	r2, #11
 8019840:	d917      	bls.n	8019872 <_malloc_r+0xca>
 8019842:	1961      	adds	r1, r4, r5
 8019844:	42a3      	cmp	r3, r4
 8019846:	6025      	str	r5, [r4, #0]
 8019848:	bf18      	it	ne
 801984a:	6059      	strne	r1, [r3, #4]
 801984c:	6863      	ldr	r3, [r4, #4]
 801984e:	bf08      	it	eq
 8019850:	f8c8 1000 	streq.w	r1, [r8]
 8019854:	5162      	str	r2, [r4, r5]
 8019856:	604b      	str	r3, [r1, #4]
 8019858:	4638      	mov	r0, r7
 801985a:	f104 060b 	add.w	r6, r4, #11
 801985e:	f000 f829 	bl	80198b4 <__malloc_unlock>
 8019862:	f026 0607 	bic.w	r6, r6, #7
 8019866:	1d23      	adds	r3, r4, #4
 8019868:	1af2      	subs	r2, r6, r3
 801986a:	d0ae      	beq.n	80197ca <_malloc_r+0x22>
 801986c:	1b9b      	subs	r3, r3, r6
 801986e:	50a3      	str	r3, [r4, r2]
 8019870:	e7ab      	b.n	80197ca <_malloc_r+0x22>
 8019872:	42a3      	cmp	r3, r4
 8019874:	6862      	ldr	r2, [r4, #4]
 8019876:	d1dd      	bne.n	8019834 <_malloc_r+0x8c>
 8019878:	f8c8 2000 	str.w	r2, [r8]
 801987c:	e7ec      	b.n	8019858 <_malloc_r+0xb0>
 801987e:	4623      	mov	r3, r4
 8019880:	6864      	ldr	r4, [r4, #4]
 8019882:	e7ac      	b.n	80197de <_malloc_r+0x36>
 8019884:	4634      	mov	r4, r6
 8019886:	6876      	ldr	r6, [r6, #4]
 8019888:	e7b4      	b.n	80197f4 <_malloc_r+0x4c>
 801988a:	4613      	mov	r3, r2
 801988c:	e7cc      	b.n	8019828 <_malloc_r+0x80>
 801988e:	230c      	movs	r3, #12
 8019890:	603b      	str	r3, [r7, #0]
 8019892:	4638      	mov	r0, r7
 8019894:	f000 f80e 	bl	80198b4 <__malloc_unlock>
 8019898:	e797      	b.n	80197ca <_malloc_r+0x22>
 801989a:	6025      	str	r5, [r4, #0]
 801989c:	e7dc      	b.n	8019858 <_malloc_r+0xb0>
 801989e:	605b      	str	r3, [r3, #4]
 80198a0:	deff      	udf	#255	; 0xff
 80198a2:	bf00      	nop
 80198a4:	2001119c 	.word	0x2001119c

080198a8 <__malloc_lock>:
 80198a8:	4801      	ldr	r0, [pc, #4]	; (80198b0 <__malloc_lock+0x8>)
 80198aa:	f7ff bedb 	b.w	8019664 <__retarget_lock_acquire_recursive>
 80198ae:	bf00      	nop
 80198b0:	20011198 	.word	0x20011198

080198b4 <__malloc_unlock>:
 80198b4:	4801      	ldr	r0, [pc, #4]	; (80198bc <__malloc_unlock+0x8>)
 80198b6:	f7ff bed6 	b.w	8019666 <__retarget_lock_release_recursive>
 80198ba:	bf00      	nop
 80198bc:	20011198 	.word	0x20011198

080198c0 <__ssputs_r>:
 80198c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198c4:	688e      	ldr	r6, [r1, #8]
 80198c6:	461f      	mov	r7, r3
 80198c8:	42be      	cmp	r6, r7
 80198ca:	680b      	ldr	r3, [r1, #0]
 80198cc:	4682      	mov	sl, r0
 80198ce:	460c      	mov	r4, r1
 80198d0:	4690      	mov	r8, r2
 80198d2:	d82c      	bhi.n	801992e <__ssputs_r+0x6e>
 80198d4:	898a      	ldrh	r2, [r1, #12]
 80198d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80198da:	d026      	beq.n	801992a <__ssputs_r+0x6a>
 80198dc:	6965      	ldr	r5, [r4, #20]
 80198de:	6909      	ldr	r1, [r1, #16]
 80198e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80198e4:	eba3 0901 	sub.w	r9, r3, r1
 80198e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80198ec:	1c7b      	adds	r3, r7, #1
 80198ee:	444b      	add	r3, r9
 80198f0:	106d      	asrs	r5, r5, #1
 80198f2:	429d      	cmp	r5, r3
 80198f4:	bf38      	it	cc
 80198f6:	461d      	movcc	r5, r3
 80198f8:	0553      	lsls	r3, r2, #21
 80198fa:	d527      	bpl.n	801994c <__ssputs_r+0x8c>
 80198fc:	4629      	mov	r1, r5
 80198fe:	f7ff ff53 	bl	80197a8 <_malloc_r>
 8019902:	4606      	mov	r6, r0
 8019904:	b360      	cbz	r0, 8019960 <__ssputs_r+0xa0>
 8019906:	6921      	ldr	r1, [r4, #16]
 8019908:	464a      	mov	r2, r9
 801990a:	f7ff fead 	bl	8019668 <memcpy>
 801990e:	89a3      	ldrh	r3, [r4, #12]
 8019910:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019918:	81a3      	strh	r3, [r4, #12]
 801991a:	6126      	str	r6, [r4, #16]
 801991c:	6165      	str	r5, [r4, #20]
 801991e:	444e      	add	r6, r9
 8019920:	eba5 0509 	sub.w	r5, r5, r9
 8019924:	6026      	str	r6, [r4, #0]
 8019926:	60a5      	str	r5, [r4, #8]
 8019928:	463e      	mov	r6, r7
 801992a:	42be      	cmp	r6, r7
 801992c:	d900      	bls.n	8019930 <__ssputs_r+0x70>
 801992e:	463e      	mov	r6, r7
 8019930:	6820      	ldr	r0, [r4, #0]
 8019932:	4632      	mov	r2, r6
 8019934:	4641      	mov	r1, r8
 8019936:	f7ff fd1c 	bl	8019372 <memmove>
 801993a:	68a3      	ldr	r3, [r4, #8]
 801993c:	1b9b      	subs	r3, r3, r6
 801993e:	60a3      	str	r3, [r4, #8]
 8019940:	6823      	ldr	r3, [r4, #0]
 8019942:	4433      	add	r3, r6
 8019944:	6023      	str	r3, [r4, #0]
 8019946:	2000      	movs	r0, #0
 8019948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801994c:	462a      	mov	r2, r5
 801994e:	f000 fd50 	bl	801a3f2 <_realloc_r>
 8019952:	4606      	mov	r6, r0
 8019954:	2800      	cmp	r0, #0
 8019956:	d1e0      	bne.n	801991a <__ssputs_r+0x5a>
 8019958:	6921      	ldr	r1, [r4, #16]
 801995a:	4650      	mov	r0, sl
 801995c:	f7ff feb0 	bl	80196c0 <_free_r>
 8019960:	230c      	movs	r3, #12
 8019962:	f8ca 3000 	str.w	r3, [sl]
 8019966:	89a3      	ldrh	r3, [r4, #12]
 8019968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801996c:	81a3      	strh	r3, [r4, #12]
 801996e:	f04f 30ff 	mov.w	r0, #4294967295
 8019972:	e7e9      	b.n	8019948 <__ssputs_r+0x88>

08019974 <_svfiprintf_r>:
 8019974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019978:	4698      	mov	r8, r3
 801997a:	898b      	ldrh	r3, [r1, #12]
 801997c:	061b      	lsls	r3, r3, #24
 801997e:	b09d      	sub	sp, #116	; 0x74
 8019980:	4607      	mov	r7, r0
 8019982:	460d      	mov	r5, r1
 8019984:	4614      	mov	r4, r2
 8019986:	d50e      	bpl.n	80199a6 <_svfiprintf_r+0x32>
 8019988:	690b      	ldr	r3, [r1, #16]
 801998a:	b963      	cbnz	r3, 80199a6 <_svfiprintf_r+0x32>
 801998c:	2140      	movs	r1, #64	; 0x40
 801998e:	f7ff ff0b 	bl	80197a8 <_malloc_r>
 8019992:	6028      	str	r0, [r5, #0]
 8019994:	6128      	str	r0, [r5, #16]
 8019996:	b920      	cbnz	r0, 80199a2 <_svfiprintf_r+0x2e>
 8019998:	230c      	movs	r3, #12
 801999a:	603b      	str	r3, [r7, #0]
 801999c:	f04f 30ff 	mov.w	r0, #4294967295
 80199a0:	e0d0      	b.n	8019b44 <_svfiprintf_r+0x1d0>
 80199a2:	2340      	movs	r3, #64	; 0x40
 80199a4:	616b      	str	r3, [r5, #20]
 80199a6:	2300      	movs	r3, #0
 80199a8:	9309      	str	r3, [sp, #36]	; 0x24
 80199aa:	2320      	movs	r3, #32
 80199ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80199b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80199b4:	2330      	movs	r3, #48	; 0x30
 80199b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019b5c <_svfiprintf_r+0x1e8>
 80199ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80199be:	f04f 0901 	mov.w	r9, #1
 80199c2:	4623      	mov	r3, r4
 80199c4:	469a      	mov	sl, r3
 80199c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80199ca:	b10a      	cbz	r2, 80199d0 <_svfiprintf_r+0x5c>
 80199cc:	2a25      	cmp	r2, #37	; 0x25
 80199ce:	d1f9      	bne.n	80199c4 <_svfiprintf_r+0x50>
 80199d0:	ebba 0b04 	subs.w	fp, sl, r4
 80199d4:	d00b      	beq.n	80199ee <_svfiprintf_r+0x7a>
 80199d6:	465b      	mov	r3, fp
 80199d8:	4622      	mov	r2, r4
 80199da:	4629      	mov	r1, r5
 80199dc:	4638      	mov	r0, r7
 80199de:	f7ff ff6f 	bl	80198c0 <__ssputs_r>
 80199e2:	3001      	adds	r0, #1
 80199e4:	f000 80a9 	beq.w	8019b3a <_svfiprintf_r+0x1c6>
 80199e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80199ea:	445a      	add	r2, fp
 80199ec:	9209      	str	r2, [sp, #36]	; 0x24
 80199ee:	f89a 3000 	ldrb.w	r3, [sl]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	f000 80a1 	beq.w	8019b3a <_svfiprintf_r+0x1c6>
 80199f8:	2300      	movs	r3, #0
 80199fa:	f04f 32ff 	mov.w	r2, #4294967295
 80199fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a02:	f10a 0a01 	add.w	sl, sl, #1
 8019a06:	9304      	str	r3, [sp, #16]
 8019a08:	9307      	str	r3, [sp, #28]
 8019a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019a0e:	931a      	str	r3, [sp, #104]	; 0x68
 8019a10:	4654      	mov	r4, sl
 8019a12:	2205      	movs	r2, #5
 8019a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a18:	4850      	ldr	r0, [pc, #320]	; (8019b5c <_svfiprintf_r+0x1e8>)
 8019a1a:	f7e6 fc01 	bl	8000220 <memchr>
 8019a1e:	9a04      	ldr	r2, [sp, #16]
 8019a20:	b9d8      	cbnz	r0, 8019a5a <_svfiprintf_r+0xe6>
 8019a22:	06d0      	lsls	r0, r2, #27
 8019a24:	bf44      	itt	mi
 8019a26:	2320      	movmi	r3, #32
 8019a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a2c:	0711      	lsls	r1, r2, #28
 8019a2e:	bf44      	itt	mi
 8019a30:	232b      	movmi	r3, #43	; 0x2b
 8019a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a36:	f89a 3000 	ldrb.w	r3, [sl]
 8019a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8019a3c:	d015      	beq.n	8019a6a <_svfiprintf_r+0xf6>
 8019a3e:	9a07      	ldr	r2, [sp, #28]
 8019a40:	4654      	mov	r4, sl
 8019a42:	2000      	movs	r0, #0
 8019a44:	f04f 0c0a 	mov.w	ip, #10
 8019a48:	4621      	mov	r1, r4
 8019a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a4e:	3b30      	subs	r3, #48	; 0x30
 8019a50:	2b09      	cmp	r3, #9
 8019a52:	d94d      	bls.n	8019af0 <_svfiprintf_r+0x17c>
 8019a54:	b1b0      	cbz	r0, 8019a84 <_svfiprintf_r+0x110>
 8019a56:	9207      	str	r2, [sp, #28]
 8019a58:	e014      	b.n	8019a84 <_svfiprintf_r+0x110>
 8019a5a:	eba0 0308 	sub.w	r3, r0, r8
 8019a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8019a62:	4313      	orrs	r3, r2
 8019a64:	9304      	str	r3, [sp, #16]
 8019a66:	46a2      	mov	sl, r4
 8019a68:	e7d2      	b.n	8019a10 <_svfiprintf_r+0x9c>
 8019a6a:	9b03      	ldr	r3, [sp, #12]
 8019a6c:	1d19      	adds	r1, r3, #4
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	9103      	str	r1, [sp, #12]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	bfbb      	ittet	lt
 8019a76:	425b      	neglt	r3, r3
 8019a78:	f042 0202 	orrlt.w	r2, r2, #2
 8019a7c:	9307      	strge	r3, [sp, #28]
 8019a7e:	9307      	strlt	r3, [sp, #28]
 8019a80:	bfb8      	it	lt
 8019a82:	9204      	strlt	r2, [sp, #16]
 8019a84:	7823      	ldrb	r3, [r4, #0]
 8019a86:	2b2e      	cmp	r3, #46	; 0x2e
 8019a88:	d10c      	bne.n	8019aa4 <_svfiprintf_r+0x130>
 8019a8a:	7863      	ldrb	r3, [r4, #1]
 8019a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8019a8e:	d134      	bne.n	8019afa <_svfiprintf_r+0x186>
 8019a90:	9b03      	ldr	r3, [sp, #12]
 8019a92:	1d1a      	adds	r2, r3, #4
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	9203      	str	r2, [sp, #12]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	bfb8      	it	lt
 8019a9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019aa0:	3402      	adds	r4, #2
 8019aa2:	9305      	str	r3, [sp, #20]
 8019aa4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019b6c <_svfiprintf_r+0x1f8>
 8019aa8:	7821      	ldrb	r1, [r4, #0]
 8019aaa:	2203      	movs	r2, #3
 8019aac:	4650      	mov	r0, sl
 8019aae:	f7e6 fbb7 	bl	8000220 <memchr>
 8019ab2:	b138      	cbz	r0, 8019ac4 <_svfiprintf_r+0x150>
 8019ab4:	9b04      	ldr	r3, [sp, #16]
 8019ab6:	eba0 000a 	sub.w	r0, r0, sl
 8019aba:	2240      	movs	r2, #64	; 0x40
 8019abc:	4082      	lsls	r2, r0
 8019abe:	4313      	orrs	r3, r2
 8019ac0:	3401      	adds	r4, #1
 8019ac2:	9304      	str	r3, [sp, #16]
 8019ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ac8:	4825      	ldr	r0, [pc, #148]	; (8019b60 <_svfiprintf_r+0x1ec>)
 8019aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019ace:	2206      	movs	r2, #6
 8019ad0:	f7e6 fba6 	bl	8000220 <memchr>
 8019ad4:	2800      	cmp	r0, #0
 8019ad6:	d038      	beq.n	8019b4a <_svfiprintf_r+0x1d6>
 8019ad8:	4b22      	ldr	r3, [pc, #136]	; (8019b64 <_svfiprintf_r+0x1f0>)
 8019ada:	bb1b      	cbnz	r3, 8019b24 <_svfiprintf_r+0x1b0>
 8019adc:	9b03      	ldr	r3, [sp, #12]
 8019ade:	3307      	adds	r3, #7
 8019ae0:	f023 0307 	bic.w	r3, r3, #7
 8019ae4:	3308      	adds	r3, #8
 8019ae6:	9303      	str	r3, [sp, #12]
 8019ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019aea:	4433      	add	r3, r6
 8019aec:	9309      	str	r3, [sp, #36]	; 0x24
 8019aee:	e768      	b.n	80199c2 <_svfiprintf_r+0x4e>
 8019af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8019af4:	460c      	mov	r4, r1
 8019af6:	2001      	movs	r0, #1
 8019af8:	e7a6      	b.n	8019a48 <_svfiprintf_r+0xd4>
 8019afa:	2300      	movs	r3, #0
 8019afc:	3401      	adds	r4, #1
 8019afe:	9305      	str	r3, [sp, #20]
 8019b00:	4619      	mov	r1, r3
 8019b02:	f04f 0c0a 	mov.w	ip, #10
 8019b06:	4620      	mov	r0, r4
 8019b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b0c:	3a30      	subs	r2, #48	; 0x30
 8019b0e:	2a09      	cmp	r2, #9
 8019b10:	d903      	bls.n	8019b1a <_svfiprintf_r+0x1a6>
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d0c6      	beq.n	8019aa4 <_svfiprintf_r+0x130>
 8019b16:	9105      	str	r1, [sp, #20]
 8019b18:	e7c4      	b.n	8019aa4 <_svfiprintf_r+0x130>
 8019b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019b1e:	4604      	mov	r4, r0
 8019b20:	2301      	movs	r3, #1
 8019b22:	e7f0      	b.n	8019b06 <_svfiprintf_r+0x192>
 8019b24:	ab03      	add	r3, sp, #12
 8019b26:	9300      	str	r3, [sp, #0]
 8019b28:	462a      	mov	r2, r5
 8019b2a:	4b0f      	ldr	r3, [pc, #60]	; (8019b68 <_svfiprintf_r+0x1f4>)
 8019b2c:	a904      	add	r1, sp, #16
 8019b2e:	4638      	mov	r0, r7
 8019b30:	f3af 8000 	nop.w
 8019b34:	1c42      	adds	r2, r0, #1
 8019b36:	4606      	mov	r6, r0
 8019b38:	d1d6      	bne.n	8019ae8 <_svfiprintf_r+0x174>
 8019b3a:	89ab      	ldrh	r3, [r5, #12]
 8019b3c:	065b      	lsls	r3, r3, #25
 8019b3e:	f53f af2d 	bmi.w	801999c <_svfiprintf_r+0x28>
 8019b42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019b44:	b01d      	add	sp, #116	; 0x74
 8019b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b4a:	ab03      	add	r3, sp, #12
 8019b4c:	9300      	str	r3, [sp, #0]
 8019b4e:	462a      	mov	r2, r5
 8019b50:	4b05      	ldr	r3, [pc, #20]	; (8019b68 <_svfiprintf_r+0x1f4>)
 8019b52:	a904      	add	r1, sp, #16
 8019b54:	4638      	mov	r0, r7
 8019b56:	f000 f9bd 	bl	8019ed4 <_printf_i>
 8019b5a:	e7eb      	b.n	8019b34 <_svfiprintf_r+0x1c0>
 8019b5c:	0802873a 	.word	0x0802873a
 8019b60:	08028744 	.word	0x08028744
 8019b64:	00000000 	.word	0x00000000
 8019b68:	080198c1 	.word	0x080198c1
 8019b6c:	08028740 	.word	0x08028740

08019b70 <__sfputc_r>:
 8019b70:	6893      	ldr	r3, [r2, #8]
 8019b72:	3b01      	subs	r3, #1
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	b410      	push	{r4}
 8019b78:	6093      	str	r3, [r2, #8]
 8019b7a:	da08      	bge.n	8019b8e <__sfputc_r+0x1e>
 8019b7c:	6994      	ldr	r4, [r2, #24]
 8019b7e:	42a3      	cmp	r3, r4
 8019b80:	db01      	blt.n	8019b86 <__sfputc_r+0x16>
 8019b82:	290a      	cmp	r1, #10
 8019b84:	d103      	bne.n	8019b8e <__sfputc_r+0x1e>
 8019b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b8a:	f000 bb85 	b.w	801a298 <__swbuf_r>
 8019b8e:	6813      	ldr	r3, [r2, #0]
 8019b90:	1c58      	adds	r0, r3, #1
 8019b92:	6010      	str	r0, [r2, #0]
 8019b94:	7019      	strb	r1, [r3, #0]
 8019b96:	4608      	mov	r0, r1
 8019b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b9c:	4770      	bx	lr

08019b9e <__sfputs_r>:
 8019b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ba0:	4606      	mov	r6, r0
 8019ba2:	460f      	mov	r7, r1
 8019ba4:	4614      	mov	r4, r2
 8019ba6:	18d5      	adds	r5, r2, r3
 8019ba8:	42ac      	cmp	r4, r5
 8019baa:	d101      	bne.n	8019bb0 <__sfputs_r+0x12>
 8019bac:	2000      	movs	r0, #0
 8019bae:	e007      	b.n	8019bc0 <__sfputs_r+0x22>
 8019bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bb4:	463a      	mov	r2, r7
 8019bb6:	4630      	mov	r0, r6
 8019bb8:	f7ff ffda 	bl	8019b70 <__sfputc_r>
 8019bbc:	1c43      	adds	r3, r0, #1
 8019bbe:	d1f3      	bne.n	8019ba8 <__sfputs_r+0xa>
 8019bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019bc4 <_vfiprintf_r>:
 8019bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bc8:	460d      	mov	r5, r1
 8019bca:	b09d      	sub	sp, #116	; 0x74
 8019bcc:	4614      	mov	r4, r2
 8019bce:	4698      	mov	r8, r3
 8019bd0:	4606      	mov	r6, r0
 8019bd2:	b118      	cbz	r0, 8019bdc <_vfiprintf_r+0x18>
 8019bd4:	6a03      	ldr	r3, [r0, #32]
 8019bd6:	b90b      	cbnz	r3, 8019bdc <_vfiprintf_r+0x18>
 8019bd8:	f7ff fb10 	bl	80191fc <__sinit>
 8019bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bde:	07d9      	lsls	r1, r3, #31
 8019be0:	d405      	bmi.n	8019bee <_vfiprintf_r+0x2a>
 8019be2:	89ab      	ldrh	r3, [r5, #12]
 8019be4:	059a      	lsls	r2, r3, #22
 8019be6:	d402      	bmi.n	8019bee <_vfiprintf_r+0x2a>
 8019be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bea:	f7ff fd3b 	bl	8019664 <__retarget_lock_acquire_recursive>
 8019bee:	89ab      	ldrh	r3, [r5, #12]
 8019bf0:	071b      	lsls	r3, r3, #28
 8019bf2:	d501      	bpl.n	8019bf8 <_vfiprintf_r+0x34>
 8019bf4:	692b      	ldr	r3, [r5, #16]
 8019bf6:	b99b      	cbnz	r3, 8019c20 <_vfiprintf_r+0x5c>
 8019bf8:	4629      	mov	r1, r5
 8019bfa:	4630      	mov	r0, r6
 8019bfc:	f000 fb8a 	bl	801a314 <__swsetup_r>
 8019c00:	b170      	cbz	r0, 8019c20 <_vfiprintf_r+0x5c>
 8019c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019c04:	07dc      	lsls	r4, r3, #31
 8019c06:	d504      	bpl.n	8019c12 <_vfiprintf_r+0x4e>
 8019c08:	f04f 30ff 	mov.w	r0, #4294967295
 8019c0c:	b01d      	add	sp, #116	; 0x74
 8019c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c12:	89ab      	ldrh	r3, [r5, #12]
 8019c14:	0598      	lsls	r0, r3, #22
 8019c16:	d4f7      	bmi.n	8019c08 <_vfiprintf_r+0x44>
 8019c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019c1a:	f7ff fd24 	bl	8019666 <__retarget_lock_release_recursive>
 8019c1e:	e7f3      	b.n	8019c08 <_vfiprintf_r+0x44>
 8019c20:	2300      	movs	r3, #0
 8019c22:	9309      	str	r3, [sp, #36]	; 0x24
 8019c24:	2320      	movs	r3, #32
 8019c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c2e:	2330      	movs	r3, #48	; 0x30
 8019c30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019de4 <_vfiprintf_r+0x220>
 8019c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c38:	f04f 0901 	mov.w	r9, #1
 8019c3c:	4623      	mov	r3, r4
 8019c3e:	469a      	mov	sl, r3
 8019c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c44:	b10a      	cbz	r2, 8019c4a <_vfiprintf_r+0x86>
 8019c46:	2a25      	cmp	r2, #37	; 0x25
 8019c48:	d1f9      	bne.n	8019c3e <_vfiprintf_r+0x7a>
 8019c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8019c4e:	d00b      	beq.n	8019c68 <_vfiprintf_r+0xa4>
 8019c50:	465b      	mov	r3, fp
 8019c52:	4622      	mov	r2, r4
 8019c54:	4629      	mov	r1, r5
 8019c56:	4630      	mov	r0, r6
 8019c58:	f7ff ffa1 	bl	8019b9e <__sfputs_r>
 8019c5c:	3001      	adds	r0, #1
 8019c5e:	f000 80a9 	beq.w	8019db4 <_vfiprintf_r+0x1f0>
 8019c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c64:	445a      	add	r2, fp
 8019c66:	9209      	str	r2, [sp, #36]	; 0x24
 8019c68:	f89a 3000 	ldrb.w	r3, [sl]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	f000 80a1 	beq.w	8019db4 <_vfiprintf_r+0x1f0>
 8019c72:	2300      	movs	r3, #0
 8019c74:	f04f 32ff 	mov.w	r2, #4294967295
 8019c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c7c:	f10a 0a01 	add.w	sl, sl, #1
 8019c80:	9304      	str	r3, [sp, #16]
 8019c82:	9307      	str	r3, [sp, #28]
 8019c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c88:	931a      	str	r3, [sp, #104]	; 0x68
 8019c8a:	4654      	mov	r4, sl
 8019c8c:	2205      	movs	r2, #5
 8019c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c92:	4854      	ldr	r0, [pc, #336]	; (8019de4 <_vfiprintf_r+0x220>)
 8019c94:	f7e6 fac4 	bl	8000220 <memchr>
 8019c98:	9a04      	ldr	r2, [sp, #16]
 8019c9a:	b9d8      	cbnz	r0, 8019cd4 <_vfiprintf_r+0x110>
 8019c9c:	06d1      	lsls	r1, r2, #27
 8019c9e:	bf44      	itt	mi
 8019ca0:	2320      	movmi	r3, #32
 8019ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ca6:	0713      	lsls	r3, r2, #28
 8019ca8:	bf44      	itt	mi
 8019caa:	232b      	movmi	r3, #43	; 0x2b
 8019cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8019cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8019cb6:	d015      	beq.n	8019ce4 <_vfiprintf_r+0x120>
 8019cb8:	9a07      	ldr	r2, [sp, #28]
 8019cba:	4654      	mov	r4, sl
 8019cbc:	2000      	movs	r0, #0
 8019cbe:	f04f 0c0a 	mov.w	ip, #10
 8019cc2:	4621      	mov	r1, r4
 8019cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019cc8:	3b30      	subs	r3, #48	; 0x30
 8019cca:	2b09      	cmp	r3, #9
 8019ccc:	d94d      	bls.n	8019d6a <_vfiprintf_r+0x1a6>
 8019cce:	b1b0      	cbz	r0, 8019cfe <_vfiprintf_r+0x13a>
 8019cd0:	9207      	str	r2, [sp, #28]
 8019cd2:	e014      	b.n	8019cfe <_vfiprintf_r+0x13a>
 8019cd4:	eba0 0308 	sub.w	r3, r0, r8
 8019cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8019cdc:	4313      	orrs	r3, r2
 8019cde:	9304      	str	r3, [sp, #16]
 8019ce0:	46a2      	mov	sl, r4
 8019ce2:	e7d2      	b.n	8019c8a <_vfiprintf_r+0xc6>
 8019ce4:	9b03      	ldr	r3, [sp, #12]
 8019ce6:	1d19      	adds	r1, r3, #4
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	9103      	str	r1, [sp, #12]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	bfbb      	ittet	lt
 8019cf0:	425b      	neglt	r3, r3
 8019cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8019cf6:	9307      	strge	r3, [sp, #28]
 8019cf8:	9307      	strlt	r3, [sp, #28]
 8019cfa:	bfb8      	it	lt
 8019cfc:	9204      	strlt	r2, [sp, #16]
 8019cfe:	7823      	ldrb	r3, [r4, #0]
 8019d00:	2b2e      	cmp	r3, #46	; 0x2e
 8019d02:	d10c      	bne.n	8019d1e <_vfiprintf_r+0x15a>
 8019d04:	7863      	ldrb	r3, [r4, #1]
 8019d06:	2b2a      	cmp	r3, #42	; 0x2a
 8019d08:	d134      	bne.n	8019d74 <_vfiprintf_r+0x1b0>
 8019d0a:	9b03      	ldr	r3, [sp, #12]
 8019d0c:	1d1a      	adds	r2, r3, #4
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	9203      	str	r2, [sp, #12]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	bfb8      	it	lt
 8019d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8019d1a:	3402      	adds	r4, #2
 8019d1c:	9305      	str	r3, [sp, #20]
 8019d1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019df4 <_vfiprintf_r+0x230>
 8019d22:	7821      	ldrb	r1, [r4, #0]
 8019d24:	2203      	movs	r2, #3
 8019d26:	4650      	mov	r0, sl
 8019d28:	f7e6 fa7a 	bl	8000220 <memchr>
 8019d2c:	b138      	cbz	r0, 8019d3e <_vfiprintf_r+0x17a>
 8019d2e:	9b04      	ldr	r3, [sp, #16]
 8019d30:	eba0 000a 	sub.w	r0, r0, sl
 8019d34:	2240      	movs	r2, #64	; 0x40
 8019d36:	4082      	lsls	r2, r0
 8019d38:	4313      	orrs	r3, r2
 8019d3a:	3401      	adds	r4, #1
 8019d3c:	9304      	str	r3, [sp, #16]
 8019d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d42:	4829      	ldr	r0, [pc, #164]	; (8019de8 <_vfiprintf_r+0x224>)
 8019d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d48:	2206      	movs	r2, #6
 8019d4a:	f7e6 fa69 	bl	8000220 <memchr>
 8019d4e:	2800      	cmp	r0, #0
 8019d50:	d03f      	beq.n	8019dd2 <_vfiprintf_r+0x20e>
 8019d52:	4b26      	ldr	r3, [pc, #152]	; (8019dec <_vfiprintf_r+0x228>)
 8019d54:	bb1b      	cbnz	r3, 8019d9e <_vfiprintf_r+0x1da>
 8019d56:	9b03      	ldr	r3, [sp, #12]
 8019d58:	3307      	adds	r3, #7
 8019d5a:	f023 0307 	bic.w	r3, r3, #7
 8019d5e:	3308      	adds	r3, #8
 8019d60:	9303      	str	r3, [sp, #12]
 8019d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d64:	443b      	add	r3, r7
 8019d66:	9309      	str	r3, [sp, #36]	; 0x24
 8019d68:	e768      	b.n	8019c3c <_vfiprintf_r+0x78>
 8019d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d6e:	460c      	mov	r4, r1
 8019d70:	2001      	movs	r0, #1
 8019d72:	e7a6      	b.n	8019cc2 <_vfiprintf_r+0xfe>
 8019d74:	2300      	movs	r3, #0
 8019d76:	3401      	adds	r4, #1
 8019d78:	9305      	str	r3, [sp, #20]
 8019d7a:	4619      	mov	r1, r3
 8019d7c:	f04f 0c0a 	mov.w	ip, #10
 8019d80:	4620      	mov	r0, r4
 8019d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d86:	3a30      	subs	r2, #48	; 0x30
 8019d88:	2a09      	cmp	r2, #9
 8019d8a:	d903      	bls.n	8019d94 <_vfiprintf_r+0x1d0>
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d0c6      	beq.n	8019d1e <_vfiprintf_r+0x15a>
 8019d90:	9105      	str	r1, [sp, #20]
 8019d92:	e7c4      	b.n	8019d1e <_vfiprintf_r+0x15a>
 8019d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d98:	4604      	mov	r4, r0
 8019d9a:	2301      	movs	r3, #1
 8019d9c:	e7f0      	b.n	8019d80 <_vfiprintf_r+0x1bc>
 8019d9e:	ab03      	add	r3, sp, #12
 8019da0:	9300      	str	r3, [sp, #0]
 8019da2:	462a      	mov	r2, r5
 8019da4:	4b12      	ldr	r3, [pc, #72]	; (8019df0 <_vfiprintf_r+0x22c>)
 8019da6:	a904      	add	r1, sp, #16
 8019da8:	4630      	mov	r0, r6
 8019daa:	f3af 8000 	nop.w
 8019dae:	4607      	mov	r7, r0
 8019db0:	1c78      	adds	r0, r7, #1
 8019db2:	d1d6      	bne.n	8019d62 <_vfiprintf_r+0x19e>
 8019db4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019db6:	07d9      	lsls	r1, r3, #31
 8019db8:	d405      	bmi.n	8019dc6 <_vfiprintf_r+0x202>
 8019dba:	89ab      	ldrh	r3, [r5, #12]
 8019dbc:	059a      	lsls	r2, r3, #22
 8019dbe:	d402      	bmi.n	8019dc6 <_vfiprintf_r+0x202>
 8019dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019dc2:	f7ff fc50 	bl	8019666 <__retarget_lock_release_recursive>
 8019dc6:	89ab      	ldrh	r3, [r5, #12]
 8019dc8:	065b      	lsls	r3, r3, #25
 8019dca:	f53f af1d 	bmi.w	8019c08 <_vfiprintf_r+0x44>
 8019dce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019dd0:	e71c      	b.n	8019c0c <_vfiprintf_r+0x48>
 8019dd2:	ab03      	add	r3, sp, #12
 8019dd4:	9300      	str	r3, [sp, #0]
 8019dd6:	462a      	mov	r2, r5
 8019dd8:	4b05      	ldr	r3, [pc, #20]	; (8019df0 <_vfiprintf_r+0x22c>)
 8019dda:	a904      	add	r1, sp, #16
 8019ddc:	4630      	mov	r0, r6
 8019dde:	f000 f879 	bl	8019ed4 <_printf_i>
 8019de2:	e7e4      	b.n	8019dae <_vfiprintf_r+0x1ea>
 8019de4:	0802873a 	.word	0x0802873a
 8019de8:	08028744 	.word	0x08028744
 8019dec:	00000000 	.word	0x00000000
 8019df0:	08019b9f 	.word	0x08019b9f
 8019df4:	08028740 	.word	0x08028740

08019df8 <_printf_common>:
 8019df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dfc:	4616      	mov	r6, r2
 8019dfe:	4699      	mov	r9, r3
 8019e00:	688a      	ldr	r2, [r1, #8]
 8019e02:	690b      	ldr	r3, [r1, #16]
 8019e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019e08:	4293      	cmp	r3, r2
 8019e0a:	bfb8      	it	lt
 8019e0c:	4613      	movlt	r3, r2
 8019e0e:	6033      	str	r3, [r6, #0]
 8019e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019e14:	4607      	mov	r7, r0
 8019e16:	460c      	mov	r4, r1
 8019e18:	b10a      	cbz	r2, 8019e1e <_printf_common+0x26>
 8019e1a:	3301      	adds	r3, #1
 8019e1c:	6033      	str	r3, [r6, #0]
 8019e1e:	6823      	ldr	r3, [r4, #0]
 8019e20:	0699      	lsls	r1, r3, #26
 8019e22:	bf42      	ittt	mi
 8019e24:	6833      	ldrmi	r3, [r6, #0]
 8019e26:	3302      	addmi	r3, #2
 8019e28:	6033      	strmi	r3, [r6, #0]
 8019e2a:	6825      	ldr	r5, [r4, #0]
 8019e2c:	f015 0506 	ands.w	r5, r5, #6
 8019e30:	d106      	bne.n	8019e40 <_printf_common+0x48>
 8019e32:	f104 0a19 	add.w	sl, r4, #25
 8019e36:	68e3      	ldr	r3, [r4, #12]
 8019e38:	6832      	ldr	r2, [r6, #0]
 8019e3a:	1a9b      	subs	r3, r3, r2
 8019e3c:	42ab      	cmp	r3, r5
 8019e3e:	dc26      	bgt.n	8019e8e <_printf_common+0x96>
 8019e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e44:	1e13      	subs	r3, r2, #0
 8019e46:	6822      	ldr	r2, [r4, #0]
 8019e48:	bf18      	it	ne
 8019e4a:	2301      	movne	r3, #1
 8019e4c:	0692      	lsls	r2, r2, #26
 8019e4e:	d42b      	bmi.n	8019ea8 <_printf_common+0xb0>
 8019e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e54:	4649      	mov	r1, r9
 8019e56:	4638      	mov	r0, r7
 8019e58:	47c0      	blx	r8
 8019e5a:	3001      	adds	r0, #1
 8019e5c:	d01e      	beq.n	8019e9c <_printf_common+0xa4>
 8019e5e:	6823      	ldr	r3, [r4, #0]
 8019e60:	6922      	ldr	r2, [r4, #16]
 8019e62:	f003 0306 	and.w	r3, r3, #6
 8019e66:	2b04      	cmp	r3, #4
 8019e68:	bf02      	ittt	eq
 8019e6a:	68e5      	ldreq	r5, [r4, #12]
 8019e6c:	6833      	ldreq	r3, [r6, #0]
 8019e6e:	1aed      	subeq	r5, r5, r3
 8019e70:	68a3      	ldr	r3, [r4, #8]
 8019e72:	bf0c      	ite	eq
 8019e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e78:	2500      	movne	r5, #0
 8019e7a:	4293      	cmp	r3, r2
 8019e7c:	bfc4      	itt	gt
 8019e7e:	1a9b      	subgt	r3, r3, r2
 8019e80:	18ed      	addgt	r5, r5, r3
 8019e82:	2600      	movs	r6, #0
 8019e84:	341a      	adds	r4, #26
 8019e86:	42b5      	cmp	r5, r6
 8019e88:	d11a      	bne.n	8019ec0 <_printf_common+0xc8>
 8019e8a:	2000      	movs	r0, #0
 8019e8c:	e008      	b.n	8019ea0 <_printf_common+0xa8>
 8019e8e:	2301      	movs	r3, #1
 8019e90:	4652      	mov	r2, sl
 8019e92:	4649      	mov	r1, r9
 8019e94:	4638      	mov	r0, r7
 8019e96:	47c0      	blx	r8
 8019e98:	3001      	adds	r0, #1
 8019e9a:	d103      	bne.n	8019ea4 <_printf_common+0xac>
 8019e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8019ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ea4:	3501      	adds	r5, #1
 8019ea6:	e7c6      	b.n	8019e36 <_printf_common+0x3e>
 8019ea8:	18e1      	adds	r1, r4, r3
 8019eaa:	1c5a      	adds	r2, r3, #1
 8019eac:	2030      	movs	r0, #48	; 0x30
 8019eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019eb2:	4422      	add	r2, r4
 8019eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019ebc:	3302      	adds	r3, #2
 8019ebe:	e7c7      	b.n	8019e50 <_printf_common+0x58>
 8019ec0:	2301      	movs	r3, #1
 8019ec2:	4622      	mov	r2, r4
 8019ec4:	4649      	mov	r1, r9
 8019ec6:	4638      	mov	r0, r7
 8019ec8:	47c0      	blx	r8
 8019eca:	3001      	adds	r0, #1
 8019ecc:	d0e6      	beq.n	8019e9c <_printf_common+0xa4>
 8019ece:	3601      	adds	r6, #1
 8019ed0:	e7d9      	b.n	8019e86 <_printf_common+0x8e>
	...

08019ed4 <_printf_i>:
 8019ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ed8:	7e0f      	ldrb	r7, [r1, #24]
 8019eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019edc:	2f78      	cmp	r7, #120	; 0x78
 8019ede:	4691      	mov	r9, r2
 8019ee0:	4680      	mov	r8, r0
 8019ee2:	460c      	mov	r4, r1
 8019ee4:	469a      	mov	sl, r3
 8019ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019eea:	d807      	bhi.n	8019efc <_printf_i+0x28>
 8019eec:	2f62      	cmp	r7, #98	; 0x62
 8019eee:	d80a      	bhi.n	8019f06 <_printf_i+0x32>
 8019ef0:	2f00      	cmp	r7, #0
 8019ef2:	f000 80d4 	beq.w	801a09e <_printf_i+0x1ca>
 8019ef6:	2f58      	cmp	r7, #88	; 0x58
 8019ef8:	f000 80c0 	beq.w	801a07c <_printf_i+0x1a8>
 8019efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019f04:	e03a      	b.n	8019f7c <_printf_i+0xa8>
 8019f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019f0a:	2b15      	cmp	r3, #21
 8019f0c:	d8f6      	bhi.n	8019efc <_printf_i+0x28>
 8019f0e:	a101      	add	r1, pc, #4	; (adr r1, 8019f14 <_printf_i+0x40>)
 8019f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f14:	08019f6d 	.word	0x08019f6d
 8019f18:	08019f81 	.word	0x08019f81
 8019f1c:	08019efd 	.word	0x08019efd
 8019f20:	08019efd 	.word	0x08019efd
 8019f24:	08019efd 	.word	0x08019efd
 8019f28:	08019efd 	.word	0x08019efd
 8019f2c:	08019f81 	.word	0x08019f81
 8019f30:	08019efd 	.word	0x08019efd
 8019f34:	08019efd 	.word	0x08019efd
 8019f38:	08019efd 	.word	0x08019efd
 8019f3c:	08019efd 	.word	0x08019efd
 8019f40:	0801a085 	.word	0x0801a085
 8019f44:	08019fad 	.word	0x08019fad
 8019f48:	0801a03f 	.word	0x0801a03f
 8019f4c:	08019efd 	.word	0x08019efd
 8019f50:	08019efd 	.word	0x08019efd
 8019f54:	0801a0a7 	.word	0x0801a0a7
 8019f58:	08019efd 	.word	0x08019efd
 8019f5c:	08019fad 	.word	0x08019fad
 8019f60:	08019efd 	.word	0x08019efd
 8019f64:	08019efd 	.word	0x08019efd
 8019f68:	0801a047 	.word	0x0801a047
 8019f6c:	682b      	ldr	r3, [r5, #0]
 8019f6e:	1d1a      	adds	r2, r3, #4
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	602a      	str	r2, [r5, #0]
 8019f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f7c:	2301      	movs	r3, #1
 8019f7e:	e09f      	b.n	801a0c0 <_printf_i+0x1ec>
 8019f80:	6820      	ldr	r0, [r4, #0]
 8019f82:	682b      	ldr	r3, [r5, #0]
 8019f84:	0607      	lsls	r7, r0, #24
 8019f86:	f103 0104 	add.w	r1, r3, #4
 8019f8a:	6029      	str	r1, [r5, #0]
 8019f8c:	d501      	bpl.n	8019f92 <_printf_i+0xbe>
 8019f8e:	681e      	ldr	r6, [r3, #0]
 8019f90:	e003      	b.n	8019f9a <_printf_i+0xc6>
 8019f92:	0646      	lsls	r6, r0, #25
 8019f94:	d5fb      	bpl.n	8019f8e <_printf_i+0xba>
 8019f96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019f9a:	2e00      	cmp	r6, #0
 8019f9c:	da03      	bge.n	8019fa6 <_printf_i+0xd2>
 8019f9e:	232d      	movs	r3, #45	; 0x2d
 8019fa0:	4276      	negs	r6, r6
 8019fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fa6:	485a      	ldr	r0, [pc, #360]	; (801a110 <_printf_i+0x23c>)
 8019fa8:	230a      	movs	r3, #10
 8019faa:	e012      	b.n	8019fd2 <_printf_i+0xfe>
 8019fac:	682b      	ldr	r3, [r5, #0]
 8019fae:	6820      	ldr	r0, [r4, #0]
 8019fb0:	1d19      	adds	r1, r3, #4
 8019fb2:	6029      	str	r1, [r5, #0]
 8019fb4:	0605      	lsls	r5, r0, #24
 8019fb6:	d501      	bpl.n	8019fbc <_printf_i+0xe8>
 8019fb8:	681e      	ldr	r6, [r3, #0]
 8019fba:	e002      	b.n	8019fc2 <_printf_i+0xee>
 8019fbc:	0641      	lsls	r1, r0, #25
 8019fbe:	d5fb      	bpl.n	8019fb8 <_printf_i+0xe4>
 8019fc0:	881e      	ldrh	r6, [r3, #0]
 8019fc2:	4853      	ldr	r0, [pc, #332]	; (801a110 <_printf_i+0x23c>)
 8019fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8019fc6:	bf0c      	ite	eq
 8019fc8:	2308      	moveq	r3, #8
 8019fca:	230a      	movne	r3, #10
 8019fcc:	2100      	movs	r1, #0
 8019fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019fd2:	6865      	ldr	r5, [r4, #4]
 8019fd4:	60a5      	str	r5, [r4, #8]
 8019fd6:	2d00      	cmp	r5, #0
 8019fd8:	bfa2      	ittt	ge
 8019fda:	6821      	ldrge	r1, [r4, #0]
 8019fdc:	f021 0104 	bicge.w	r1, r1, #4
 8019fe0:	6021      	strge	r1, [r4, #0]
 8019fe2:	b90e      	cbnz	r6, 8019fe8 <_printf_i+0x114>
 8019fe4:	2d00      	cmp	r5, #0
 8019fe6:	d04b      	beq.n	801a080 <_printf_i+0x1ac>
 8019fe8:	4615      	mov	r5, r2
 8019fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8019fee:	fb03 6711 	mls	r7, r3, r1, r6
 8019ff2:	5dc7      	ldrb	r7, [r0, r7]
 8019ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019ff8:	4637      	mov	r7, r6
 8019ffa:	42bb      	cmp	r3, r7
 8019ffc:	460e      	mov	r6, r1
 8019ffe:	d9f4      	bls.n	8019fea <_printf_i+0x116>
 801a000:	2b08      	cmp	r3, #8
 801a002:	d10b      	bne.n	801a01c <_printf_i+0x148>
 801a004:	6823      	ldr	r3, [r4, #0]
 801a006:	07de      	lsls	r6, r3, #31
 801a008:	d508      	bpl.n	801a01c <_printf_i+0x148>
 801a00a:	6923      	ldr	r3, [r4, #16]
 801a00c:	6861      	ldr	r1, [r4, #4]
 801a00e:	4299      	cmp	r1, r3
 801a010:	bfde      	ittt	le
 801a012:	2330      	movle	r3, #48	; 0x30
 801a014:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a018:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a01c:	1b52      	subs	r2, r2, r5
 801a01e:	6122      	str	r2, [r4, #16]
 801a020:	f8cd a000 	str.w	sl, [sp]
 801a024:	464b      	mov	r3, r9
 801a026:	aa03      	add	r2, sp, #12
 801a028:	4621      	mov	r1, r4
 801a02a:	4640      	mov	r0, r8
 801a02c:	f7ff fee4 	bl	8019df8 <_printf_common>
 801a030:	3001      	adds	r0, #1
 801a032:	d14a      	bne.n	801a0ca <_printf_i+0x1f6>
 801a034:	f04f 30ff 	mov.w	r0, #4294967295
 801a038:	b004      	add	sp, #16
 801a03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a03e:	6823      	ldr	r3, [r4, #0]
 801a040:	f043 0320 	orr.w	r3, r3, #32
 801a044:	6023      	str	r3, [r4, #0]
 801a046:	4833      	ldr	r0, [pc, #204]	; (801a114 <_printf_i+0x240>)
 801a048:	2778      	movs	r7, #120	; 0x78
 801a04a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a04e:	6823      	ldr	r3, [r4, #0]
 801a050:	6829      	ldr	r1, [r5, #0]
 801a052:	061f      	lsls	r7, r3, #24
 801a054:	f851 6b04 	ldr.w	r6, [r1], #4
 801a058:	d402      	bmi.n	801a060 <_printf_i+0x18c>
 801a05a:	065f      	lsls	r7, r3, #25
 801a05c:	bf48      	it	mi
 801a05e:	b2b6      	uxthmi	r6, r6
 801a060:	07df      	lsls	r7, r3, #31
 801a062:	bf48      	it	mi
 801a064:	f043 0320 	orrmi.w	r3, r3, #32
 801a068:	6029      	str	r1, [r5, #0]
 801a06a:	bf48      	it	mi
 801a06c:	6023      	strmi	r3, [r4, #0]
 801a06e:	b91e      	cbnz	r6, 801a078 <_printf_i+0x1a4>
 801a070:	6823      	ldr	r3, [r4, #0]
 801a072:	f023 0320 	bic.w	r3, r3, #32
 801a076:	6023      	str	r3, [r4, #0]
 801a078:	2310      	movs	r3, #16
 801a07a:	e7a7      	b.n	8019fcc <_printf_i+0xf8>
 801a07c:	4824      	ldr	r0, [pc, #144]	; (801a110 <_printf_i+0x23c>)
 801a07e:	e7e4      	b.n	801a04a <_printf_i+0x176>
 801a080:	4615      	mov	r5, r2
 801a082:	e7bd      	b.n	801a000 <_printf_i+0x12c>
 801a084:	682b      	ldr	r3, [r5, #0]
 801a086:	6826      	ldr	r6, [r4, #0]
 801a088:	6961      	ldr	r1, [r4, #20]
 801a08a:	1d18      	adds	r0, r3, #4
 801a08c:	6028      	str	r0, [r5, #0]
 801a08e:	0635      	lsls	r5, r6, #24
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	d501      	bpl.n	801a098 <_printf_i+0x1c4>
 801a094:	6019      	str	r1, [r3, #0]
 801a096:	e002      	b.n	801a09e <_printf_i+0x1ca>
 801a098:	0670      	lsls	r0, r6, #25
 801a09a:	d5fb      	bpl.n	801a094 <_printf_i+0x1c0>
 801a09c:	8019      	strh	r1, [r3, #0]
 801a09e:	2300      	movs	r3, #0
 801a0a0:	6123      	str	r3, [r4, #16]
 801a0a2:	4615      	mov	r5, r2
 801a0a4:	e7bc      	b.n	801a020 <_printf_i+0x14c>
 801a0a6:	682b      	ldr	r3, [r5, #0]
 801a0a8:	1d1a      	adds	r2, r3, #4
 801a0aa:	602a      	str	r2, [r5, #0]
 801a0ac:	681d      	ldr	r5, [r3, #0]
 801a0ae:	6862      	ldr	r2, [r4, #4]
 801a0b0:	2100      	movs	r1, #0
 801a0b2:	4628      	mov	r0, r5
 801a0b4:	f7e6 f8b4 	bl	8000220 <memchr>
 801a0b8:	b108      	cbz	r0, 801a0be <_printf_i+0x1ea>
 801a0ba:	1b40      	subs	r0, r0, r5
 801a0bc:	6060      	str	r0, [r4, #4]
 801a0be:	6863      	ldr	r3, [r4, #4]
 801a0c0:	6123      	str	r3, [r4, #16]
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0c8:	e7aa      	b.n	801a020 <_printf_i+0x14c>
 801a0ca:	6923      	ldr	r3, [r4, #16]
 801a0cc:	462a      	mov	r2, r5
 801a0ce:	4649      	mov	r1, r9
 801a0d0:	4640      	mov	r0, r8
 801a0d2:	47d0      	blx	sl
 801a0d4:	3001      	adds	r0, #1
 801a0d6:	d0ad      	beq.n	801a034 <_printf_i+0x160>
 801a0d8:	6823      	ldr	r3, [r4, #0]
 801a0da:	079b      	lsls	r3, r3, #30
 801a0dc:	d413      	bmi.n	801a106 <_printf_i+0x232>
 801a0de:	68e0      	ldr	r0, [r4, #12]
 801a0e0:	9b03      	ldr	r3, [sp, #12]
 801a0e2:	4298      	cmp	r0, r3
 801a0e4:	bfb8      	it	lt
 801a0e6:	4618      	movlt	r0, r3
 801a0e8:	e7a6      	b.n	801a038 <_printf_i+0x164>
 801a0ea:	2301      	movs	r3, #1
 801a0ec:	4632      	mov	r2, r6
 801a0ee:	4649      	mov	r1, r9
 801a0f0:	4640      	mov	r0, r8
 801a0f2:	47d0      	blx	sl
 801a0f4:	3001      	adds	r0, #1
 801a0f6:	d09d      	beq.n	801a034 <_printf_i+0x160>
 801a0f8:	3501      	adds	r5, #1
 801a0fa:	68e3      	ldr	r3, [r4, #12]
 801a0fc:	9903      	ldr	r1, [sp, #12]
 801a0fe:	1a5b      	subs	r3, r3, r1
 801a100:	42ab      	cmp	r3, r5
 801a102:	dcf2      	bgt.n	801a0ea <_printf_i+0x216>
 801a104:	e7eb      	b.n	801a0de <_printf_i+0x20a>
 801a106:	2500      	movs	r5, #0
 801a108:	f104 0619 	add.w	r6, r4, #25
 801a10c:	e7f5      	b.n	801a0fa <_printf_i+0x226>
 801a10e:	bf00      	nop
 801a110:	0802874b 	.word	0x0802874b
 801a114:	0802875c 	.word	0x0802875c

0801a118 <__sflush_r>:
 801a118:	898a      	ldrh	r2, [r1, #12]
 801a11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a11e:	4605      	mov	r5, r0
 801a120:	0710      	lsls	r0, r2, #28
 801a122:	460c      	mov	r4, r1
 801a124:	d458      	bmi.n	801a1d8 <__sflush_r+0xc0>
 801a126:	684b      	ldr	r3, [r1, #4]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	dc05      	bgt.n	801a138 <__sflush_r+0x20>
 801a12c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a12e:	2b00      	cmp	r3, #0
 801a130:	dc02      	bgt.n	801a138 <__sflush_r+0x20>
 801a132:	2000      	movs	r0, #0
 801a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a13a:	2e00      	cmp	r6, #0
 801a13c:	d0f9      	beq.n	801a132 <__sflush_r+0x1a>
 801a13e:	2300      	movs	r3, #0
 801a140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a144:	682f      	ldr	r7, [r5, #0]
 801a146:	6a21      	ldr	r1, [r4, #32]
 801a148:	602b      	str	r3, [r5, #0]
 801a14a:	d032      	beq.n	801a1b2 <__sflush_r+0x9a>
 801a14c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a14e:	89a3      	ldrh	r3, [r4, #12]
 801a150:	075a      	lsls	r2, r3, #29
 801a152:	d505      	bpl.n	801a160 <__sflush_r+0x48>
 801a154:	6863      	ldr	r3, [r4, #4]
 801a156:	1ac0      	subs	r0, r0, r3
 801a158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a15a:	b10b      	cbz	r3, 801a160 <__sflush_r+0x48>
 801a15c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a15e:	1ac0      	subs	r0, r0, r3
 801a160:	2300      	movs	r3, #0
 801a162:	4602      	mov	r2, r0
 801a164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a166:	6a21      	ldr	r1, [r4, #32]
 801a168:	4628      	mov	r0, r5
 801a16a:	47b0      	blx	r6
 801a16c:	1c43      	adds	r3, r0, #1
 801a16e:	89a3      	ldrh	r3, [r4, #12]
 801a170:	d106      	bne.n	801a180 <__sflush_r+0x68>
 801a172:	6829      	ldr	r1, [r5, #0]
 801a174:	291d      	cmp	r1, #29
 801a176:	d82b      	bhi.n	801a1d0 <__sflush_r+0xb8>
 801a178:	4a29      	ldr	r2, [pc, #164]	; (801a220 <__sflush_r+0x108>)
 801a17a:	410a      	asrs	r2, r1
 801a17c:	07d6      	lsls	r6, r2, #31
 801a17e:	d427      	bmi.n	801a1d0 <__sflush_r+0xb8>
 801a180:	2200      	movs	r2, #0
 801a182:	6062      	str	r2, [r4, #4]
 801a184:	04d9      	lsls	r1, r3, #19
 801a186:	6922      	ldr	r2, [r4, #16]
 801a188:	6022      	str	r2, [r4, #0]
 801a18a:	d504      	bpl.n	801a196 <__sflush_r+0x7e>
 801a18c:	1c42      	adds	r2, r0, #1
 801a18e:	d101      	bne.n	801a194 <__sflush_r+0x7c>
 801a190:	682b      	ldr	r3, [r5, #0]
 801a192:	b903      	cbnz	r3, 801a196 <__sflush_r+0x7e>
 801a194:	6560      	str	r0, [r4, #84]	; 0x54
 801a196:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a198:	602f      	str	r7, [r5, #0]
 801a19a:	2900      	cmp	r1, #0
 801a19c:	d0c9      	beq.n	801a132 <__sflush_r+0x1a>
 801a19e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1a2:	4299      	cmp	r1, r3
 801a1a4:	d002      	beq.n	801a1ac <__sflush_r+0x94>
 801a1a6:	4628      	mov	r0, r5
 801a1a8:	f7ff fa8a 	bl	80196c0 <_free_r>
 801a1ac:	2000      	movs	r0, #0
 801a1ae:	6360      	str	r0, [r4, #52]	; 0x34
 801a1b0:	e7c0      	b.n	801a134 <__sflush_r+0x1c>
 801a1b2:	2301      	movs	r3, #1
 801a1b4:	4628      	mov	r0, r5
 801a1b6:	47b0      	blx	r6
 801a1b8:	1c41      	adds	r1, r0, #1
 801a1ba:	d1c8      	bne.n	801a14e <__sflush_r+0x36>
 801a1bc:	682b      	ldr	r3, [r5, #0]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d0c5      	beq.n	801a14e <__sflush_r+0x36>
 801a1c2:	2b1d      	cmp	r3, #29
 801a1c4:	d001      	beq.n	801a1ca <__sflush_r+0xb2>
 801a1c6:	2b16      	cmp	r3, #22
 801a1c8:	d101      	bne.n	801a1ce <__sflush_r+0xb6>
 801a1ca:	602f      	str	r7, [r5, #0]
 801a1cc:	e7b1      	b.n	801a132 <__sflush_r+0x1a>
 801a1ce:	89a3      	ldrh	r3, [r4, #12]
 801a1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1d4:	81a3      	strh	r3, [r4, #12]
 801a1d6:	e7ad      	b.n	801a134 <__sflush_r+0x1c>
 801a1d8:	690f      	ldr	r7, [r1, #16]
 801a1da:	2f00      	cmp	r7, #0
 801a1dc:	d0a9      	beq.n	801a132 <__sflush_r+0x1a>
 801a1de:	0793      	lsls	r3, r2, #30
 801a1e0:	680e      	ldr	r6, [r1, #0]
 801a1e2:	bf08      	it	eq
 801a1e4:	694b      	ldreq	r3, [r1, #20]
 801a1e6:	600f      	str	r7, [r1, #0]
 801a1e8:	bf18      	it	ne
 801a1ea:	2300      	movne	r3, #0
 801a1ec:	eba6 0807 	sub.w	r8, r6, r7
 801a1f0:	608b      	str	r3, [r1, #8]
 801a1f2:	f1b8 0f00 	cmp.w	r8, #0
 801a1f6:	dd9c      	ble.n	801a132 <__sflush_r+0x1a>
 801a1f8:	6a21      	ldr	r1, [r4, #32]
 801a1fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a1fc:	4643      	mov	r3, r8
 801a1fe:	463a      	mov	r2, r7
 801a200:	4628      	mov	r0, r5
 801a202:	47b0      	blx	r6
 801a204:	2800      	cmp	r0, #0
 801a206:	dc06      	bgt.n	801a216 <__sflush_r+0xfe>
 801a208:	89a3      	ldrh	r3, [r4, #12]
 801a20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a20e:	81a3      	strh	r3, [r4, #12]
 801a210:	f04f 30ff 	mov.w	r0, #4294967295
 801a214:	e78e      	b.n	801a134 <__sflush_r+0x1c>
 801a216:	4407      	add	r7, r0
 801a218:	eba8 0800 	sub.w	r8, r8, r0
 801a21c:	e7e9      	b.n	801a1f2 <__sflush_r+0xda>
 801a21e:	bf00      	nop
 801a220:	dfbffffe 	.word	0xdfbffffe

0801a224 <_fflush_r>:
 801a224:	b538      	push	{r3, r4, r5, lr}
 801a226:	690b      	ldr	r3, [r1, #16]
 801a228:	4605      	mov	r5, r0
 801a22a:	460c      	mov	r4, r1
 801a22c:	b913      	cbnz	r3, 801a234 <_fflush_r+0x10>
 801a22e:	2500      	movs	r5, #0
 801a230:	4628      	mov	r0, r5
 801a232:	bd38      	pop	{r3, r4, r5, pc}
 801a234:	b118      	cbz	r0, 801a23e <_fflush_r+0x1a>
 801a236:	6a03      	ldr	r3, [r0, #32]
 801a238:	b90b      	cbnz	r3, 801a23e <_fflush_r+0x1a>
 801a23a:	f7fe ffdf 	bl	80191fc <__sinit>
 801a23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a242:	2b00      	cmp	r3, #0
 801a244:	d0f3      	beq.n	801a22e <_fflush_r+0xa>
 801a246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a248:	07d0      	lsls	r0, r2, #31
 801a24a:	d404      	bmi.n	801a256 <_fflush_r+0x32>
 801a24c:	0599      	lsls	r1, r3, #22
 801a24e:	d402      	bmi.n	801a256 <_fflush_r+0x32>
 801a250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a252:	f7ff fa07 	bl	8019664 <__retarget_lock_acquire_recursive>
 801a256:	4628      	mov	r0, r5
 801a258:	4621      	mov	r1, r4
 801a25a:	f7ff ff5d 	bl	801a118 <__sflush_r>
 801a25e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a260:	07da      	lsls	r2, r3, #31
 801a262:	4605      	mov	r5, r0
 801a264:	d4e4      	bmi.n	801a230 <_fflush_r+0xc>
 801a266:	89a3      	ldrh	r3, [r4, #12]
 801a268:	059b      	lsls	r3, r3, #22
 801a26a:	d4e1      	bmi.n	801a230 <_fflush_r+0xc>
 801a26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a26e:	f7ff f9fa 	bl	8019666 <__retarget_lock_release_recursive>
 801a272:	e7dd      	b.n	801a230 <_fflush_r+0xc>

0801a274 <fiprintf>:
 801a274:	b40e      	push	{r1, r2, r3}
 801a276:	b503      	push	{r0, r1, lr}
 801a278:	4601      	mov	r1, r0
 801a27a:	ab03      	add	r3, sp, #12
 801a27c:	4805      	ldr	r0, [pc, #20]	; (801a294 <fiprintf+0x20>)
 801a27e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a282:	6800      	ldr	r0, [r0, #0]
 801a284:	9301      	str	r3, [sp, #4]
 801a286:	f7ff fc9d 	bl	8019bc4 <_vfiprintf_r>
 801a28a:	b002      	add	sp, #8
 801a28c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a290:	b003      	add	sp, #12
 801a292:	4770      	bx	lr
 801a294:	2000008c 	.word	0x2000008c

0801a298 <__swbuf_r>:
 801a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a29a:	460e      	mov	r6, r1
 801a29c:	4614      	mov	r4, r2
 801a29e:	4605      	mov	r5, r0
 801a2a0:	b118      	cbz	r0, 801a2aa <__swbuf_r+0x12>
 801a2a2:	6a03      	ldr	r3, [r0, #32]
 801a2a4:	b90b      	cbnz	r3, 801a2aa <__swbuf_r+0x12>
 801a2a6:	f7fe ffa9 	bl	80191fc <__sinit>
 801a2aa:	69a3      	ldr	r3, [r4, #24]
 801a2ac:	60a3      	str	r3, [r4, #8]
 801a2ae:	89a3      	ldrh	r3, [r4, #12]
 801a2b0:	071a      	lsls	r2, r3, #28
 801a2b2:	d525      	bpl.n	801a300 <__swbuf_r+0x68>
 801a2b4:	6923      	ldr	r3, [r4, #16]
 801a2b6:	b31b      	cbz	r3, 801a300 <__swbuf_r+0x68>
 801a2b8:	6823      	ldr	r3, [r4, #0]
 801a2ba:	6922      	ldr	r2, [r4, #16]
 801a2bc:	1a98      	subs	r0, r3, r2
 801a2be:	6963      	ldr	r3, [r4, #20]
 801a2c0:	b2f6      	uxtb	r6, r6
 801a2c2:	4283      	cmp	r3, r0
 801a2c4:	4637      	mov	r7, r6
 801a2c6:	dc04      	bgt.n	801a2d2 <__swbuf_r+0x3a>
 801a2c8:	4621      	mov	r1, r4
 801a2ca:	4628      	mov	r0, r5
 801a2cc:	f7ff ffaa 	bl	801a224 <_fflush_r>
 801a2d0:	b9e0      	cbnz	r0, 801a30c <__swbuf_r+0x74>
 801a2d2:	68a3      	ldr	r3, [r4, #8]
 801a2d4:	3b01      	subs	r3, #1
 801a2d6:	60a3      	str	r3, [r4, #8]
 801a2d8:	6823      	ldr	r3, [r4, #0]
 801a2da:	1c5a      	adds	r2, r3, #1
 801a2dc:	6022      	str	r2, [r4, #0]
 801a2de:	701e      	strb	r6, [r3, #0]
 801a2e0:	6962      	ldr	r2, [r4, #20]
 801a2e2:	1c43      	adds	r3, r0, #1
 801a2e4:	429a      	cmp	r2, r3
 801a2e6:	d004      	beq.n	801a2f2 <__swbuf_r+0x5a>
 801a2e8:	89a3      	ldrh	r3, [r4, #12]
 801a2ea:	07db      	lsls	r3, r3, #31
 801a2ec:	d506      	bpl.n	801a2fc <__swbuf_r+0x64>
 801a2ee:	2e0a      	cmp	r6, #10
 801a2f0:	d104      	bne.n	801a2fc <__swbuf_r+0x64>
 801a2f2:	4621      	mov	r1, r4
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	f7ff ff95 	bl	801a224 <_fflush_r>
 801a2fa:	b938      	cbnz	r0, 801a30c <__swbuf_r+0x74>
 801a2fc:	4638      	mov	r0, r7
 801a2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a300:	4621      	mov	r1, r4
 801a302:	4628      	mov	r0, r5
 801a304:	f000 f806 	bl	801a314 <__swsetup_r>
 801a308:	2800      	cmp	r0, #0
 801a30a:	d0d5      	beq.n	801a2b8 <__swbuf_r+0x20>
 801a30c:	f04f 37ff 	mov.w	r7, #4294967295
 801a310:	e7f4      	b.n	801a2fc <__swbuf_r+0x64>
	...

0801a314 <__swsetup_r>:
 801a314:	b538      	push	{r3, r4, r5, lr}
 801a316:	4b2a      	ldr	r3, [pc, #168]	; (801a3c0 <__swsetup_r+0xac>)
 801a318:	4605      	mov	r5, r0
 801a31a:	6818      	ldr	r0, [r3, #0]
 801a31c:	460c      	mov	r4, r1
 801a31e:	b118      	cbz	r0, 801a328 <__swsetup_r+0x14>
 801a320:	6a03      	ldr	r3, [r0, #32]
 801a322:	b90b      	cbnz	r3, 801a328 <__swsetup_r+0x14>
 801a324:	f7fe ff6a 	bl	80191fc <__sinit>
 801a328:	89a3      	ldrh	r3, [r4, #12]
 801a32a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a32e:	0718      	lsls	r0, r3, #28
 801a330:	d422      	bmi.n	801a378 <__swsetup_r+0x64>
 801a332:	06d9      	lsls	r1, r3, #27
 801a334:	d407      	bmi.n	801a346 <__swsetup_r+0x32>
 801a336:	2309      	movs	r3, #9
 801a338:	602b      	str	r3, [r5, #0]
 801a33a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a33e:	81a3      	strh	r3, [r4, #12]
 801a340:	f04f 30ff 	mov.w	r0, #4294967295
 801a344:	e034      	b.n	801a3b0 <__swsetup_r+0x9c>
 801a346:	0758      	lsls	r0, r3, #29
 801a348:	d512      	bpl.n	801a370 <__swsetup_r+0x5c>
 801a34a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a34c:	b141      	cbz	r1, 801a360 <__swsetup_r+0x4c>
 801a34e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a352:	4299      	cmp	r1, r3
 801a354:	d002      	beq.n	801a35c <__swsetup_r+0x48>
 801a356:	4628      	mov	r0, r5
 801a358:	f7ff f9b2 	bl	80196c0 <_free_r>
 801a35c:	2300      	movs	r3, #0
 801a35e:	6363      	str	r3, [r4, #52]	; 0x34
 801a360:	89a3      	ldrh	r3, [r4, #12]
 801a362:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a366:	81a3      	strh	r3, [r4, #12]
 801a368:	2300      	movs	r3, #0
 801a36a:	6063      	str	r3, [r4, #4]
 801a36c:	6923      	ldr	r3, [r4, #16]
 801a36e:	6023      	str	r3, [r4, #0]
 801a370:	89a3      	ldrh	r3, [r4, #12]
 801a372:	f043 0308 	orr.w	r3, r3, #8
 801a376:	81a3      	strh	r3, [r4, #12]
 801a378:	6923      	ldr	r3, [r4, #16]
 801a37a:	b94b      	cbnz	r3, 801a390 <__swsetup_r+0x7c>
 801a37c:	89a3      	ldrh	r3, [r4, #12]
 801a37e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a386:	d003      	beq.n	801a390 <__swsetup_r+0x7c>
 801a388:	4621      	mov	r1, r4
 801a38a:	4628      	mov	r0, r5
 801a38c:	f000 f886 	bl	801a49c <__smakebuf_r>
 801a390:	89a0      	ldrh	r0, [r4, #12]
 801a392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a396:	f010 0301 	ands.w	r3, r0, #1
 801a39a:	d00a      	beq.n	801a3b2 <__swsetup_r+0x9e>
 801a39c:	2300      	movs	r3, #0
 801a39e:	60a3      	str	r3, [r4, #8]
 801a3a0:	6963      	ldr	r3, [r4, #20]
 801a3a2:	425b      	negs	r3, r3
 801a3a4:	61a3      	str	r3, [r4, #24]
 801a3a6:	6923      	ldr	r3, [r4, #16]
 801a3a8:	b943      	cbnz	r3, 801a3bc <__swsetup_r+0xa8>
 801a3aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a3ae:	d1c4      	bne.n	801a33a <__swsetup_r+0x26>
 801a3b0:	bd38      	pop	{r3, r4, r5, pc}
 801a3b2:	0781      	lsls	r1, r0, #30
 801a3b4:	bf58      	it	pl
 801a3b6:	6963      	ldrpl	r3, [r4, #20]
 801a3b8:	60a3      	str	r3, [r4, #8]
 801a3ba:	e7f4      	b.n	801a3a6 <__swsetup_r+0x92>
 801a3bc:	2000      	movs	r0, #0
 801a3be:	e7f7      	b.n	801a3b0 <__swsetup_r+0x9c>
 801a3c0:	2000008c 	.word	0x2000008c

0801a3c4 <_sbrk_r>:
 801a3c4:	b538      	push	{r3, r4, r5, lr}
 801a3c6:	4d06      	ldr	r5, [pc, #24]	; (801a3e0 <_sbrk_r+0x1c>)
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	4604      	mov	r4, r0
 801a3cc:	4608      	mov	r0, r1
 801a3ce:	602b      	str	r3, [r5, #0]
 801a3d0:	f7e6 fd36 	bl	8000e40 <_sbrk>
 801a3d4:	1c43      	adds	r3, r0, #1
 801a3d6:	d102      	bne.n	801a3de <_sbrk_r+0x1a>
 801a3d8:	682b      	ldr	r3, [r5, #0]
 801a3da:	b103      	cbz	r3, 801a3de <_sbrk_r+0x1a>
 801a3dc:	6023      	str	r3, [r4, #0]
 801a3de:	bd38      	pop	{r3, r4, r5, pc}
 801a3e0:	20011194 	.word	0x20011194

0801a3e4 <abort>:
 801a3e4:	b508      	push	{r3, lr}
 801a3e6:	2006      	movs	r0, #6
 801a3e8:	f000 f8bc 	bl	801a564 <raise>
 801a3ec:	2001      	movs	r0, #1
 801a3ee:	f7e6 fcaf 	bl	8000d50 <_exit>

0801a3f2 <_realloc_r>:
 801a3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3f6:	4680      	mov	r8, r0
 801a3f8:	4614      	mov	r4, r2
 801a3fa:	460e      	mov	r6, r1
 801a3fc:	b921      	cbnz	r1, 801a408 <_realloc_r+0x16>
 801a3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a402:	4611      	mov	r1, r2
 801a404:	f7ff b9d0 	b.w	80197a8 <_malloc_r>
 801a408:	b92a      	cbnz	r2, 801a416 <_realloc_r+0x24>
 801a40a:	f7ff f959 	bl	80196c0 <_free_r>
 801a40e:	4625      	mov	r5, r4
 801a410:	4628      	mov	r0, r5
 801a412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a416:	f000 f8e3 	bl	801a5e0 <_malloc_usable_size_r>
 801a41a:	4284      	cmp	r4, r0
 801a41c:	4607      	mov	r7, r0
 801a41e:	d802      	bhi.n	801a426 <_realloc_r+0x34>
 801a420:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a424:	d812      	bhi.n	801a44c <_realloc_r+0x5a>
 801a426:	4621      	mov	r1, r4
 801a428:	4640      	mov	r0, r8
 801a42a:	f7ff f9bd 	bl	80197a8 <_malloc_r>
 801a42e:	4605      	mov	r5, r0
 801a430:	2800      	cmp	r0, #0
 801a432:	d0ed      	beq.n	801a410 <_realloc_r+0x1e>
 801a434:	42bc      	cmp	r4, r7
 801a436:	4622      	mov	r2, r4
 801a438:	4631      	mov	r1, r6
 801a43a:	bf28      	it	cs
 801a43c:	463a      	movcs	r2, r7
 801a43e:	f7ff f913 	bl	8019668 <memcpy>
 801a442:	4631      	mov	r1, r6
 801a444:	4640      	mov	r0, r8
 801a446:	f7ff f93b 	bl	80196c0 <_free_r>
 801a44a:	e7e1      	b.n	801a410 <_realloc_r+0x1e>
 801a44c:	4635      	mov	r5, r6
 801a44e:	e7df      	b.n	801a410 <_realloc_r+0x1e>

0801a450 <__swhatbuf_r>:
 801a450:	b570      	push	{r4, r5, r6, lr}
 801a452:	460c      	mov	r4, r1
 801a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a458:	2900      	cmp	r1, #0
 801a45a:	b096      	sub	sp, #88	; 0x58
 801a45c:	4615      	mov	r5, r2
 801a45e:	461e      	mov	r6, r3
 801a460:	da0d      	bge.n	801a47e <__swhatbuf_r+0x2e>
 801a462:	89a3      	ldrh	r3, [r4, #12]
 801a464:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a468:	f04f 0100 	mov.w	r1, #0
 801a46c:	bf0c      	ite	eq
 801a46e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a472:	2340      	movne	r3, #64	; 0x40
 801a474:	2000      	movs	r0, #0
 801a476:	6031      	str	r1, [r6, #0]
 801a478:	602b      	str	r3, [r5, #0]
 801a47a:	b016      	add	sp, #88	; 0x58
 801a47c:	bd70      	pop	{r4, r5, r6, pc}
 801a47e:	466a      	mov	r2, sp
 801a480:	f000 f878 	bl	801a574 <_fstat_r>
 801a484:	2800      	cmp	r0, #0
 801a486:	dbec      	blt.n	801a462 <__swhatbuf_r+0x12>
 801a488:	9901      	ldr	r1, [sp, #4]
 801a48a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a48e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a492:	4259      	negs	r1, r3
 801a494:	4159      	adcs	r1, r3
 801a496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a49a:	e7eb      	b.n	801a474 <__swhatbuf_r+0x24>

0801a49c <__smakebuf_r>:
 801a49c:	898b      	ldrh	r3, [r1, #12]
 801a49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a4a0:	079d      	lsls	r5, r3, #30
 801a4a2:	4606      	mov	r6, r0
 801a4a4:	460c      	mov	r4, r1
 801a4a6:	d507      	bpl.n	801a4b8 <__smakebuf_r+0x1c>
 801a4a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a4ac:	6023      	str	r3, [r4, #0]
 801a4ae:	6123      	str	r3, [r4, #16]
 801a4b0:	2301      	movs	r3, #1
 801a4b2:	6163      	str	r3, [r4, #20]
 801a4b4:	b002      	add	sp, #8
 801a4b6:	bd70      	pop	{r4, r5, r6, pc}
 801a4b8:	ab01      	add	r3, sp, #4
 801a4ba:	466a      	mov	r2, sp
 801a4bc:	f7ff ffc8 	bl	801a450 <__swhatbuf_r>
 801a4c0:	9900      	ldr	r1, [sp, #0]
 801a4c2:	4605      	mov	r5, r0
 801a4c4:	4630      	mov	r0, r6
 801a4c6:	f7ff f96f 	bl	80197a8 <_malloc_r>
 801a4ca:	b948      	cbnz	r0, 801a4e0 <__smakebuf_r+0x44>
 801a4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4d0:	059a      	lsls	r2, r3, #22
 801a4d2:	d4ef      	bmi.n	801a4b4 <__smakebuf_r+0x18>
 801a4d4:	f023 0303 	bic.w	r3, r3, #3
 801a4d8:	f043 0302 	orr.w	r3, r3, #2
 801a4dc:	81a3      	strh	r3, [r4, #12]
 801a4de:	e7e3      	b.n	801a4a8 <__smakebuf_r+0xc>
 801a4e0:	89a3      	ldrh	r3, [r4, #12]
 801a4e2:	6020      	str	r0, [r4, #0]
 801a4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a4e8:	81a3      	strh	r3, [r4, #12]
 801a4ea:	9b00      	ldr	r3, [sp, #0]
 801a4ec:	6163      	str	r3, [r4, #20]
 801a4ee:	9b01      	ldr	r3, [sp, #4]
 801a4f0:	6120      	str	r0, [r4, #16]
 801a4f2:	b15b      	cbz	r3, 801a50c <__smakebuf_r+0x70>
 801a4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4f8:	4630      	mov	r0, r6
 801a4fa:	f000 f84d 	bl	801a598 <_isatty_r>
 801a4fe:	b128      	cbz	r0, 801a50c <__smakebuf_r+0x70>
 801a500:	89a3      	ldrh	r3, [r4, #12]
 801a502:	f023 0303 	bic.w	r3, r3, #3
 801a506:	f043 0301 	orr.w	r3, r3, #1
 801a50a:	81a3      	strh	r3, [r4, #12]
 801a50c:	89a3      	ldrh	r3, [r4, #12]
 801a50e:	431d      	orrs	r5, r3
 801a510:	81a5      	strh	r5, [r4, #12]
 801a512:	e7cf      	b.n	801a4b4 <__smakebuf_r+0x18>

0801a514 <_raise_r>:
 801a514:	291f      	cmp	r1, #31
 801a516:	b538      	push	{r3, r4, r5, lr}
 801a518:	4604      	mov	r4, r0
 801a51a:	460d      	mov	r5, r1
 801a51c:	d904      	bls.n	801a528 <_raise_r+0x14>
 801a51e:	2316      	movs	r3, #22
 801a520:	6003      	str	r3, [r0, #0]
 801a522:	f04f 30ff 	mov.w	r0, #4294967295
 801a526:	bd38      	pop	{r3, r4, r5, pc}
 801a528:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a52a:	b112      	cbz	r2, 801a532 <_raise_r+0x1e>
 801a52c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a530:	b94b      	cbnz	r3, 801a546 <_raise_r+0x32>
 801a532:	4620      	mov	r0, r4
 801a534:	f000 f852 	bl	801a5dc <_getpid_r>
 801a538:	462a      	mov	r2, r5
 801a53a:	4601      	mov	r1, r0
 801a53c:	4620      	mov	r0, r4
 801a53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a542:	f000 b839 	b.w	801a5b8 <_kill_r>
 801a546:	2b01      	cmp	r3, #1
 801a548:	d00a      	beq.n	801a560 <_raise_r+0x4c>
 801a54a:	1c59      	adds	r1, r3, #1
 801a54c:	d103      	bne.n	801a556 <_raise_r+0x42>
 801a54e:	2316      	movs	r3, #22
 801a550:	6003      	str	r3, [r0, #0]
 801a552:	2001      	movs	r0, #1
 801a554:	e7e7      	b.n	801a526 <_raise_r+0x12>
 801a556:	2400      	movs	r4, #0
 801a558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a55c:	4628      	mov	r0, r5
 801a55e:	4798      	blx	r3
 801a560:	2000      	movs	r0, #0
 801a562:	e7e0      	b.n	801a526 <_raise_r+0x12>

0801a564 <raise>:
 801a564:	4b02      	ldr	r3, [pc, #8]	; (801a570 <raise+0xc>)
 801a566:	4601      	mov	r1, r0
 801a568:	6818      	ldr	r0, [r3, #0]
 801a56a:	f7ff bfd3 	b.w	801a514 <_raise_r>
 801a56e:	bf00      	nop
 801a570:	2000008c 	.word	0x2000008c

0801a574 <_fstat_r>:
 801a574:	b538      	push	{r3, r4, r5, lr}
 801a576:	4d07      	ldr	r5, [pc, #28]	; (801a594 <_fstat_r+0x20>)
 801a578:	2300      	movs	r3, #0
 801a57a:	4604      	mov	r4, r0
 801a57c:	4608      	mov	r0, r1
 801a57e:	4611      	mov	r1, r2
 801a580:	602b      	str	r3, [r5, #0]
 801a582:	f7e6 fc34 	bl	8000dee <_fstat>
 801a586:	1c43      	adds	r3, r0, #1
 801a588:	d102      	bne.n	801a590 <_fstat_r+0x1c>
 801a58a:	682b      	ldr	r3, [r5, #0]
 801a58c:	b103      	cbz	r3, 801a590 <_fstat_r+0x1c>
 801a58e:	6023      	str	r3, [r4, #0]
 801a590:	bd38      	pop	{r3, r4, r5, pc}
 801a592:	bf00      	nop
 801a594:	20011194 	.word	0x20011194

0801a598 <_isatty_r>:
 801a598:	b538      	push	{r3, r4, r5, lr}
 801a59a:	4d06      	ldr	r5, [pc, #24]	; (801a5b4 <_isatty_r+0x1c>)
 801a59c:	2300      	movs	r3, #0
 801a59e:	4604      	mov	r4, r0
 801a5a0:	4608      	mov	r0, r1
 801a5a2:	602b      	str	r3, [r5, #0]
 801a5a4:	f7e6 fc33 	bl	8000e0e <_isatty>
 801a5a8:	1c43      	adds	r3, r0, #1
 801a5aa:	d102      	bne.n	801a5b2 <_isatty_r+0x1a>
 801a5ac:	682b      	ldr	r3, [r5, #0]
 801a5ae:	b103      	cbz	r3, 801a5b2 <_isatty_r+0x1a>
 801a5b0:	6023      	str	r3, [r4, #0]
 801a5b2:	bd38      	pop	{r3, r4, r5, pc}
 801a5b4:	20011194 	.word	0x20011194

0801a5b8 <_kill_r>:
 801a5b8:	b538      	push	{r3, r4, r5, lr}
 801a5ba:	4d07      	ldr	r5, [pc, #28]	; (801a5d8 <_kill_r+0x20>)
 801a5bc:	2300      	movs	r3, #0
 801a5be:	4604      	mov	r4, r0
 801a5c0:	4608      	mov	r0, r1
 801a5c2:	4611      	mov	r1, r2
 801a5c4:	602b      	str	r3, [r5, #0]
 801a5c6:	f7e6 fbb1 	bl	8000d2c <_kill>
 801a5ca:	1c43      	adds	r3, r0, #1
 801a5cc:	d102      	bne.n	801a5d4 <_kill_r+0x1c>
 801a5ce:	682b      	ldr	r3, [r5, #0]
 801a5d0:	b103      	cbz	r3, 801a5d4 <_kill_r+0x1c>
 801a5d2:	6023      	str	r3, [r4, #0]
 801a5d4:	bd38      	pop	{r3, r4, r5, pc}
 801a5d6:	bf00      	nop
 801a5d8:	20011194 	.word	0x20011194

0801a5dc <_getpid_r>:
 801a5dc:	f7e6 bb9e 	b.w	8000d1c <_getpid>

0801a5e0 <_malloc_usable_size_r>:
 801a5e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5e4:	1f18      	subs	r0, r3, #4
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	bfbc      	itt	lt
 801a5ea:	580b      	ldrlt	r3, [r1, r0]
 801a5ec:	18c0      	addlt	r0, r0, r3
 801a5ee:	4770      	bx	lr

0801a5f0 <_init>:
 801a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5f2:	bf00      	nop
 801a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5f6:	bc08      	pop	{r3}
 801a5f8:	469e      	mov	lr, r3
 801a5fa:	4770      	bx	lr

0801a5fc <_fini>:
 801a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5fe:	bf00      	nop
 801a600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a602:	bc08      	pop	{r3}
 801a604:	469e      	mov	lr, r3
 801a606:	4770      	bx	lr
